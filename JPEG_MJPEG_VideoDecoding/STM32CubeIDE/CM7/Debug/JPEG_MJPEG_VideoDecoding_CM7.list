
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013658  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a0  080138f8  080138f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016b98  08016b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016ba0  08016ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016ba4  08016ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000118  20000000  08016ba8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001cb80  20000118  08016cc0  00018118  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  2001cc98  08016cc0  00018c98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018118  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029367  00000000  00000000  00018146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053c9  00000000  00000000  000414ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  00046878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000177f  00000000  00000000  00048730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004768e  00000000  00000000  00049eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ce32  00000000  00000000  0009153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c44d1  00000000  00000000  000be36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00282840  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008560  00000000  00000000  00282884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000d4  00000000  00000000  0028ade4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000118 	.word	0x20000118
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080138e0 	.word	0x080138e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000011c 	.word	0x2000011c
 80002dc:	080138e0 	.word	0x080138e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f832 	bl	8000400 <IS42S32800J_ClockEnable>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d128      	bne.n	80003f4 <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 f8e2 	bl	800056c <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f84a 	bl	8000448 <IS42S32800J_Precharge>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11c      	bne.n	80003f4 <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	461a      	mov	r2, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f897 	bl	80004f8 <IS42S32800J_RefreshMode>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d111      	bne.n	80003f4 <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f85c 	bl	8000490 <IS42S32800J_ModeRegConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10a      	bne.n	80003f4 <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	4619      	mov	r1, r3
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f8ad 	bl	8000544 <IS42S32800J_RefreshRate>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000410:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000418:	2201      	movs	r2, #1
 800041a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000426:	4907      	ldr	r1, [pc, #28]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f00d f883 	bl	800d534 <HAL_SDRAM_SendCommand>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d002      	beq.n	800043a <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	e000      	b.n	800043c <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800043a:	2300      	movs	r3, #0
  }
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000134 	.word	0x20000134

08000448 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <IS42S32800J_Precharge+0x44>)
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000460:	2201      	movs	r2, #1
 8000462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800046a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800046e:	4907      	ldr	r1, [pc, #28]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f00d f85f 	bl	800d534 <HAL_SDRAM_SendCommand>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	e000      	b.n	8000484 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000482:	2300      	movs	r3, #0
  }
}
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000134 	.word	0x20000134

08000490 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004a2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80004a8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80004ae:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004b4:	4313      	orrs	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80004cc:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80004d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d6:	4907      	ldr	r1, [pc, #28]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f00d f82b 	bl	800d534 <HAL_SDRAM_SendCommand>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	e000      	b.n	80004ec <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 80004ea:	2300      	movs	r3, #0
  }
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000134 	.word	0x20000134

080004f8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000504:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000512:	2208      	movs	r2, #8
 8000514:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800051c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000520:	4907      	ldr	r1, [pc, #28]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f00d f806 	bl	800d534 <HAL_SDRAM_SendCommand>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e000      	b.n	8000536 <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8000534:	2300      	movs	r3, #0
  }
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000134 	.word	0x20000134

08000544 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f00d f824 	bl	800d59e <HAL_SDRAM_ProgramRefreshRate>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e000      	b.n	8000564 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 8000562:	2300      	movs	r3, #0
  }
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000574:	f003 fbcc 	bl	8003d10 <HAL_GetTick>
 8000578:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800057a:	bf00      	nop
 800057c:	f003 fbc8 	bl	8003d10 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <NT35510_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t NT35510_RegisterBusIO (NT35510_Object_t *pObj, NT35510_IO_t *pIO)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  int32_t ret = NT35510_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d103      	bne.n	80005b4 <NT35510_RegisterBusIO+0x1c>
  {
    ret = NT35510_ERROR;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e014      	b.n	80005de <NT35510_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	68da      	ldr	r2, [r3, #12]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <NT35510_RegisterBusIO+0x54>)
 80005d0:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <NT35510_RegisterBusIO+0x58>)
 80005d6:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	08000e83 	.word	0x08000e83
 80005f0:	08000eb5 	.word	0x08000eb5

080005f4 <NT35510_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t NT35510_Init(NT35510_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  static const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
  static const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
  static const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
  static const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};

  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f103 0010 	add.w	r0, r3, #16
 8000606:	2305      	movs	r3, #5
 8000608:	4aa2      	ldr	r2, [pc, #648]	@ (8000894 <NT35510_Init+0x2a0>)
 800060a:	21f0      	movs	r1, #240	@ 0xf0
 800060c:	f000 fc9c 	bl	8000f48 <nt35510_write_reg>
 8000610:	6178      	str	r0, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f103 0010 	add.w	r0, r3, #16
 8000618:	2303      	movs	r3, #3
 800061a:	4a9f      	ldr	r2, [pc, #636]	@ (8000898 <NT35510_Init+0x2a4>)
 800061c:	21b0      	movs	r1, #176	@ 0xb0
 800061e:	f000 fc93 	bl	8000f48 <nt35510_write_reg>
 8000622:	4602      	mov	r2, r0
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	4413      	add	r3, r2
 8000628:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	f103 0010 	add.w	r0, r3, #16
 8000630:	2303      	movs	r3, #3
 8000632:	4a9a      	ldr	r2, [pc, #616]	@ (800089c <NT35510_Init+0x2a8>)
 8000634:	21b6      	movs	r1, #182	@ 0xb6
 8000636:	f000 fc87 	bl	8000f48 <nt35510_write_reg>
 800063a:	4602      	mov	r2, r0
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f103 0010 	add.w	r0, r3, #16
 8000648:	2303      	movs	r3, #3
 800064a:	4a95      	ldr	r2, [pc, #596]	@ (80008a0 <NT35510_Init+0x2ac>)
 800064c:	21b1      	movs	r1, #177	@ 0xb1
 800064e:	f000 fc7b 	bl	8000f48 <nt35510_write_reg>
 8000652:	4602      	mov	r2, r0
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f103 0010 	add.w	r0, r3, #16
 8000660:	2303      	movs	r3, #3
 8000662:	4a90      	ldr	r2, [pc, #576]	@ (80008a4 <NT35510_Init+0x2b0>)
 8000664:	21b7      	movs	r1, #183	@ 0xb7
 8000666:	f000 fc6f 	bl	8000f48 <nt35510_write_reg>
 800066a:	4602      	mov	r2, r0
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	4413      	add	r3, r2
 8000670:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f103 0010 	add.w	r0, r3, #16
 8000678:	2303      	movs	r3, #3
 800067a:	4a8b      	ldr	r2, [pc, #556]	@ (80008a8 <NT35510_Init+0x2b4>)
 800067c:	21b2      	movs	r1, #178	@ 0xb2
 800067e:	f000 fc63 	bl	8000f48 <nt35510_write_reg>
 8000682:	4602      	mov	r2, r0
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f103 0010 	add.w	r0, r3, #16
 8000690:	2303      	movs	r3, #3
 8000692:	4a86      	ldr	r2, [pc, #536]	@ (80008ac <NT35510_Init+0x2b8>)
 8000694:	21b8      	movs	r1, #184	@ 0xb8
 8000696:	f000 fc57 	bl	8000f48 <nt35510_write_reg>
 800069a:	4602      	mov	r2, r0
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	4413      	add	r3, r2
 80006a0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f103 0010 	add.w	r0, r3, #16
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a81      	ldr	r2, [pc, #516]	@ (80008b0 <NT35510_Init+0x2bc>)
 80006ac:	21bf      	movs	r1, #191	@ 0xbf
 80006ae:	f000 fc4b 	bl	8000f48 <nt35510_write_reg>
 80006b2:	4602      	mov	r2, r0
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	4413      	add	r3, r2
 80006b8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f103 0010 	add.w	r0, r3, #16
 80006c0:	2303      	movs	r3, #3
 80006c2:	4a7c      	ldr	r2, [pc, #496]	@ (80008b4 <NT35510_Init+0x2c0>)
 80006c4:	21b3      	movs	r1, #179	@ 0xb3
 80006c6:	f000 fc3f 	bl	8000f48 <nt35510_write_reg>
 80006ca:	4602      	mov	r2, r0
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	4413      	add	r3, r2
 80006d0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f103 0010 	add.w	r0, r3, #16
 80006d8:	2303      	movs	r3, #3
 80006da:	4a77      	ldr	r2, [pc, #476]	@ (80008b8 <NT35510_Init+0x2c4>)
 80006dc:	21b9      	movs	r1, #185	@ 0xb9
 80006de:	f000 fc33 	bl	8000f48 <nt35510_write_reg>
 80006e2:	4602      	mov	r2, r0
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4413      	add	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f103 0010 	add.w	r0, r3, #16
 80006f0:	2303      	movs	r3, #3
 80006f2:	4a72      	ldr	r2, [pc, #456]	@ (80008bc <NT35510_Init+0x2c8>)
 80006f4:	21b5      	movs	r1, #181	@ 0xb5
 80006f6:	f000 fc27 	bl	8000f48 <nt35510_write_reg>
 80006fa:	4602      	mov	r2, r0
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f103 0010 	add.w	r0, r3, #16
 8000708:	2303      	movs	r3, #3
 800070a:	4a6d      	ldr	r2, [pc, #436]	@ (80008c0 <NT35510_Init+0x2cc>)
 800070c:	21ba      	movs	r1, #186	@ 0xba
 800070e:	f000 fc1b 	bl	8000f48 <nt35510_write_reg>
 8000712:	4602      	mov	r2, r0
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f103 0010 	add.w	r0, r3, #16
 8000720:	2303      	movs	r3, #3
 8000722:	4a68      	ldr	r2, [pc, #416]	@ (80008c4 <NT35510_Init+0x2d0>)
 8000724:	21bc      	movs	r1, #188	@ 0xbc
 8000726:	f000 fc0f 	bl	8000f48 <nt35510_write_reg>
 800072a:	4602      	mov	r2, r0
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	4413      	add	r3, r2
 8000730:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f103 0010 	add.w	r0, r3, #16
 8000738:	2303      	movs	r3, #3
 800073a:	4a63      	ldr	r2, [pc, #396]	@ (80008c8 <NT35510_Init+0x2d4>)
 800073c:	21bd      	movs	r1, #189	@ 0xbd
 800073e:	f000 fc03 	bl	8000f48 <nt35510_write_reg>
 8000742:	4602      	mov	r2, r0
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	4413      	add	r3, r2
 8000748:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f103 0010 	add.w	r0, r3, #16
 8000750:	2302      	movs	r3, #2
 8000752:	4a5e      	ldr	r2, [pc, #376]	@ (80008cc <NT35510_Init+0x2d8>)
 8000754:	21be      	movs	r1, #190	@ 0xbe
 8000756:	f000 fbf7 	bl	8000f48 <nt35510_write_reg>
 800075a:	4602      	mov	r2, r0
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	617b      	str	r3, [r7, #20]

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */

  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f103 0010 	add.w	r0, r3, #16
 8000768:	2305      	movs	r3, #5
 800076a:	4a59      	ldr	r2, [pc, #356]	@ (80008d0 <NT35510_Init+0x2dc>)
 800076c:	21f0      	movs	r1, #240	@ 0xf0
 800076e:	f000 fbeb 	bl	8000f48 <nt35510_write_reg>
 8000772:	4602      	mov	r2, r0
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	4413      	add	r3, r2
 8000778:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f103 0010 	add.w	r0, r3, #16
 8000780:	2302      	movs	r3, #2
 8000782:	4a54      	ldr	r2, [pc, #336]	@ (80008d4 <NT35510_Init+0x2e0>)
 8000784:	21b1      	movs	r1, #177	@ 0xb1
 8000786:	f000 fbdf 	bl	8000f48 <nt35510_write_reg>
 800078a:	4602      	mov	r2, r0
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f103 0010 	add.w	r0, r3, #16
 8000798:	2301      	movs	r3, #1
 800079a:	4a4f      	ldr	r2, [pc, #316]	@ (80008d8 <NT35510_Init+0x2e4>)
 800079c:	21b6      	movs	r1, #182	@ 0xb6
 800079e:	f000 fbd3 	bl	8000f48 <nt35510_write_reg>
 80007a2:	4602      	mov	r2, r0
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f103 0010 	add.w	r0, r3, #16
 80007b0:	2301      	movs	r3, #1
 80007b2:	4a4a      	ldr	r2, [pc, #296]	@ (80008dc <NT35510_Init+0x2e8>)
 80007b4:	21b5      	movs	r1, #181	@ 0xb5
 80007b6:	f000 fbc7 	bl	8000f48 <nt35510_write_reg>
 80007ba:	4602      	mov	r2, r0
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	4413      	add	r3, r2
 80007c0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f103 0010 	add.w	r0, r3, #16
 80007c8:	2302      	movs	r3, #2
 80007ca:	4a45      	ldr	r2, [pc, #276]	@ (80008e0 <NT35510_Init+0x2ec>)
 80007cc:	21b7      	movs	r1, #183	@ 0xb7
 80007ce:	f000 fbbb 	bl	8000f48 <nt35510_write_reg>
 80007d2:	4602      	mov	r2, r0
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	4413      	add	r3, r2
 80007d8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f103 0010 	add.w	r0, r3, #16
 80007e0:	2304      	movs	r3, #4
 80007e2:	4a40      	ldr	r2, [pc, #256]	@ (80008e4 <NT35510_Init+0x2f0>)
 80007e4:	21b8      	movs	r1, #184	@ 0xb8
 80007e6:	f000 fbaf 	bl	8000f48 <nt35510_write_reg>
 80007ea:	4602      	mov	r2, r0
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	4413      	add	r3, r2
 80007f0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f103 0010 	add.w	r0, r3, #16
 80007f8:	2303      	movs	r3, #3
 80007fa:	4a3b      	ldr	r2, [pc, #236]	@ (80008e8 <NT35510_Init+0x2f4>)
 80007fc:	21bc      	movs	r1, #188	@ 0xbc
 80007fe:	f000 fba3 	bl	8000f48 <nt35510_write_reg>
 8000802:	4602      	mov	r2, r0
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	4413      	add	r3, r2
 8000808:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f103 0010 	add.w	r0, r3, #16
 8000810:	2303      	movs	r3, #3
 8000812:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <NT35510_Init+0x2f8>)
 8000814:	21cc      	movs	r1, #204	@ 0xcc
 8000816:	f000 fb97 	bl	8000f48 <nt35510_write_reg>
 800081a:	4602      	mov	r2, r0
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f103 0010 	add.w	r0, r3, #16
 8000828:	2301      	movs	r3, #1
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <NT35510_Init+0x2fc>)
 800082c:	21ba      	movs	r1, #186	@ 0xba
 800082e:	f000 fb8b 	bl	8000f48 <nt35510_write_reg>
 8000832:	4602      	mov	r2, r0
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	4413      	add	r3, r2
 8000838:	617b      	str	r3, [r7, #20]

  /* Add a delay, otherwise MADCTL not taken */
  (void)NT35510_IO_Delay(pObj, 200);
 800083a:	21c8      	movs	r1, #200	@ 0xc8
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f000 fb52 	bl	8000ee6 <NT35510_IO_Delay>

  /* Configure orientation */
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d15b      	bne.n	8000900 <NT35510_Init+0x30c>
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f103 0010 	add.w	r0, r3, #16
 800084e:	2300      	movs	r3, #0
 8000850:	4a28      	ldr	r2, [pc, #160]	@ (80008f4 <NT35510_Init+0x300>)
 8000852:	2136      	movs	r1, #54	@ 0x36
 8000854:	f000 fb78 	bl	8000f48 <nt35510_write_reg>
 8000858:	4602      	mov	r2, r0
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f103 0010 	add.w	r0, r3, #16
 8000866:	2304      	movs	r3, #4
 8000868:	4a23      	ldr	r2, [pc, #140]	@ (80008f8 <NT35510_Init+0x304>)
 800086a:	212a      	movs	r1, #42	@ 0x2a
 800086c:	f000 fb6c 	bl	8000f48 <nt35510_write_reg>
 8000870:	4602      	mov	r2, r0
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4413      	add	r3, r2
 8000876:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f103 0010 	add.w	r0, r3, #16
 800087e:	2304      	movs	r3, #4
 8000880:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <NT35510_Init+0x308>)
 8000882:	212b      	movs	r1, #43	@ 0x2b
 8000884:	f000 fb60 	bl	8000f48 <nt35510_write_reg>
 8000888:	4602      	mov	r2, r0
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e05a      	b.n	8000948 <NT35510_Init+0x354>
 8000892:	bf00      	nop
 8000894:	08013bd4 	.word	0x08013bd4
 8000898:	08013bdc 	.word	0x08013bdc
 800089c:	08013be0 	.word	0x08013be0
 80008a0:	08013be4 	.word	0x08013be4
 80008a4:	08013be8 	.word	0x08013be8
 80008a8:	08013bec 	.word	0x08013bec
 80008ac:	08013bf0 	.word	0x08013bf0
 80008b0:	08013bf4 	.word	0x08013bf4
 80008b4:	08013bf8 	.word	0x08013bf8
 80008b8:	08013bfc 	.word	0x08013bfc
 80008bc:	08013c00 	.word	0x08013c00
 80008c0:	08013c04 	.word	0x08013c04
 80008c4:	08013c08 	.word	0x08013c08
 80008c8:	08013c0c 	.word	0x08013c0c
 80008cc:	08013c10 	.word	0x08013c10
 80008d0:	08013c14 	.word	0x08013c14
 80008d4:	08013c1c 	.word	0x08013c1c
 80008d8:	08013c20 	.word	0x08013c20
 80008dc:	08013c24 	.word	0x08013c24
 80008e0:	08013c28 	.word	0x08013c28
 80008e4:	08013c2c 	.word	0x08013c2c
 80008e8:	08013c30 	.word	0x08013c30
 80008ec:	08013c34 	.word	0x08013c34
 80008f0:	08013c38 	.word	0x08013c38
 80008f4:	08013bad 	.word	0x08013bad
 80008f8:	08013bb0 	.word	0x08013bb0
 80008fc:	08013bb8 	.word	0x08013bb8
  }
  else
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f103 0010 	add.w	r0, r3, #16
 8000906:	2300      	movs	r3, #0
 8000908:	4a5c      	ldr	r2, [pc, #368]	@ (8000a7c <NT35510_Init+0x488>)
 800090a:	2136      	movs	r1, #54	@ 0x36
 800090c:	f000 fb1c 	bl	8000f48 <nt35510_write_reg>
 8000910:	4602      	mov	r2, r0
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	4413      	add	r3, r2
 8000916:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f103 0010 	add.w	r0, r3, #16
 800091e:	2304      	movs	r3, #4
 8000920:	4a57      	ldr	r2, [pc, #348]	@ (8000a80 <NT35510_Init+0x48c>)
 8000922:	212a      	movs	r1, #42	@ 0x2a
 8000924:	f000 fb10 	bl	8000f48 <nt35510_write_reg>
 8000928:	4602      	mov	r2, r0
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	4413      	add	r3, r2
 800092e:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f103 0010 	add.w	r0, r3, #16
 8000936:	2304      	movs	r3, #4
 8000938:	4a52      	ldr	r2, [pc, #328]	@ (8000a84 <NT35510_Init+0x490>)
 800093a:	212b      	movs	r1, #43	@ 0x2b
 800093c:	f000 fb04 	bl	8000f48 <nt35510_write_reg>
 8000940:	4602      	mov	r2, r0
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	4413      	add	r3, r2
 8000946:	617b      	str	r3, [r7, #20]
  }

  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f103 0010 	add.w	r0, r3, #16
 800094e:	2300      	movs	r3, #0
 8000950:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <NT35510_Init+0x494>)
 8000952:	2111      	movs	r1, #17
 8000954:	f000 faf8 	bl	8000f48 <nt35510_write_reg>
 8000958:	4602      	mov	r2, r0
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	617b      	str	r3, [r7, #20]

  /* Wait for sleep out exit */
  (void)NT35510_IO_Delay(pObj, 20);
 8000960:	2114      	movs	r1, #20
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f000 fabf 	bl	8000ee6 <NT35510_IO_Delay>

  switch(ColorCoding)
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d012      	beq.n	8000994 <NT35510_Init+0x3a0>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d11f      	bne.n	80009b4 <NT35510_Init+0x3c0>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f103 0010 	add.w	r0, r3, #16
 800097a:	2300      	movs	r3, #0
 800097c:	4a43      	ldr	r2, [pc, #268]	@ (8000a8c <NT35510_Init+0x498>)
 800097e:	213a      	movs	r1, #58	@ 0x3a
 8000980:	f000 fae2 	bl	8000f48 <nt35510_write_reg>
 8000984:	4602      	mov	r2, r0
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4413      	add	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 800098c:	4b40      	ldr	r3, [pc, #256]	@ (8000a90 <NT35510_Init+0x49c>)
 800098e:	2202      	movs	r2, #2
 8000990:	605a      	str	r2, [r3, #4]
      break;
 8000992:	e01f      	b.n	80009d4 <NT35510_Init+0x3e0>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f103 0010 	add.w	r0, r3, #16
 800099a:	2300      	movs	r3, #0
 800099c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a94 <NT35510_Init+0x4a0>)
 800099e:	213a      	movs	r1, #58	@ 0x3a
 80009a0:	f000 fad2 	bl	8000f48 <nt35510_write_reg>
 80009a4:	4602      	mov	r2, r0
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	4413      	add	r3, r2
 80009aa:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 80009ac:	4b38      	ldr	r3, [pc, #224]	@ (8000a90 <NT35510_Init+0x49c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
      break;
 80009b2:	e00f      	b.n	80009d4 <NT35510_Init+0x3e0>
    default :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f103 0010 	add.w	r0, r3, #16
 80009ba:	2300      	movs	r3, #0
 80009bc:	4a35      	ldr	r2, [pc, #212]	@ (8000a94 <NT35510_Init+0x4a0>)
 80009be:	213a      	movs	r1, #58	@ 0x3a
 80009c0:	f000 fac2 	bl	8000f48 <nt35510_write_reg>
 80009c4:	4602      	mov	r2, r0
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	4413      	add	r3, r2
 80009ca:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 80009cc:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <NT35510_Init+0x49c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
      break;
 80009d2:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f103 0010 	add.w	r0, r3, #16
 80009da:	2300      	movs	r3, #0
 80009dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a98 <NT35510_Init+0x4a4>)
 80009de:	2151      	movs	r1, #81	@ 0x51
 80009e0:	f000 fab2 	bl	8000f48 <nt35510_write_reg>
 80009e4:	4602      	mov	r2, r0
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	4413      	add	r3, r2
 80009ea:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f103 0010 	add.w	r0, r3, #16
 80009f2:	2300      	movs	r3, #0
 80009f4:	4a29      	ldr	r2, [pc, #164]	@ (8000a9c <NT35510_Init+0x4a8>)
 80009f6:	2153      	movs	r1, #83	@ 0x53
 80009f8:	f000 faa6 	bl	8000f48 <nt35510_write_reg>
 80009fc:	4602      	mov	r2, r0
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f103 0010 	add.w	r0, r3, #16
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4a24      	ldr	r2, [pc, #144]	@ (8000aa0 <NT35510_Init+0x4ac>)
 8000a0e:	2155      	movs	r1, #85	@ 0x55
 8000a10:	f000 fa9a 	bl	8000f48 <nt35510_write_reg>
 8000a14:	4602      	mov	r2, r0
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	4413      	add	r3, r2
 8000a1a:	617b      	str	r3, [r7, #20]

  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f103 0010 	add.w	r0, r3, #16
 8000a22:	2300      	movs	r3, #0
 8000a24:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa4 <NT35510_Init+0x4b0>)
 8000a26:	215e      	movs	r1, #94	@ 0x5e
 8000a28:	f000 fa8e 	bl	8000f48 <nt35510_write_reg>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4413      	add	r3, r2
 8000a32:	617b      	str	r3, [r7, #20]

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f103 0010 	add.w	r0, r3, #16
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa8 <NT35510_Init+0x4b4>)
 8000a3e:	2129      	movs	r1, #41	@ 0x29
 8000a40:	f000 fa82 	bl	8000f48 <nt35510_write_reg>
 8000a44:	4602      	mov	r2, r0
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f103 0010 	add.w	r0, r3, #16
 8000a52:	2300      	movs	r3, #0
 8000a54:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <NT35510_Init+0x4b8>)
 8000a56:	212c      	movs	r1, #44	@ 0x2c
 8000a58:	f000 fa76 	bl	8000f48 <nt35510_write_reg>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4413      	add	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]

  if(ret != NT35510_OK)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <NT35510_Init+0x47c>
  {
    ret = NT35510_ERROR;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000a70:	697b      	ldr	r3, [r7, #20]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08013bc1 	.word	0x08013bc1
 8000a80:	08013bc4 	.word	0x08013bc4
 8000a84:	08013bcc 	.word	0x08013bcc
 8000a88:	08013c3d 	.word	0x08013c3d
 8000a8c:	08013c41 	.word	0x08013c41
 8000a90:	20000144 	.word	0x20000144
 8000a94:	08013c45 	.word	0x08013c45
 8000a98:	08013c49 	.word	0x08013c49
 8000a9c:	08013c4d 	.word	0x08013c4d
 8000aa0:	08013c51 	.word	0x08013c51
 8000aa4:	08013c55 	.word	0x08013c55
 8000aa8:	08013c59 	.word	0x08013c59
 8000aac:	08013c5d 	.word	0x08013c5d

08000ab0 <NT35510_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return NT35510_ERROR;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <NT35510_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t NT35510_ReadID(NT35510_Object_t *pObj, uint32_t *Id)
{ 
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f103 0010 	add.w	r0, r3, #16
 8000ad8:	2301      	movs	r3, #1
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	21db      	movs	r1, #219	@ 0xdb
 8000ade:	f000 fa1c 	bl	8000f1a <nt35510_read_reg>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <NT35510_ReadID+0x28>
  {
    ret = NT35510_ERROR;
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e001      	b.n	8000af4 <NT35510_ReadID+0x2c>
  }
  else
  {
    ret = NT35510_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  }

  return ret;  
 8000af4:	68fb      	ldr	r3, [r7, #12]
}  
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <NT35510_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t NT35510_SetBrightness(NT35510_Object_t *pObj, uint32_t Brightness)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <NT35510_SetBrightness+0x54>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	095b      	lsrs	r3, r3, #5
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f103 0010 	add.w	r0, r3, #16
 8000b24:	f107 020b 	add.w	r2, r7, #11
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2151      	movs	r1, #81	@ 0x51
 8000b2c:	f000 fa0c 	bl	8000f48 <nt35510_write_reg>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <NT35510_SetBrightness+0x3e>
  {
    ret = NT35510_ERROR;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e004      	b.n	8000b48 <NT35510_SetBrightness+0x48>
  }
  else
  {
    NT35510Ctx.Brightness = Brightness;
 8000b3e:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <NT35510_SetBrightness+0x58>)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	6093      	str	r3, [r2, #8]
    ret = NT35510_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8000b48:	68fb      	ldr	r3, [r7, #12]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	51eb851f 	.word	0x51eb851f
 8000b58:	20000144 	.word	0x20000144

08000b5c <NT35510_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  *Brightness = NT35510Ctx.Brightness;
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <NT35510_GetBrightness+0x20>)
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	601a      	str	r2, [r3, #0]
  return NT35510_OK;  
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20000144 	.word	0x20000144

08000b80 <NT35510_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOn(NT35510_Object_t *pObj)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 0010 	add.w	r0, r3, #16
 8000b92:	f107 020b 	add.w	r2, r7, #11
 8000b96:	2300      	movs	r3, #0
 8000b98:	2129      	movs	r1, #41	@ 0x29
 8000b9a:	f000 f9d5 	bl	8000f48 <nt35510_write_reg>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <NT35510_DisplayOn+0x2c>
  {
    ret = NT35510_ERROR;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	e001      	b.n	8000bb0 <NT35510_DisplayOn+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <NT35510_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOff(NT35510_Object_t *pObj)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f103 0010 	add.w	r0, r3, #16
 8000bcc:	f107 020b 	add.w	r2, r7, #11
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2128      	movs	r1, #40	@ 0x28
 8000bd4:	f000 f9b8 	bl	8000f48 <nt35510_write_reg>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <NT35510_DisplayOff+0x2c>
  {
    ret = NT35510_ERROR;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e001      	b.n	8000bea <NT35510_DisplayOff+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <NT35510_SetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be set
  * @retval Component status
  */
int32_t NT35510_SetOrientation(NT35510_Object_t *pObj, uint32_t Orientation)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8000bfe:	2360      	movs	r3, #96	@ 0x60
 8000c00:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d006      	beq.n	8000c1a <NT35510_SetOrientation+0x26>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <NT35510_SetOrientation+0x26>
  {
    ret = NT35510_ERROR;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e04d      	b.n	8000cb6 <NT35510_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d125      	bne.n	8000c6c <NT35510_SetOrientation+0x78>
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f103 0010 	add.w	r0, r3, #16
 8000c26:	f107 020b 	add.w	r2, r7, #11
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	210b      	movs	r1, #11
 8000c2e:	f000 f98b 	bl	8000f48 <nt35510_write_reg>
 8000c32:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f103 0010 	add.w	r0, r3, #16
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <NT35510_SetOrientation+0xd8>)
 8000c3e:	212a      	movs	r1, #42	@ 0x2a
 8000c40:	f000 f982 	bl	8000f48 <nt35510_write_reg>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f103 0010 	add.w	r0, r3, #16
 8000c52:	2304      	movs	r3, #4
 8000c54:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <NT35510_SetOrientation+0xdc>)
 8000c56:	212b      	movs	r1, #43	@ 0x2b
 8000c58:	f000 f976 	bl	8000f48 <nt35510_write_reg>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <NT35510_SetOrientation+0xe0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e024      	b.n	8000cb6 <NT35510_SetOrientation+0xc2>
  }
  else
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 0010 	add.w	r0, r3, #16
 8000c72:	f107 020a 	add.w	r2, r7, #10
 8000c76:	2300      	movs	r3, #0
 8000c78:	2136      	movs	r1, #54	@ 0x36
 8000c7a:	f000 f965 	bl	8000f48 <nt35510_write_reg>
 8000c7e:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f103 0010 	add.w	r0, r3, #16
 8000c86:	2304      	movs	r3, #4
 8000c88:	4a13      	ldr	r2, [pc, #76]	@ (8000cd8 <NT35510_SetOrientation+0xe4>)
 8000c8a:	212a      	movs	r1, #42	@ 0x2a
 8000c8c:	f000 f95c 	bl	8000f48 <nt35510_write_reg>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f103 0010 	add.w	r0, r3, #16
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <NT35510_SetOrientation+0xe8>)
 8000ca2:	212b      	movs	r1, #43	@ 0x2b
 8000ca4:	f000 f950 	bl	8000f48 <nt35510_write_reg>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <NT35510_SetOrientation+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != NT35510_OK)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <NT35510_SetOrientation+0xce>
  {
    ret = NT35510_ERROR;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08013bc4 	.word	0x08013bc4
 8000cd0:	08013bcc 	.word	0x08013bcc
 8000cd4:	20000144 	.word	0x20000144
 8000cd8:	08013bb0 	.word	0x08013bb0
 8000cdc:	08013bb8 	.word	0x08013bb8

08000ce0 <NT35510_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <NT35510_GetOrientation+0x20>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	601a      	str	r2, [r3, #0]
  
  return NT35510_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000144 	.word	0x20000144

08000d04 <NT35510_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <NT35510_GetXSize+0x44>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <NT35510_GetXSize+0x18>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d005      	beq.n	8000d26 <NT35510_GetXSize+0x22>
 8000d1a:	e009      	b.n	8000d30 <NT35510_GetXSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Xsize = NT35510_480X800_WIDTH;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000d22:	601a      	str	r2, [r3, #0]
    break;
 8000d24:	e009      	b.n	8000d3a <NT35510_GetXSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Xsize = NT35510_800X480_WIDTH;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000d2c:	601a      	str	r2, [r3, #0]
    break;
 8000d2e:	e004      	b.n	8000d3a <NT35510_GetXSize+0x36>
  default:
    *Xsize = NT35510_800X480_WIDTH;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000d36:	601a      	str	r2, [r3, #0]
    break;
 8000d38:	bf00      	nop
  }
  
  return NT35510_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000144 	.word	0x20000144

08000d4c <NT35510_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <NT35510_GetYSize+0x44>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <NT35510_GetYSize+0x18>
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d005      	beq.n	8000d6e <NT35510_GetYSize+0x22>
 8000d62:	e009      	b.n	8000d78 <NT35510_GetYSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Ysize = NT35510_480X800_HEIGHT;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000d6a:	601a      	str	r2, [r3, #0]
    break;
 8000d6c:	e009      	b.n	8000d82 <NT35510_GetYSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Ysize = NT35510_800X480_HEIGHT;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000d74:	601a      	str	r2, [r3, #0]
    break;
 8000d76:	e004      	b.n	8000d82 <NT35510_GetYSize+0x36>
  default:
    *Ysize = NT35510_800X480_HEIGHT;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000d7e:	601a      	str	r2, [r3, #0]
    break;
 8000d80:	bf00      	nop
  }
  
  return NT35510_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000144 	.word	0x20000144

08000d94 <NT35510_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t NT35510_SetCursor(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <NT35510_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t NT35510_DrawBitmap(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <NT35510_FillRGBRect>:

int32_t NT35510_FillRGBRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <NT35510_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawHLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <NT35510_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <NT35510_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_FillRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <NT35510_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <NT35510_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_SetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8000e82:	b590      	push	{r4, r7, lr}
 8000e84:	b087      	sub	sp, #28
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	460b      	mov	r3, r1
 8000e90:	817b      	strh	r3, [r7, #10]
 8000e92:	4613      	mov	r3, r2
 8000e94:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	689c      	ldr	r4, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	8818      	ldrh	r0, [r3, #0]
 8000ea2:	893b      	ldrh	r3, [r7, #8]
 8000ea4:	8979      	ldrh	r1, [r7, #10]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	47a0      	blx	r4
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}

08000eb4 <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	685c      	ldr	r4, [r3, #4]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	8818      	ldrh	r0, [r3, #0]
 8000ed4:	893b      	ldrh	r3, [r7, #8]
 8000ed6:	8979      	ldrh	r1, [r7, #10]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	47a0      	blx	r4
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}

08000ee6 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4798      	blx	r3
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8000efa:	bf00      	nop
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4798      	blx	r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f5      	bhi.n	8000efc <NT35510_IO_Delay+0x16>
  {
  }
  return NT35510_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8000f1a:	b590      	push	{r4, r7, lr}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	461a      	mov	r2, r3
 8000f26:	460b      	mov	r3, r1
 8000f28:	817b      	strh	r3, [r7, #10]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685c      	ldr	r4, [r3, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6898      	ldr	r0, [r3, #8]
 8000f36:	893b      	ldrh	r3, [r7, #8]
 8000f38:	8979      	ldrh	r1, [r7, #10]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	47a0      	blx	r4
 8000f3e:	4603      	mov	r3, r0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	461a      	mov	r2, r3
 8000f54:	460b      	mov	r3, r1
 8000f56:	817b      	strh	r3, [r7, #10]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681c      	ldr	r4, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6898      	ldr	r0, [r3, #8]
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	8979      	ldrh	r1, [r7, #10]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	47a0      	blx	r4
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
	...

08000f78 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e014      	b.n	8000fbe <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <OTM8009A_RegisterBusIO+0x54>)
 8000fb0:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <OTM8009A_RegisterBusIO+0x58>)
 8000fb6:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08001f33 	.word	0x08001f33
 8000fd0:	08001f65 	.word	0x08001f65

08000fd4 <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f103 0010 	add.w	r0, r3, #16
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4abf      	ldr	r2, [pc, #764]	@ (80012e8 <OTM8009A_Init+0x314>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	f001 f804 	bl	8001ff8 <otm8009a_write_reg>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f103 0010 	add.w	r0, r3, #16
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4abc      	ldr	r2, [pc, #752]	@ (80012ec <OTM8009A_Init+0x318>)
 8000ffc:	21ff      	movs	r1, #255	@ 0xff
 8000ffe:	f000 fffb 	bl	8001ff8 <otm8009a_write_reg>
 8001002:	4602      	mov	r2, r0
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4413      	add	r3, r2
 8001008:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f103 0010 	add.w	r0, r3, #16
 8001010:	2300      	movs	r3, #0
 8001012:	4ab7      	ldr	r2, [pc, #732]	@ (80012f0 <OTM8009A_Init+0x31c>)
 8001014:	2100      	movs	r1, #0
 8001016:	f000 ffef 	bl	8001ff8 <otm8009a_write_reg>
 800101a:	4602      	mov	r2, r0
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4413      	add	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f103 0010 	add.w	r0, r3, #16
 8001028:	2302      	movs	r3, #2
 800102a:	4ab2      	ldr	r2, [pc, #712]	@ (80012f4 <OTM8009A_Init+0x320>)
 800102c:	21ff      	movs	r1, #255	@ 0xff
 800102e:	f000 ffe3 	bl	8001ff8 <otm8009a_write_reg>
 8001032:	4602      	mov	r2, r0
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f103 0010 	add.w	r0, r3, #16
 8001040:	2300      	movs	r3, #0
 8001042:	4aab      	ldr	r2, [pc, #684]	@ (80012f0 <OTM8009A_Init+0x31c>)
 8001044:	2100      	movs	r1, #0
 8001046:	f000 ffd7 	bl	8001ff8 <otm8009a_write_reg>
 800104a:	4602      	mov	r2, r0
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f103 0010 	add.w	r0, r3, #16
 8001058:	2300      	movs	r3, #0
 800105a:	4aa7      	ldr	r2, [pc, #668]	@ (80012f8 <OTM8009A_Init+0x324>)
 800105c:	21c4      	movs	r1, #196	@ 0xc4
 800105e:	f000 ffcb 	bl	8001ff8 <otm8009a_write_reg>
 8001062:	4602      	mov	r2, r0
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 800106a:	210a      	movs	r1, #10
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 ff92 	bl	8001f96 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f103 0010 	add.w	r0, r3, #16
 8001078:	2300      	movs	r3, #0
 800107a:	4aa0      	ldr	r2, [pc, #640]	@ (80012fc <OTM8009A_Init+0x328>)
 800107c:	2100      	movs	r1, #0
 800107e:	f000 ffbb 	bl	8001ff8 <otm8009a_write_reg>
 8001082:	4602      	mov	r2, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f103 0010 	add.w	r0, r3, #16
 8001090:	2300      	movs	r3, #0
 8001092:	4a9b      	ldr	r2, [pc, #620]	@ (8001300 <OTM8009A_Init+0x32c>)
 8001094:	21c4      	movs	r1, #196	@ 0xc4
 8001096:	f000 ffaf 	bl	8001ff8 <otm8009a_write_reg>
 800109a:	4602      	mov	r2, r0
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4413      	add	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 80010a2:	210a      	movs	r1, #10
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 ff76 	bl	8001f96 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f103 0010 	add.w	r0, r3, #16
 80010b0:	2300      	movs	r3, #0
 80010b2:	4a94      	ldr	r2, [pc, #592]	@ (8001304 <OTM8009A_Init+0x330>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	f000 ff9f 	bl	8001ff8 <otm8009a_write_reg>
 80010ba:	4602      	mov	r2, r0
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4413      	add	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f103 0010 	add.w	r0, r3, #16
 80010c8:	2300      	movs	r3, #0
 80010ca:	4a8f      	ldr	r2, [pc, #572]	@ (8001308 <OTM8009A_Init+0x334>)
 80010cc:	21c5      	movs	r1, #197	@ 0xc5
 80010ce:	f000 ff93 	bl	8001ff8 <otm8009a_write_reg>
 80010d2:	4602      	mov	r2, r0
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4413      	add	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f103 0010 	add.w	r0, r3, #16
 80010e0:	2300      	movs	r3, #0
 80010e2:	4a8a      	ldr	r2, [pc, #552]	@ (800130c <OTM8009A_Init+0x338>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	f000 ff87 	bl	8001ff8 <otm8009a_write_reg>
 80010ea:	4602      	mov	r2, r0
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f103 0010 	add.w	r0, r3, #16
 80010f8:	2300      	movs	r3, #0
 80010fa:	4a85      	ldr	r2, [pc, #532]	@ (8001310 <OTM8009A_Init+0x33c>)
 80010fc:	21c5      	movs	r1, #197	@ 0xc5
 80010fe:	f000 ff7b 	bl	8001ff8 <otm8009a_write_reg>
 8001102:	4602      	mov	r2, r0
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	4413      	add	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f103 0010 	add.w	r0, r3, #16
 8001110:	2300      	movs	r3, #0
 8001112:	4a80      	ldr	r2, [pc, #512]	@ (8001314 <OTM8009A_Init+0x340>)
 8001114:	2100      	movs	r1, #0
 8001116:	f000 ff6f 	bl	8001ff8 <otm8009a_write_reg>
 800111a:	4602      	mov	r2, r0
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f103 0010 	add.w	r0, r3, #16
 8001128:	2300      	movs	r3, #0
 800112a:	4a7b      	ldr	r2, [pc, #492]	@ (8001318 <OTM8009A_Init+0x344>)
 800112c:	21c0      	movs	r1, #192	@ 0xc0
 800112e:	f000 ff63 	bl	8001ff8 <otm8009a_write_reg>
 8001132:	4602      	mov	r2, r0
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	4413      	add	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f103 0010 	add.w	r0, r3, #16
 8001140:	2300      	movs	r3, #0
 8001142:	4a69      	ldr	r2, [pc, #420]	@ (80012e8 <OTM8009A_Init+0x314>)
 8001144:	2100      	movs	r1, #0
 8001146:	f000 ff57 	bl	8001ff8 <otm8009a_write_reg>
 800114a:	4602      	mov	r2, r0
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	4413      	add	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f103 0010 	add.w	r0, r3, #16
 8001158:	2300      	movs	r3, #0
 800115a:	4a70      	ldr	r2, [pc, #448]	@ (800131c <OTM8009A_Init+0x348>)
 800115c:	21d9      	movs	r1, #217	@ 0xd9
 800115e:	f000 ff4b 	bl	8001ff8 <otm8009a_write_reg>
 8001162:	4602      	mov	r2, r0
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f103 0010 	add.w	r0, r3, #16
 8001170:	2300      	movs	r3, #0
 8001172:	4a6b      	ldr	r2, [pc, #428]	@ (8001320 <OTM8009A_Init+0x34c>)
 8001174:	2100      	movs	r1, #0
 8001176:	f000 ff3f 	bl	8001ff8 <otm8009a_write_reg>
 800117a:	4602      	mov	r2, r0
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f103 0010 	add.w	r0, r3, #16
 8001188:	2300      	movs	r3, #0
 800118a:	4a66      	ldr	r2, [pc, #408]	@ (8001324 <OTM8009A_Init+0x350>)
 800118c:	21c1      	movs	r1, #193	@ 0xc1
 800118e:	f000 ff33 	bl	8001ff8 <otm8009a_write_reg>
 8001192:	4602      	mov	r2, r0
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 0010 	add.w	r0, r3, #16
 80011a0:	2300      	movs	r3, #0
 80011a2:	4a61      	ldr	r2, [pc, #388]	@ (8001328 <OTM8009A_Init+0x354>)
 80011a4:	2100      	movs	r1, #0
 80011a6:	f000 ff27 	bl	8001ff8 <otm8009a_write_reg>
 80011aa:	4602      	mov	r2, r0
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f103 0010 	add.w	r0, r3, #16
 80011b8:	2300      	movs	r3, #0
 80011ba:	4a5c      	ldr	r2, [pc, #368]	@ (800132c <OTM8009A_Init+0x358>)
 80011bc:	21c1      	movs	r1, #193	@ 0xc1
 80011be:	f000 ff1b 	bl	8001ff8 <otm8009a_write_reg>
 80011c2:	4602      	mov	r2, r0
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4413      	add	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f103 0010 	add.w	r0, r3, #16
 80011d0:	2300      	movs	r3, #0
 80011d2:	4a57      	ldr	r2, [pc, #348]	@ (8001330 <OTM8009A_Init+0x35c>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	f000 ff0f 	bl	8001ff8 <otm8009a_write_reg>
 80011da:	4602      	mov	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f103 0010 	add.w	r0, r3, #16
 80011e8:	2300      	movs	r3, #0
 80011ea:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <OTM8009A_Init+0x360>)
 80011ec:	21c5      	movs	r1, #197	@ 0xc5
 80011ee:	f000 ff03 	bl	8001ff8 <otm8009a_write_reg>
 80011f2:	4602      	mov	r2, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f103 0010 	add.w	r0, r3, #16
 8001200:	2300      	movs	r3, #0
 8001202:	4a4d      	ldr	r2, [pc, #308]	@ (8001338 <OTM8009A_Init+0x364>)
 8001204:	2100      	movs	r1, #0
 8001206:	f000 fef7 	bl	8001ff8 <otm8009a_write_reg>
 800120a:	4602      	mov	r2, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4413      	add	r3, r2
 8001210:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f103 0010 	add.w	r0, r3, #16
 8001218:	2300      	movs	r3, #0
 800121a:	4a3d      	ldr	r2, [pc, #244]	@ (8001310 <OTM8009A_Init+0x33c>)
 800121c:	21c5      	movs	r1, #197	@ 0xc5
 800121e:	f000 feeb 	bl	8001ff8 <otm8009a_write_reg>
 8001222:	4602      	mov	r2, r0
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f103 0010 	add.w	r0, r3, #16
 8001230:	2300      	movs	r3, #0
 8001232:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <OTM8009A_Init+0x314>)
 8001234:	2100      	movs	r1, #0
 8001236:	f000 fedf 	bl	8001ff8 <otm8009a_write_reg>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f103 0010 	add.w	r0, r3, #16
 8001248:	2302      	movs	r3, #2
 800124a:	4a3c      	ldr	r2, [pc, #240]	@ (800133c <OTM8009A_Init+0x368>)
 800124c:	21d8      	movs	r1, #216	@ 0xd8
 800124e:	f000 fed3 	bl	8001ff8 <otm8009a_write_reg>
 8001252:	4602      	mov	r2, r0
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f103 0010 	add.w	r0, r3, #16
 8001260:	2300      	movs	r3, #0
 8001262:	4a37      	ldr	r2, [pc, #220]	@ (8001340 <OTM8009A_Init+0x36c>)
 8001264:	2100      	movs	r1, #0
 8001266:	f000 fec7 	bl	8001ff8 <otm8009a_write_reg>
 800126a:	4602      	mov	r2, r0
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4413      	add	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f103 0010 	add.w	r0, r3, #16
 8001278:	2300      	movs	r3, #0
 800127a:	4a32      	ldr	r2, [pc, #200]	@ (8001344 <OTM8009A_Init+0x370>)
 800127c:	21c5      	movs	r1, #197	@ 0xc5
 800127e:	f000 febb 	bl	8001ff8 <otm8009a_write_reg>
 8001282:	4602      	mov	r2, r0
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f103 0010 	add.w	r0, r3, #16
 8001290:	2300      	movs	r3, #0
 8001292:	4a2d      	ldr	r2, [pc, #180]	@ (8001348 <OTM8009A_Init+0x374>)
 8001294:	2100      	movs	r1, #0
 8001296:	f000 feaf 	bl	8001ff8 <otm8009a_write_reg>
 800129a:	4602      	mov	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	4413      	add	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f103 0010 	add.w	r0, r3, #16
 80012a8:	2300      	movs	r3, #0
 80012aa:	4a28      	ldr	r2, [pc, #160]	@ (800134c <OTM8009A_Init+0x378>)
 80012ac:	21c0      	movs	r1, #192	@ 0xc0
 80012ae:	f000 fea3 	bl	8001ff8 <otm8009a_write_reg>
 80012b2:	4602      	mov	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f103 0010 	add.w	r0, r3, #16
 80012c0:	2300      	movs	r3, #0
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <OTM8009A_Init+0x37c>)
 80012c4:	2100      	movs	r1, #0
 80012c6:	f000 fe97 	bl	8001ff8 <otm8009a_write_reg>
 80012ca:	4602      	mov	r2, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	4413      	add	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f103 0010 	add.w	r0, r3, #16
 80012d8:	2300      	movs	r3, #0
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <OTM8009A_Init+0x380>)
 80012dc:	21c5      	movs	r1, #197	@ 0xc5
 80012de:	f000 fe8b 	bl	8001ff8 <otm8009a_write_reg>
 80012e2:	4602      	mov	r2, r0
 80012e4:	e038      	b.n	8001358 <OTM8009A_Init+0x384>
 80012e6:	bf00      	nop
 80012e8:	08013c69 	.word	0x08013c69
 80012ec:	08013c9c 	.word	0x08013c9c
 80012f0:	08013c6a 	.word	0x08013c6a
 80012f4:	08013ca0 	.word	0x08013ca0
 80012f8:	08013c6b 	.word	0x08013c6b
 80012fc:	08013c6c 	.word	0x08013c6c
 8001300:	08013c6d 	.word	0x08013c6d
 8001304:	08013c6e 	.word	0x08013c6e
 8001308:	08013c6f 	.word	0x08013c6f
 800130c:	08013c70 	.word	0x08013c70
 8001310:	08013c71 	.word	0x08013c71
 8001314:	08013c72 	.word	0x08013c72
 8001318:	08013c73 	.word	0x08013c73
 800131c:	08013c74 	.word	0x08013c74
 8001320:	08013c75 	.word	0x08013c75
 8001324:	08013c76 	.word	0x08013c76
 8001328:	08013c77 	.word	0x08013c77
 800132c:	08013c78 	.word	0x08013c78
 8001330:	08013c79 	.word	0x08013c79
 8001334:	08013c7a 	.word	0x08013c7a
 8001338:	08013c7b 	.word	0x08013c7b
 800133c:	08013ca4 	.word	0x08013ca4
 8001340:	08013c7c 	.word	0x08013c7c
 8001344:	08013c7d 	.word	0x08013c7d
 8001348:	08013c7e 	.word	0x08013c7e
 800134c:	08013c7f 	.word	0x08013c7f
 8001350:	08013c80 	.word	0x08013c80
 8001354:	08013c81 	.word	0x08013c81
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f103 0010 	add.w	r0, r3, #16
 8001364:	2300      	movs	r3, #0
 8001366:	4abe      	ldr	r2, [pc, #760]	@ (8001660 <OTM8009A_Init+0x68c>)
 8001368:	2100      	movs	r1, #0
 800136a:	f000 fe45 	bl	8001ff8 <otm8009a_write_reg>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f103 0010 	add.w	r0, r3, #16
 800137c:	2300      	movs	r3, #0
 800137e:	4ab9      	ldr	r2, [pc, #740]	@ (8001664 <OTM8009A_Init+0x690>)
 8001380:	21c4      	movs	r1, #196	@ 0xc4
 8001382:	f000 fe39 	bl	8001ff8 <otm8009a_write_reg>
 8001386:	4602      	mov	r2, r0
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f103 0010 	add.w	r0, r3, #16
 8001394:	2300      	movs	r3, #0
 8001396:	4ab4      	ldr	r2, [pc, #720]	@ (8001668 <OTM8009A_Init+0x694>)
 8001398:	2100      	movs	r1, #0
 800139a:	f000 fe2d 	bl	8001ff8 <otm8009a_write_reg>
 800139e:	4602      	mov	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f103 0010 	add.w	r0, r3, #16
 80013ac:	2300      	movs	r3, #0
 80013ae:	4aaf      	ldr	r2, [pc, #700]	@ (800166c <OTM8009A_Init+0x698>)
 80013b0:	21c1      	movs	r1, #193	@ 0xc1
 80013b2:	f000 fe21 	bl	8001ff8 <otm8009a_write_reg>
 80013b6:	4602      	mov	r2, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f103 0010 	add.w	r0, r3, #16
 80013c4:	2300      	movs	r3, #0
 80013c6:	4aaa      	ldr	r2, [pc, #680]	@ (8001670 <OTM8009A_Init+0x69c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	f000 fe15 	bl	8001ff8 <otm8009a_write_reg>
 80013ce:	4602      	mov	r2, r0
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4413      	add	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f103 0010 	add.w	r0, r3, #16
 80013dc:	2302      	movs	r3, #2
 80013de:	4aa5      	ldr	r2, [pc, #660]	@ (8001674 <OTM8009A_Init+0x6a0>)
 80013e0:	21b3      	movs	r1, #179	@ 0xb3
 80013e2:	f000 fe09 	bl	8001ff8 <otm8009a_write_reg>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f103 0010 	add.w	r0, r3, #16
 80013f4:	2300      	movs	r3, #0
 80013f6:	4aa0      	ldr	r2, [pc, #640]	@ (8001678 <OTM8009A_Init+0x6a4>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	f000 fdfd 	bl	8001ff8 <otm8009a_write_reg>
 80013fe:	4602      	mov	r2, r0
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4413      	add	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f103 0010 	add.w	r0, r3, #16
 800140c:	2306      	movs	r3, #6
 800140e:	4a9b      	ldr	r2, [pc, #620]	@ (800167c <OTM8009A_Init+0x6a8>)
 8001410:	21ce      	movs	r1, #206	@ 0xce
 8001412:	f000 fdf1 	bl	8001ff8 <otm8009a_write_reg>
 8001416:	4602      	mov	r2, r0
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4413      	add	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f103 0010 	add.w	r0, r3, #16
 8001424:	2300      	movs	r3, #0
 8001426:	4a96      	ldr	r2, [pc, #600]	@ (8001680 <OTM8009A_Init+0x6ac>)
 8001428:	2100      	movs	r1, #0
 800142a:	f000 fde5 	bl	8001ff8 <otm8009a_write_reg>
 800142e:	4602      	mov	r2, r0
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f103 0010 	add.w	r0, r3, #16
 800143c:	230e      	movs	r3, #14
 800143e:	4a91      	ldr	r2, [pc, #580]	@ (8001684 <OTM8009A_Init+0x6b0>)
 8001440:	21ce      	movs	r1, #206	@ 0xce
 8001442:	f000 fdd9 	bl	8001ff8 <otm8009a_write_reg>
 8001446:	4602      	mov	r2, r0
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f103 0010 	add.w	r0, r3, #16
 8001454:	2300      	movs	r3, #0
 8001456:	4a8c      	ldr	r2, [pc, #560]	@ (8001688 <OTM8009A_Init+0x6b4>)
 8001458:	2100      	movs	r1, #0
 800145a:	f000 fdcd 	bl	8001ff8 <otm8009a_write_reg>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4413      	add	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f103 0010 	add.w	r0, r3, #16
 800146c:	230e      	movs	r3, #14
 800146e:	4a87      	ldr	r2, [pc, #540]	@ (800168c <OTM8009A_Init+0x6b8>)
 8001470:	21ce      	movs	r1, #206	@ 0xce
 8001472:	f000 fdc1 	bl	8001ff8 <otm8009a_write_reg>
 8001476:	4602      	mov	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f103 0010 	add.w	r0, r3, #16
 8001484:	2300      	movs	r3, #0
 8001486:	4a82      	ldr	r2, [pc, #520]	@ (8001690 <OTM8009A_Init+0x6bc>)
 8001488:	2100      	movs	r1, #0
 800148a:	f000 fdb5 	bl	8001ff8 <otm8009a_write_reg>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f103 0010 	add.w	r0, r3, #16
 800149c:	230a      	movs	r3, #10
 800149e:	4a7d      	ldr	r2, [pc, #500]	@ (8001694 <OTM8009A_Init+0x6c0>)
 80014a0:	21cf      	movs	r1, #207	@ 0xcf
 80014a2:	f000 fda9 	bl	8001ff8 <otm8009a_write_reg>
 80014a6:	4602      	mov	r2, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f103 0010 	add.w	r0, r3, #16
 80014b4:	2300      	movs	r3, #0
 80014b6:	4a78      	ldr	r2, [pc, #480]	@ (8001698 <OTM8009A_Init+0x6c4>)
 80014b8:	2100      	movs	r1, #0
 80014ba:	f000 fd9d 	bl	8001ff8 <otm8009a_write_reg>
 80014be:	4602      	mov	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f103 0010 	add.w	r0, r3, #16
 80014cc:	2300      	movs	r3, #0
 80014ce:	4a73      	ldr	r2, [pc, #460]	@ (800169c <OTM8009A_Init+0x6c8>)
 80014d0:	21cf      	movs	r1, #207	@ 0xcf
 80014d2:	f000 fd91 	bl	8001ff8 <otm8009a_write_reg>
 80014d6:	4602      	mov	r2, r0
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4413      	add	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f103 0010 	add.w	r0, r3, #16
 80014e4:	2300      	movs	r3, #0
 80014e6:	4a64      	ldr	r2, [pc, #400]	@ (8001678 <OTM8009A_Init+0x6a4>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	f000 fd85 	bl	8001ff8 <otm8009a_write_reg>
 80014ee:	4602      	mov	r2, r0
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4413      	add	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f103 0010 	add.w	r0, r3, #16
 80014fc:	230a      	movs	r3, #10
 80014fe:	4a68      	ldr	r2, [pc, #416]	@ (80016a0 <OTM8009A_Init+0x6cc>)
 8001500:	21cb      	movs	r1, #203	@ 0xcb
 8001502:	f000 fd79 	bl	8001ff8 <otm8009a_write_reg>
 8001506:	4602      	mov	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f103 0010 	add.w	r0, r3, #16
 8001514:	2300      	movs	r3, #0
 8001516:	4a63      	ldr	r2, [pc, #396]	@ (80016a4 <OTM8009A_Init+0x6d0>)
 8001518:	2100      	movs	r1, #0
 800151a:	f000 fd6d 	bl	8001ff8 <otm8009a_write_reg>
 800151e:	4602      	mov	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f103 0010 	add.w	r0, r3, #16
 800152c:	230f      	movs	r3, #15
 800152e:	4a5e      	ldr	r2, [pc, #376]	@ (80016a8 <OTM8009A_Init+0x6d4>)
 8001530:	21cb      	movs	r1, #203	@ 0xcb
 8001532:	f000 fd61 	bl	8001ff8 <otm8009a_write_reg>
 8001536:	4602      	mov	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f103 0010 	add.w	r0, r3, #16
 8001544:	2300      	movs	r3, #0
 8001546:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <OTM8009A_Init+0x6ac>)
 8001548:	2100      	movs	r1, #0
 800154a:	f000 fd55 	bl	8001ff8 <otm8009a_write_reg>
 800154e:	4602      	mov	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f103 0010 	add.w	r0, r3, #16
 800155c:	230f      	movs	r3, #15
 800155e:	4a53      	ldr	r2, [pc, #332]	@ (80016ac <OTM8009A_Init+0x6d8>)
 8001560:	21cb      	movs	r1, #203	@ 0xcb
 8001562:	f000 fd49 	bl	8001ff8 <otm8009a_write_reg>
 8001566:	4602      	mov	r2, r0
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f103 0010 	add.w	r0, r3, #16
 8001574:	2300      	movs	r3, #0
 8001576:	4a44      	ldr	r2, [pc, #272]	@ (8001688 <OTM8009A_Init+0x6b4>)
 8001578:	2100      	movs	r1, #0
 800157a:	f000 fd3d 	bl	8001ff8 <otm8009a_write_reg>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	4413      	add	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f103 0010 	add.w	r0, r3, #16
 800158c:	230a      	movs	r3, #10
 800158e:	4a48      	ldr	r2, [pc, #288]	@ (80016b0 <OTM8009A_Init+0x6dc>)
 8001590:	21cb      	movs	r1, #203	@ 0xcb
 8001592:	f000 fd31 	bl	8001ff8 <otm8009a_write_reg>
 8001596:	4602      	mov	r2, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4413      	add	r3, r2
 800159c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f103 0010 	add.w	r0, r3, #16
 80015a4:	2300      	movs	r3, #0
 80015a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001690 <OTM8009A_Init+0x6bc>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	f000 fd25 	bl	8001ff8 <otm8009a_write_reg>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4413      	add	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f103 0010 	add.w	r0, r3, #16
 80015bc:	230f      	movs	r3, #15
 80015be:	4a3d      	ldr	r2, [pc, #244]	@ (80016b4 <OTM8009A_Init+0x6e0>)
 80015c0:	21cb      	movs	r1, #203	@ 0xcb
 80015c2:	f000 fd19 	bl	8001ff8 <otm8009a_write_reg>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f103 0010 	add.w	r0, r3, #16
 80015d4:	2300      	movs	r3, #0
 80015d6:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <OTM8009A_Init+0x6c4>)
 80015d8:	2100      	movs	r1, #0
 80015da:	f000 fd0d 	bl	8001ff8 <otm8009a_write_reg>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f103 0010 	add.w	r0, r3, #16
 80015ec:	230f      	movs	r3, #15
 80015ee:	4a32      	ldr	r2, [pc, #200]	@ (80016b8 <OTM8009A_Init+0x6e4>)
 80015f0:	21cb      	movs	r1, #203	@ 0xcb
 80015f2:	f000 fd01 	bl	8001ff8 <otm8009a_write_reg>
 80015f6:	4602      	mov	r2, r0
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f103 0010 	add.w	r0, r3, #16
 8001604:	2300      	movs	r3, #0
 8001606:	4a2d      	ldr	r2, [pc, #180]	@ (80016bc <OTM8009A_Init+0x6e8>)
 8001608:	2100      	movs	r1, #0
 800160a:	f000 fcf5 	bl	8001ff8 <otm8009a_write_reg>
 800160e:	4602      	mov	r2, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f103 0010 	add.w	r0, r3, #16
 800161c:	230a      	movs	r3, #10
 800161e:	4a28      	ldr	r2, [pc, #160]	@ (80016c0 <OTM8009A_Init+0x6ec>)
 8001620:	21cb      	movs	r1, #203	@ 0xcb
 8001622:	f000 fce9 	bl	8001ff8 <otm8009a_write_reg>
 8001626:	4602      	mov	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f103 0010 	add.w	r0, r3, #16
 8001634:	2300      	movs	r3, #0
 8001636:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <OTM8009A_Init+0x6f0>)
 8001638:	2100      	movs	r1, #0
 800163a:	f000 fcdd 	bl	8001ff8 <otm8009a_write_reg>
 800163e:	4602      	mov	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f103 0010 	add.w	r0, r3, #16
 800164c:	230a      	movs	r3, #10
 800164e:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <OTM8009A_Init+0x6f4>)
 8001650:	21cb      	movs	r1, #203	@ 0xcb
 8001652:	f000 fcd1 	bl	8001ff8 <otm8009a_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e035      	b.n	80016cc <OTM8009A_Init+0x6f8>
 8001660:	08013c75 	.word	0x08013c75
 8001664:	08013c82 	.word	0x08013c82
 8001668:	08013c77 	.word	0x08013c77
 800166c:	08013c83 	.word	0x08013c83
 8001670:	08013c84 	.word	0x08013c84
 8001674:	08013ca8 	.word	0x08013ca8
 8001678:	08013c6a 	.word	0x08013c6a
 800167c:	08013cac 	.word	0x08013cac
 8001680:	08013c85 	.word	0x08013c85
 8001684:	08013cb4 	.word	0x08013cb4
 8001688:	08013c86 	.word	0x08013c86
 800168c:	08013cc4 	.word	0x08013cc4
 8001690:	08013c87 	.word	0x08013c87
 8001694:	08013cd4 	.word	0x08013cd4
 8001698:	08013c88 	.word	0x08013c88
 800169c:	08013c95 	.word	0x08013c95
 80016a0:	08013ce0 	.word	0x08013ce0
 80016a4:	08013c89 	.word	0x08013c89
 80016a8:	08013cec 	.word	0x08013cec
 80016ac:	08013cfc 	.word	0x08013cfc
 80016b0:	08013d0c 	.word	0x08013d0c
 80016b4:	08013d18 	.word	0x08013d18
 80016b8:	08013d28 	.word	0x08013d28
 80016bc:	08013c8a 	.word	0x08013c8a
 80016c0:	08013d38 	.word	0x08013d38
 80016c4:	08013c8b 	.word	0x08013c8b
 80016c8:	08013d44 	.word	0x08013d44
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f103 0010 	add.w	r0, r3, #16
 80016d2:	2300      	movs	r3, #0
 80016d4:	4aae      	ldr	r2, [pc, #696]	@ (8001990 <OTM8009A_Init+0x9bc>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	f000 fc8e 	bl	8001ff8 <otm8009a_write_reg>
 80016dc:	4602      	mov	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4413      	add	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f103 0010 	add.w	r0, r3, #16
 80016ea:	230a      	movs	r3, #10
 80016ec:	4aa9      	ldr	r2, [pc, #676]	@ (8001994 <OTM8009A_Init+0x9c0>)
 80016ee:	21cc      	movs	r1, #204	@ 0xcc
 80016f0:	f000 fc82 	bl	8001ff8 <otm8009a_write_reg>
 80016f4:	4602      	mov	r2, r0
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f103 0010 	add.w	r0, r3, #16
 8001702:	2300      	movs	r3, #0
 8001704:	4aa4      	ldr	r2, [pc, #656]	@ (8001998 <OTM8009A_Init+0x9c4>)
 8001706:	2100      	movs	r1, #0
 8001708:	f000 fc76 	bl	8001ff8 <otm8009a_write_reg>
 800170c:	4602      	mov	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f103 0010 	add.w	r0, r3, #16
 800171a:	230f      	movs	r3, #15
 800171c:	4a9f      	ldr	r2, [pc, #636]	@ (800199c <OTM8009A_Init+0x9c8>)
 800171e:	21cc      	movs	r1, #204	@ 0xcc
 8001720:	f000 fc6a 	bl	8001ff8 <otm8009a_write_reg>
 8001724:	4602      	mov	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f103 0010 	add.w	r0, r3, #16
 8001732:	2300      	movs	r3, #0
 8001734:	4a9a      	ldr	r2, [pc, #616]	@ (80019a0 <OTM8009A_Init+0x9cc>)
 8001736:	2100      	movs	r1, #0
 8001738:	f000 fc5e 	bl	8001ff8 <otm8009a_write_reg>
 800173c:	4602      	mov	r2, r0
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f103 0010 	add.w	r0, r3, #16
 800174a:	230f      	movs	r3, #15
 800174c:	4a95      	ldr	r2, [pc, #596]	@ (80019a4 <OTM8009A_Init+0x9d0>)
 800174e:	21cc      	movs	r1, #204	@ 0xcc
 8001750:	f000 fc52 	bl	8001ff8 <otm8009a_write_reg>
 8001754:	4602      	mov	r2, r0
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f103 0010 	add.w	r0, r3, #16
 8001762:	2300      	movs	r3, #0
 8001764:	4a90      	ldr	r2, [pc, #576]	@ (80019a8 <OTM8009A_Init+0x9d4>)
 8001766:	2100      	movs	r1, #0
 8001768:	f000 fc46 	bl	8001ff8 <otm8009a_write_reg>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f103 0010 	add.w	r0, r3, #16
 800177a:	230a      	movs	r3, #10
 800177c:	4a8b      	ldr	r2, [pc, #556]	@ (80019ac <OTM8009A_Init+0x9d8>)
 800177e:	21cc      	movs	r1, #204	@ 0xcc
 8001780:	f000 fc3a 	bl	8001ff8 <otm8009a_write_reg>
 8001784:	4602      	mov	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f103 0010 	add.w	r0, r3, #16
 8001792:	2300      	movs	r3, #0
 8001794:	4a86      	ldr	r2, [pc, #536]	@ (80019b0 <OTM8009A_Init+0x9dc>)
 8001796:	2100      	movs	r1, #0
 8001798:	f000 fc2e 	bl	8001ff8 <otm8009a_write_reg>
 800179c:	4602      	mov	r2, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f103 0010 	add.w	r0, r3, #16
 80017aa:	230f      	movs	r3, #15
 80017ac:	4a81      	ldr	r2, [pc, #516]	@ (80019b4 <OTM8009A_Init+0x9e0>)
 80017ae:	21cc      	movs	r1, #204	@ 0xcc
 80017b0:	f000 fc22 	bl	8001ff8 <otm8009a_write_reg>
 80017b4:	4602      	mov	r2, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f103 0010 	add.w	r0, r3, #16
 80017c2:	2300      	movs	r3, #0
 80017c4:	4a7c      	ldr	r2, [pc, #496]	@ (80019b8 <OTM8009A_Init+0x9e4>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	f000 fc16 	bl	8001ff8 <otm8009a_write_reg>
 80017cc:	4602      	mov	r2, r0
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f103 0010 	add.w	r0, r3, #16
 80017da:	230f      	movs	r3, #15
 80017dc:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <OTM8009A_Init+0x9e8>)
 80017de:	21cc      	movs	r1, #204	@ 0xcc
 80017e0:	f000 fc0a 	bl	8001ff8 <otm8009a_write_reg>
 80017e4:	4602      	mov	r2, r0
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f103 0010 	add.w	r0, r3, #16
 80017f2:	2300      	movs	r3, #0
 80017f4:	4a72      	ldr	r2, [pc, #456]	@ (80019c0 <OTM8009A_Init+0x9ec>)
 80017f6:	2100      	movs	r1, #0
 80017f8:	f000 fbfe 	bl	8001ff8 <otm8009a_write_reg>
 80017fc:	4602      	mov	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f103 0010 	add.w	r0, r3, #16
 800180a:	2300      	movs	r3, #0
 800180c:	4a6d      	ldr	r2, [pc, #436]	@ (80019c4 <OTM8009A_Init+0x9f0>)
 800180e:	21c5      	movs	r1, #197	@ 0xc5
 8001810:	f000 fbf2 	bl	8001ff8 <otm8009a_write_reg>
 8001814:	4602      	mov	r2, r0
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4413      	add	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f103 0010 	add.w	r0, r3, #16
 8001822:	2300      	movs	r3, #0
 8001824:	4a68      	ldr	r2, [pc, #416]	@ (80019c8 <OTM8009A_Init+0x9f4>)
 8001826:	2100      	movs	r1, #0
 8001828:	f000 fbe6 	bl	8001ff8 <otm8009a_write_reg>
 800182c:	4602      	mov	r2, r0
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f103 0010 	add.w	r0, r3, #16
 800183a:	2300      	movs	r3, #0
 800183c:	4a63      	ldr	r2, [pc, #396]	@ (80019cc <OTM8009A_Init+0x9f8>)
 800183e:	21f5      	movs	r1, #245	@ 0xf5
 8001840:	f000 fbda 	bl	8001ff8 <otm8009a_write_reg>
 8001844:	4602      	mov	r2, r0
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f103 0010 	add.w	r0, r3, #16
 8001852:	2300      	movs	r3, #0
 8001854:	4a5e      	ldr	r2, [pc, #376]	@ (80019d0 <OTM8009A_Init+0x9fc>)
 8001856:	2100      	movs	r1, #0
 8001858:	f000 fbce 	bl	8001ff8 <otm8009a_write_reg>
 800185c:	4602      	mov	r2, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f103 0010 	add.w	r0, r3, #16
 800186a:	2300      	movs	r3, #0
 800186c:	4a59      	ldr	r2, [pc, #356]	@ (80019d4 <OTM8009A_Init+0xa00>)
 800186e:	21c6      	movs	r1, #198	@ 0xc6
 8001870:	f000 fbc2 	bl	8001ff8 <otm8009a_write_reg>
 8001874:	4602      	mov	r2, r0
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f103 0010 	add.w	r0, r3, #16
 8001882:	2300      	movs	r3, #0
 8001884:	4a54      	ldr	r2, [pc, #336]	@ (80019d8 <OTM8009A_Init+0xa04>)
 8001886:	2100      	movs	r1, #0
 8001888:	f000 fbb6 	bl	8001ff8 <otm8009a_write_reg>
 800188c:	4602      	mov	r2, r0
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f103 0010 	add.w	r0, r3, #16
 800189a:	2303      	movs	r3, #3
 800189c:	4a4f      	ldr	r2, [pc, #316]	@ (80019dc <OTM8009A_Init+0xa08>)
 800189e:	21ff      	movs	r1, #255	@ 0xff
 80018a0:	f000 fbaa 	bl	8001ff8 <otm8009a_write_reg>
 80018a4:	4602      	mov	r2, r0
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4413      	add	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f103 0010 	add.w	r0, r3, #16
 80018b2:	2300      	movs	r3, #0
 80018b4:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <OTM8009A_Init+0xa04>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	f000 fb9e 	bl	8001ff8 <otm8009a_write_reg>
 80018bc:	4602      	mov	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f103 0010 	add.w	r0, r3, #16
 80018ca:	2300      	movs	r3, #0
 80018cc:	4a42      	ldr	r2, [pc, #264]	@ (80019d8 <OTM8009A_Init+0xa04>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	f000 fb92 	bl	8001ff8 <otm8009a_write_reg>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f103 0010 	add.w	r0, r3, #16
 80018e2:	2310      	movs	r3, #16
 80018e4:	4a3e      	ldr	r2, [pc, #248]	@ (80019e0 <OTM8009A_Init+0xa0c>)
 80018e6:	21e1      	movs	r1, #225	@ 0xe1
 80018e8:	f000 fb86 	bl	8001ff8 <otm8009a_write_reg>
 80018ec:	4602      	mov	r2, r0
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f103 0010 	add.w	r0, r3, #16
 80018fa:	2300      	movs	r3, #0
 80018fc:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <OTM8009A_Init+0xa04>)
 80018fe:	2100      	movs	r1, #0
 8001900:	f000 fb7a 	bl	8001ff8 <otm8009a_write_reg>
 8001904:	4602      	mov	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f103 0010 	add.w	r0, r3, #16
 8001912:	2310      	movs	r3, #16
 8001914:	4a33      	ldr	r2, [pc, #204]	@ (80019e4 <OTM8009A_Init+0xa10>)
 8001916:	21e2      	movs	r1, #226	@ 0xe2
 8001918:	f000 fb6e 	bl	8001ff8 <otm8009a_write_reg>
 800191c:	4602      	mov	r2, r0
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f103 0010 	add.w	r0, r3, #16
 800192a:	2300      	movs	r3, #0
 800192c:	4a2e      	ldr	r2, [pc, #184]	@ (80019e8 <OTM8009A_Init+0xa14>)
 800192e:	2111      	movs	r1, #17
 8001930:	f000 fb62 	bl	8001ff8 <otm8009a_write_reg>
 8001934:	4602      	mov	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 800193c:	2178      	movs	r1, #120	@ 0x78
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fb29 	bl	8001f96 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d012      	beq.n	8001970 <OTM8009A_Init+0x99c>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d153      	bne.n	80019f8 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f103 0010 	add.w	r0, r3, #16
 8001956:	2300      	movs	r3, #0
 8001958:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <OTM8009A_Init+0xa18>)
 800195a:	213a      	movs	r1, #58	@ 0x3a
 800195c:	f000 fb4c 	bl	8001ff8 <otm8009a_write_reg>
 8001960:	4602      	mov	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <OTM8009A_Init+0xa1c>)
 800196a:	2202      	movs	r2, #2
 800196c:	605a      	str	r2, [r3, #4]
    break;
 800196e:	e044      	b.n	80019fa <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f103 0010 	add.w	r0, r3, #16
 8001976:	2300      	movs	r3, #0
 8001978:	4a1e      	ldr	r2, [pc, #120]	@ (80019f4 <OTM8009A_Init+0xa20>)
 800197a:	213a      	movs	r1, #58	@ 0x3a
 800197c:	f000 fb3c 	bl	8001ff8 <otm8009a_write_reg>
 8001980:	4602      	mov	r2, r0
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <OTM8009A_Init+0xa1c>)
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
    break;
 800198e:	e034      	b.n	80019fa <OTM8009A_Init+0xa26>
 8001990:	08013c6a 	.word	0x08013c6a
 8001994:	08013d50 	.word	0x08013d50
 8001998:	08013c89 	.word	0x08013c89
 800199c:	08013d5c 	.word	0x08013d5c
 80019a0:	08013c85 	.word	0x08013c85
 80019a4:	08013d6c 	.word	0x08013d6c
 80019a8:	08013c86 	.word	0x08013c86
 80019ac:	08013d7c 	.word	0x08013d7c
 80019b0:	08013c87 	.word	0x08013c87
 80019b4:	08013d88 	.word	0x08013d88
 80019b8:	08013c88 	.word	0x08013c88
 80019bc:	08013d98 	.word	0x08013d98
 80019c0:	08013c75 	.word	0x08013c75
 80019c4:	08013c96 	.word	0x08013c96
 80019c8:	08013c97 	.word	0x08013c97
 80019cc:	08013c98 	.word	0x08013c98
 80019d0:	08013c99 	.word	0x08013c99
 80019d4:	08013c9a 	.word	0x08013c9a
 80019d8:	08013c69 	.word	0x08013c69
 80019dc:	08013da8 	.word	0x08013da8
 80019e0:	08013dac 	.word	0x08013dac
 80019e4:	08013dbc 	.word	0x08013dbc
 80019e8:	08013c8c 	.word	0x08013c8c
 80019ec:	08013c8d 	.word	0x08013c8d
 80019f0:	20000150 	.word	0x20000150
 80019f4:	08013c8e 	.word	0x08013c8e
  default :
    break;
 80019f8:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d12a      	bne.n	8001a56 <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001a00:	2360      	movs	r3, #96	@ 0x60
 8001a02:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f103 0010 	add.w	r0, r3, #16
 8001a0a:	f107 0213 	add.w	r2, r7, #19
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2136      	movs	r1, #54	@ 0x36
 8001a12:	f000 faf1 	bl	8001ff8 <otm8009a_write_reg>
 8001a16:	4602      	mov	r2, r0
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f103 0010 	add.w	r0, r3, #16
 8001a24:	2304      	movs	r3, #4
 8001a26:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <OTM8009A_Init+0xb64>)
 8001a28:	212a      	movs	r1, #42	@ 0x2a
 8001a2a:	f000 fae5 	bl	8001ff8 <otm8009a_write_reg>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f103 0010 	add.w	r0, r3, #16
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b3c <OTM8009A_Init+0xb68>)
 8001a40:	212b      	movs	r1, #43	@ 0x2b
 8001a42:	f000 fad9 	bl	8001ff8 <otm8009a_write_reg>
 8001a46:	4602      	mov	r2, r0
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <OTM8009A_Init+0xb6c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e002      	b.n	8001a5c <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001a56:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <OTM8009A_Init+0xb6c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f103 0010 	add.w	r0, r3, #16
 8001a62:	2300      	movs	r3, #0
 8001a64:	4a37      	ldr	r2, [pc, #220]	@ (8001b44 <OTM8009A_Init+0xb70>)
 8001a66:	2151      	movs	r1, #81	@ 0x51
 8001a68:	f000 fac6 	bl	8001ff8 <otm8009a_write_reg>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8001a74:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <OTM8009A_Init+0xb74>)
 8001a76:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <OTM8009A_Init+0xb78>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	09db      	lsrs	r3, r3, #7
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	2364      	movs	r3, #100	@ 0x64
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b40 <OTM8009A_Init+0xb6c>)
 8001a8e:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f103 0010 	add.w	r0, r3, #16
 8001a96:	2300      	movs	r3, #0
 8001a98:	4a2d      	ldr	r2, [pc, #180]	@ (8001b50 <OTM8009A_Init+0xb7c>)
 8001a9a:	2153      	movs	r1, #83	@ 0x53
 8001a9c:	f000 faac 	bl	8001ff8 <otm8009a_write_reg>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f103 0010 	add.w	r0, r3, #16
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4a28      	ldr	r2, [pc, #160]	@ (8001b54 <OTM8009A_Init+0xb80>)
 8001ab2:	2155      	movs	r1, #85	@ 0x55
 8001ab4:	f000 faa0 	bl	8001ff8 <otm8009a_write_reg>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f103 0010 	add.w	r0, r3, #16
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	4a23      	ldr	r2, [pc, #140]	@ (8001b58 <OTM8009A_Init+0xb84>)
 8001aca:	215e      	movs	r1, #94	@ 0x5e
 8001acc:	f000 fa94 	bl	8001ff8 <otm8009a_write_reg>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f103 0010 	add.w	r0, r3, #16
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <OTM8009A_Init+0xb88>)
 8001ae2:	2129      	movs	r1, #41	@ 0x29
 8001ae4:	f000 fa88 	bl	8001ff8 <otm8009a_write_reg>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4413      	add	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f103 0010 	add.w	r0, r3, #16
 8001af6:	2300      	movs	r3, #0
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <OTM8009A_Init+0xb8c>)
 8001afa:	2100      	movs	r1, #0
 8001afc:	f000 fa7c 	bl	8001ff8 <otm8009a_write_reg>
 8001b00:	4602      	mov	r2, r0
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f103 0010 	add.w	r0, r3, #16
 8001b0e:	2300      	movs	r3, #0
 8001b10:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <OTM8009A_Init+0xb90>)
 8001b12:	212c      	movs	r1, #44	@ 0x2c
 8001b14:	f000 fa70 	bl	8001ff8 <otm8009a_write_reg>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001b2c:	697b      	ldr	r3, [r7, #20]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	08013c60 	.word	0x08013c60
 8001b3c:	08013c64 	.word	0x08013c64
 8001b40:	20000150 	.word	0x20000150
 8001b44:	08013c8f 	.word	0x08013c8f
 8001b48:	08013c68 	.word	0x08013c68
 8001b4c:	80808081 	.word	0x80808081
 8001b50:	08013c90 	.word	0x08013c90
 8001b54:	08013c91 	.word	0x08013c91
 8001b58:	08013c92 	.word	0x08013c92
 8001b5c:	08013c93 	.word	0x08013c93
 8001b60:	08013c69 	.word	0x08013c69
 8001b64:	08013c94 	.word	0x08013c94

08001b68 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f103 0010 	add.w	r0, r3, #16
 8001b90:	2301      	movs	r3, #1
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	21da      	movs	r1, #218	@ 0xda
 8001b96:	f000 fa18 	bl	8001fca <otm8009a_read_reg>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e001      	b.n	8001bac <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001bac:	68fb      	ldr	r3, [r7, #12]
}  
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <OTM8009A_SetBrightness+0x54>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f103 0010 	add.w	r0, r3, #16
 8001bdc:	f107 020b 	add.w	r2, r7, #11
 8001be0:	2300      	movs	r3, #0
 8001be2:	2151      	movs	r1, #81	@ 0x51
 8001be4:	f000 fa08 	bl	8001ff8 <otm8009a_write_reg>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e004      	b.n	8001c00 <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 8001bf6:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <OTM8009A_SetBrightness+0x58>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	51eb851f 	.word	0x51eb851f
 8001c10:	20000150 	.word	0x20000150

08001c14 <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <OTM8009A_GetBrightness+0x20>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	20000150 	.word	0x20000150

08001c38 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f103 0010 	add.w	r0, r3, #16
 8001c4a:	f107 020b 	add.w	r2, r7, #11
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2129      	movs	r1, #41	@ 0x29
 8001c52:	f000 f9d1 	bl	8001ff8 <otm8009a_write_reg>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e001      	b.n	8001c68 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 0010 	add.w	r0, r3, #16
 8001c84:	f107 020b 	add.w	r2, r7, #11
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2128      	movs	r1, #40	@ 0x28
 8001c8c:	f000 f9b4 	bl	8001ff8 <otm8009a_write_reg>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e001      	b.n	8001ca2 <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001cb6:	2360      	movs	r3, #96	@ 0x60
 8001cb8:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d006      	beq.n	8001cd2 <OTM8009A_SetOrientation+0x26>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e04d      	b.n	8001d6e <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d125      	bne.n	8001d24 <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f103 0010 	add.w	r0, r3, #16
 8001cde:	f107 020b 	add.w	r2, r7, #11
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2136      	movs	r1, #54	@ 0x36
 8001ce6:	f000 f987 	bl	8001ff8 <otm8009a_write_reg>
 8001cea:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 0010 	add.w	r0, r3, #16
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <OTM8009A_SetOrientation+0xd8>)
 8001cf6:	212a      	movs	r1, #42	@ 0x2a
 8001cf8:	f000 f97e 	bl	8001ff8 <otm8009a_write_reg>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f103 0010 	add.w	r0, r3, #16
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <OTM8009A_SetOrientation+0xdc>)
 8001d0e:	212b      	movs	r1, #43	@ 0x2b
 8001d10:	f000 f972 	bl	8001ff8 <otm8009a_write_reg>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <OTM8009A_SetOrientation+0xe0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e024      	b.n	8001d6e <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0010 	add.w	r0, r3, #16
 8001d2a:	f107 020a 	add.w	r2, r7, #10
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2136      	movs	r1, #54	@ 0x36
 8001d32:	f000 f961 	bl	8001ff8 <otm8009a_write_reg>
 8001d36:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f103 0010 	add.w	r0, r3, #16
 8001d3e:	2304      	movs	r3, #4
 8001d40:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <OTM8009A_SetOrientation+0xd8>)
 8001d42:	212a      	movs	r1, #42	@ 0x2a
 8001d44:	f000 f958 	bl	8001ff8 <otm8009a_write_reg>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 0010 	add.w	r0, r3, #16
 8001d56:	2304      	movs	r3, #4
 8001d58:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <OTM8009A_SetOrientation+0xdc>)
 8001d5a:	212b      	movs	r1, #43	@ 0x2b
 8001d5c:	f000 f94c 	bl	8001ff8 <otm8009a_write_reg>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <OTM8009A_SetOrientation+0xe0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08013c60 	.word	0x08013c60
 8001d88:	08013c64 	.word	0x08013c64
 8001d8c:	20000150 	.word	0x20000150

08001d90 <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <OTM8009A_GetOrientation+0x20>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000150 	.word	0x20000150

08001db4 <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <OTM8009A_GetXSize+0x44>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <OTM8009A_GetXSize+0x18>
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d005      	beq.n	8001dd6 <OTM8009A_GetXSize+0x22>
 8001dca:	e009      	b.n	8001de0 <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dd2:	601a      	str	r2, [r3, #0]
    break;
 8001dd4:	e009      	b.n	8001dea <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ddc:	601a      	str	r2, [r3, #0]
    break;
 8001dde:	e004      	b.n	8001dea <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001de6:	601a      	str	r2, [r3, #0]
    break;
 8001de8:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000150 	.word	0x20000150

08001dfc <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <OTM8009A_GetYSize+0x44>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <OTM8009A_GetYSize+0x18>
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <OTM8009A_GetYSize+0x22>
 8001e12:	e009      	b.n	8001e28 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e1a:	601a      	str	r2, [r3, #0]
    break;
 8001e1c:	e009      	b.n	8001e32 <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e24:	601a      	str	r2, [r3, #0]
    break;
 8001e26:	e004      	b.n	8001e32 <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e2e:	601a      	str	r2, [r3, #0]
    break;
 8001e30:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20000150 	.word	0x20000150

08001e44 <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	4613      	mov	r3, r2
 8001f44:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	689c      	ldr	r4, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	8818      	ldrh	r0, [r3, #0]
 8001f52:	893b      	ldrh	r3, [r7, #8]
 8001f54:	8979      	ldrh	r1, [r7, #10]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	47a0      	blx	r4
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	817b      	strh	r3, [r7, #10]
 8001f74:	4613      	mov	r3, r2
 8001f76:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	685c      	ldr	r4, [r3, #4]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	8818      	ldrh	r0, [r3, #0]
 8001f84:	893b      	ldrh	r3, [r7, #8]
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	47a0      	blx	r4
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}

08001f96 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4798      	blx	r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001faa:	bf00      	nop
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4798      	blx	r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f5      	bhi.n	8001fac <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001fca:	b590      	push	{r4, r7, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685c      	ldr	r4, [r3, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6898      	ldr	r0, [r3, #8]
 8001fe6:	893b      	ldrh	r3, [r7, #8]
 8001fe8:	8979      	ldrh	r1, [r7, #10]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	47a0      	blx	r4
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	817b      	strh	r3, [r7, #10]
 8002008:	4613      	mov	r3, r2
 800200a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681c      	ldr	r4, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	893b      	ldrh	r3, [r7, #8]
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	47a0      	blx	r4
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
	...

08002028 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <BSP_LED_Init+0x7c>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <BSP_LED_Init+0x7c>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <BSP_LED_Init+0x7c>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <BSP_LED_Init+0x80>)
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205e:	2301      	movs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <BSP_LED_Init+0x84>)
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	f107 0210 	add.w	r2, r7, #16
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f003 f8a7 	bl	80051cc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <BSP_LED_Init+0x84>)
 8002082:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <BSP_LED_Init+0x80>)
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	b29b      	uxth	r3, r3
 8002090:	2201      	movs	r2, #1
 8002092:	4619      	mov	r1, r3
 8002094:	f003 fa62 	bl	800555c <HAL_GPIO_WritePin>
 return ret;
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800209a:	4618      	mov	r0, r3
 800209c:	3728      	adds	r7, #40	@ 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	58024400 	.word	0x58024400
 80020a8:	08013dcc 	.word	0x08013dcc
 80020ac:	20000098 	.word	0x20000098

080020b0 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <BSP_LED_On+0x34>)
 80020c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <BSP_LED_On+0x38>)
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	f003 fa42 	bl	800555c <HAL_GPIO_WritePin>
  return ret;
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000098 	.word	0x20000098
 80020e8:	08013dcc 	.word	0x08013dcc

080020ec <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80020f0:	f001 fe0e 	bl	8003d10 <HAL_GetTick>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}

080020fa <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002104:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800210e:	2201      	movs	r2, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f806 	bl	8002124 <BSP_LCD_InitEx>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	@ 0x38
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d808      	bhi.n	800214e <BSP_LCD_InitEx+0x2a>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <BSP_LCD_InitEx+0x2a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d006      	beq.n	8002156 <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d003      	beq.n	8002156 <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800214e:	f06f 0301 	mvn.w	r3, #1
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
 8002154:	e0db      	b.n	800230e <BSP_LCD_InitEx+0x1ea>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d10e      	bne.n	800217a <BSP_LCD_InitEx+0x56>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 800215c:	2302      	movs	r3, #2
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB565;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002164:	496c      	ldr	r1, [pc, #432]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3310      	adds	r3, #16
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e00d      	b.n	8002196 <BSP_LCD_InitEx+0x72>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB888;
 800217e:	2305      	movs	r3, #5
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002182:	4965      	ldr	r1, [pc, #404]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3310      	adds	r3, #16
 8002192:	2204      	movs	r2, #4
 8002194:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002196:	4960      	ldr	r1, [pc, #384]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	330c      	adds	r3, #12
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80021aa:	495b      	ldr	r1, [pc, #364]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80021bc:	4956      	ldr	r1, [pc, #344]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3304      	adds	r3, #4
 80021cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021ce:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f8af 	bl	8002334 <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 80021d6:	f000 f8e7 	bl	80023a8 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80021da:	4b50      	ldr	r3, [pc, #320]	@ (800231c <BSP_LCD_InitEx+0x1f8>)
 80021dc:	4a50      	ldr	r2, [pc, #320]	@ (8002320 <BSP_LCD_InitEx+0x1fc>)
 80021de:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80021e0:	4b50      	ldr	r3, [pc, #320]	@ (8002324 <BSP_LCD_InitEx+0x200>)
 80021e2:	4a51      	ldr	r2, [pc, #324]	@ (8002328 <BSP_LCD_InitEx+0x204>)
 80021e4:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 80021e6:	4b51      	ldr	r3, [pc, #324]	@ (800232c <BSP_LCD_InitEx+0x208>)
 80021e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021ec:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80021ee:	484b      	ldr	r0, [pc, #300]	@ (800231c <BSP_LCD_InitEx+0x1f8>)
 80021f0:	f000 ff36 	bl	8003060 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80021f4:	484b      	ldr	r0, [pc, #300]	@ (8002324 <BSP_LCD_InitEx+0x200>)
 80021f6:	f000 ff65 	bl	80030c4 <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 80021fa:	484c      	ldr	r0, [pc, #304]	@ (800232c <BSP_LCD_InitEx+0x208>)
 80021fc:	f000 ff90 	bl	8003120 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	4849      	ldr	r0, [pc, #292]	@ (800232c <BSP_LCD_InitEx+0x208>)
 8002208:	f000 f936 	bl	8002478 <MX_DSIHOST_DSI_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <BSP_LCD_InitEx+0xf6>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002212:	f06f 0303 	mvn.w	r3, #3
 8002216:	637b      	str	r3, [r7, #52]	@ 0x34
 8002218:	e014      	b.n	8002244 <BSP_LCD_InitEx+0x120>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800221a:	4840      	ldr	r0, [pc, #256]	@ (800231c <BSP_LCD_InitEx+0x1f8>)
 800221c:	f000 fa94 	bl	8002748 <MX_LTDC_ClockConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <BSP_LCD_InitEx+0x10a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002226:	f06f 0303 	mvn.w	r3, #3
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
 800222c:	e00a      	b.n	8002244 <BSP_LCD_InitEx+0x120>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800222e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	483a      	ldr	r0, [pc, #232]	@ (800231c <BSP_LCD_InitEx+0x1f8>)
 8002234:	f000 f9d2 	bl	80025dc <MX_LTDC_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <BSP_LCD_InitEx+0x120>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 800223e:	f06f 0303 	mvn.w	r3, #3
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	2b00      	cmp	r3, #0
 8002248:	d161      	bne.n	800230e <BSP_LCD_InitEx+0x1ea>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800224a:	2000      	movs	r0, #0
 800224c:	f001 fab4 	bl	80037b8 <BSP_SDRAM_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <BSP_LCD_InitEx+0x138>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002256:	f06f 0303 	mvn.w	r3, #3
 800225a:	e059      	b.n	8002310 <BSP_LCD_InitEx+0x1ec>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8002268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226a:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 800226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226e:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002270:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	461a      	mov	r2, r3
 800227c:	2100      	movs	r1, #0
 800227e:	4827      	ldr	r0, [pc, #156]	@ (800231c <BSP_LCD_InitEx+0x1f8>)
 8002280:	f000 fa20 	bl	80026c4 <MX_LTDC_ConfigLayer>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <BSP_LCD_InitEx+0x16e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800228a:	f06f 0303 	mvn.w	r3, #3
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002290:	e033      	b.n	80022fa <BSP_LCD_InitEx+0x1d6>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 8002292:	4826      	ldr	r0, [pc, #152]	@ (800232c <BSP_LCD_InitEx+0x208>)
 8002294:	f002 fde0 	bl	8004e58 <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8002298:	2104      	movs	r1, #4
 800229a:	4824      	ldr	r0, [pc, #144]	@ (800232c <BSP_LCD_InitEx+0x208>)
 800229c:	f002 fdb4 	bl	8004e08 <HAL_DSI_ConfigFlowControl>

        /* Initialize the NT35510 LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d102      	bne.n	80022ac <BSP_LCD_InitEx+0x188>
        {
          ctrl_pixel_format = NT35510_FORMAT_RBG565;
 80022a6:	2302      	movs	r3, #2
 80022a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022aa:	e001      	b.n	80022b0 <BSP_LCD_InitEx+0x18c>
        }
        else /* LCD_PIXEL_FORMAT_RGB888 */
        {
          ctrl_pixel_format = NT35510_FORMAT_RGB888;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if(NT35510_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022b4:	f000 ffc8 	bl	8003248 <NT35510_Probe>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01b      	beq.n	80022f6 <BSP_LCD_InitEx+0x1d2>
        {
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 80022be:	4b1c      	ldr	r3, [pc, #112]	@ (8002330 <BSP_LCD_InitEx+0x20c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]

          if(ret == BSP_ERROR_NONE)
 80022c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d117      	bne.n	80022fa <BSP_LCD_InitEx+0x1d6>
          {
            /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
            depending on configuration of DSI */
            if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d102      	bne.n	80022d6 <BSP_LCD_InitEx+0x1b2>
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 80022d0:	2302      	movs	r3, #2
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022d4:	e001      	b.n	80022da <BSP_LCD_InitEx+0x1b6>
            }
            else /* LCD_PIXEL_FORMAT_RGB888 */
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022de:	f001 f80f 	bl	8003300 <OTM8009A_Probe>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <BSP_LCD_InitEx+0x1cc>
            {
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80022e8:	f06f 0306 	mvn.w	r3, #6
 80022ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ee:	e004      	b.n	80022fa <BSP_LCD_InitEx+0x1d6>
            }
            else
            {
              ret = BSP_ERROR_NONE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f4:	e001      	b.n	80022fa <BSP_LCD_InitEx+0x1d6>
            }
          }
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 80022fa:	4907      	ldr	r1, [pc, #28]	@ (8002318 <BSP_LCD_InitEx+0x1f4>)
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3318      	adds	r3, #24
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 800230e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002310:	4618      	mov	r0, r3
 8002312:	3738      	adds	r7, #56	@ 0x38
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000290 	.word	0x20000290
 800231c:	200001e8 	.word	0x200001e8
 8002320:	50001000 	.word	0x50001000
 8002324:	20000180 	.word	0x20000180
 8002328:	52001000 	.word	0x52001000
 800232c:	20000164 	.word	0x20000164
 8002330:	200002ac 	.word	0x200002ac

08002334 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 800233c:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <BSP_LCD_Reset+0x6c>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <BSP_LCD_Reset+0x6c>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <BSP_LCD_Reset+0x6c>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800235a:	2308      	movs	r3, #8
 800235c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <BSP_LCD_Reset+0x70>)
 8002372:	f002 ff2b 	bl	80051cc <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	2108      	movs	r1, #8
 800237a:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <BSP_LCD_Reset+0x70>)
 800237c:	f003 f8ee 	bl	800555c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8002380:	2014      	movs	r0, #20
 8002382:	f001 fcd1 	bl	8003d28 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8002386:	2201      	movs	r2, #1
 8002388:	2108      	movs	r1, #8
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <BSP_LCD_Reset+0x70>)
 800238c:	f003 f8e6 	bl	800555c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8002390:	200a      	movs	r0, #10
 8002392:	f001 fcc9 	bl	8003d28 <HAL_Delay>
}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58021800 	.word	0x58021800

080023a8 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <LCD_InitSequence+0xc8>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002470 <LCD_InitSequence+0xc8>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023be:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <LCD_InitSequence+0xc8>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 80023cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4823      	ldr	r0, [pc, #140]	@ (8002474 <LCD_InitSequence+0xcc>)
 80023e6:	f002 fef1 	bl	80051cc <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023f0:	4820      	ldr	r0, [pc, #128]	@ (8002474 <LCD_InitSequence+0xcc>)
 80023f2:	f003 f8b3 	bl	800555c <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <LCD_InitSequence+0xc8>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <LCD_InitSequence+0xc8>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <LCD_InitSequence+0xc8>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 8002414:	2304      	movs	r3, #4
 8002416:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	4813      	ldr	r0, [pc, #76]	@ (8002474 <LCD_InitSequence+0xcc>)
 8002428:	f002 fed0 	bl	80051cc <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	2104      	movs	r1, #4
 8002430:	4810      	ldr	r0, [pc, #64]	@ (8002474 <LCD_InitSequence+0xcc>)
 8002432:	f003 f893 	bl	800555c <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	210f      	movs	r1, #15
 800243a:	2058      	movs	r0, #88	@ 0x58
 800243c:	f001 fd8f 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002440:	2058      	movs	r0, #88	@ 0x58
 8002442:	f001 fda6 	bl	8003f92 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	210f      	movs	r1, #15
 800244a:	205a      	movs	r0, #90	@ 0x5a
 800244c:	f001 fd87 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002450:	205a      	movs	r0, #90	@ 0x5a
 8002452:	f001 fd9e 	bl	8003f92 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	210f      	movs	r1, #15
 800245a:	207b      	movs	r0, #123	@ 0x7b
 800245c:	f001 fd7f 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002460:	207b      	movs	r0, #123	@ 0x7b
 8002462:	f001 fd96 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400
 8002474:	58022400 	.word	0x58022400

08002478 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0a2      	sub	sp, #136	@ 0x88
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800248c:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2204      	movs	r2, #4
 8002498:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 80024a0:	2364      	movs	r3, #100	@ 0x64
 80024a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80024a4:	2305      	movs	r3, #5
 80024a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80024b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80024b4:	4619      	mov	r1, r3
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f002 f91c 	bl	80046f4 <HAL_DSI_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <MX_DSIHOST_DSI_Init+0x14e>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	617b      	str	r3, [r7, #20]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 80024ce:	4b40      	ldr	r3, [pc, #256]	@ (80025d0 <MX_DSIHOST_DSI_Init+0x158>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <MX_DSIHOST_DSI_Init+0x66>
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 80024d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	e001      	b.n	80024e2 <MX_DSIHOST_DSI_Init+0x6a>
  }
  else
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  }

  VidCfg.Mode = DSI_VID_MODE_BURST;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 80024ee:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8002500:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <MX_DSIHOST_DSI_Init+0x158>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d116      	bne.n	8002536 <MX_DSIHOST_DSI_Init+0xbe>
  {
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 8002508:	2304      	movs	r3, #4
 800250a:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 800250c:	234d      	movs	r3, #77	@ 0x4d
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	4b2e      	ldr	r3, [pc, #184]	@ (80025d4 <MX_DSIHOST_DSI_Init+0x15c>)
 800251c:	4413      	add	r3, r2
 800251e:	4a2e      	ldr	r2, [pc, #184]	@ (80025d8 <MX_DSIHOST_DSI_Init+0x160>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0b5b      	lsrs	r3, r3, #13
 8002526:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 8002528:	2378      	movs	r3, #120	@ 0x78
 800252a:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 800252c:	2396      	movs	r3, #150	@ 0x96
 800252e:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = NT35510_480X800_VFP;
 8002530:	2396      	movs	r3, #150	@ 0x96
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002534:	e015      	b.n	8002562 <MX_DSIHOST_DSI_Init+0xea>
  }
  else
  {
    VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8002536:	2304      	movs	r3, #4
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800253a:	234d      	movs	r3, #77	@ 0x4d
 800253c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8002544:	fb03 f202 	mul.w	r2, r3, r2
 8002548:	4b22      	ldr	r3, [pc, #136]	@ (80025d4 <MX_DSIHOST_DSI_Init+0x15c>)
 800254a:	4413      	add	r3, r2
 800254c:	4a22      	ldr	r2, [pc, #136]	@ (80025d8 <MX_DSIHOST_DSI_Init+0x160>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0b5b      	lsrs	r3, r3, #13
 8002554:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8002556:	2301      	movs	r3, #1
 8002558:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800255a:	230f      	movs	r3, #15
 800255c:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800255e:	2310      	movs	r3, #16
 8002560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  VidCfg.VerticalActive = Height;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	653b      	str	r3, [r7, #80]	@ 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800256a:	657b      	str	r3, [r7, #84]	@ 0x54

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800256c:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <MX_DSIHOST_DSI_Init+0x158>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <MX_DSIHOST_DSI_Init+0x106>
  {
    VidCfg.LPLargestPacketSize = 64;
 8002574:	2340      	movs	r3, #64	@ 0x40
 8002576:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 64;
 8002578:	2340      	movs	r3, #64	@ 0x40
 800257a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800257c:	e003      	b.n	8002586 <MX_DSIHOST_DSI_Init+0x10e>
  }
  else
  {
    VidCfg.LPLargestPacketSize = 4;
 800257e:	2304      	movs	r3, #4
 8002580:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 4;
 8002582:	2304      	movs	r3, #4
 8002584:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8002586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258a:	663b      	str	r3, [r7, #96]	@ 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800258c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002590:	667b      	str	r3, [r7, #100]	@ 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8002592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002596:	66bb      	str	r3, [r7, #104]	@ 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8002598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800259c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800259e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a2:	673b      	str	r3, [r7, #112]	@ 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 80025a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a8:	677b      	str	r3, [r7, #116]	@ 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f002 fa27 	bl	8004a08 <HAL_DSI_ConfigVideoMode>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_DSIHOST_DSI_Init+0x14c>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <MX_DSIHOST_DSI_Init+0x14e>
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3788      	adds	r7, #136	@ 0x88
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002ac 	.word	0x200002ac
 80025d4:	0042c1d8 	.word	0x0042c1d8
 80025d8:	4c751ce3 	.word	0x4c751ce3

080025dc <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a34      	ldr	r2, [pc, #208]	@ (80026bc <MX_LTDC_Init+0xe0>)
 80025ec:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8002606:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <MX_LTDC_Init+0xe4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d121      	bne.n	8002652 <MX_LTDC_Init+0x76>
  {
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2223      	movs	r2, #35	@ 0x23
 8002618:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2277      	movs	r2, #119	@ 0x77
 8002632:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f240 120d 	movw	r2, #269	@ 0x10d
 800263a:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f203 120d 	addw	r2, r3, #269	@ 0x10d
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f203 12a3 	addw	r2, r3, #419	@ 0x1a3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002650:	e01f      	b.n	8002692 <MX_LTDC_Init+0xb6>
  }
  else
  {
    hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2223      	movs	r2, #35	@ 0x23
 800265c:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	220f      	movs	r2, #15
 800267c:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 020f 	add.w	r2, r3, #15
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 021f 	add.w	r2, r3, #31
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  hltdc->Init.Backcolor.Blue  = 0x00;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f004 fdf4 	bl	8007298 <HAL_LTDC_Init>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	50001000 	.word	0x50001000
 80026c0:	200002ac 	.word	0x200002ac

080026c4 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	@ 0x48
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 80026ee:	23ff      	movs	r3, #255	@ 0xff
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026fa:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026fc:	2307      	movs	r3, #7
 80026fe:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f004 fe87 	bl	800744c <HAL_LTDC_ConfigLayer>
 800273e:	4603      	mov	r3, r0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3748      	adds	r7, #72	@ 0x48
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0b4      	sub	sp, #208	@ 0xd0
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002750:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800275c:	2305      	movs	r3, #5
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8002760:	2384      	movs	r3, #132	@ 0x84
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8002764:	2302      	movs	r3, #2
 8002766:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 8002768:	2302      	movs	r3, #2
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800276c:	2318      	movs	r3, #24
 800276e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8002770:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002774:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002776:	2300      	movs	r3, #0
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	4618      	mov	r0, r3
 8002784:	f006 fc0c 	bl	8008fa0 <HAL_RCCEx_PeriphCLKConfig>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	37d0      	adds	r7, #208	@ 0xd0
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027a8:	f06f 0301 	mvn.w	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e009      	b.n	80027c4 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80027b0:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <BSP_LCD_SetActiveLayer+0x40>)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3308      	adds	r3, #8
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000290 	.word	0x20000290

080027d8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027ec:	f06f 0301 	mvn.w	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e00a      	b.n	800280a <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80027f4:	4908      	ldr	r1, [pc, #32]	@ (8002818 <BSP_LCD_GetPixelFormat+0x40>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	330c      	adds	r3, #12
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000290 	.word	0x20000290

0800281c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002830:	f06f 0301 	mvn.w	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e00e      	b.n	8002856 <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <BSP_LCD_GetXSize+0x48>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002842:	4909      	ldr	r1, [pc, #36]	@ (8002868 <BSP_LCD_GetXSize+0x4c>)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	2000015c 	.word	0x2000015c
 8002868:	20000290 	.word	0x20000290

0800286c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002880:	f06f 0301 	mvn.w	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e00f      	b.n	80028a8 <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <BSP_LCD_GetYSize+0x4c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002892:	490a      	ldr	r1, [pc, #40]	@ (80028bc <BSP_LCD_GetYSize+0x50>)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3304      	adds	r3, #4
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000015c 	.word	0x2000015c
 80028bc:	20000290 	.word	0x20000290

080028c0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08f      	sub	sp, #60	@ 0x3c
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	330a      	adds	r3, #10
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	330b      	adds	r3, #11
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	441a      	add	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	441a      	add	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	330d      	adds	r3, #13
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4413      	add	r3, r2
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3312      	adds	r3, #18
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	3313      	adds	r3, #19
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	441a      	add	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	441a      	add	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	3315      	adds	r3, #21
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4413      	add	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3316      	adds	r3, #22
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3317      	adds	r3, #23
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	441a      	add	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3318      	adds	r3, #24
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	441a      	add	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	3319      	adds	r3, #25
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	331c      	adds	r3, #28
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	331d      	adds	r3, #29
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	4413      	add	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800295e:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <BSP_LCD_DrawBitmap+0x19c>)
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3308      	adds	r3, #8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3b      	ldr	r2, [pc, #236]	@ (8002a60 <BSP_LCD_DrawBitmap+0x1a0>)
 8002972:	2134      	movs	r1, #52	@ 0x34
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	@ 0x5c
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	4837      	ldr	r0, [pc, #220]	@ (8002a5c <BSP_LCD_DrawBitmap+0x19c>)
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4403      	add	r3, r0
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fb03 f202 	mul.w	r2, r3, r2
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	18d0      	adds	r0, r2, r3
 8002998:	4c30      	ldr	r4, [pc, #192]	@ (8002a5c <BSP_LCD_DrawBitmap+0x19c>)
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4423      	add	r3, r4
 80029a6:	3310      	adds	r3, #16
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fb00 f303 	mul.w	r3, r0, r3
 80029ae:	440b      	add	r3, r1
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3b20      	subs	r3, #32
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d802      	bhi.n	80029c0 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	e008      	b.n	80029d2 <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	3b10      	subs	r3, #16
 80029c4:	2b07      	cmp	r3, #7
 80029c6:	d802      	bhi.n	80029ce <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 80029c8:	2302      	movs	r3, #2
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e001      	b.n	80029d2 <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 80029ce:	2301      	movs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	08d2      	lsrs	r2, r2, #3
 80029e0:	fb03 f202 	mul.w	r2, r3, r2
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	4413      	add	r3, r2
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f2:	e029      	b.n	8002a48 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80029f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fad6 	bl	8002fb0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002a04:	4915      	ldr	r1, [pc, #84]	@ (8002a5c <BSP_LCD_DrawBitmap+0x19c>)
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4811      	ldr	r0, [pc, #68]	@ (8002a5c <BSP_LCD_DrawBitmap+0x19c>)
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4403      	add	r3, r0
 8002a22:	3310      	adds	r3, #16
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a2c:	4413      	add	r3, r2
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	4413      	add	r3, r2
 8002a40:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	3301      	adds	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3d1      	bcc.n	80029f4 <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 8002a50:	69fb      	ldr	r3, [r7, #28]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3734      	adds	r7, #52	@ 0x34
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000290 	.word	0x20000290
 8002a60:	200001e8 	.word	0x200001e8

08002a64 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e035      	b.n	8002ae4 <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e02b      	b.n	8002ad6 <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3302      	adds	r3, #2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	18d1      	adds	r1, r2, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	441a      	add	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f99e 	bl	8002df4 <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 8002ab8:	490f      	ldr	r1, [pc, #60]	@ (8002af8 <BSP_LCD_FillRGBRect+0x94>)
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3310      	adds	r3, #16
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d3cf      	bcc.n	8002a7e <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3c5      	bcc.n	8002a78 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000290 	.word	0x20000290

08002afc <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002b0a:	4928      	ldr	r1, [pc, #160]	@ (8002bac <BSP_LCD_DrawHLine+0xb0>)
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3308      	adds	r3, #8
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <BSP_LCD_DrawHLine+0xb4>)
 8002b1e:	2134      	movs	r1, #52	@ 0x34
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	335c      	adds	r3, #92	@ 0x5c
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	4820      	ldr	r0, [pc, #128]	@ (8002bac <BSP_LCD_DrawHLine+0xb0>)
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4403      	add	r3, r0
 8002b38:	3310      	adds	r3, #16
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	4c1b      	ldr	r4, [pc, #108]	@ (8002bac <BSP_LCD_DrawHLine+0xb0>)
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4423      	add	r3, r4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb03 f202 	mul.w	r2, r3, r2
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	fb00 f303 	mul.w	r3, r0, r3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	18d1      	adds	r1, r2, r3
 8002b64:	4811      	ldr	r0, [pc, #68]	@ (8002bac <BSP_LCD_DrawHLine+0xb0>)
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4403      	add	r3, r0
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d90a      	bls.n	8002b8e <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002b78:	490c      	ldr	r1, [pc, #48]	@ (8002bac <BSP_LCD_DrawHLine+0xb0>)
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2300      	movs	r3, #0
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f993 	bl	8002ec8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	20000290 	.word	0x20000290
 8002bb0:	200001e8 	.word	0x200001e8

08002bb4 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b089      	sub	sp, #36	@ 0x24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002bc2:	492d      	ldr	r1, [pc, #180]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <BSP_LCD_DrawVLine+0xc8>)
 8002bd6:	2134      	movs	r1, #52	@ 0x34
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	335c      	adds	r3, #92	@ 0x5c
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	4825      	ldr	r0, [pc, #148]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4403      	add	r3, r0
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	4c20      	ldr	r4, [pc, #128]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4423      	add	r3, r4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	fb03 f202 	mul.w	r2, r3, r2
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	fb00 f303 	mul.w	r3, r0, r3
 8002c12:	440b      	add	r3, r1
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	18d1      	adds	r1, r2, r3
 8002c1c:	4816      	ldr	r0, [pc, #88]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4403      	add	r3, r0
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	d90b      	bls.n	8002c4a <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002c32:	4911      	ldr	r1, [pc, #68]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3304      	adds	r3, #4
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002c4a:	6979      	ldr	r1, [r7, #20]
 8002c4c:	480a      	ldr	r0, [pc, #40]	@ (8002c78 <BSP_LCD_DrawVLine+0xc4>)
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4403      	add	r3, r0
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c60:	9201      	str	r2, [sp, #4]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f92d 	bl	8002ec8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000290 	.word	0x20000290
 8002c7c:	200001e8 	.word	0x200001e8

08002c80 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8002c8e:	4921      	ldr	r1, [pc, #132]	@ (8002d14 <BSP_LCD_FillRect+0x94>)
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <BSP_LCD_FillRect+0x98>)
 8002ca2:	2134      	movs	r1, #52	@ 0x34
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	@ 0x5c
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	4819      	ldr	r0, [pc, #100]	@ (8002d14 <BSP_LCD_FillRect+0x94>)
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4403      	add	r3, r0
 8002cbc:	3310      	adds	r3, #16
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	4c14      	ldr	r4, [pc, #80]	@ (8002d14 <BSP_LCD_FillRect+0x94>)
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4423      	add	r3, r4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	440b      	add	r3, r1
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	480b      	ldr	r0, [pc, #44]	@ (8002d14 <BSP_LCD_FillRect+0x94>)
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4403      	add	r3, r0
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfa:	9201      	str	r2, [sp, #4]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f8e0 	bl	8002ec8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000290 	.word	0x20000290
 8002d18:	200001e8 	.word	0x200001e8

08002d1c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002d2a:	4930      	ldr	r1, [pc, #192]	@ (8002dec <BSP_LCD_ReadPixel+0xd0>)
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3308      	adds	r3, #8
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <BSP_LCD_ReadPixel+0xd4>)
 8002d3e:	2134      	movs	r1, #52	@ 0x34
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3348      	adds	r3, #72	@ 0x48
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d122      	bne.n	8002d94 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002d4e:	4927      	ldr	r1, [pc, #156]	@ (8002dec <BSP_LCD_ReadPixel+0xd0>)
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <BSP_LCD_ReadPixel+0xd4>)
 8002d62:	2134      	movs	r1, #52	@ 0x34
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	335c      	adds	r3, #92	@ 0x5c
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	481f      	ldr	r0, [pc, #124]	@ (8002dec <BSP_LCD_ReadPixel+0xd0>)
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4403      	add	r3, r0
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	fb03 f202 	mul.w	r2, r3, r2
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e023      	b.n	8002ddc <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8002d94:	4915      	ldr	r1, [pc, #84]	@ (8002dec <BSP_LCD_ReadPixel+0xd0>)
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3308      	adds	r3, #8
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <BSP_LCD_ReadPixel+0xd4>)
 8002da8:	2134      	movs	r1, #52	@ 0x34
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	@ 0x5c
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	480d      	ldr	r0, [pc, #52]	@ (8002dec <BSP_LCD_ReadPixel+0xd0>)
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	fb03 f202 	mul.w	r2, r3, r2
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000290 	.word	0x20000290
 8002df0:	200001e8 	.word	0x200001e8

08002df4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e02:	492f      	ldr	r1, [pc, #188]	@ (8002ec0 <BSP_LCD_WritePixel+0xcc>)
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3308      	adds	r3, #8
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <BSP_LCD_WritePixel+0xd0>)
 8002e16:	2134      	movs	r1, #52	@ 0x34
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3348      	adds	r3, #72	@ 0x48
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d122      	bne.n	8002e6c <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002e26:	4926      	ldr	r1, [pc, #152]	@ (8002ec0 <BSP_LCD_WritePixel+0xcc>)
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3308      	adds	r3, #8
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <BSP_LCD_WritePixel+0xd0>)
 8002e3a:	2134      	movs	r1, #52	@ 0x34
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	335c      	adds	r3, #92	@ 0x5c
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	481e      	ldr	r0, [pc, #120]	@ (8002ec0 <BSP_LCD_WritePixel+0xcc>)
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	fb03 f202 	mul.w	r2, r3, r2
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	461a      	mov	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e021      	b.n	8002eb0 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8002e6c:	4914      	ldr	r1, [pc, #80]	@ (8002ec0 <BSP_LCD_WritePixel+0xcc>)
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <BSP_LCD_WritePixel+0xd0>)
 8002e80:	2134      	movs	r1, #52	@ 0x34
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	335c      	adds	r3, #92	@ 0x5c
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <BSP_LCD_WritePixel+0xcc>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	b292      	uxth	r2, r2
 8002eae:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000290 	.word	0x20000290
 8002ec4:	200001e8 	.word	0x200001e8

08002ec8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002eda:	4932      	ldr	r1, [pc, #200]	@ (8002fa4 <LL_FillBuffer+0xdc>)
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	330c      	adds	r3, #12
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d129      	bne.n	8002f44 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	0adb      	lsrs	r3, r3, #11
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	3317      	adds	r3, #23
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	0419      	lsls	r1, r3, #16
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f14:	4613      	mov	r3, r2
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	4413      	add	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3321      	adds	r3, #33	@ 0x21
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	4319      	orrs	r1, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	3317      	adds	r3, #23
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f40:	613b      	str	r3, [r7, #16]
    break;
 8002f42:	e002      	b.n	8002f4a <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    break;
 8002f48:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f50:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002f52:	4a15      	ldr	r2, [pc, #84]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002f58:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f60:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <LL_FillBuffer+0xe4>)
 8002f62:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002f64:	4810      	ldr	r0, [pc, #64]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f66:	f001 f8a7 	bl	80040b8 <HAL_DMA2D_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002f70:	2101      	movs	r1, #1
 8002f72:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f74:	f001 fa22 	bl	80043bc <HAL_DMA2D_ConfigLayer>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6939      	ldr	r1, [r7, #16]
 8002f88:	4807      	ldr	r0, [pc, #28]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f8a:	f001 f903 	bl	8004194 <HAL_DMA2D_Start>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8002f94:	2119      	movs	r1, #25
 8002f96:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <LL_FillBuffer+0xe0>)
 8002f98:	f001 f927 	bl	80041ea <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000290 	.word	0x20000290
 8002fa8:	20000180 	.word	0x20000180
 8002fac:	52001000 	.word	0x52001000

08002fb0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002fbe:	4925      	ldr	r1, [pc, #148]	@ (8003054 <LL_ConvertLineToRGB+0xa4>)
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	330c      	adds	r3, #12
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d102      	bne.n	8002fda <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	617b      	str	r3, [r7, #20]
    break;
 8002fd8:	e002      	b.n	8002fe0 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
    break;
 8002fde:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8002fe2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002fe6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8002ffc:	22ff      	movs	r2, #255	@ 0xff
 8002ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003000:	4a15      	ldr	r2, [pc, #84]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 800300c:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 800300e:	4a13      	ldr	r2, [pc, #76]	@ (800305c <LL_ConvertLineToRGB+0xac>)
 8003010:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003012:	4811      	ldr	r0, [pc, #68]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003014:	f001 f850 	bl	80040b8 <HAL_DMA2D_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d115      	bne.n	800304a <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800301e:	2101      	movs	r1, #1
 8003020:	480d      	ldr	r0, [pc, #52]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003022:	f001 f9cb 	bl	80043bc <HAL_DMA2D_ConfigLayer>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10e      	bne.n	800304a <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	2301      	movs	r3, #1
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4808      	ldr	r0, [pc, #32]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003038:	f001 f8ac 	bl	8004194 <HAL_DMA2D_Start>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003042:	2132      	movs	r1, #50	@ 0x32
 8003044:	4804      	ldr	r0, [pc, #16]	@ (8003058 <LL_ConvertLineToRGB+0xa8>)
 8003046:	f001 f8d0 	bl	80041ea <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000290 	.word	0x20000290
 8003058:	20000180 	.word	0x20000180
 800305c:	52001000 	.word	0x52001000

08003060 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <LTDC_MspInit+0x5c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d11e      	bne.n	80030b0 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <LTDC_MspInit+0x60>)
 8003074:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <LTDC_MspInit+0x60>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003082:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <LTDC_MspInit+0x60>)
 8003084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003090:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <LTDC_MspInit+0x60>)
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003096:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <LTDC_MspInit+0x60>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80030a0:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <LTDC_MspInit+0x60>)
 80030a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a6:	4a06      	ldr	r2, [pc, #24]	@ (80030c0 <LTDC_MspInit+0x60>)
 80030a8:	f023 0308 	bic.w	r3, r3, #8
 80030ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	50001000 	.word	0x50001000
 80030c0:	58024400 	.word	0x58024400

080030c4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a11      	ldr	r2, [pc, #68]	@ (8003118 <DMA2D_MspInit+0x54>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11a      	bne.n	800310c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <DMA2D_MspInit+0x58>)
 80030d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030dc:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <DMA2D_MspInit+0x58>)
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <DMA2D_MspInit+0x58>)
 80030e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80030f4:	4b09      	ldr	r3, [pc, #36]	@ (800311c <DMA2D_MspInit+0x58>)
 80030f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f8:	4a08      	ldr	r2, [pc, #32]	@ (800311c <DMA2D_MspInit+0x58>)
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <DMA2D_MspInit+0x58>)
 8003102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003104:	4a05      	ldr	r2, [pc, #20]	@ (800311c <DMA2D_MspInit+0x58>)
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	52001000 	.word	0x52001000
 800311c:	58024400 	.word	0x58024400

08003120 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003130:	d11e      	bne.n	8003170 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003132:	4b12      	ldr	r3, [pc, #72]	@ (800317c <DSI_MspInit+0x5c>)
 8003134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003138:	4a10      	ldr	r2, [pc, #64]	@ (800317c <DSI_MspInit+0x5c>)
 800313a:	f043 0310 	orr.w	r3, r3, #16
 800313e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <DSI_MspInit+0x5c>)
 8003144:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 8003150:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <DSI_MspInit+0x5c>)
 8003152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003156:	4a09      	ldr	r2, [pc, #36]	@ (800317c <DSI_MspInit+0x5c>)
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <DSI_MspInit+0x5c>)
 8003162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <DSI_MspInit+0x5c>)
 8003168:	f023 0310 	bic.w	r3, r3, #16
 800316c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	58024400 	.word	0x58024400

08003180 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60ba      	str	r2, [r7, #8]
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	81fb      	strh	r3, [r7, #14]
 800318e:	460b      	mov	r3, r1
 8003190:	81bb      	strh	r3, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d812      	bhi.n	80031c6 <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80031a0:	89f9      	ldrh	r1, [r7, #14]
 80031a2:	89b8      	ldrh	r0, [r7, #12]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4603      	mov	r3, r0
 80031b0:	2215      	movs	r2, #21
 80031b2:	4810      	ldr	r0, [pc, #64]	@ (80031f4 <DSI_IO_Write+0x74>)
 80031b4:	f001 fe8c 	bl	8004ed0 <HAL_DSI_ShortWrite>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80031be:	f06f 0307 	mvn.w	r3, #7
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e010      	b.n	80031e8 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80031c6:	89f9      	ldrh	r1, [r7, #14]
 80031c8:	88f8      	ldrh	r0, [r7, #6]
 80031ca:	89bb      	ldrh	r3, [r7, #12]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	9201      	str	r2, [sp, #4]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4603      	mov	r3, r0
 80031d4:	2239      	movs	r2, #57	@ 0x39
 80031d6:	4807      	ldr	r0, [pc, #28]	@ (80031f4 <DSI_IO_Write+0x74>)
 80031d8:	f001 fe9c 	bl	8004f14 <HAL_DSI_LongWrite>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80031e2:	f06f 0307 	mvn.w	r3, #7
 80031e6:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80031e8:	697b      	ldr	r3, [r7, #20]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000164 	.word	0x20000164

080031f8 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af04      	add	r7, sp, #16
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	81fb      	strh	r3, [r7, #14]
 8003206:	460b      	mov	r3, r1
 8003208:	81bb      	strh	r3, [r7, #12]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8003212:	89f9      	ldrh	r1, [r7, #14]
 8003214:	88f8      	ldrh	r0, [r7, #6]
 8003216:	89bb      	ldrh	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2306      	movs	r3, #6
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4603      	mov	r3, r0
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	4807      	ldr	r0, [pc, #28]	@ (8003244 <DSI_IO_Read+0x4c>)
 8003228:	f001 ff0c 	bl	8005044 <HAL_DSI_Read>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003232:	f06f 0307 	mvn.w	r3, #7
 8003236:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003238:	697b      	ldr	r3, [r7, #20]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000164 	.word	0x20000164

08003248 <NT35510_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
int32_t NT35510_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
  NT35510_IO_t              IOCtx;
  static NT35510_Object_t   NT35510Obj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <NT35510_Probe+0x9c>)
 800325c:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <NT35510_Probe+0xa0>)
 8003260:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <NT35510_Probe+0xa4>)
 8003264:	613b      	str	r3, [r7, #16]

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	4619      	mov	r1, r3
 800326c:	4820      	ldr	r0, [pc, #128]	@ (80032f0 <NT35510_Probe+0xa8>)
 800326e:	f7fd f993 	bl	8000598 <NT35510_RegisterBusIO>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <NT35510_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003278:	f06f 0307 	mvn.w	r3, #7
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e02c      	b.n	80032da <NT35510_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <NT35510_Probe+0xac>)
 8003282:	4a1b      	ldr	r2, [pc, #108]	@ (80032f0 <NT35510_Probe+0xa8>)
 8003284:	601a      	str	r2, [r3, #0]

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <NT35510_Probe+0xac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f107 0218 	add.w	r2, r7, #24
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fc19 	bl	8000ac8 <NT35510_ReadID>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <NT35510_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800329c:	f06f 0304 	mvn.w	r3, #4
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e01a      	b.n	80032da <NT35510_Probe+0x92>
    }
    else if (id != NT35510_ID)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b80      	cmp	r3, #128	@ 0x80
 80032a8:	d003      	beq.n	80032b2 <NT35510_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80032aa:	f06f 0306 	mvn.w	r3, #6
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e013      	b.n	80032da <NT35510_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 80032b2:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <NT35510_Probe+0xb0>)
 80032b4:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <NT35510_Probe+0xb4>)
 80032b6:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <NT35510_Probe+0xb0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <NT35510_Probe+0xac>)
 80032c0:	6810      	ldr	r0, [r2, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4798      	blx	r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <NT35510_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80032ce:	f06f 0304 	mvn.w	r3, #4
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e001      	b.n	80032da <NT35510_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 80032da:	69fb      	ldr	r3, [r7, #28]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	080020ed 	.word	0x080020ed
 80032e8:	08003181 	.word	0x08003181
 80032ec:	080031f9 	.word	0x080031f9
 80032f0:	200002b0 	.word	0x200002b0
 80032f4:	20000160 	.word	0x20000160
 80032f8:	2000015c 	.word	0x2000015c
 80032fc:	20000000 	.word	0x20000000

08003300 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <OTM8009A_Probe+0x9c>)
 8003314:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8003316:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <OTM8009A_Probe+0xa0>)
 8003318:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 800331a:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <OTM8009A_Probe+0xa4>)
 800331c:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	4619      	mov	r1, r3
 8003324:	4820      	ldr	r0, [pc, #128]	@ (80033a8 <OTM8009A_Probe+0xa8>)
 8003326:	f7fd fe27 	bl	8000f78 <OTM8009A_RegisterBusIO>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <OTM8009A_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003330:	f06f 0307 	mvn.w	r3, #7
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e02c      	b.n	8003392 <OTM8009A_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8003338:	4b1c      	ldr	r3, [pc, #112]	@ (80033ac <OTM8009A_Probe+0xac>)
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <OTM8009A_Probe+0xa8>)
 800333c:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <OTM8009A_Probe+0xac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f107 0218 	add.w	r2, r7, #24
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fc19 	bl	8001b80 <OTM8009A_ReadID>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <OTM8009A_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003354:	f06f 0304 	mvn.w	r3, #4
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e01a      	b.n	8003392 <OTM8009A_Probe+0x92>
    }
    else if (id != OTM8009A_ID)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b40      	cmp	r3, #64	@ 0x40
 8003360:	d003      	beq.n	800336a <OTM8009A_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003362:	f06f 0306 	mvn.w	r3, #6
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	e013      	b.n	8003392 <OTM8009A_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800336a:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <OTM8009A_Probe+0xb0>)
 800336c:	4a11      	ldr	r2, [pc, #68]	@ (80033b4 <OTM8009A_Probe+0xb4>)
 800336e:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8003370:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <OTM8009A_Probe+0xb0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <OTM8009A_Probe+0xac>)
 8003378:	6810      	ldr	r0, [r2, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <OTM8009A_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003386:	f06f 0304 	mvn.w	r3, #4
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e001      	b.n	8003392 <OTM8009A_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 8003392:	69fb      	ldr	r3, [r7, #28]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080020ed 	.word	0x080020ed
 80033a0:	08003181 	.word	0x08003181
 80033a4:	080031f9 	.word	0x080031f9
 80033a8:	200002d0 	.word	0x200002d0
 80033ac:	20000160 	.word	0x20000160
 80033b0:	2000015c 	.word	0x2000015c
 80033b4:	2000004c 	.word	0x2000004c

080033b8 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033ca:	f06f 0301 	mvn.w	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d0:	e063      	b.n	800349a <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 80033d2:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <BSP_SD_Init+0xec>)
 80033d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d8:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <BSP_SD_Init+0xec>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033e2:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <BSP_SD_Init+0xec>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 80033f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fa:	2302      	movs	r3, #2
 80033fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4619      	mov	r1, r3
 8003408:	4827      	ldr	r0, [pc, #156]	@ (80034a8 <BSP_SD_Init+0xf0>)
 800340a:	f001 fedf 	bl	80051cc <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f876 	bl	8003500 <BSP_SD_IsDetected>
 8003414:	4603      	mov	r3, r0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d003      	beq.n	8003422 <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800341a:	f06f 0306 	mvn.w	r3, #6
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	e03b      	b.n	800349a <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	015b      	lsls	r3, r3, #5
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ac <BSP_SD_Init+0xf4>)
 800342e:	4413      	add	r3, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f929 	bl	8003688 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d12e      	bne.n	800349a <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	015b      	lsls	r3, r3, #5
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4a19      	ldr	r2, [pc, #100]	@ (80034ac <BSP_SD_Init+0xf4>)
 8003448:	4413      	add	r3, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f830 	bl	80034b0 <MX_SDMMC1_SD_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8003456:	f06f 0303 	mvn.w	r3, #3
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
 800345c:	e01d      	b.n	800349a <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a10      	ldr	r2, [pc, #64]	@ (80034ac <BSP_SD_Init+0xf4>)
 800346a:	4413      	add	r3, r2
 800346c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003470:	4618      	mov	r0, r3
 8003472:	f009 f9a3 	bl	800c7bc <HAL_SD_ConfigWideBusOperation>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800347c:	f06f 0303 	mvn.w	r3, #3
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	e00a      	b.n	800349a <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	015b      	lsls	r3, r3, #5
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a07      	ldr	r2, [pc, #28]	@ (80034ac <BSP_SD_Init+0xf4>)
 8003490:	4413      	add	r3, r2
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f009 faa3 	bl	800c9e0 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	58024400 	.word	0x58024400
 80034a8:	58022000 	.word	0x58022000
 80034ac:	200002f0 	.word	0x200002f0

080034b0 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0f      	ldr	r2, [pc, #60]	@ (80034fc <MX_SDMMC1_SD_Init+0x4c>)
 80034c0:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034d4:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2204      	movs	r2, #4
 80034e0:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f008 fa9a 	bl	800ba1c <HAL_SD_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	52007000 	.word	0x52007000

08003500 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003508:	f06f 0305 	mvn.w	r3, #5
 800350c:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8003514:	f06f 0301 	mvn.w	r3, #1
 8003518:	e00f      	b.n	800353a <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800351a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800351e:	4809      	ldr	r0, [pc, #36]	@ (8003544 <BSP_SD_IsDetected+0x44>)
 8003520:	f002 f804 	bl	800552c <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e001      	b.n	8003538 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58022000 	.word	0x58022000

08003548 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800356a:	f06f 0301 	mvn.w	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e013      	b.n	800359a <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	015b      	lsls	r3, r3, #5
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <BSP_SD_ReadBlocks+0x5c>)
 800357e:	1898      	adds	r0, r3, r2
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	f008 fb71 	bl	800bc70 <HAL_SD_ReadBlocks>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003594:	f06f 0303 	mvn.w	r3, #3
 8003598:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 800359a:	697b      	ldr	r3, [r7, #20]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200002f0 	.word	0x200002f0

080035a8 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2264      	movs	r2, #100	@ 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035ca:	f06f 0301 	mvn.w	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e013      	b.n	80035fa <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4a09      	ldr	r2, [pc, #36]	@ (8003604 <BSP_SD_WriteBlocks+0x5c>)
 80035de:	1898      	adds	r0, r3, r2
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f008 fccb 	bl	800bf84 <HAL_SD_WriteBlocks>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80035f4:	f06f 0303 	mvn.w	r3, #3
 80035f8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80035fa:	697b      	ldr	r3, [r7, #20]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200002f0 	.word	0x200002f0

08003608 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4a07      	ldr	r2, [pc, #28]	@ (8003638 <BSP_SD_GetCardState+0x30>)
 800361c:	4413      	add	r3, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f009 fa9a 	bl	800cb58 <HAL_SD_GetCardState>
 8003624:	4603      	mov	r3, r0
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf14      	ite	ne
 800362a:	2301      	movne	r3, #1
 800362c:	2300      	moveq	r3, #0
 800362e:	b2db      	uxtb	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200002f0 	.word	0x200002f0

0800363c <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003650:	f06f 0301 	mvn.w	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e010      	b.n	800367a <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4a08      	ldr	r2, [pc, #32]	@ (8003684 <BSP_SD_GetCardInfo+0x48>)
 8003664:	4413      	add	r3, r2
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f009 f87b 	bl	800c764 <HAL_SD_GetCardInfo>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003674:	f06f 0303 	mvn.w	r3, #3
 8003678:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200002f0 	.word	0x200002f0

08003688 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a44      	ldr	r2, [pc, #272]	@ (80037a4 <SD_MspInit+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f040 8081 	bne.w	800379c <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800369a:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <SD_MspInit+0x120>)
 800369c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a0:	4a41      	ldr	r2, [pc, #260]	@ (80037a8 <SD_MspInit+0x120>)
 80036a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036aa:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <SD_MspInit+0x120>)
 80036ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 80036b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036bc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036be:	2301      	movs	r3, #1
 80036c0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c6:	2303      	movs	r3, #3
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4619      	mov	r1, r3
 80036d0:	4836      	ldr	r0, [pc, #216]	@ (80037ac <SD_MspInit+0x124>)
 80036d2:	f001 fd7b 	bl	80051cc <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036dc:	4833      	ldr	r0, [pc, #204]	@ (80037ac <SD_MspInit+0x124>)
 80036de:	f001 ff3d 	bl	800555c <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80036e2:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <SD_MspInit+0x120>)
 80036e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <SD_MspInit+0x120>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80036f2:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <SD_MspInit+0x120>)
 80036f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80036f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003700:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <SD_MspInit+0x120>)
 8003702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003706:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <SD_MspInit+0x120>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <SD_MspInit+0x120>)
 8003712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <SD_MspInit+0x120>)
 8003720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <SD_MspInit+0x120>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800372e:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <SD_MspInit+0x120>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800373c:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <SD_MspInit+0x120>)
 800373e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003742:	4a19      	ldr	r2, [pc, #100]	@ (80037a8 <SD_MspInit+0x120>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800374c:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <SD_MspInit+0x120>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800375e:	2301      	movs	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003762:	2303      	movs	r3, #3
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 8003766:	230c      	movs	r3, #12
 8003768:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800376a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800376e:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	480e      	ldr	r0, [pc, #56]	@ (80037b0 <SD_MspInit+0x128>)
 8003778:	f001 fd28 	bl	80051cc <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 800377c:	2304      	movs	r3, #4
 800377e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	480b      	ldr	r0, [pc, #44]	@ (80037b4 <SD_MspInit+0x12c>)
 8003788:	f001 fd20 	bl	80051cc <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	210e      	movs	r1, #14
 8003790:	2031      	movs	r0, #49	@ 0x31
 8003792:	f000 fbe4 	bl	8003f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003796:	2031      	movs	r0, #49	@ 0x31
 8003798:	f000 fbfb 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  }
}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	@ 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200002f0 	.word	0x200002f0
 80037a8:	58024400 	.word	0x58024400
 80037ac:	58022400 	.word	0x58022400
 80037b0:	58020800 	.word	0x58020800
 80037b4:	58020c00 	.word	0x58020c00

080037b8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80037c6:	f06f 0301 	mvn.w	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e033      	b.n	8003836 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 80037ce:	481c      	ldr	r0, [pc, #112]	@ (8003840 <BSP_SDRAM_Init+0x88>)
 80037d0:	f000 f884 	bl	80038dc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80037d4:	481a      	ldr	r0, [pc, #104]	@ (8003840 <BSP_SDRAM_Init+0x88>)
 80037d6:	f000 f837 	bl	8003848 <MX_SDRAM_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e026      	b.n	8003836 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80037e8:	4b16      	ldr	r3, [pc, #88]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 80037ea:	2208      	movs	r2, #8
 80037ec:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 80037f0:	2203      	movs	r2, #3
 80037f2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80037f4:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 80037f6:	f240 6203 	movw	r2, #1539	@ 0x603
 80037fa:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80037fc:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8003802:	4b10      	ldr	r3, [pc, #64]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 800380a:	2230      	movs	r2, #48	@ 0x30
 800380c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 8003816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800381c:	4909      	ldr	r1, [pc, #36]	@ (8003844 <BSP_SDRAM_Init+0x8c>)
 800381e:	4808      	ldr	r0, [pc, #32]	@ (8003840 <BSP_SDRAM_Init+0x88>)
 8003820:	f7fc fdae 	bl	8000380 <IS42S32800J_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800382a:	f06f 0304 	mvn.w	r3, #4
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000036c 	.word	0x2000036c
 8003844:	200003a0 	.word	0x200003a0

08003848 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a20      	ldr	r2, [pc, #128]	@ (80038d4 <MX_SDRAM_Init+0x8c>)
 8003854:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2240      	movs	r2, #64	@ 0x40
 8003872:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800387a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003888:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <MX_SDRAM_Init+0x90>)
 8003894:	2200      	movs	r2, #0
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8003898:	2302      	movs	r3, #2
 800389a:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800389c:	2307      	movs	r3, #7
 800389e:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80038a0:	2304      	movs	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80038a4:	2307      	movs	r3, #7
 80038a6:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80038a8:	2302      	movs	r3, #2
 80038aa:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80038ac:	2302      	movs	r3, #2
 80038ae:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80038b0:	2302      	movs	r3, #2
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f009 fdf4 	bl	800d4a8 <HAL_SDRAM_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	@ 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	52004140 	.word	0x52004140
 80038d8:	2000036c 	.word	0x2000036c

080038dc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b090      	sub	sp, #64	@ 0x40
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038e4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80038e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80038ea:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80038ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80038f4:	4b7b      	ldr	r3, [pc, #492]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80038f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80038fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003900:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003902:	4b78      	ldr	r3, [pc, #480]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003904:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003908:	4a76      	ldr	r2, [pc, #472]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003912:	4b74      	ldr	r3, [pc, #464]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003914:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003920:	4b70      	ldr	r3, [pc, #448]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003926:	4a6f      	ldr	r2, [pc, #444]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003928:	f043 0308 	orr.w	r3, r3, #8
 800392c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003930:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800393e:	4b69      	ldr	r3, [pc, #420]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003944:	4a67      	ldr	r2, [pc, #412]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003946:	f043 0310 	orr.w	r3, r3, #16
 800394a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800394e:	4b65      	ldr	r3, [pc, #404]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800395c:	4b61      	ldr	r3, [pc, #388]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800395e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003962:	4a60      	ldr	r2, [pc, #384]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003964:	f043 0320 	orr.w	r3, r3, #32
 8003968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800396c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800397a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003980:	4a58      	ldr	r2, [pc, #352]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 8003982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800398a:	4b56      	ldr	r3, [pc, #344]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800398c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003998:	4b52      	ldr	r3, [pc, #328]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 800399a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800399e:	4a51      	ldr	r2, [pc, #324]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80039a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039a8:	4b4e      	ldr	r3, [pc, #312]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80039aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80039b6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80039b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039bc:	4a49      	ldr	r2, [pc, #292]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <SDRAM_MspInit+0x208>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80039d8:	2301      	movs	r3, #1
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80039dc:	2303      	movs	r3, #3
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80039e0:	230c      	movs	r3, #12
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80039e4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80039e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80039ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ee:	4619      	mov	r1, r3
 80039f0:	483d      	ldr	r0, [pc, #244]	@ (8003ae8 <SDRAM_MspInit+0x20c>)
 80039f2:	f001 fbeb 	bl	80051cc <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80039f6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80039fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a00:	4619      	mov	r1, r3
 8003a02:	483a      	ldr	r0, [pc, #232]	@ (8003aec <SDRAM_MspInit+0x210>)
 8003a04:	f001 fbe2 	bl	80051cc <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003a08:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a12:	4619      	mov	r1, r3
 8003a14:	4836      	ldr	r0, [pc, #216]	@ (8003af0 <SDRAM_MspInit+0x214>)
 8003a16:	f001 fbd9 	bl	80051cc <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8003a1a:	f248 1337 	movw	r3, #33079	@ 0x8137
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a24:	4619      	mov	r1, r3
 8003a26:	4833      	ldr	r0, [pc, #204]	@ (8003af4 <SDRAM_MspInit+0x218>)
 8003a28:	f001 fbd0 	bl	80051cc <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8003a2c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a36:	4619      	mov	r1, r3
 8003a38:	482f      	ldr	r0, [pc, #188]	@ (8003af8 <SDRAM_MspInit+0x21c>)
 8003a3a:	f001 fbc7 	bl	80051cc <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003a3e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a48:	4619      	mov	r1, r3
 8003a4a:	482c      	ldr	r0, [pc, #176]	@ (8003afc <SDRAM_MspInit+0x220>)
 8003a4c:	f001 fbbe 	bl	80051cc <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8003a50:	4b2b      	ldr	r3, [pc, #172]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a56:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8003a58:	4b29      	ldr	r3, [pc, #164]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a5e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a62:	2280      	movs	r2, #128	@ 0x80
 8003a64:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003a66:	4b26      	ldr	r3, [pc, #152]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8003a6c:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a6e:	f240 2202 	movw	r2, #514	@ 0x202
 8003a72:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8003a74:	4b22      	ldr	r3, [pc, #136]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a76:	f640 0208 	movw	r2, #2056	@ 0x808
 8003a7a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8003a7c:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8003a82:	4b1f      	ldr	r3, [pc, #124]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8003a9c:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8003aae:	4b14      	ldr	r3, [pc, #80]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003ab0:	4a14      	ldr	r2, [pc, #80]	@ (8003b04 <SDRAM_MspInit+0x228>)
 8003ab2:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aba:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8003ac0:	480f      	ldr	r0, [pc, #60]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003ac2:	f003 fee7 	bl	8007894 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8003ac6:	480e      	ldr	r0, [pc, #56]	@ (8003b00 <SDRAM_MspInit+0x224>)
 8003ac8:	f003 fe98 	bl	80077fc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	210f      	movs	r1, #15
 8003ad0:	207a      	movs	r0, #122	@ 0x7a
 8003ad2:	f000 fa44 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003ad6:	207a      	movs	r0, #122	@ 0x7a
 8003ad8:	f000 fa5b 	bl	8003f92 <HAL_NVIC_EnableIRQ>
}
 8003adc:	bf00      	nop
 8003ade:	3740      	adds	r7, #64	@ 0x40
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	58020c00 	.word	0x58020c00
 8003aec:	58021000 	.word	0x58021000
 8003af0:	58021400 	.word	0x58021400
 8003af4:	58021800 	.word	0x58021800
 8003af8:	58021c00 	.word	0x58021c00
 8003afc:	58022000 	.word	0x58022000
 8003b00:	200003c0 	.word	0x200003c0
 8003b04:	52000040 	.word	0x52000040

08003b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <SystemInit+0xcc>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	4a30      	ldr	r2, [pc, #192]	@ (8003bd4 <SystemInit+0xcc>)
 8003b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <SystemInit+0xcc>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd4 <SystemInit+0xcc>)
 8003b22:	f043 0310 	orr.w	r3, r3, #16
 8003b26:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b28:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <SystemInit+0xd0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <SystemInit+0xd0>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b34:	4b28      	ldr	r3, [pc, #160]	@ (8003bd8 <SystemInit+0xd0>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <SystemInit+0xd0>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4926      	ldr	r1, [pc, #152]	@ (8003bd8 <SystemInit+0xd0>)
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <SystemInit+0xd4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <SystemInit+0xd0>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <SystemInit+0xd0>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <SystemInit+0xd0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003b58:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <SystemInit+0xd0>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <SystemInit+0xd0>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <SystemInit+0xd0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <SystemInit+0xd0>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <SystemInit+0xd0>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8003b76:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <SystemInit+0xd0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003b7c:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <SystemInit+0xd0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <SystemInit+0xd0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <SystemInit+0xd0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <SystemInit+0xd0>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b94:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <SystemInit+0xd0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <SystemInit+0xd8>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	4a10      	ldr	r2, [pc, #64]	@ (8003be0 <SystemInit+0xd8>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <SystemInit+0xdc>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <SystemInit+0xe0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb2:	d202      	bcs.n	8003bba <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <SystemInit+0xe4>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <SystemInit+0xe8>)
 8003bbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8003bc2:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <SystemInit+0xcc>)
 8003bc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003bc8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003be0:	580000c0 	.word	0x580000c0
 8003be4:	5c001000 	.word	0x5c001000
 8003be8:	ffff0000 	.word	0xffff0000
 8003bec:	51008108 	.word	0x51008108
 8003bf0:	52004000 	.word	0x52004000

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfa:	2003      	movs	r0, #3
 8003bfc:	f000 f9a4 	bl	8003f48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c00:	f005 f80e 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <HAL_Init+0x68>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	4913      	ldr	r1, [pc, #76]	@ (8003c60 <HAL_Init+0x6c>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <HAL_Init+0x68>)
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a0e      	ldr	r2, [pc, #56]	@ (8003c60 <HAL_Init+0x6c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	4a0b      	ldr	r2, [pc, #44]	@ (8003c64 <HAL_Init+0x70>)
 8003c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c38:	4a0b      	ldr	r2, [pc, #44]	@ (8003c68 <HAL_Init+0x74>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c3e:	200f      	movs	r0, #15
 8003c40:	f000 f81c 	bl	8003c7c <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e002      	b.n	8003c54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c4e:	f000 f80d 	bl	8003c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	08013e08 	.word	0x08013e08
 8003c64:	200000ac 	.word	0x200000ac
 8003c68:	200000a8 	.word	0x200000a8

08003c6c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c84:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_InitTick+0x60>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e021      	b.n	8003cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c90:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <HAL_InitTick+0x64>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <HAL_InitTick+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f981 	bl	8003fae <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00e      	b.n	8003cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d80a      	bhi.n	8003cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	f000 f94b 	bl	8003f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc8:	4a06      	ldr	r2, [pc, #24]	@ (8003ce4 <HAL_InitTick+0x68>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200000b4 	.word	0x200000b4
 8003ce0:	200000a8 	.word	0x200000a8
 8003ce4:	200000b0 	.word	0x200000b0

08003ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_IncTick+0x20>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_IncTick+0x24>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <HAL_IncTick+0x24>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200000b4 	.word	0x200000b4
 8003d0c:	2000042c 	.word	0x2000042c

08003d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return uwTick;
 8003d14:	4b03      	ldr	r3, [pc, #12]	@ (8003d24 <HAL_GetTick+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000042c 	.word	0x2000042c

08003d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7ff ffee 	bl	8003d10 <HAL_GetTick>
 8003d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d005      	beq.n	8003d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_Delay+0x44>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d4e:	bf00      	nop
 8003d50:	f7ff ffde 	bl	8003d10 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d8f7      	bhi.n	8003d50 <HAL_Delay+0x28>
  {
  }
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200000b4 	.word	0x200000b4

08003d70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003d74:	4b03      	ldr	r3, [pc, #12]	@ (8003d84 <HAL_GetREVID+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0c1b      	lsrs	r3, r3, #16
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	5c001000 	.word	0x5c001000

08003d88 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_EnableCompensationCell+0x1c>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a04      	ldr	r2, [pc, #16]	@ (8003da4 <HAL_EnableCompensationCell+0x1c>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6213      	str	r3, [r2, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	58000400 	.word	0x58000400

08003da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x40>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd6:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x40>)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00
 8003dec:	05fa0000 	.word	0x05fa0000

08003df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df4:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <__NVIC_GetPriorityGrouping+0x18>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	f003 0307 	and.w	r3, r3, #7
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db0b      	blt.n	8003e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	4907      	ldr	r1, [pc, #28]	@ (8003e44 <__NVIC_EnableIRQ+0x38>)
 8003e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	@ (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	@ (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	@ 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
         );
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	@ 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f14:	d301      	bcc.n	8003f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00f      	b.n	8003f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f44 <SysTick_Config+0x40>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f22:	210f      	movs	r1, #15
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f7ff ff8e 	bl	8003e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <SysTick_Config+0x40>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <SysTick_Config+0x40>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff29 	bl	8003da8 <__NVIC_SetPriorityGrouping>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6c:	f7ff ff40 	bl	8003df0 <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff90 	bl	8003e9c <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff5f 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff33 	bl	8003e0c <__NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ffa4 	bl	8003f04 <SysTick_Config>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003fcc:	f3bf 8f5f 	dmb	sy
}
 8003fd0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003fd2:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_MPU_Disable+0x28>)
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	4a06      	ldr	r2, [pc, #24]	@ (8003ff0 <HAL_MPU_Disable+0x28>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fdc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003fde:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_MPU_Disable+0x2c>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000ed00 	.word	0xe000ed00
 8003ff4:	e000ed90 	.word	0xe000ed90

08003ff8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004000:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <HAL_MPU_Enable+0x38>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800400a:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <HAL_MPU_Enable+0x3c>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <HAL_MPU_Enable+0x3c>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004016:	f3bf 8f4f 	dsb	sy
}
 800401a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800401c:	f3bf 8f6f 	isb	sy
}
 8004020:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000ed90 	.word	0xe000ed90
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	785a      	ldrb	r2, [r3, #1]
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_MPU_ConfigRegion+0x7c>)
 8004046:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004048:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <HAL_MPU_ConfigRegion+0x7c>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <HAL_MPU_ConfigRegion+0x7c>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004054:	4a17      	ldr	r2, [pc, #92]	@ (80040b4 <HAL_MPU_ConfigRegion+0x7c>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7b1b      	ldrb	r3, [r3, #12]
 8004060:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7adb      	ldrb	r3, [r3, #11]
 8004066:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004068:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7a9b      	ldrb	r3, [r3, #10]
 800406e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004070:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7b5b      	ldrb	r3, [r3, #13]
 8004076:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7b9b      	ldrb	r3, [r3, #14]
 800407e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7bdb      	ldrb	r3, [r3, #15]
 8004086:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7a5b      	ldrb	r3, [r3, #9]
 800408e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004090:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7a1b      	ldrb	r3, [r3, #8]
 8004096:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004098:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040a4:	6113      	str	r3, [r2, #16]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed90 	.word	0xe000ed90

080040b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e04f      	b.n	800416a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f84e 	bl	8004180 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b20      	ldr	r3, [pc, #128]	@ (8004174 <HAL_DMA2D_Init+0xbc>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6851      	ldr	r1, [r2, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	69d2      	ldr	r2, [r2, #28]
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410e:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <HAL_DMA2D_Init+0xc0>)
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6891      	ldr	r1, [r2, #8]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6992      	ldr	r2, [r2, #24]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <HAL_DMA2D_Init+0xc4>)
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68d1      	ldr	r1, [r2, #12]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	430b      	orrs	r3, r1
 8004138:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	051a      	lsls	r2, r3, #20
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	055b      	lsls	r3, r3, #21
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	fff8ffbf 	.word	0xfff8ffbf
 8004178:	fffffef8 	.word	0xfffffef8
 800417c:	ffff0000 	.word	0xffff0000

08004180 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_DMA2D_Start+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e018      	b.n	80041e2 <HAL_DMA2D_Start+0x4e>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f9a4 	bl	8004518 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d056      	beq.n	80042b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004206:	f7ff fd83 	bl	8003d10 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800420c:	e04b      	b.n	80042a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2221      	movs	r2, #33	@ 0x21
 8004252:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0a5      	b.n	80043b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d01a      	beq.n	80042a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7ff fd4e 	bl	8003d10 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <HAL_DMA2D_PollForTransfer+0x9c>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e086      	b.n	80043b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ac      	beq.n	800420e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d061      	beq.n	800439a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042d6:	f7ff fd1b 	bl	8003d10 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042dc:	e056      	b.n	800438c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02e      	beq.n	800434e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042fe:	f043 0204 	orr.w	r2, r3, #4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004314:	f043 0202 	orr.w	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2229      	movs	r2, #41	@ 0x29
 8004338:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e032      	b.n	80043b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d01a      	beq.n	800438c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7ff fcdb 	bl	8003d10 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <HAL_DMA2D_PollForTransfer+0x182>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2203      	movs	r2, #3
 800437c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e013      	b.n	80043b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0a1      	beq.n	80042de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2212      	movs	r2, #18
 80043a0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_DMA2D_ConfigLayer+0x24>
 80043dc:	2302      	movs	r3, #2
 80043de:	e092      	b.n	8004506 <HAL_DMA2D_ConfigLayer+0x14a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004414:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004420:	4b3c      	ldr	r3, [pc, #240]	@ (8004514 <HAL_DMA2D_ConfigLayer+0x158>)
 8004422:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b0a      	cmp	r3, #10
 800442a:	d003      	beq.n	8004434 <HAL_DMA2D_ConfigLayer+0x78>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b09      	cmp	r3, #9
 8004432:	d107      	bne.n	8004444 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e005      	b.n	8004450 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d120      	bne.n	8004498 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	43db      	mvns	r3, r3
 8004460:	ea02 0103 	and.w	r1, r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	430a      	orrs	r2, r1
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b0a      	cmp	r3, #10
 800447e:	d003      	beq.n	8004488 <HAL_DMA2D_ConfigLayer+0xcc>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b09      	cmp	r3, #9
 8004486:	d135      	bne.n	80044f4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
 8004496:	e02d      	b.n	80044f4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b0b      	cmp	r3, #11
 800449e:	d109      	bne.n	80044b4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	049b      	lsls	r3, r3, #18
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80044b2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	ea02 0103 	and.w	r1, r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b0a      	cmp	r3, #10
 80044dc:	d003      	beq.n	80044e6 <HAL_DMA2D_ConfigLayer+0x12a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d106      	bne.n	80044f4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80044f2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	ff33000f 	.word	0xff33000f

08004518 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004518:	b480      	push	{r7}
 800451a:	b08b      	sub	sp, #44	@ 0x2c
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	041a      	lsls	r2, r3, #16
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004550:	d174      	bne.n	800463c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004558:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004560:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004568:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d108      	bne.n	800458a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	431a      	orrs	r2, r3
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	4313      	orrs	r3, r2
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
 8004588:	e053      	b.n	8004632 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d106      	bne.n	80045a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4313      	orrs	r3, r2
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
 800459e:	e048      	b.n	8004632 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d111      	bne.n	80045cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	0cdb      	lsrs	r3, r3, #19
 80045ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	0a9b      	lsrs	r3, r3, #10
 80045b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	08db      	lsrs	r3, r3, #3
 80045b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	02db      	lsls	r3, r3, #11
 80045c2:	4313      	orrs	r3, r2
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	e032      	b.n	8004632 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d117      	bne.n	8004604 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	0fdb      	lsrs	r3, r3, #31
 80045d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	0cdb      	lsrs	r3, r3, #19
 80045de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	431a      	orrs	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	03db      	lsls	r3, r3, #15
 80045fa:	4313      	orrs	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
 8004602:	e016      	b.n	8004632 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	0f1b      	lsrs	r3, r3, #28
 8004608:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	0b1b      	lsrs	r3, r3, #12
 8004614:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	011a      	lsls	r2, r3, #4
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	431a      	orrs	r2, r3
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004638:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800463a:	e00d      	b.n	8004658 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004644:	d104      	bne.n	8004650 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	e003      	b.n	8004658 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	60da      	str	r2, [r3, #12]
}
 8004658:	bf00      	nop
 800465a:	372c      	adds	r7, #44	@ 0x2c
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	019a      	lsls	r2, r3, #6
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	431a      	orrs	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	431a      	orrs	r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a4:	f7ff fb34 	bl	8003d10 <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80046aa:	e009      	b.n	80046c0 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80046ac:	f7ff fb30 	bl	8003d10 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ba:	d901      	bls.n	80046c0 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e015      	b.n	80046ec <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0ee      	beq.n	80046ac <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	019a      	lsls	r2, r3, #6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	ea42 0103 	orr.w	r1, r2, r3
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	041a      	lsls	r2, r3, #16
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e16c      	b.n	80049e2 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7c5b      	ldrb	r3, [r3, #17]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f96e 	bl	80049f4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2203      	movs	r2, #3
 800471c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004732:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800473e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004746:	f7ff fae3 	bl	8003d10 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800474c:	e009      	b.n	8004762 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800474e:	f7ff fadf 	bl	8003d10 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800475c:	d901      	bls.n	8004762 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e13f      	b.n	80049e2 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800476a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ed      	beq.n	800474e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b9b      	ldr	r3, [pc, #620]	@ (80049ec <HAL_DSI_Init+0x2f8>)
 8004780:	400b      	ands	r3, r1
 8004782:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800479a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80047a2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7ff faa6 	bl	8003d28 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80047dc:	f7ff fa98 	bl	8003d10 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80047e2:	e009      	b.n	80047f8 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80047e4:	f7ff fa94 	bl	8003d10 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047f2:	d901      	bls.n	80047f8 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0f4      	b.n	80049e2 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ed      	beq.n	80047e4 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004838:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6899      	ldr	r1, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0202 	orr.w	r2, r2, #2
 800485c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0204 	orr.w	r2, r2, #4
 8004870:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0203 	bic.w	r2, r2, #3
 8004884:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800489e:	f7ff fa37 	bl	8003d10 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d123      	bne.n	80048fc <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80048b4:	e00c      	b.n	80048d0 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048b6:	f7ff fa2b 	bl	8003d10 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048c4:	d904      	bls.n	80048d0 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e088      	b.n	80049e2 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048d8:	f003 0314 	and.w	r3, r3, #20
 80048dc:	2b14      	cmp	r3, #20
 80048de:	d1ea      	bne.n	80048b6 <HAL_DSI_Init+0x1c2>
 80048e0:	e014      	b.n	800490c <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048e2:	f7ff fa15 	bl	8003d10 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048f0:	d904      	bls.n	80048fc <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e072      	b.n	80049e2 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004904:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8004908:	2b94      	cmp	r3, #148	@ 0x94
 800490a:	d1ea      	bne.n	80048e2 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_DSI_Init+0x226>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	e000      	b.n	800491c <HAL_DSI_Init+0x228>
 800491a:	2301      	movs	r3, #1
 800491c:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	4a33      	ldr	r2, [pc, #204]	@ (80049f0 <HAL_DSI_Init+0x2fc>)
 8004922:	fb03 f202 	mul.w	r2, r3, r2
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	409a      	lsls	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004952:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	430a      	orrs	r2, r1
 8004966:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0203 	bic.w	r2, r2, #3
 80049b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3728      	adds	r7, #40	@ 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	fffc8603 	.word	0xfffc8603
 80049f0:	003d0900 	.word	0x003d0900

080049f4 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7c1b      	ldrb	r3, [r3, #16]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_DSI_ConfigVideoMode+0x16>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e1ee      	b.n	8004dfc <HAL_DSI_ConfigVideoMode+0x3f4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0203 	bic.w	r2, r2, #3
 8004a56:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b8b      	ldr	r3, [pc, #556]	@ (8004ca4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004a76:	400b      	ands	r3, r1
 8004a78:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b84      	ldr	r3, [pc, #528]	@ (8004ca8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004a98:	400b      	ands	r3, r1
 8004a9a:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004aba:	400b      	ands	r3, r1
 8004abc:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0203 	bic.w	r2, r2, #3
 8004ade:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0207 	bic.w	r2, r2, #7
 8004b00:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6959      	ldr	r1, [r3, #20]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 020f 	bic.w	r2, r2, #15
 8004b2e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6919      	ldr	r1, [r3, #16]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 020e 	bic.w	r2, r2, #14
 8004b52:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	005a      	lsls	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d110      	bne.n	8004b98 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b84:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6919      	ldr	r1, [r3, #16]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b42      	ldr	r3, [pc, #264]	@ (8004cac <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004ba4:	400b      	ands	r3, r1
 8004ba6:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b32      	ldr	r3, [pc, #200]	@ (8004cb0 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004be8:	400b      	ands	r3, r1
 8004bea:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b19      	ldr	r3, [pc, #100]	@ (8004cb4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004c4e:	400b      	ands	r3, r1
 8004c50:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004c70:	400b      	ands	r3, r1
 8004c72:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca0:	e00a      	b.n	8004cb8 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004ca2:	bf00      	nop
 8004ca4:	ffffc000 	.word	0xffffc000
 8004ca8:	ffffe000 	.word	0xffffe000
 8004cac:	fffff000 	.word	0xfffff000
 8004cb0:	ffff8000 	.word	0xffff8000
 8004cb4:	fffffc00 	.word	0xfffffc00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8004cce:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cda:	041a      	lsls	r2, r3, #16
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cf2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7c1b      	ldrb	r3, [r3, #16]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_DSI_ConfigFlowControl+0x16>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e016      	b.n	8004e4c <HAL_DSI_ConfigFlowControl+0x44>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 021f 	bic.w	r2, r2, #31
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7c1b      	ldrb	r3, [r3, #16]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_DSI_Start+0x14>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e02b      	b.n	8004ec4 <HAL_DSI_Start+0x6c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0208 	orr.w	r2, r2, #8
 8004ea8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	7c1b      	ldrb	r3, [r3, #16]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_DSI_ShortWrite+0x1a>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e010      	b.n	8004f0c <HAL_DSI_ShortWrite+0x3c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fbcb 	bl	8004696 <DSI_ShortWrite>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	741a      	strb	r2, [r3, #16]

  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 8004f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f24:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	7c1b      	ldrb	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_DSI_LongWrite+0x1e>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e084      	b.n	800503c <HAL_DSI_LongWrite+0x128>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f38:	f7fe feea 	bl	8003d10 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004f3e:	e00c      	b.n	8004f5a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004f40:	f7fe fee6 	bl	8003d10 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f4e:	d904      	bls.n	8004f5a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e070      	b.n	800503c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0eb      	beq.n	8004f40 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	bf28      	it	cs
 8004f72:	2303      	movcs	r3, #3
 8004f74:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	e00f      	b.n	8004f9c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	4413      	add	r3, r2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3eb      	bcc.n	8004f7c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004fbc:	e028      	b.n	8005010 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	bf28      	it	cs
 8004fc4:	2304      	movcs	r3, #4
 8004fc6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	e00e      	b.n	8004ff0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	3301      	adds	r3, #1
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d3ec      	bcc.n	8004fd2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1d3      	bne.n	8004fbe <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800501e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005026:	b2db      	uxtb	r3, r3
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	f7ff fb18 	bl	8004664 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3728      	adds	r7, #40	@ 0x28
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	@ 0x30
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	7c1b      	ldrb	r3, [r3, #16]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DSI_Read+0x22>
 8005062:	2302      	movs	r3, #2
 8005064:	e0ae      	b.n	80051c4 <HAL_DSI_Read+0x180>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d913      	bls.n	800509a <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800507a:	b2db      	uxtb	r3, r3
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	2237      	movs	r2, #55	@ 0x37
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fb06 	bl	8004696 <DSI_ShortWrite>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e094      	b.n	80051c4 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	2b06      	cmp	r3, #6
 800509e:	d109      	bne.n	80050b4 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	f7ff fad9 	bl	8004664 <DSI_ConfigPacketHeader>
 80050b2:	e033      	b.n	800511c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d109      	bne.n	80050ce <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2300      	movs	r3, #0
 80050c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	f7ff facc 	bl	8004664 <DSI_ConfigPacketHeader>
 80050cc:	e026      	b.n	800511c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	2b14      	cmp	r3, #20
 80050d2:	d10c      	bne.n	80050ee <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4613      	mov	r3, r2
 80050e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	f7ff fabc 	bl	8004664 <DSI_ConfigPacketHeader>
 80050ec:	e016      	b.n	800511c <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	2b24      	cmp	r3, #36	@ 0x24
 80050f2:	d10e      	bne.n	8005112 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	3301      	adds	r3, #1
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	f7ff faaa 	bl	8004664 <DSI_ConfigPacketHeader>
 8005110:	e004      	b.n	800511c <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e053      	b.n	80051c4 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800511c:	f7fe fdf8 	bl	8003d10 <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8005122:	e048      	b.n	80051b6 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d120      	bne.n	8005174 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2b04      	cmp	r3, #4
 800513e:	bf28      	it	cs
 8005140:	2304      	movcs	r3, #4
 8005142:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e010      	b.n	800516c <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	b2da      	uxtb	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	701a      	strb	r2, [r3, #0]
        pdata++;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	3301      	adds	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	3b01      	subs	r3, #1
 8005164:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d3ea      	bcc.n	800514a <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005174:	f7fe fdcc 	bl	8003d10 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005182:	d904      	bls.n	800518e <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e01a      	b.n	80051c4 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10c      	bne.n	80051b6 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d104      	bne.n	80051b6 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e006      	b.n	80051c4 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dcb3      	bgt.n	8005124 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	@ 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	@ 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051da:	4b89      	ldr	r3, [pc, #548]	@ (8005400 <HAL_GPIO_Init+0x234>)
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051de:	e194      	b.n	800550a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2101      	movs	r1, #1
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8186 	beq.w	8005504 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d005      	beq.n	8005210 <HAL_GPIO_Init+0x44>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d130      	bne.n	8005272 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005246:	2201      	movs	r2, #1
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	f003 0201 	and.w	r2, r3, #1
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	d017      	beq.n	80052ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d123      	bne.n	8005302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80e0 	beq.w	8005504 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005344:	4b2f      	ldr	r3, [pc, #188]	@ (8005404 <HAL_GPIO_Init+0x238>)
 8005346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800534a:	4a2e      	ldr	r2, [pc, #184]	@ (8005404 <HAL_GPIO_Init+0x238>)
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005354:	4b2b      	ldr	r3, [pc, #172]	@ (8005404 <HAL_GPIO_Init+0x238>)
 8005356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005362:	4a29      	ldr	r2, [pc, #164]	@ (8005408 <HAL_GPIO_Init+0x23c>)
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	3302      	adds	r3, #2
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	220f      	movs	r2, #15
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a20      	ldr	r2, [pc, #128]	@ (800540c <HAL_GPIO_Init+0x240>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d052      	beq.n	8005434 <HAL_GPIO_Init+0x268>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <HAL_GPIO_Init+0x244>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_GPIO_Init+0x22e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <HAL_GPIO_Init+0x248>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <HAL_GPIO_Init+0x22a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <HAL_GPIO_Init+0x24c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d025      	beq.n	80053f2 <HAL_GPIO_Init+0x226>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	@ (800541c <HAL_GPIO_Init+0x250>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <HAL_GPIO_Init+0x222>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005420 <HAL_GPIO_Init+0x254>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d019      	beq.n	80053ea <HAL_GPIO_Init+0x21e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005424 <HAL_GPIO_Init+0x258>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_GPIO_Init+0x21a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_GPIO_Init+0x25c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00d      	beq.n	80053e2 <HAL_GPIO_Init+0x216>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_GPIO_Init+0x260>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <HAL_GPIO_Init+0x212>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <HAL_GPIO_Init+0x264>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_GPIO_Init+0x20e>
 80053d6:	2309      	movs	r3, #9
 80053d8:	e02d      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053da:	230a      	movs	r3, #10
 80053dc:	e02b      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053de:	2308      	movs	r3, #8
 80053e0:	e029      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053e2:	2307      	movs	r3, #7
 80053e4:	e027      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053e6:	2306      	movs	r3, #6
 80053e8:	e025      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053ea:	2305      	movs	r3, #5
 80053ec:	e023      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053ee:	2304      	movs	r3, #4
 80053f0:	e021      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053f2:	2303      	movs	r3, #3
 80053f4:	e01f      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e01d      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e01b      	b.n	8005436 <HAL_GPIO_Init+0x26a>
 80053fe:	bf00      	nop
 8005400:	58000080 	.word	0x58000080
 8005404:	58024400 	.word	0x58024400
 8005408:	58000400 	.word	0x58000400
 800540c:	58020000 	.word	0x58020000
 8005410:	58020400 	.word	0x58020400
 8005414:	58020800 	.word	0x58020800
 8005418:	58020c00 	.word	0x58020c00
 800541c:	58021000 	.word	0x58021000
 8005420:	58021400 	.word	0x58021400
 8005424:	58021800 	.word	0x58021800
 8005428:	58021c00 	.word	0x58021c00
 800542c:	58022000 	.word	0x58022000
 8005430:	58022400 	.word	0x58022400
 8005434:	2300      	movs	r3, #0
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	f002 0203 	and.w	r2, r2, #3
 800543c:	0092      	lsls	r2, r2, #2
 800543e:	4093      	lsls	r3, r2
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005446:	4938      	ldr	r1, [pc, #224]	@ (8005528 <HAL_GPIO_Init+0x35c>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	43db      	mvns	r3, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4013      	ands	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800547a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f ae63 	bne.w	80051e0 <HAL_GPIO_Init+0x14>
  }
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	3724      	adds	r7, #36	@ 0x24
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	58000400 	.word	0x58000400

0800552c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e001      	b.n	800554e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
 8005568:	4613      	mov	r3, r2
 800556a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800556c:	787b      	ldrb	r3, [r7, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005572:	887a      	ldrh	r2, [r7, #2]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005578:	e003      	b.n	8005582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	041a      	lsls	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	619a      	str	r2, [r3, #24]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e070      	b.n	8005684 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f009 ffa4 	bl	800f504 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a19      	ldr	r2, [pc, #100]	@ (800568c <HAL_JPEG_Init+0xfc>)
 8005628:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a18      	ldr	r2, [pc, #96]	@ (8005690 <HAL_JPEG_Init+0x100>)
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fcdb 	bl	8005ff8 <JPEG_Set_HuffEnc_Mem>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e018      	b.n	8005684 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005660:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	08013ff8 	.word	0x08013ff8
 8005690:	08014038 	.word	0x08014038

08005694 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_JPEG_GetInfo+0x16>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e083      	b.n	80057b6 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d103      	bne.n	80056c4 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2210      	movs	r2, #16
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e017      	b.n	80056f4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e00c      	b.n	80056f4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d103      	bne.n	80056f0 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2230      	movs	r2, #48	@ 0x30
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e001      	b.n	80056f4 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e060      	b.n	80057b6 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	b29a      	uxth	r2, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b10      	cmp	r3, #16
 8005716:	d003      	beq.n	8005720 <HAL_JPEG_GetInfo+0x8c>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b30      	cmp	r3, #48	@ 0x30
 800571e:	d140      	bne.n	80057a2 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d109      	bne.n	8005764 <HAL_JPEG_GetInfo+0xd0>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_JPEG_GetInfo+0xd0>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2202      	movs	r2, #2
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	e01d      	b.n	80057a0 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_JPEG_GetInfo+0xea>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <HAL_JPEG_GetInfo+0xea>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	e010      	b.n	80057a0 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d109      	bne.n	8005798 <HAL_JPEG_GetInfo+0x104>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_JPEG_GetInfo+0x104>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e003      	b.n	80057a0 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800579e:	e003      	b.n	80057a8 <HAL_JPEG_GetInfo+0x114>
 80057a0:	e002      	b.n	80057a8 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 fd17 	bl	80071dc <JPEG_GetQuality>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_JPEG_Decode_DMA+0x20>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_JPEG_Decode_DMA+0x20>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e04c      	b.n	800587c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_JPEG_Decode_DMA+0x32>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e045      	b.n	800587c <HAL_JPEG_Decode_DMA+0xbe>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d134      	bne.n	800586e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2204      	movs	r2, #4
 8005808:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	f023 020f 	bic.w	r2, r3, #15
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f043 020e 	orr.w	r2, r3, #14
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fe57 	bl	80064fc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 f978 	bl	8006b44 <JPEG_DMA_StartProcess>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00f      	beq.n	800587a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2206      	movs	r2, #6
 800585e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e006      	b.n	800587c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	e000      	b.n	800587c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b0c      	cmp	r3, #12
 800589c:	d116      	bne.n	80058cc <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d033      	beq.n	8005926 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80058ca:	e02c      	b.n	8005926 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d126      	bne.n	8005926 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f043 0306 	orr.w	r3, r3, #6
 80058f4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8005912:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	43da      	mvns	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	400a      	ands	r2, r1
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	3b03      	subs	r3, #3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d813      	bhi.n	80059ce <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d103      	bne.n	80059ba <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fe16 	bl	80065e4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80059b8:	e00b      	b.n	80059d2 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d105      	bne.n	80059d2 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 f956 	bl	8006c78 <JPEG_DMA_ContinueProcess>
      break;
 80059cc:	e001      	b.n	80059d2 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <HAL_JPEG_IRQHandler+0x44>
      break;
 80059d2:	bf00      	nop
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80059dc:	b480      	push	{r7}
 80059de:	b08b      	sub	sp, #44	@ 0x2c
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e020      	b.n	8005a36 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	4413      	add	r3, r2
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a08:	d90f      	bls.n	8005a2a <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e055      	b.n	8005aba <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	440b      	add	r3, r1
 8005a18:	3201      	adds	r2, #1
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
      p++;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	3301      	adds	r3, #1
 8005a22:	623b      	str	r3, [r7, #32]
      i--;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	3b01      	subs	r3, #1
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ee      	bne.n	8005a0e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	2b0f      	cmp	r3, #15
 8005a3a:	d9db      	bls.n	80059f4 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	4413      	add	r3, r2
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	617b      	str	r3, [r7, #20]
  p = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005a5a:	e027      	b.n	8005aac <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	601a      	str	r2, [r3, #0]
      p++;
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	623b      	str	r3, [r7, #32]
      code++;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d0eb      	beq.n	8005a5c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b1f      	cmp	r3, #31
 8005a88:	d901      	bls.n	8005a8e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e015      	b.n	8005aba <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005a8e:	2201      	movs	r2, #1
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d301      	bcc.n	8005aa0 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e00c      	b.n	8005aba <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
    si++;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1dd      	bne.n	8005a74 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	372c      	adds	r7, #44	@ 0x2c
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005ad2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005ad6:	6018      	str	r0, [r3, #0]
 8005ad8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005adc:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005ae0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005ae2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005ae6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	f107 020c 	add.w	r2, r7, #12
 8005af4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8005af8:	f7ff ff70 	bl	80059dc <JPEG_Bits_To_SizeCodes>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8005b02:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8005b0a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8005b0e:	e075      	b.n	8005bfc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8005b16:	e067      	b.n	8005be8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8005b18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005b1c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005b26:	4413      	add	r3, r2
 8005b28:	3310      	adds	r3, #16
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8005b30:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8005b38:	23a0      	movs	r3, #160	@ 0xa0
 8005b3a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8005b3e:	e021      	b.n	8005b84 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8005b40:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005b44:	2bf0      	cmp	r3, #240	@ 0xf0
 8005b46:	d103      	bne.n	8005b50 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8005b48:	23a1      	movs	r3, #161	@ 0xa1
 8005b4a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8005b4e:	e019      	b.n	8005b84 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8005b50:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8005b5e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005b6a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005b84:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005b88:	2ba1      	cmp	r3, #161	@ 0xa1
 8005b8a:	d901      	bls.n	8005b90 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e035      	b.n	8005bfc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005b90:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005b94:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005b98:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8005b9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ba0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005ba4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005bae:	3328      	adds	r3, #40	@ 0x28
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005bb6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005bba:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8005bbe:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b2d9      	uxtb	r1, r3
 8005bca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005bce:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005bd8:	4413      	add	r3, r2
 8005bda:	460a      	mov	r2, r1
 8005bdc:	701a      	strb	r2, [r3, #0]
      k++;
 8005bde:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005be2:	3301      	adds	r3, #1
 8005be4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8005be8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005bec:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d38e      	bcc.n	8005b18 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c12:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005c16:	6018      	str	r0, [r3, #0]
 8005c18:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c1c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005c20:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005c22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c26:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8005c30:	f107 0208 	add.w	r2, r7, #8
 8005c34:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8005c38:	f7ff fed0 	bl	80059dc <JPEG_Bits_To_SizeCodes>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8005c42:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8005c4a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8005c4e:	e048      	b.n	8005ce2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8005c56:	e03d      	b.n	8005cd4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005c58:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c5c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005c66:	4413      	add	r3, r2
 8005c68:	3310      	adds	r3, #16
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005c70:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005c74:	2b0b      	cmp	r3, #11
 8005c76:	d901      	bls.n	8005c7c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e032      	b.n	8005ce2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005c7c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c80:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8005c84:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8005c88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c8c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005c90:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005ca2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005ca6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8005caa:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b2d9      	uxtb	r1, r3
 8005cb6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005cba:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005cc4:	4413      	add	r3, r2
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	701a      	strb	r2, [r3, #0]
      k++;
 8005cca:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8005cd4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8005cd8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3bb      	bcc.n	8005c58 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b09a      	sub	sp, #104	@ 0x68
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d106      	bne.n	8005d14 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8005d0e:	3318      	adds	r3, #24
 8005d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d12:	e00f      	b.n	8005d34 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d106      	bne.n	8005d30 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2e:	e001      	b.n	8005d34 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e059      	b.n	8005de8 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d055      	beq.n	8005de6 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8005d3a:	f107 0314 	add.w	r3, r7, #20
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68b8      	ldr	r0, [r7, #8]
 8005d42:	f7ff ff60 	bl	8005c06 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8005d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8005d54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d58:	e046      	b.n	8005de8 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8005d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d60:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8005d64:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d68:	3304      	adds	r3, #4
 8005d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8005d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d6e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8005d72:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8005d74:	230c      	movs	r3, #12
 8005d76:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8005d78:	e032      	b.n	8005de0 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8005d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8005d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d82:	3b04      	subs	r3, #4
 8005d84:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005d86:	f107 0214 	add.w	r2, r7, #20
 8005d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d8c:	4413      	add	r3, r2
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d98:	3302      	adds	r3, #2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	3368      	adds	r3, #104	@ 0x68
 8005d9e:	443b      	add	r3, r7
 8005da0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	4313      	orrs	r3, r2
 8005da8:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8005daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dac:	3b01      	subs	r3, #1
 8005dae:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005db0:	f107 0214 	add.w	r2, r7, #20
 8005db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3368      	adds	r3, #104	@ 0x68
 8005dc8:	443b      	add	r3, r7
 8005dca:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd6:	041a      	lsls	r2, r3, #16
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dde:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d8c9      	bhi.n	8005d7a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3768      	adds	r7, #104	@ 0x68
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005dfc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8005e00:	6018      	str	r0, [r3, #0]
 8005e02:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e06:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8005e0a:	6019      	str	r1, [r3, #0]
 8005e0c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e10:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8005e14:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8005e16:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e1a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8005e2a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d10c      	bne.n	8005e4e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005e34:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e38:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005e48:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8005e4c:	e01d      	b.n	8005e8a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8005e4e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e52:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8005e5e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8005e62:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d10c      	bne.n	8005e86 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005e6c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e70:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8005e7c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005e80:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8005e84:	e001      	b.n	8005e8a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0a8      	b.n	8005fdc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8005e8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005e8e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80a0 	beq.w	8005fda <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005e9a:	f107 0214 	add.w	r2, r7, #20
 8005e9e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005ea2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	f7ff fe0c 	bl	8005ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8005eb4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8005ebc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8005ec0:	e08c      	b.n	8005fdc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005ec2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8005ec6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8005ed0:	e00e      	b.n	8005ef0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8005ed2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005ed6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8005eda:	601a      	str	r2, [r3, #0]
      addressDef++;
 8005edc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8005ee6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005eea:	3301      	adds	r3, #1
 8005eec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8005ef0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d9ec      	bls.n	8005ed2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8005ef8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005efc:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8005efe:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005f00:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f04:	3304      	adds	r3, #4
 8005f06:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8005f0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <JPEG_Set_HuffAC_Mem+0x1fc>)
 8005f10:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005f12:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f16:	3304      	adds	r3, #4
 8005f18:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8005f1c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f20:	4a33      	ldr	r2, [pc, #204]	@ (8005ff0 <JPEG_Set_HuffAC_Mem+0x200>)
 8005f22:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005f24:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f28:	3304      	adds	r3, #4
 8005f2a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8005f2e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8005f32:	4a30      	ldr	r2, [pc, #192]	@ (8005ff4 <JPEG_Set_HuffAC_Mem+0x204>)
 8005f34:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8005f36:	23a2      	movs	r3, #162	@ 0xa2
 8005f38:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8005f3c:	e049      	b.n	8005fd2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8005f3e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005f42:	3b01      	subs	r3, #1
 8005f44:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8005f48:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005f52:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005f56:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8005f5a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005f5e:	4413      	add	r3, r2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005f68:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005f6c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8005f70:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005f74:	3328      	adds	r3, #40	@ 0x28
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8005f84:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005f8e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005f92:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8005f96:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005f9a:	4413      	add	r3, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005fa4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8005fa8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8005fac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005fb0:	3328      	adds	r3, #40	@ 0x28
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005fc0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8005fc4:	041a      	lsls	r2, r3, #16
 8005fc6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8005fd0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005fd2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d8b1      	bhi.n	8005f3e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0fd10fd0 	.word	0x0fd10fd0
 8005fec:	0fd30fd2 	.word	0x0fd30fd2
 8005ff0:	0fd50fd4 	.word	0x0fd50fd4
 8005ff4:	0fd70fd6 	.word	0x0fd70fd6

08005ff8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f84d 	bl	80060a0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800600e:	461a      	mov	r2, r3
 8006010:	491f      	ldr	r1, [pc, #124]	@ (8006090 <JPEG_Set_HuffEnc_Mem+0x98>)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff feec 	bl	8005df0 <JPEG_Set_HuffAC_Mem>
 8006018:	4603      	mov	r3, r0
 800601a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	e030      	b.n	8006088 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800602e:	461a      	mov	r2, r3
 8006030:	4918      	ldr	r1, [pc, #96]	@ (8006094 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fedc 	bl	8005df0 <JPEG_Set_HuffAC_Mem>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	e020      	b.n	8006088 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800604e:	461a      	mov	r2, r3
 8006050:	4911      	ldr	r1, [pc, #68]	@ (8006098 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fe4a 	bl	8005cec <JPEG_Set_HuffDC_Mem>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	e010      	b.n	8006088 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800606e:	461a      	mov	r2, r3
 8006070:	490a      	ldr	r1, [pc, #40]	@ (800609c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fe3a 	bl	8005cec <JPEG_Set_HuffDC_Mem>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	e000      	b.n	8006088 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08013e50 	.word	0x08013e50
 8006094:	08013f04 	.word	0x08013f04
 8006098:	08013e18 	.word	0x08013e18
 800609c:	08013e34 	.word	0x08013e34

080060a0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08b      	sub	sp, #44	@ 0x2c
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80060a8:	4b80      	ldr	r3, [pc, #512]	@ (80062ac <JPEG_Set_Huff_DHTMem+0x20c>)
 80060aa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80060ac:	4b80      	ldr	r3, [pc, #512]	@ (80062b0 <JPEG_Set_Huff_DHTMem+0x210>)
 80060ae:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80060b0:	4b80      	ldr	r3, [pc, #512]	@ (80062b4 <JPEG_Set_Huff_DHTMem+0x214>)
 80060b2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80060b4:	4b80      	ldr	r3, [pc, #512]	@ (80062b8 <JPEG_Set_Huff_DHTMem+0x218>)
 80060b6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80060c0:	330c      	adds	r3, #12
 80060c2:	623b      	str	r3, [r7, #32]
  index = 16;
 80060c4:	2310      	movs	r3, #16
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80060c8:	e01d      	b.n	8006106 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	3b01      	subs	r3, #1
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	5cd3      	ldrb	r3, [r2, r3]
 80060d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	3b02      	subs	r3, #2
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80060de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	3b03      	subs	r3, #3
 80060e4:	6979      	ldr	r1, [r7, #20]
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80060ea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80060ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ee:	3a04      	subs	r2, #4
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80060f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	601a      	str	r2, [r3, #0]
    address--;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006102:	3b04      	subs	r3, #4
 8006104:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	2b03      	cmp	r3, #3
 800610a:	d8de      	bhi.n	80060ca <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006114:	3318      	adds	r3, #24
 8006116:	623b      	str	r3, [r7, #32]
  index = 12;
 8006118:	230c      	movs	r3, #12
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800611c:	e021      	b.n	8006162 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	3b01      	subs	r3, #1
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	7c1b      	ldrb	r3, [r3, #16]
 8006128:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	3b02      	subs	r3, #2
 800612e:	6979      	ldr	r1, [r7, #20]
 8006130:	440b      	add	r3, r1
 8006132:	7c1b      	ldrb	r3, [r3, #16]
 8006134:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006136:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	3b03      	subs	r3, #3
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	440b      	add	r3, r1
 8006140:	7c1b      	ldrb	r3, [r3, #16]
 8006142:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006144:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	3a04      	subs	r2, #4
 800614a:	6979      	ldr	r1, [r7, #20]
 800614c:	440a      	add	r2, r1
 800614e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006150:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	601a      	str	r2, [r3, #0]
    address--;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	3b04      	subs	r3, #4
 800615a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	3b04      	subs	r3, #4
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	2b03      	cmp	r3, #3
 8006166:	d8da      	bhi.n	800611e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006170:	3328      	adds	r3, #40	@ 0x28
 8006172:	623b      	str	r3, [r7, #32]
  index = 16;
 8006174:	2310      	movs	r3, #16
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006178:	e01d      	b.n	80061b6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	3b01      	subs	r3, #1
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	5cd3      	ldrb	r3, [r2, r3]
 8006182:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	3b02      	subs	r3, #2
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800618e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	3b03      	subs	r3, #3
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800619a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800619c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619e:	3a04      	subs	r2, #4
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80061a4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	601a      	str	r2, [r3, #0]
    address--;
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	3b04      	subs	r3, #4
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d8de      	bhi.n	800617a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80061c4:	33cc      	adds	r3, #204	@ 0xcc
 80061c6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b3b      	ldr	r3, [pc, #236]	@ (80062bc <JPEG_Set_Huff_DHTMem+0x21c>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80061d8:	021a      	lsls	r2, r3, #8
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	623b      	str	r3, [r7, #32]
  index = 160;
 80061f4:	23a0      	movs	r3, #160	@ 0xa0
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80061f8:	e021      	b.n	800623e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	3b01      	subs	r3, #1
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	7c1b      	ldrb	r3, [r3, #16]
 8006204:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	3b02      	subs	r3, #2
 800620a:	69f9      	ldr	r1, [r7, #28]
 800620c:	440b      	add	r3, r1
 800620e:	7c1b      	ldrb	r3, [r3, #16]
 8006210:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006212:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	3b03      	subs	r3, #3
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	440b      	add	r3, r1
 800621c:	7c1b      	ldrb	r3, [r3, #16]
 800621e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006220:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006224:	3a04      	subs	r2, #4
 8006226:	69f9      	ldr	r1, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800622c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	601a      	str	r2, [r3, #0]
    address--;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	3b04      	subs	r3, #4
 8006236:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	3b04      	subs	r3, #4
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	2b03      	cmp	r3, #3
 8006242:	d8da      	bhi.n	80061fa <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800624c:	33cc      	adds	r3, #204	@ 0xcc
 800624e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	061a      	lsls	r2, r3, #24
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	431a      	orrs	r2, r3
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800627a:	33dc      	adds	r3, #220	@ 0xdc
 800627c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <JPEG_Set_Huff_DHTMem+0x21c>)
 8006284:	4013      	ands	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	7bdb      	ldrb	r3, [r3, #15]
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	7b92      	ldrb	r2, [r2, #14]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  *address = value;
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	3b04      	subs	r3, #4
 80062a4:	623b      	str	r3, [r7, #32]
  index = 12;
 80062a6:	230c      	movs	r3, #12
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80062aa:	e027      	b.n	80062fc <JPEG_Set_Huff_DHTMem+0x25c>
 80062ac:	08013e50 	.word	0x08013e50
 80062b0:	08013f04 	.word	0x08013f04
 80062b4:	08013e18 	.word	0x08013e18
 80062b8:	08013e34 	.word	0x08013e34
 80062bc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	3301      	adds	r3, #1
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	5cd3      	ldrb	r3, [r2, r3]
 80062c8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	440b      	add	r3, r1
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80062d4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	3b01      	subs	r3, #1
 80062da:	6939      	ldr	r1, [r7, #16]
 80062dc:	5ccb      	ldrb	r3, [r1, r3]
 80062de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80062e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	3a02      	subs	r2, #2
 80062e6:	6939      	ldr	r1, [r7, #16]
 80062e8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80062ea:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	601a      	str	r2, [r3, #0]
    address--;
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	3b04      	subs	r3, #4
 80062f4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	3b04      	subs	r3, #4
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d8de      	bhi.n	80062c0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800630a:	33dc      	adds	r3, #220	@ 0xdc
 800630c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	7c5b      	ldrb	r3, [r3, #17]
 800631a:	061a      	lsls	r2, r3, #24
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	431a      	orrs	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	7c1b      	ldrb	r3, [r3, #16]
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006338:	33e8      	adds	r3, #232	@ 0xe8
 800633a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <JPEG_Set_Huff_DHTMem+0x458>)
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	7edb      	ldrb	r3, [r3, #27]
 800634a:	021a      	lsls	r2, r3, #8
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	7e92      	ldrb	r2, [r2, #26]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	3b04      	subs	r3, #4
 8006362:	623b      	str	r3, [r7, #32]
  index = 8;
 8006364:	2308      	movs	r3, #8
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006368:	e021      	b.n	80063ae <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	3301      	adds	r3, #1
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	7c1b      	ldrb	r3, [r3, #16]
 8006374:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006376:	6939      	ldr	r1, [r7, #16]
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	440b      	add	r3, r1
 800637c:	3310      	adds	r3, #16
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006382:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	3b01      	subs	r3, #1
 8006388:	6939      	ldr	r1, [r7, #16]
 800638a:	440b      	add	r3, r1
 800638c:	7c1b      	ldrb	r3, [r3, #16]
 800638e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006390:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8006392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006394:	3a02      	subs	r2, #2
 8006396:	6939      	ldr	r1, [r7, #16]
 8006398:	440a      	add	r2, r1
 800639a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800639c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	601a      	str	r2, [r3, #0]
    address--;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	3b04      	subs	r3, #4
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d8da      	bhi.n	800636a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80063bc:	33e8      	adds	r3, #232	@ 0xe8
 80063be:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	061a      	lsls	r2, r3, #24
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  *address = value;
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80063ea:	33f8      	adds	r3, #248	@ 0xf8
 80063ec:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <JPEG_Set_Huff_DHTMem+0x458>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	7bdb      	ldrb	r3, [r3, #15]
 80063fc:	021a      	lsls	r2, r3, #8
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	7b92      	ldrb	r2, [r2, #14]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  *address = value;
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	3b04      	subs	r3, #4
 8006414:	623b      	str	r3, [r7, #32]
  index = 12;
 8006416:	230c      	movs	r3, #12
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800641a:	e01d      	b.n	8006458 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	3301      	adds	r3, #1
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	5cd3      	ldrb	r3, [r2, r3]
 8006424:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006426:	69b9      	ldr	r1, [r7, #24]
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	440b      	add	r3, r1
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006430:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	3b01      	subs	r3, #1
 8006436:	69b9      	ldr	r1, [r7, #24]
 8006438:	5ccb      	ldrb	r3, [r1, r3]
 800643a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800643c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800643e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006440:	3a02      	subs	r2, #2
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006446:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	601a      	str	r2, [r3, #0]
    address--;
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	3b04      	subs	r3, #4
 8006450:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	3b04      	subs	r3, #4
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	2b03      	cmp	r3, #3
 800645c:	d8de      	bhi.n	800641c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006466:	33f8      	adds	r3, #248	@ 0xf8
 8006468:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	7c5b      	ldrb	r3, [r3, #17]
 8006476:	061a      	lsls	r2, r3, #24
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	431a      	orrs	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	7c1b      	ldrb	r3, [r3, #16]
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006494:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006498:	623b      	str	r3, [r7, #32]
  index = 160;
 800649a:	23a0      	movs	r3, #160	@ 0xa0
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800649e:	e021      	b.n	80064e4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	3301      	adds	r3, #1
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	7c1b      	ldrb	r3, [r3, #16]
 80064aa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80064ac:	69b9      	ldr	r1, [r7, #24]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	440b      	add	r3, r1
 80064b2:	3310      	adds	r3, #16
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80064b8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	3b01      	subs	r3, #1
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	440b      	add	r3, r1
 80064c2:	7c1b      	ldrb	r3, [r3, #16]
 80064c4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80064c6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80064c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ca:	3a02      	subs	r2, #2
 80064cc:	69b9      	ldr	r1, [r7, #24]
 80064ce:	440a      	add	r2, r1
 80064d0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80064d2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	601a      	str	r2, [r3, #0]
    address--;
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	3b04      	subs	r3, #4
 80064dc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	3b04      	subs	r3, #4
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d8da      	bhi.n	80064a0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	372c      	adds	r7, #44	@ 0x2c
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	ffff0000 	.word	0xffff0000

080064fc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006508:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d108      	bne.n	800652e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0208 	orr.w	r2, r2, #8
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	e007      	b.n	800653e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0208 	bic.w	r2, r2, #8
 800653c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800656c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d108      	bne.n	80065bc <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80065b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80065ba:	e00d      	b.n	80065d8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d107      	bne.n	80065d8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80065d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d125      	bne.n	8006644 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01e      	beq.n	8006644 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff f841 	bl	8005694 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f008 f9d8 	bl	800e9d4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006642:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d116      	bne.n	800667e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800665e:	2108      	movs	r1, #8
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f988 	bl	8006976 <JPEG_ReadInputData>
 8006666:	e00a      	b.n	800667e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8006676:	2101      	movs	r1, #1
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f97c 	bl	8006976 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d116      	bne.n	80066b8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006698:	2108      	movs	r1, #8
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f864 	bl	8006768 <JPEG_StoreOutputData>
 80066a0:	e00a      	b.n	80066b8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80066b0:	2101      	movs	r1, #1
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f858 	bl	8006768 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d14b      	bne.n	800675e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d107      	bne.n	80066f2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80066f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006700:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69d9      	ldr	r1, [r3, #28]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	461a      	mov	r2, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f008 f9a7 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d103      	bne.n	8006754 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f008 f9af 	bl	800eab0 <HAL_JPEG_DecodeCpltCallback>
 8006752:	e002      	b.n	800675a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff f911 	bl	800597c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	429a      	cmp	r2, r3
 8006782:	d34b      	bcc.n	800681c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	e031      	b.n	80067ee <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69da      	ldr	r2, [r3, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	4413      	add	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0a19      	lsrs	r1, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69da      	ldr	r2, [r3, #28]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	3301      	adds	r3, #1
 80067b0:	4413      	add	r3, r2
 80067b2:	b2ca      	uxtb	r2, r1
 80067b4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	0c19      	lsrs	r1, r3, #16
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	3302      	adds	r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	b2ca      	uxtb	r2, r1
 80067c8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	0e19      	lsrs	r1, r3, #24
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	3303      	adds	r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	b2ca      	uxtb	r2, r1
 80067dc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3301      	adds	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3c9      	bcc.n	800678a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	429a      	cmp	r2, r3
 8006800:	f040 80b5 	bne.w	800696e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69d9      	ldr	r1, [r3, #28]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	461a      	mov	r2, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f008 f92a 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800681a:	e0a8      	b.n	800696e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	429a      	cmp	r2, r3
 8006826:	f240 80a2 	bls.w	800696e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	089b      	lsrs	r3, r3, #2
 8006836:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e031      	b.n	80068a2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006844:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	4413      	add	r3, r2
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	0a19      	lsrs	r1, r3, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	3301      	adds	r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	b2ca      	uxtb	r2, r1
 8006868:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	0c19      	lsrs	r1, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	3302      	adds	r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	b2ca      	uxtb	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	0e19      	lsrs	r1, r3, #24
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	3303      	adds	r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	b2ca      	uxtb	r2, r1
 8006890:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3301      	adds	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d3c9      	bcc.n	800683e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d10b      	bne.n	80068ce <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69d9      	ldr	r1, [r3, #28]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	461a      	mov	r2, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f008 f8d1 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80068cc:	e04f      	b.n	800696e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	e015      	b.n	8006914 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	fa22 f103 	lsr.w	r1, r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	4413      	add	r3, r2
 8006900:	b2ca      	uxtb	r2, r1
 8006902:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3301      	adds	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	429a      	cmp	r2, r3
 800691a:	d3e5      	bcc.n	80068e8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	69d9      	ldr	r1, [r3, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	461a      	mov	r2, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f008 f89e 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f1c3 0304 	rsb	r3, r3, #4
 8006938:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e013      	b.n	8006968 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	fa22 f103 	lsr.w	r1, r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69da      	ldr	r2, [r3, #28]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	4413      	add	r3, r2
 8006954:	b2ca      	uxtb	r2, r1
 8006956:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d9e8      	bls.n	8006940 <JPEG_StoreOutputData+0x1d8>
}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b088      	sub	sp, #32
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <JPEG_ReadInputData+0x1c>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8006992:	2101      	movs	r1, #1
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fe ff75 	bl	8005884 <HAL_JPEG_Pause>
 800699a:	e028      	b.n	80069ee <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d906      	bls.n	80069b6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	e01b      	b.n	80069ee <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d115      	bne.n	80069ee <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f008 f80f 	bl	800e9ec <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d905      	bls.n	80069e2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 809f 	bne.w	8006b3a <JPEG_ReadInputData+0x1c4>
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 809b 	beq.w	8006b3a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	089b      	lsrs	r3, r3, #2
 8006a08:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d335      	bcc.n	8006a7e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e02d      	b.n	8006a74 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006a38:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6999      	ldr	r1, [r3, #24]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3302      	adds	r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006a4a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3303      	adds	r3, #3
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006a60:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006a62:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	1d1a      	adds	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3301      	adds	r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d3cd      	bcc.n	8006a18 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8006a7c:	e05d      	b.n	8006b3a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d035      	beq.n	8006af0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e02d      	b.n	8006ae6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006aaa:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6999      	ldr	r1, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006abc:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3303      	adds	r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006ad2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006ad4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d3cd      	bcc.n	8006a8a <JPEG_ReadInputData+0x114>
}
 8006aee:	e024      	b.n	8006b3a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e017      	b.n	8006b2a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d3e3      	bcc.n	8006afa <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d804      	bhi.n	8006b70 <JPEG_DMA_StartProcess+0x2c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d901      	bls.n	8006b74 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e074      	b.n	8006c5e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	4a3b      	ldr	r2, [pc, #236]	@ (8006c68 <JPEG_DMA_StartProcess+0x124>)
 8006b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	4a3a      	ldr	r2, [pc, #232]	@ (8006c6c <JPEG_DMA_StartProcess+0x128>)
 8006b82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b88:	4a39      	ldr	r2, [pc, #228]	@ (8006c70 <JPEG_DMA_StartProcess+0x12c>)
 8006b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b90:	4a36      	ldr	r2, [pc, #216]	@ (8006c6c <JPEG_DMA_StartProcess+0x128>)
 8006b92:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b98:	4a36      	ldr	r2, [pc, #216]	@ (8006c74 <JPEG_DMA_StartProcess+0x130>)
 8006b9a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <JPEG_DMA_StartProcess+0x64>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	f043 0204 	orr.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e052      	b.n	8006c5e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	68f9      	ldr	r1, [r7, #12]
 8006bc2:	fbb3 f1f1 	udiv	r1, r3, r1
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	fb00 f101 	mul.w	r1, r0, r1
 8006bcc:	1a5b      	subs	r3, r3, r1
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	fbb3 f1f1 	udiv	r1, r3, r1
 8006be2:	68b8      	ldr	r0, [r7, #8]
 8006be4:	fb00 f101 	mul.w	r1, r0, r1
 8006be8:	1a5b      	subs	r3, r3, r1
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3344      	adds	r3, #68	@ 0x44
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	461c      	mov	r4, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	2201      	movs	r2, #1
 8006c08:	9200      	str	r2, [sp, #0]
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	f000 fe9a 	bl	8007944 <HAL_MDMA_Start_IT>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1a:	f043 0204 	orr.w	r2, r3, #4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e01b      	b.n	8006c5e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3340      	adds	r3, #64	@ 0x40
 8006c36:	461c      	mov	r4, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	9200      	str	r2, [sp, #0]
 8006c40:	4622      	mov	r2, r4
 8006c42:	f000 fe7f 	bl	8007944 <HAL_MDMA_Start_IT>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c50:	f043 0204 	orr.w	r2, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd90      	pop	{r4, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	08006f77 	.word	0x08006f77
 8006c6c:	08007165 	.word	0x08007165
 8006c70:	080070a3 	.word	0x080070a3
 8006c74:	080071b5 	.word	0x080071b5

08006c78 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d125      	bne.n	8006cd8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01e      	beq.n	8006cd8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7fe fcf7 	bl	8005694 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f007 fe8e 	bl	800e9d4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d039      	beq.n	8006d5a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006d20:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d104      	bne.n	8006d3a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fe86 	bl	8007a46 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d105      	bne.n	8006d54 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fe7a 	bl	8007a46 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8006d52:	e002      	b.n	8006d5a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f804 	bl	8006d62 <JPEG_DMA_EndProcess>
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d10a      	bne.n	8006da2 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69d9      	ldr	r1, [r3, #28]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	461a      	mov	r2, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f007 fe66 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d134      	bne.n	8006e1a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f007 fe50 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0201 	bic.w	r2, r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d103      	bne.n	8006e12 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f007 fe50 	bl	800eab0 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8006e10:	e00c      	b.n	8006e2c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fe fdb2 	bl	800597c <HAL_JPEG_EncodeCpltCallback>
}
 8006e18:	e008      	b.n	8006e2c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f804 	bl	8006e34 <JPEG_DMA_PollResidualData>
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e04f      	b.n	8006ee2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d146      	bne.n	8006edc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03f      	beq.n	8006edc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	4413      	add	r3, r2
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	0a19      	lsrs	r1, r3, #8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	b2ca      	uxtb	r2, r1
 8006e86:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	0c19      	lsrs	r1, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	3302      	adds	r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	b2ca      	uxtb	r2, r1
 8006e9a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	0e19      	lsrs	r1, r3, #24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	b2ca      	uxtb	r2, r1
 8006eae:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	1d1a      	adds	r2, r3, #4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d10a      	bne.n	8006edc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69d9      	ldr	r1, [r3, #28]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f007 fdc9 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1ac      	bne.n	8006e42 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eec:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <JPEG_DMA_PollResidualData+0xd2>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d133      	bne.n	8006f6e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69d9      	ldr	r1, [r3, #28]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	461a      	mov	r2, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f007 fd9d 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f38:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d103      	bne.n	8006f68 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f007 fda5 	bl	800eab0 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8006f66:	e002      	b.n	8006f6e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fe fd07 	bl	800597c <HAL_JPEG_EncodeCpltCallback>
}
 8006f6e:	bf00      	nop
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8006f76:	b590      	push	{r4, r7, lr}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	af02      	add	r7, sp, #8
 8006f7c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006f92:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f98:	f248 030c 	movw	r3, #32780	@ 0x800c
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b0c      	cmp	r3, #12
 8006fa0:	d17c      	bne.n	800709c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f007 fd11 	bl	800e9ec <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d81f      	bhi.n	8007014 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fde:	f043 0204 	orr.w	r2, r3, #4
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2206      	movs	r2, #6
 8006fea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f007 fd54 	bl	800ea9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8006ff4:	e052      	b.n	800709c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	fbb3 f1f1 	udiv	r1, r3, r1
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	fb00 f101 	mul.w	r1, r0, r1
 800700a:	1a5b      	subs	r3, r3, r1
 800700c:	1ad2      	subs	r2, r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	629a      	str	r2, [r3, #40]	@ 0x28
 8007012:	e010      	b.n	8007036 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	089b      	lsrs	r3, r3, #2
 800702e:	3301      	adds	r3, #1
 8007030:	009a      	lsls	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d124      	bne.n	800708c <JPEG_MDMAInCpltCallback+0x116>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d020      	beq.n	800708c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	4619      	mov	r1, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3340      	adds	r3, #64	@ 0x40
 800705a:	461c      	mov	r4, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	2201      	movs	r2, #1
 8007062:	9200      	str	r2, [sp, #0]
 8007064:	4622      	mov	r2, r4
 8007066:	f000 fc6d 	bl	8007944 <HAL_MDMA_Start_IT>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007074:	f043 0204 	orr.w	r2, r3, #4
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2206      	movs	r2, #6
 8007080:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f007 fd09 	bl	800ea9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800708a:	e007      	b.n	800709c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd90      	pop	{r4, r7, pc}

080070a2 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80070a2:	b590      	push	{r4, r7, lr}
 80070a4:	b087      	sub	sp, #28
 80070a6:	af02      	add	r7, sp, #8
 80070a8:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ae:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070c4:	f248 030c 	movw	r3, #32780	@ 0x800c
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b0c      	cmp	r3, #12
 80070cc:	d147      	bne.n	800715e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d138      	bne.n	800714e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80070ea:	1ad2      	subs	r2, r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	69d9      	ldr	r1, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	461a      	mov	r2, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f007 fcb4 	bl	800ea68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d120      	bne.n	800714e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3344      	adds	r3, #68	@ 0x44
 8007116:	4619      	mov	r1, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	461c      	mov	r4, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	2201      	movs	r2, #1
 8007124:	9200      	str	r2, [sp, #0]
 8007126:	4622      	mov	r2, r4
 8007128:	f000 fc0c 	bl	8007944 <HAL_MDMA_Start_IT>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2206      	movs	r2, #6
 8007142:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f007 fca8 	bl	800ea9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800714c:	e007      	b.n	800715e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800715c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bd90      	pop	{r4, r7, pc}

08007164 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007170:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007190:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800719e:	f043 0204 	orr.w	r2, r3, #4
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f007 fc78 	bl	800ea9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fdc7 	bl	8006d62 <JPEG_DMA_EndProcess>
  }
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80071dc:	b480      	push	{r7}
 80071de:	b08b      	sub	sp, #44	@ 0x2c
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3350      	adds	r3, #80	@ 0x50
 80071ee:	61bb      	str	r3, [r7, #24]

  i = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80071f4:	e042      	b.n	800727c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e033      	b.n	800726a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	fa22 f303 	lsr.w	r3, r2, r3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d103      	bne.n	800721e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8007216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007218:	3364      	adds	r3, #100	@ 0x64
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
 800721c:	e022      	b.n	8007264 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2264      	movs	r2, #100	@ 0x64
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800722a:	6a38      	ldr	r0, [r7, #32]
 800722c:	69f9      	ldr	r1, [r7, #28]
 800722e:	4401      	add	r1, r0
 8007230:	4818      	ldr	r0, [pc, #96]	@ (8007294 <JPEG_GetQuality+0xb8>)
 8007232:	5c41      	ldrb	r1, [r0, r1]
 8007234:	440a      	add	r2, r1
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	fbb3 f3f2 	udiv	r3, r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b64      	cmp	r3, #100	@ 0x64
 8007242:	d807      	bhi.n	8007254 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800724e:	4413      	add	r3, r2
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
 8007252:	e007      	b.n	8007264 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8007254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007260:	4413      	add	r3, r2
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	3301      	adds	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d9c8      	bls.n	8007202 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	3304      	adds	r3, #4
 8007274:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	3304      	adds	r3, #4
 800727a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007280:	d9b9      	bls.n	80071f6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	099b      	lsrs	r3, r3, #6
}
 8007286:	4618      	mov	r0, r3
 8007288:	372c      	adds	r7, #44	@ 0x2c
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	08013fb8 	.word	0x08013fb8

08007298 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e0bf      	b.n	800742a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f8ba 	bl	8007438 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80072da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b4a      	ldr	r3, [pc, #296]	@ (8007434 <HAL_LTDC_Init+0x19c>)
 800730c:	400b      	ands	r3, r1
 800730e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6899      	ldr	r1, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68d9      	ldr	r1, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b3e      	ldr	r3, [pc, #248]	@ (8007434 <HAL_LTDC_Init+0x19c>)
 800733a:	400b      	ands	r3, r1
 800733c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68d9      	ldr	r1, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6919      	ldr	r1, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b33      	ldr	r3, [pc, #204]	@ (8007434 <HAL_LTDC_Init+0x19c>)
 8007368:	400b      	ands	r3, r1
 800736a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6919      	ldr	r1, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6959      	ldr	r1, [r3, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b27      	ldr	r3, [pc, #156]	@ (8007434 <HAL_LTDC_Init+0x19c>)
 8007396:	400b      	ands	r3, r1
 8007398:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739e:	041b      	lsls	r3, r3, #16
 80073a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6959      	ldr	r1, [r3, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80073da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0206 	orr.w	r2, r2, #6
 8007406:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	f000f800 	.word	0xf000f800

08007438 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800744c:	b5b0      	push	{r4, r5, r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_LTDC_ConfigLayer+0x1a>
 8007462:	2302      	movs	r3, #2
 8007464:	e02c      	b.n	80074c0 <HAL_LTDC_ConfigLayer+0x74>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2134      	movs	r1, #52	@ 0x34
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	4413      	add	r3, r2
 8007482:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4614      	mov	r4, r2
 800748a:	461d      	mov	r5, r3
 800748c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f811 	bl	80074c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2201      	movs	r2, #1
 80074ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bdb0      	pop	{r4, r5, r7, pc}

080074c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b089      	sub	sp, #36	@ 0x24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e4:	4413      	add	r3, r2
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	01db      	lsls	r3, r3, #7
 80074f4:	4413      	add	r3, r2
 80074f6:	3384      	adds	r3, #132	@ 0x84
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	4611      	mov	r1, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	01d2      	lsls	r2, r2, #7
 8007504:	440a      	add	r2, r1
 8007506:	3284      	adds	r2, #132	@ 0x84
 8007508:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800750c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	0c1b      	lsrs	r3, r3, #16
 800751a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800751e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007520:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4619      	mov	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	01db      	lsls	r3, r3, #7
 800752c:	440b      	add	r3, r1
 800752e:	3384      	adds	r3, #132	@ 0x84
 8007530:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007536:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007546:	4413      	add	r3, r2
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	01db      	lsls	r3, r3, #7
 8007556:	4413      	add	r3, r2
 8007558:	3384      	adds	r3, #132	@ 0x84
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	4611      	mov	r1, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	01d2      	lsls	r2, r2, #7
 8007566:	440a      	add	r2, r1
 8007568:	3284      	adds	r2, #132	@ 0x84
 800756a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800756e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800757e:	4413      	add	r3, r2
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	440b      	add	r3, r1
 800758e:	3384      	adds	r3, #132	@ 0x84
 8007590:	4619      	mov	r1, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4313      	orrs	r3, r2
 8007596:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	01db      	lsls	r3, r3, #7
 80075a2:	4413      	add	r3, r2
 80075a4:	3384      	adds	r3, #132	@ 0x84
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	4611      	mov	r1, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	01d2      	lsls	r2, r2, #7
 80075b2:	440a      	add	r2, r1
 80075b4:	3284      	adds	r2, #132	@ 0x84
 80075b6:	f023 0307 	bic.w	r3, r3, #7
 80075ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	01db      	lsls	r3, r3, #7
 80075c6:	4413      	add	r3, r2
 80075c8:	3384      	adds	r3, #132	@ 0x84
 80075ca:	461a      	mov	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	061b      	lsls	r3, r3, #24
 80075ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	4413      	add	r3, r2
 80075fa:	3384      	adds	r3, #132	@ 0x84
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	4413      	add	r3, r2
 800760a:	3384      	adds	r3, #132	@ 0x84
 800760c:	461a      	mov	r2, r3
 800760e:	2300      	movs	r3, #0
 8007610:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007618:	461a      	mov	r2, r3
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	431a      	orrs	r2, r3
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	01db      	lsls	r3, r3, #7
 800762c:	440b      	add	r3, r1
 800762e:	3384      	adds	r3, #132	@ 0x84
 8007630:	4619      	mov	r1, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	01db      	lsls	r3, r3, #7
 8007642:	4413      	add	r3, r2
 8007644:	3384      	adds	r3, #132	@ 0x84
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	4611      	mov	r1, r2
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	01d2      	lsls	r2, r2, #7
 8007652:	440a      	add	r2, r1
 8007654:	3284      	adds	r2, #132	@ 0x84
 8007656:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800765a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	01db      	lsls	r3, r3, #7
 8007666:	4413      	add	r3, r2
 8007668:	3384      	adds	r3, #132	@ 0x84
 800766a:	461a      	mov	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	01db      	lsls	r3, r3, #7
 800767c:	4413      	add	r3, r2
 800767e:	3384      	adds	r3, #132	@ 0x84
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	01db      	lsls	r3, r3, #7
 800768c:	440b      	add	r3, r1
 800768e:	3384      	adds	r3, #132	@ 0x84
 8007690:	4619      	mov	r1, r3
 8007692:	4b58      	ldr	r3, [pc, #352]	@ (80077f4 <LTDC_SetConfig+0x32c>)
 8007694:	4013      	ands	r3, r2
 8007696:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	68f9      	ldr	r1, [r7, #12]
 80076a2:	6809      	ldr	r1, [r1, #0]
 80076a4:	4608      	mov	r0, r1
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	01c9      	lsls	r1, r1, #7
 80076aa:	4401      	add	r1, r0
 80076ac:	3184      	adds	r1, #132	@ 0x84
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	01db      	lsls	r3, r3, #7
 80076bc:	4413      	add	r3, r2
 80076be:	3384      	adds	r3, #132	@ 0x84
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	01db      	lsls	r3, r3, #7
 80076cc:	4413      	add	r3, r2
 80076ce:	3384      	adds	r3, #132	@ 0x84
 80076d0:	461a      	mov	r2, r3
 80076d2:	2300      	movs	r3, #0
 80076d4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	01db      	lsls	r3, r3, #7
 80076e0:	4413      	add	r3, r2
 80076e2:	3384      	adds	r3, #132	@ 0x84
 80076e4:	461a      	mov	r2, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80076f4:	2304      	movs	r3, #4
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e01b      	b.n	8007732 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d102      	bne.n	8007708 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007702:	2303      	movs	r3, #3
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e014      	b.n	8007732 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d00b      	beq.n	8007728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007714:	2b02      	cmp	r3, #2
 8007716:	d007      	beq.n	8007728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800771c:	2b03      	cmp	r3, #3
 800771e:	d003      	beq.n	8007728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007724:	2b07      	cmp	r3, #7
 8007726:	d102      	bne.n	800772e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007728:	2302      	movs	r3, #2
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e001      	b.n	8007732 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800772e:	2301      	movs	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	4413      	add	r3, r2
 800773e:	3384      	adds	r3, #132	@ 0x84
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	4611      	mov	r1, r2
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	01d2      	lsls	r2, r2, #7
 800774c:	440a      	add	r2, r1
 800774e:	3284      	adds	r2, #132	@ 0x84
 8007750:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007754:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	fb02 f303 	mul.w	r3, r2, r3
 8007760:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6859      	ldr	r1, [r3, #4]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	6809      	ldr	r1, [r1, #0]
 8007778:	4608      	mov	r0, r1
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	01c9      	lsls	r1, r1, #7
 800777e:	4401      	add	r1, r0
 8007780:	3184      	adds	r1, #132	@ 0x84
 8007782:	4313      	orrs	r3, r2
 8007784:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	01db      	lsls	r3, r3, #7
 8007790:	4413      	add	r3, r2
 8007792:	3384      	adds	r3, #132	@ 0x84
 8007794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4619      	mov	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	01db      	lsls	r3, r3, #7
 80077a0:	440b      	add	r3, r1
 80077a2:	3384      	adds	r3, #132	@ 0x84
 80077a4:	4619      	mov	r1, r3
 80077a6:	4b14      	ldr	r3, [pc, #80]	@ (80077f8 <LTDC_SetConfig+0x330>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	01db      	lsls	r3, r3, #7
 80077b6:	4413      	add	r3, r2
 80077b8:	3384      	adds	r3, #132	@ 0x84
 80077ba:	461a      	mov	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	01db      	lsls	r3, r3, #7
 80077cc:	4413      	add	r3, r2
 80077ce:	3384      	adds	r3, #132	@ 0x84
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	4611      	mov	r1, r2
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	01d2      	lsls	r2, r2, #7
 80077dc:	440a      	add	r2, r1
 80077de:	3284      	adds	r2, #132	@ 0x84
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6013      	str	r3, [r2, #0]
}
 80077e6:	bf00      	nop
 80077e8:	3724      	adds	r7, #36	@ 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	fffff8f8 	.word	0xfffff8f8
 80077f8:	fffff800 	.word	0xfffff800

080077fc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007804:	f7fc fa84 	bl	8003d10 <HAL_GetTick>
 8007808:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e03b      	b.n	800788c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007834:	e00f      	b.n	8007856 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007836:	f7fc fa6b 	bl	8003d10 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b05      	cmp	r3, #5
 8007842:	d908      	bls.n	8007856 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	@ 0x40
 8007848:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2203      	movs	r2, #3
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e01a      	b.n	800788c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e8      	bne.n	8007836 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fad9 	bl	8007e1c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e048      	b.n	8007938 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	221f      	movs	r2, #31
 800790c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e070      	b.n	8007a3e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_MDMA_Start_IT+0x26>
 8007966:	2302      	movs	r3, #2
 8007968:	e069      	b.n	8007a3e <HAL_MDMA_Start_IT+0xfa>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d158      	bne.n	8007a30 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2202      	movs	r2, #2
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0201 	bic.w	r2, r2, #1
 800799a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f9c8 	bl	8007d3c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0206 	orr.w	r2, r2, #6
 80079ba:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0210 	orr.w	r2, r2, #16
 80079d2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0208 	orr.w	r2, r2, #8
 80079ea:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0220 	orr.w	r2, r2, #32
 8007a02:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1c:	d10e      	bne.n	8007a3c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	e005      	b.n	8007a3c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e000      	b.n	8007a3e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e017      	b.n	8007a88 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d004      	beq.n	8007a6e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2280      	movs	r2, #128	@ 0x80
 8007a68:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e00c      	b.n	8007a88 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007aa0:	4b91      	ldr	r3, [pc, #580]	@ (8007ce8 <HAL_MDMA_IRQHandler+0x254>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a91      	ldr	r2, [pc, #580]	@ (8007cec <HAL_MDMA_IRQHandler+0x258>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	0a9b      	lsrs	r3, r3, #10
 8007aac:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8007cf0 <HAL_MDMA_IRQHandler+0x25c>)
 8007ab6:	4413      	add	r3, r2
 8007ab8:	099b      	lsrs	r3, r3, #6
 8007aba:	f003 031f 	and.w	r3, r3, #31
 8007abe:	2201      	movs	r2, #1
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007ac6:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 812d 	beq.w	8007d30 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d054      	beq.n	8007b8e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d04d      	beq.n	8007b8e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0202 	bic.w	r2, r2, #2
 8007b00:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b18:	f043 0201 	orr.w	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007b20:	e005      	b.n	8007b2e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b26:	f043 0202 	orr.w	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b3c:	f043 0204 	orr.w	r2, r3, #4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b52:	f043 0208 	orr.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b68:	f043 0210 	orr.w	r2, r3, #16
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d012      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2208      	movs	r2, #8
 8007be4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2204      	movs	r2, #4
 8007c18:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d039      	beq.n	8007cac <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d032      	beq.n	8007cac <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8007c54:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d110      	bne.n	8007c84 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d05c      	beq.n	8007d34 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
        }
        return;
 8007c82:	e057      	b.n	8007d34 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d040      	beq.n	8007d36 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0201 	bic.w	r2, r2, #1
 8007cca:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d30d      	bcc.n	8007cf4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f2      	bne.n	8007ccc <HAL_MDMA_IRQHandler+0x238>
 8007ce6:	e006      	b.n	8007cf6 <HAL_MDMA_IRQHandler+0x262>
 8007ce8:	200000a8 	.word	0x200000a8
 8007cec:	1b4e81b5 	.word	0x1b4e81b5
 8007cf0:	adffffc0 	.word	0xadffffc0
        break;
 8007cf4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007d14:	e003      	b.n	8007d1e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	e002      	b.n	8007d36 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007d34:	bf00      	nop
    }
  }
}
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	4b31      	ldr	r3, [pc, #196]	@ (8007e18 <MDMA_SetConfig+0xdc>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	051a      	lsls	r2, r3, #20
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	221f      	movs	r2, #31
 8007d80:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007d98:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da0:	d002      	beq.n	8007da8 <MDMA_SetConfig+0x6c>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007db6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007db8:	e007      	b.n	8007dca <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007dd0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd8:	d002      	beq.n	8007de0 <MDMA_SetConfig+0xa4>
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d108      	bne.n	8007df2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8007df0:	e007      	b.n	8007e02 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007e00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	fffe0000 	.word	0xfffe0000

08007e1c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68d9      	ldr	r1, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007e42:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007e4e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007e5a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	3b01      	subs	r3, #1
 8007e62:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007e64:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007e70:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007e72:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7c:	d107      	bne.n	8007e8e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8007e8c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da11      	bge.n	8007ec2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695a      	ldr	r2, [r3, #20]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007eac:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	425b      	negs	r3, r3
 8007eb4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	b292      	uxth	r2, r2
 8007ebe:	621a      	str	r2, [r3, #32]
 8007ec0:	e006      	b.n	8007ed0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	b292      	uxth	r2, r2
 8007ece:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da15      	bge.n	8007f04 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007ee6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	425b      	negs	r3, r3
 8007eee:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6a19      	ldr	r1, [r3, #32]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	041a      	lsls	r2, r3, #16
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	621a      	str	r2, [r3, #32]
 8007f02:	e009      	b.n	8007f18 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a19      	ldr	r1, [r3, #32]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	041a      	lsls	r2, r3, #16
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f20:	d006      	beq.n	8007f30 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f2e:	e003      	b.n	8007f38 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007f54:	4b29      	ldr	r3, [pc, #164]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	d00a      	beq.n	8007f76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f60:	4b26      	ldr	r3, [pc, #152]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d001      	beq.n	8007f72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e040      	b.n	8007ff4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e03e      	b.n	8007ff4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f76:	4b21      	ldr	r3, [pc, #132]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007f7e:	491f      	ldr	r1, [pc, #124]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f86:	f7fb fec3 	bl	8003d10 <HAL_GetTick>
 8007f8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f8c:	e009      	b.n	8007fa2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f8e:	f7fb febf 	bl	8003d10 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f9c:	d901      	bls.n	8007fa2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e028      	b.n	8007ff4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fa2:	4b16      	ldr	r3, [pc, #88]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fae:	d1ee      	bne.n	8007f8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b1e      	cmp	r3, #30
 8007fb4:	d008      	beq.n	8007fc8 <HAL_PWREx_ConfigSupply+0x7c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fba:	d005      	beq.n	8007fc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b1d      	cmp	r3, #29
 8007fc0:	d002      	beq.n	8007fc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fc6:	d114      	bne.n	8007ff2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007fc8:	f7fb fea2 	bl	8003d10 <HAL_GetTick>
 8007fcc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007fce:	e009      	b.n	8007fe4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fd0:	f7fb fe9e 	bl	8003d10 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fde:	d901      	bls.n	8007fe4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e007      	b.n	8007ff4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007fe4:	4b05      	ldr	r3, [pc, #20]	@ (8007ffc <HAL_PWREx_ConfigSupply+0xb0>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff0:	d1ee      	bne.n	8007fd0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	58024800 	.word	0x58024800

08008000 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	@ 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f000 bc48 	b.w	80088a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8088 	beq.w	8008132 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008022:	4b99      	ldr	r3, [pc, #612]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800802c:	4b96      	ldr	r3, [pc, #600]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	2b10      	cmp	r3, #16
 8008036:	d007      	beq.n	8008048 <HAL_RCC_OscConfig+0x48>
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	2b18      	cmp	r3, #24
 800803c:	d111      	bne.n	8008062 <HAL_RCC_OscConfig+0x62>
 800803e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d10c      	bne.n	8008062 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008048:	4b8f      	ldr	r3, [pc, #572]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d06d      	beq.n	8008130 <HAL_RCC_OscConfig+0x130>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d169      	bne.n	8008130 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f000 bc21 	b.w	80088a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800806a:	d106      	bne.n	800807a <HAL_RCC_OscConfig+0x7a>
 800806c:	4b86      	ldr	r3, [pc, #536]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a85      	ldr	r2, [pc, #532]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	e02e      	b.n	80080d8 <HAL_RCC_OscConfig+0xd8>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10c      	bne.n	800809c <HAL_RCC_OscConfig+0x9c>
 8008082:	4b81      	ldr	r3, [pc, #516]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a80      	ldr	r2, [pc, #512]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4b7e      	ldr	r3, [pc, #504]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a7d      	ldr	r2, [pc, #500]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	e01d      	b.n	80080d8 <HAL_RCC_OscConfig+0xd8>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080a4:	d10c      	bne.n	80080c0 <HAL_RCC_OscConfig+0xc0>
 80080a6:	4b78      	ldr	r3, [pc, #480]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a77      	ldr	r2, [pc, #476]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	4b75      	ldr	r3, [pc, #468]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a74      	ldr	r2, [pc, #464]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	e00b      	b.n	80080d8 <HAL_RCC_OscConfig+0xd8>
 80080c0:	4b71      	ldr	r3, [pc, #452]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a70      	ldr	r2, [pc, #448]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	4b6e      	ldr	r3, [pc, #440]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a6d      	ldr	r2, [pc, #436]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d013      	beq.n	8008108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fb fe16 	bl	8003d10 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e8:	f7fb fe12 	bl	8003d10 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	@ 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e3d4      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080fa:	4b63      	ldr	r3, [pc, #396]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f0      	beq.n	80080e8 <HAL_RCC_OscConfig+0xe8>
 8008106:	e014      	b.n	8008132 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fb fe02 	bl	8003d10 <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008110:	f7fb fdfe 	bl	8003d10 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b64      	cmp	r3, #100	@ 0x64
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e3c0      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008122:	4b59      	ldr	r3, [pc, #356]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x110>
 800812e:	e000      	b.n	8008132 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80ca 	beq.w	80082d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008140:	4b51      	ldr	r3, [pc, #324]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008148:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800814a:	4b4f      	ldr	r3, [pc, #316]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <HAL_RCC_OscConfig+0x166>
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	2b18      	cmp	r3, #24
 800815a:	d156      	bne.n	800820a <HAL_RCC_OscConfig+0x20a>
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d151      	bne.n	800820a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008166:	4b48      	ldr	r3, [pc, #288]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <HAL_RCC_OscConfig+0x17e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e392      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800817e:	4b42      	ldr	r3, [pc, #264]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f023 0219 	bic.w	r2, r3, #25
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	493f      	ldr	r1, [pc, #252]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800818c:	4313      	orrs	r3, r2
 800818e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fb fdbe 	bl	8003d10 <HAL_GetTick>
 8008194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008198:	f7fb fdba 	bl	8003d10 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e37c      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081aa:	4b37      	ldr	r3, [pc, #220]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b6:	f7fb fddb 	bl	8003d70 <HAL_GetREVID>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d817      	bhi.n	80081f4 <HAL_RCC_OscConfig+0x1f4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b40      	cmp	r3, #64	@ 0x40
 80081ca:	d108      	bne.n	80081de <HAL_RCC_OscConfig+0x1de>
 80081cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80081d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081dc:	e07a      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081de:	4b2a      	ldr	r3, [pc, #168]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	031b      	lsls	r3, r3, #12
 80081ec:	4926      	ldr	r1, [pc, #152]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081f2:	e06f      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f4:	4b24      	ldr	r3, [pc, #144]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	061b      	lsls	r3, r3, #24
 8008202:	4921      	ldr	r1, [pc, #132]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008204:	4313      	orrs	r3, r2
 8008206:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008208:	e064      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d047      	beq.n	80082a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008212:	4b1d      	ldr	r3, [pc, #116]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f023 0219 	bic.w	r2, r3, #25
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	491a      	ldr	r1, [pc, #104]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008220:	4313      	orrs	r3, r2
 8008222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008224:	f7fb fd74 	bl	8003d10 <HAL_GetTick>
 8008228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800822c:	f7fb fd70 	bl	8003d10 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e332      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800823e:	4b12      	ldr	r3, [pc, #72]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f0      	beq.n	800822c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824a:	f7fb fd91 	bl	8003d70 <HAL_GetREVID>
 800824e:	4603      	mov	r3, r0
 8008250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008254:	4293      	cmp	r3, r2
 8008256:	d819      	bhi.n	800828c <HAL_RCC_OscConfig+0x28c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b40      	cmp	r3, #64	@ 0x40
 800825e:	d108      	bne.n	8008272 <HAL_RCC_OscConfig+0x272>
 8008260:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008268:	4a07      	ldr	r2, [pc, #28]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 800826a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800826e:	6053      	str	r3, [r2, #4]
 8008270:	e030      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	031b      	lsls	r3, r3, #12
 8008280:	4901      	ldr	r1, [pc, #4]	@ (8008288 <HAL_RCC_OscConfig+0x288>)
 8008282:	4313      	orrs	r3, r2
 8008284:	604b      	str	r3, [r1, #4]
 8008286:	e025      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
 8008288:	58024400 	.word	0x58024400
 800828c:	4b9a      	ldr	r3, [pc, #616]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	061b      	lsls	r3, r3, #24
 800829a:	4997      	ldr	r1, [pc, #604]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800829c:	4313      	orrs	r3, r2
 800829e:	604b      	str	r3, [r1, #4]
 80082a0:	e018      	b.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082a2:	4b95      	ldr	r3, [pc, #596]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a94      	ldr	r2, [pc, #592]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ae:	f7fb fd2f 	bl	8003d10 <HAL_GetTick>
 80082b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082b6:	f7fb fd2b 	bl	8003d10 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e2ed      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082c8:	4b8b      	ldr	r3, [pc, #556]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f0      	bne.n	80082b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80a9 	beq.w	8008434 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e2:	4b85      	ldr	r3, [pc, #532]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082ec:	4b82      	ldr	r3, [pc, #520]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80082ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d007      	beq.n	8008308 <HAL_RCC_OscConfig+0x308>
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b18      	cmp	r3, #24
 80082fc:	d13a      	bne.n	8008374 <HAL_RCC_OscConfig+0x374>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b01      	cmp	r3, #1
 8008306:	d135      	bne.n	8008374 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008308:	4b7b      	ldr	r3, [pc, #492]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_RCC_OscConfig+0x320>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	2b80      	cmp	r3, #128	@ 0x80
 800831a:	d001      	beq.n	8008320 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e2c1      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008320:	f7fb fd26 	bl	8003d70 <HAL_GetREVID>
 8008324:	4603      	mov	r3, r0
 8008326:	f241 0203 	movw	r2, #4099	@ 0x1003
 800832a:	4293      	cmp	r3, r2
 800832c:	d817      	bhi.n	800835e <HAL_RCC_OscConfig+0x35e>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	2b20      	cmp	r3, #32
 8008334:	d108      	bne.n	8008348 <HAL_RCC_OscConfig+0x348>
 8008336:	4b70      	ldr	r3, [pc, #448]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800833e:	4a6e      	ldr	r2, [pc, #440]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008344:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008346:	e075      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008348:	4b6b      	ldr	r3, [pc, #428]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	069b      	lsls	r3, r3, #26
 8008356:	4968      	ldr	r1, [pc, #416]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008358:	4313      	orrs	r3, r2
 800835a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800835c:	e06a      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800835e:	4b66      	ldr	r3, [pc, #408]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	061b      	lsls	r3, r3, #24
 800836c:	4962      	ldr	r1, [pc, #392]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800836e:	4313      	orrs	r3, r2
 8008370:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008372:	e05f      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d042      	beq.n	8008402 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800837c:	4b5e      	ldr	r3, [pc, #376]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a5d      	ldr	r2, [pc, #372]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7fb fcc2 	bl	8003d10 <HAL_GetTick>
 800838c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008390:	f7fb fcbe 	bl	8003d10 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e280      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a2:	4b55      	ldr	r3, [pc, #340]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ae:	f7fb fcdf 	bl	8003d70 <HAL_GetREVID>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d817      	bhi.n	80083ec <HAL_RCC_OscConfig+0x3ec>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d108      	bne.n	80083d6 <HAL_RCC_OscConfig+0x3d6>
 80083c4:	4b4c      	ldr	r3, [pc, #304]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80083cc:	4a4a      	ldr	r2, [pc, #296]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083d2:	6053      	str	r3, [r2, #4]
 80083d4:	e02e      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
 80083d6:	4b48      	ldr	r3, [pc, #288]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	069b      	lsls	r3, r3, #26
 80083e4:	4944      	ldr	r1, [pc, #272]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	604b      	str	r3, [r1, #4]
 80083ea:	e023      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
 80083ec:	4b42      	ldr	r3, [pc, #264]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	061b      	lsls	r3, r3, #24
 80083fa:	493f      	ldr	r1, [pc, #252]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60cb      	str	r3, [r1, #12]
 8008400:	e018      	b.n	8008434 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008402:	4b3d      	ldr	r3, [pc, #244]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a3c      	ldr	r2, [pc, #240]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800840c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840e:	f7fb fc7f 	bl	8003d10 <HAL_GetTick>
 8008412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008416:	f7fb fc7b 	bl	8003d10 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e23d      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008428:	4b33      	ldr	r3, [pc, #204]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f0      	bne.n	8008416 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0308 	and.w	r3, r3, #8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d036      	beq.n	80084ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d019      	beq.n	800847c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008448:	4b2b      	ldr	r3, [pc, #172]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800844a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800844c:	4a2a      	ldr	r2, [pc, #168]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008454:	f7fb fc5c 	bl	8003d10 <HAL_GetTick>
 8008458:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800845c:	f7fb fc58 	bl	8003d10 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e21a      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800846e:	4b22      	ldr	r3, [pc, #136]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0x45c>
 800847a:	e018      	b.n	80084ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800847c:	4b1e      	ldr	r3, [pc, #120]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 800847e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008480:	4a1d      	ldr	r2, [pc, #116]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008488:	f7fb fc42 	bl	8003d10 <HAL_GetTick>
 800848c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008490:	f7fb fc3e 	bl	8003d10 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e200      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084a2:	4b15      	ldr	r3, [pc, #84]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80084a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d039      	beq.n	800852e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01c      	beq.n	80084fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a0c      	ldr	r2, [pc, #48]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80084c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084ce:	f7fb fc1f 	bl	8003d10 <HAL_GetTick>
 80084d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084d4:	e008      	b.n	80084e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084d6:	f7fb fc1b 	bl	8003d10 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e1dd      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084e8:	4b03      	ldr	r3, [pc, #12]	@ (80084f8 <HAL_RCC_OscConfig+0x4f8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0f0      	beq.n	80084d6 <HAL_RCC_OscConfig+0x4d6>
 80084f4:	e01b      	b.n	800852e <HAL_RCC_OscConfig+0x52e>
 80084f6:	bf00      	nop
 80084f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084fc:	4b9b      	ldr	r3, [pc, #620]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a9a      	ldr	r2, [pc, #616]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008506:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008508:	f7fb fc02 	bl	8003d10 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008510:	f7fb fbfe 	bl	8003d10 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e1c0      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008522:	4b92      	ldr	r3, [pc, #584]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f0      	bne.n	8008510 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8081 	beq.w	800863e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800853c:	4b8c      	ldr	r3, [pc, #560]	@ (8008770 <HAL_RCC_OscConfig+0x770>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a8b      	ldr	r2, [pc, #556]	@ (8008770 <HAL_RCC_OscConfig+0x770>)
 8008542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008548:	f7fb fbe2 	bl	8003d10 <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008550:	f7fb fbde 	bl	8003d10 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b64      	cmp	r3, #100	@ 0x64
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e1a0      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008562:	4b83      	ldr	r3, [pc, #524]	@ (8008770 <HAL_RCC_OscConfig+0x770>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0f0      	beq.n	8008550 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d106      	bne.n	8008584 <HAL_RCC_OscConfig+0x584>
 8008576:	4b7d      	ldr	r3, [pc, #500]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857a:	4a7c      	ldr	r2, [pc, #496]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800857c:	f043 0301 	orr.w	r3, r3, #1
 8008580:	6713      	str	r3, [r2, #112]	@ 0x70
 8008582:	e02d      	b.n	80085e0 <HAL_RCC_OscConfig+0x5e0>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10c      	bne.n	80085a6 <HAL_RCC_OscConfig+0x5a6>
 800858c:	4b77      	ldr	r3, [pc, #476]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008590:	4a76      	ldr	r2, [pc, #472]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	6713      	str	r3, [r2, #112]	@ 0x70
 8008598:	4b74      	ldr	r3, [pc, #464]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800859a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800859c:	4a73      	ldr	r2, [pc, #460]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800859e:	f023 0304 	bic.w	r3, r3, #4
 80085a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085a4:	e01c      	b.n	80085e0 <HAL_RCC_OscConfig+0x5e0>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0x5c8>
 80085ae:	4b6f      	ldr	r3, [pc, #444]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b2:	4a6e      	ldr	r2, [pc, #440]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085b4:	f043 0304 	orr.w	r3, r3, #4
 80085b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085ba:	4b6c      	ldr	r3, [pc, #432]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085be:	4a6b      	ldr	r2, [pc, #428]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085c6:	e00b      	b.n	80085e0 <HAL_RCC_OscConfig+0x5e0>
 80085c8:	4b68      	ldr	r3, [pc, #416]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085cc:	4a67      	ldr	r2, [pc, #412]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085d4:	4b65      	ldr	r3, [pc, #404]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d8:	4a64      	ldr	r2, [pc, #400]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80085da:	f023 0304 	bic.w	r3, r3, #4
 80085de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d015      	beq.n	8008614 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e8:	f7fb fb92 	bl	8003d10 <HAL_GetTick>
 80085ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ee:	e00a      	b.n	8008606 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f0:	f7fb fb8e 	bl	8003d10 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085fe:	4293      	cmp	r3, r2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e14e      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008606:	4b59      	ldr	r3, [pc, #356]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0ee      	beq.n	80085f0 <HAL_RCC_OscConfig+0x5f0>
 8008612:	e014      	b.n	800863e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008614:	f7fb fb7c 	bl	8003d10 <HAL_GetTick>
 8008618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800861a:	e00a      	b.n	8008632 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800861c:	f7fb fb78 	bl	8003d10 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800862a:	4293      	cmp	r3, r2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e138      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008632:	4b4e      	ldr	r3, [pc, #312]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1ee      	bne.n	800861c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 812d 	beq.w	80088a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008648:	4b48      	ldr	r3, [pc, #288]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008650:	2b18      	cmp	r3, #24
 8008652:	f000 80bd 	beq.w	80087d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	2b02      	cmp	r3, #2
 800865c:	f040 809e 	bne.w	800879c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008660:	4b42      	ldr	r3, [pc, #264]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a41      	ldr	r2, [pc, #260]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800866a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fb fb50 	bl	8003d10 <HAL_GetTick>
 8008670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008674:	f7fb fb4c 	bl	8003d10 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e10e      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008686:	4b39      	ldr	r3, [pc, #228]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008692:	4b36      	ldr	r3, [pc, #216]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008696:	4b37      	ldr	r3, [pc, #220]	@ (8008774 <HAL_RCC_OscConfig+0x774>)
 8008698:	4013      	ands	r3, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086a2:	0112      	lsls	r2, r2, #4
 80086a4:	430a      	orrs	r2, r1
 80086a6:	4931      	ldr	r1, [pc, #196]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ba:	3b01      	subs	r3, #1
 80086bc:	025b      	lsls	r3, r3, #9
 80086be:	b29b      	uxth	r3, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c6:	3b01      	subs	r3, #1
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d4:	3b01      	subs	r3, #1
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086dc:	4923      	ldr	r1, [pc, #140]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086e2:	4b22      	ldr	r3, [pc, #136]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	4a21      	ldr	r2, [pc, #132]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086ee:	4b1f      	ldr	r3, [pc, #124]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086f2:	4b21      	ldr	r3, [pc, #132]	@ (8008778 <HAL_RCC_OscConfig+0x778>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086fa:	00d2      	lsls	r2, r2, #3
 80086fc:	491b      	ldr	r1, [pc, #108]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008702:	4b1a      	ldr	r3, [pc, #104]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008706:	f023 020c 	bic.w	r2, r3, #12
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	4917      	ldr	r1, [pc, #92]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008710:	4313      	orrs	r3, r2
 8008712:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008714:	4b15      	ldr	r3, [pc, #84]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	f023 0202 	bic.w	r2, r3, #2
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008720:	4912      	ldr	r1, [pc, #72]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008726:	4b11      	ldr	r3, [pc, #68]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	4a10      	ldr	r2, [pc, #64]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800872c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008732:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	4a0d      	ldr	r2, [pc, #52]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800873c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800873e:	4b0b      	ldr	r3, [pc, #44]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	4a0a      	ldr	r2, [pc, #40]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800874a:	4b08      	ldr	r3, [pc, #32]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	4a07      	ldr	r2, [pc, #28]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008756:	4b05      	ldr	r3, [pc, #20]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a04      	ldr	r2, [pc, #16]	@ (800876c <HAL_RCC_OscConfig+0x76c>)
 800875c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008762:	f7fb fad5 	bl	8003d10 <HAL_GetTick>
 8008766:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008768:	e011      	b.n	800878e <HAL_RCC_OscConfig+0x78e>
 800876a:	bf00      	nop
 800876c:	58024400 	.word	0x58024400
 8008770:	58024800 	.word	0x58024800
 8008774:	fffffc0c 	.word	0xfffffc0c
 8008778:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800877c:	f7fb fac8 	bl	8003d10 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e08a      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800878e:	4b47      	ldr	r3, [pc, #284]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x77c>
 800879a:	e082      	b.n	80088a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800879c:	4b43      	ldr	r3, [pc, #268]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a42      	ldr	r2, [pc, #264]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 80087a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fb fab2 	bl	8003d10 <HAL_GetTick>
 80087ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087b0:	f7fb faae 	bl	8003d10 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e070      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087c2:	4b3a      	ldr	r3, [pc, #232]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x7b0>
 80087ce:	e068      	b.n	80088a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087d0:	4b36      	ldr	r3, [pc, #216]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087d6:	4b35      	ldr	r3, [pc, #212]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d031      	beq.n	8008848 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f003 0203 	and.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d12a      	bne.n	8008848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	091b      	lsrs	r3, r3, #4
 80087f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087fe:	429a      	cmp	r2, r3
 8008800:	d122      	bne.n	8008848 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800880e:	429a      	cmp	r2, r3
 8008810:	d11a      	bne.n	8008848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	0a5b      	lsrs	r3, r3, #9
 8008816:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008820:	429a      	cmp	r2, r3
 8008822:	d111      	bne.n	8008848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	0c1b      	lsrs	r3, r3, #16
 8008828:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008832:	429a      	cmp	r2, r3
 8008834:	d108      	bne.n	8008848 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	0e1b      	lsrs	r3, r3, #24
 800883a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008842:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e02b      	b.n	80088a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800884c:	4b17      	ldr	r3, [pc, #92]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 800884e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008850:	08db      	lsrs	r3, r3, #3
 8008852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008856:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	429a      	cmp	r2, r3
 8008860:	d01f      	beq.n	80088a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008862:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	4a11      	ldr	r2, [pc, #68]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800886e:	f7fb fa4f 	bl	8003d10 <HAL_GetTick>
 8008872:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008874:	bf00      	nop
 8008876:	f7fb fa4b 	bl	8003d10 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	4293      	cmp	r3, r2
 8008880:	d0f9      	beq.n	8008876 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008882:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008886:	4b0a      	ldr	r3, [pc, #40]	@ (80088b0 <HAL_RCC_OscConfig+0x8b0>)
 8008888:	4013      	ands	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	4906      	ldr	r1, [pc, #24]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008892:	4313      	orrs	r3, r2
 8008894:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008896:	4b05      	ldr	r3, [pc, #20]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	4a04      	ldr	r2, [pc, #16]	@ (80088ac <HAL_RCC_OscConfig+0x8ac>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3730      	adds	r7, #48	@ 0x30
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	58024400 	.word	0x58024400
 80088b0:	ffff0007 	.word	0xffff0007

080088b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e19c      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088c8:	4b8a      	ldr	r3, [pc, #552]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d910      	bls.n	80088f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b87      	ldr	r3, [pc, #540]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 020f 	bic.w	r2, r3, #15
 80088de:	4985      	ldr	r1, [pc, #532]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b83      	ldr	r3, [pc, #524]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e184      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	4b7b      	ldr	r3, [pc, #492]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008910:	429a      	cmp	r2, r3
 8008912:	d908      	bls.n	8008926 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008914:	4b78      	ldr	r3, [pc, #480]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4975      	ldr	r1, [pc, #468]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008922:	4313      	orrs	r3, r2
 8008924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0308 	and.w	r3, r3, #8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	4b70      	ldr	r3, [pc, #448]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800893e:	429a      	cmp	r2, r3
 8008940:	d908      	bls.n	8008954 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008942:	4b6d      	ldr	r3, [pc, #436]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	496a      	ldr	r1, [pc, #424]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008950:	4313      	orrs	r3, r2
 8008952:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	4b64      	ldr	r3, [pc, #400]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800896c:	429a      	cmp	r2, r3
 800896e:	d908      	bls.n	8008982 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008970:	4b61      	ldr	r3, [pc, #388]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	495e      	ldr	r1, [pc, #376]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 800897e:	4313      	orrs	r3, r2
 8008980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	4b59      	ldr	r3, [pc, #356]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800899a:	429a      	cmp	r2, r3
 800899c:	d908      	bls.n	80089b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800899e:	4b56      	ldr	r3, [pc, #344]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4953      	ldr	r1, [pc, #332]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	4b4d      	ldr	r3, [pc, #308]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d908      	bls.n	80089de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089cc:	4b4a      	ldr	r3, [pc, #296]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f023 020f 	bic.w	r2, r3, #15
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4947      	ldr	r1, [pc, #284]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d055      	beq.n	8008a96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ea:	4b43      	ldr	r3, [pc, #268]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	4940      	ldr	r1, [pc, #256]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d107      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a04:	4b3c      	ldr	r3, [pc, #240]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d121      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0f6      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a1c:	4b36      	ldr	r3, [pc, #216]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d115      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0ea      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d107      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a34:	4b30      	ldr	r3, [pc, #192]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0de      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a44:	4b2c      	ldr	r3, [pc, #176]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0d6      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a54:	4b28      	ldr	r3, [pc, #160]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f023 0207 	bic.w	r2, r3, #7
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	4925      	ldr	r1, [pc, #148]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a66:	f7fb f953 	bl	8003d10 <HAL_GetTick>
 8008a6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6c:	e00a      	b.n	8008a84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a6e:	f7fb f94f 	bl	8003d10 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0be      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a84:	4b1c      	ldr	r3, [pc, #112]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d1eb      	bne.n	8008a6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d010      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d208      	bcs.n	8008ac4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab2:	4b11      	ldr	r3, [pc, #68]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f023 020f 	bic.w	r2, r3, #15
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	490e      	ldr	r1, [pc, #56]	@ (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d214      	bcs.n	8008afc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b08      	ldr	r3, [pc, #32]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f023 020f 	bic.w	r2, r3, #15
 8008ada:	4906      	ldr	r1, [pc, #24]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae2:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e086      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
 8008af4:	52002000 	.word	0x52002000
 8008af8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d208      	bcs.n	8008b2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b18:	4b3c      	ldr	r3, [pc, #240]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	4939      	ldr	r1, [pc, #228]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d010      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d208      	bcs.n	8008b58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b46:	4b31      	ldr	r3, [pc, #196]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	492e      	ldr	r1, [pc, #184]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d010      	beq.n	8008b86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d208      	bcs.n	8008b86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b74:	4b25      	ldr	r3, [pc, #148]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4922      	ldr	r1, [pc, #136]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d010      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	4b1d      	ldr	r3, [pc, #116]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d208      	bcs.n	8008bb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4917      	ldr	r1, [pc, #92]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bb4:	f000 f834 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	4912      	ldr	r1, [pc, #72]	@ (8008c10 <HAL_RCC_ClockConfig+0x35c>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	4a0d      	ldr	r2, [pc, #52]	@ (8008c10 <HAL_RCC_ClockConfig+0x35c>)
 8008bdc:	5cd3      	ldrb	r3, [r2, r3]
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c14 <HAL_RCC_ClockConfig+0x360>)
 8008bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bec:	4a0a      	ldr	r2, [pc, #40]	@ (8008c18 <HAL_RCC_ClockConfig+0x364>)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <HAL_RCC_ClockConfig+0x368>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fb f840 	bl	8003c7c <HAL_InitTick>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	58024400 	.word	0x58024400
 8008c10:	08013e08 	.word	0x08013e08
 8008c14:	200000ac 	.word	0x200000ac
 8008c18:	200000a8 	.word	0x200000a8
 8008c1c:	200000b0 	.word	0x200000b0

08008c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b089      	sub	sp, #36	@ 0x24
 8008c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c26:	4bb3      	ldr	r3, [pc, #716]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c2e:	2b18      	cmp	r3, #24
 8008c30:	f200 8155 	bhi.w	8008ede <HAL_RCC_GetSysClockFreq+0x2be>
 8008c34:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008ca1 	.word	0x08008ca1
 8008c40:	08008edf 	.word	0x08008edf
 8008c44:	08008edf 	.word	0x08008edf
 8008c48:	08008edf 	.word	0x08008edf
 8008c4c:	08008edf 	.word	0x08008edf
 8008c50:	08008edf 	.word	0x08008edf
 8008c54:	08008edf 	.word	0x08008edf
 8008c58:	08008edf 	.word	0x08008edf
 8008c5c:	08008cc7 	.word	0x08008cc7
 8008c60:	08008edf 	.word	0x08008edf
 8008c64:	08008edf 	.word	0x08008edf
 8008c68:	08008edf 	.word	0x08008edf
 8008c6c:	08008edf 	.word	0x08008edf
 8008c70:	08008edf 	.word	0x08008edf
 8008c74:	08008edf 	.word	0x08008edf
 8008c78:	08008edf 	.word	0x08008edf
 8008c7c:	08008ccd 	.word	0x08008ccd
 8008c80:	08008edf 	.word	0x08008edf
 8008c84:	08008edf 	.word	0x08008edf
 8008c88:	08008edf 	.word	0x08008edf
 8008c8c:	08008edf 	.word	0x08008edf
 8008c90:	08008edf 	.word	0x08008edf
 8008c94:	08008edf 	.word	0x08008edf
 8008c98:	08008edf 	.word	0x08008edf
 8008c9c:	08008cd3 	.word	0x08008cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca0:	4b94      	ldr	r3, [pc, #592]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cac:	4b91      	ldr	r3, [pc, #580]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	08db      	lsrs	r3, r3, #3
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	4a90      	ldr	r2, [pc, #576]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008cbe:	e111      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cc2:	61bb      	str	r3, [r7, #24]
      break;
 8008cc4:	e10e      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8008efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cc8:	61bb      	str	r3, [r7, #24]
      break;
 8008cca:	e10b      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8008f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cce:	61bb      	str	r3, [r7, #24]
      break;
 8008cd0:	e108      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cd2:	4b88      	ldr	r3, [pc, #544]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008cdc:	4b85      	ldr	r3, [pc, #532]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce0:	091b      	lsrs	r3, r3, #4
 8008ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ce6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ce8:	4b82      	ldr	r3, [pc, #520]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cf2:	4b80      	ldr	r3, [pc, #512]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf6:	08db      	lsrs	r3, r3, #3
 8008cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80e1 	beq.w	8008ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	f000 8083 	beq.w	8008e24 <HAL_RCC_GetSysClockFreq+0x204>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	f200 80a1 	bhi.w	8008e68 <HAL_RCC_GetSysClockFreq+0x248>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <HAL_RCC_GetSysClockFreq+0x114>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d056      	beq.n	8008de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d32:	e099      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d34:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d02d      	beq.n	8008d9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d40:	4b6c      	ldr	r3, [pc, #432]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	4a6b      	ldr	r2, [pc, #428]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b62      	ldr	r3, [pc, #392]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d9a:	e087      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b51      	ldr	r3, [pc, #324]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dde:	e065      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df2:	4b40      	ldr	r3, [pc, #256]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e22:	e043      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e36:	4b2f      	ldr	r3, [pc, #188]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e66:	e021      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008eac:	4b11      	ldr	r3, [pc, #68]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb0:	0a5b      	lsrs	r3, r3, #9
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed0:	ee17 3a90 	vmov	r3, s15
 8008ed4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ed6:	e005      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61bb      	str	r3, [r7, #24]
      break;
 8008edc:	e002      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008ede:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ee0:	61bb      	str	r3, [r7, #24]
      break;
 8008ee2:	bf00      	nop
  }

  return sysclockfreq;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3724      	adds	r7, #36	@ 0x24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	03d09000 	.word	0x03d09000
 8008efc:	003d0900 	.word	0x003d0900
 8008f00:	017d7840 	.word	0x017d7840
 8008f04:	46000000 	.word	0x46000000
 8008f08:	4c742400 	.word	0x4c742400
 8008f0c:	4a742400 	.word	0x4a742400
 8008f10:	4bbebc20 	.word	0x4bbebc20

08008f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f1a:	f7ff fe81 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	0a1b      	lsrs	r3, r3, #8
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	490f      	ldr	r1, [pc, #60]	@ (8008f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f2c:	5ccb      	ldrb	r3, [r1, r3]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f38:	4b0a      	ldr	r3, [pc, #40]	@ (8008f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	4a09      	ldr	r2, [pc, #36]	@ (8008f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f42:	5cd3      	ldrb	r3, [r2, r3]
 8008f44:	f003 031f 	and.w	r3, r3, #31
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4e:	4a07      	ldr	r2, [pc, #28]	@ (8008f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f52:	4a07      	ldr	r2, [pc, #28]	@ (8008f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	58024400 	.word	0x58024400
 8008f68:	08013e08 	.word	0x08013e08
 8008f6c:	200000ac 	.word	0x200000ac
 8008f70:	200000a8 	.word	0x200000a8

08008f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f78:	f7ff ffcc 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	091b      	lsrs	r3, r3, #4
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	4904      	ldr	r1, [pc, #16]	@ (8008f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f8a:	5ccb      	ldrb	r3, [r1, r3]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	08013e08 	.word	0x08013e08

08008fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b0cc      	sub	sp, #304	@ 0x130
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008fc4:	2500      	movs	r5, #0
 8008fc6:	ea54 0305 	orrs.w	r3, r4, r5
 8008fca:	d049      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fd6:	d02f      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fdc:	d828      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fe2:	d01a      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fe8:	d822      	bhi.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ff2:	d007      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ff4:	e01c      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff6:	4bb8      	ldr	r3, [pc, #736]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	4ab7      	ldr	r2, [pc, #732]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009002:	e01a      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009008:	3308      	adds	r3, #8
 800900a:	2102      	movs	r1, #2
 800900c:	4618      	mov	r0, r3
 800900e:	f002 fba1 	bl	800b754 <RCCEx_PLL2_Config>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009018:	e00f      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800901a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800901e:	3328      	adds	r3, #40	@ 0x28
 8009020:	2102      	movs	r1, #2
 8009022:	4618      	mov	r0, r3
 8009024:	f002 fc48 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800902e:	e004      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009036:	e000      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009042:	4ba5      	ldr	r3, [pc, #660]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800904a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800904e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009050:	4aa1      	ldr	r2, [pc, #644]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009052:	430b      	orrs	r3, r1
 8009054:	6513      	str	r3, [r2, #80]	@ 0x50
 8009056:	e003      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800905c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	ea58 0309 	orrs.w	r3, r8, r9
 8009074:	d047      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800907a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800907c:	2b04      	cmp	r3, #4
 800907e:	d82a      	bhi.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009080:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	0800909d 	.word	0x0800909d
 800908c:	080090ab 	.word	0x080090ab
 8009090:	080090c1 	.word	0x080090c1
 8009094:	080090df 	.word	0x080090df
 8009098:	080090df 	.word	0x080090df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909c:	4b8e      	ldr	r3, [pc, #568]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800909e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a0:	4a8d      	ldr	r2, [pc, #564]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a8:	e01a      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090ae:	3308      	adds	r3, #8
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 fb4e 	bl	800b754 <RCCEx_PLL2_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090be:	e00f      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090c4:	3328      	adds	r3, #40	@ 0x28
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f002 fbf5 	bl	800b8b8 <RCCEx_PLL3_Config>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090d4:	e004      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80090dc:	e000      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090e8:	4b7b      	ldr	r3, [pc, #492]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ec:	f023 0107 	bic.w	r1, r3, #7
 80090f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f6:	4a78      	ldr	r2, [pc, #480]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80090fc:	e003      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009102:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009112:	f04f 0b00 	mov.w	fp, #0
 8009116:	ea5a 030b 	orrs.w	r3, sl, fp
 800911a:	d04c      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800911c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009126:	d030      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800912c:	d829      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800912e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009130:	d02d      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009132:	2bc0      	cmp	r3, #192	@ 0xc0
 8009134:	d825      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d018      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800913a:	2b80      	cmp	r3, #128	@ 0x80
 800913c:	d821      	bhi.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d007      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009146:	e01c      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009148:	4b63      	ldr	r3, [pc, #396]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	4a62      	ldr	r2, [pc, #392]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800914e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009154:	e01c      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009156:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800915a:	3308      	adds	r3, #8
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f002 faf8 	bl	800b754 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800916a:	e011      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800916c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009170:	3328      	adds	r3, #40	@ 0x28
 8009172:	2100      	movs	r1, #0
 8009174:	4618      	mov	r0, r3
 8009176:	f002 fb9f 	bl	800b8b8 <RCCEx_PLL3_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009180:	e006      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009188:	e002      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800918a:	bf00      	nop
 800918c:	e000      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800918e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009190:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009198:	4b4f      	ldr	r3, [pc, #316]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800919a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80091a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80091a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a6:	4a4c      	ldr	r2, [pc, #304]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091a8:	430b      	orrs	r3, r1
 80091aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ac:	e003      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80091b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80091c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80091c6:	2300      	movs	r3, #0
 80091c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80091cc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d053      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80091d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80091da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091e2:	d035      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091e8:	d82e      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091ee:	d031      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80091f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091f4:	d828      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091fa:	d01a      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80091fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009200:	d822      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800920a:	d007      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800920c:	e01c      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920e:	4b32      	ldr	r3, [pc, #200]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	4a31      	ldr	r2, [pc, #196]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800921a:	e01c      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800921c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009220:	3308      	adds	r3, #8
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f002 fa95 	bl	800b754 <RCCEx_PLL2_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009230:	e011      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009236:	3328      	adds	r3, #40	@ 0x28
 8009238:	2100      	movs	r1, #0
 800923a:	4618      	mov	r0, r3
 800923c:	f002 fb3c 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009246:	e006      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800924e:	e002      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009250:	bf00      	nop
 8009252:	e000      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009256:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10b      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800925e:	4b1e      	ldr	r3, [pc, #120]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009262:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800926a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800926e:	4a1a      	ldr	r2, [pc, #104]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009270:	430b      	orrs	r3, r1
 8009272:	6593      	str	r3, [r2, #88]	@ 0x58
 8009274:	e003      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800927a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800927e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800928a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800928e:	2300      	movs	r3, #0
 8009290:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009294:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009298:	460b      	mov	r3, r1
 800929a:	4313      	orrs	r3, r2
 800929c:	d056      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800929e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80092a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092aa:	d038      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80092ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092b0:	d831      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092b6:	d034      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80092b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092bc:	d82b      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092c2:	d01d      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80092c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092c8:	d825      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092d2:	d00a      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092d4:	e01f      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092dc:	4ba2      	ldr	r3, [pc, #648]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	4aa1      	ldr	r2, [pc, #644]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092e8:	e01c      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80092ee:	3308      	adds	r3, #8
 80092f0:	2100      	movs	r1, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f002 fa2e 	bl	800b754 <RCCEx_PLL2_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092fe:	e011      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009304:	3328      	adds	r3, #40	@ 0x28
 8009306:	2100      	movs	r1, #0
 8009308:	4618      	mov	r0, r3
 800930a:	f002 fad5 	bl	800b8b8 <RCCEx_PLL3_Config>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009314:	e006      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800931c:	e002      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009324:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10b      	bne.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800932c:	4b8e      	ldr	r3, [pc, #568]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800932e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009330:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800933c:	4a8a      	ldr	r2, [pc, #552]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800933e:	430b      	orrs	r3, r1
 8009340:	6593      	str	r3, [r2, #88]	@ 0x58
 8009342:	e003      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009344:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009348:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800934c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009358:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800935c:	2300      	movs	r3, #0
 800935e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009362:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009366:	460b      	mov	r3, r1
 8009368:	4313      	orrs	r3, r2
 800936a:	d03a      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800936c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009372:	2b30      	cmp	r3, #48	@ 0x30
 8009374:	d01f      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009376:	2b30      	cmp	r3, #48	@ 0x30
 8009378:	d819      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800937a:	2b20      	cmp	r3, #32
 800937c:	d00c      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800937e:	2b20      	cmp	r3, #32
 8009380:	d815      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d019      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009386:	2b10      	cmp	r3, #16
 8009388:	d111      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938a:	4b77      	ldr	r3, [pc, #476]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800938c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938e:	4a76      	ldr	r2, [pc, #472]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009396:	e011      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800939c:	3308      	adds	r3, #8
 800939e:	2102      	movs	r1, #2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f002 f9d7 	bl	800b754 <RCCEx_PLL2_Config>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093c4:	4b68      	ldr	r3, [pc, #416]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80093cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80093d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093d2:	4a65      	ldr	r2, [pc, #404]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093d4:	430b      	orrs	r3, r1
 80093d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093d8:	e003      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80093de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80093ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80093f2:	2300      	movs	r3, #0
 80093f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80093f8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80093fc:	460b      	mov	r3, r1
 80093fe:	4313      	orrs	r3, r2
 8009400:	d051      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800940c:	d035      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800940e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009412:	d82e      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009414:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009418:	d031      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800941a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800941e:	d828      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009424:	d01a      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800942a:	d822      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009434:	d007      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009436:	e01c      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009438:	4b4b      	ldr	r3, [pc, #300]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	4a4a      	ldr	r2, [pc, #296]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800943e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009444:	e01c      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800944a:	3308      	adds	r3, #8
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f002 f980 	bl	800b754 <RCCEx_PLL2_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800945a:	e011      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800945c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009460:	3328      	adds	r3, #40	@ 0x28
 8009462:	2100      	movs	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f002 fa27 	bl	800b8b8 <RCCEx_PLL3_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009470:	e006      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009478:	e002      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800947e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009480:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009488:	4b37      	ldr	r3, [pc, #220]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800948a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800948c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009496:	4a34      	ldr	r2, [pc, #208]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009498:	430b      	orrs	r3, r1
 800949a:	6513      	str	r3, [r2, #80]	@ 0x50
 800949c:	e003      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80094a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80094a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80094b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094b6:	2300      	movs	r3, #0
 80094b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4313      	orrs	r3, r2
 80094c4:	d056      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80094c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094d0:	d033      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80094d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094d6:	d82c      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094dc:	d02f      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80094de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094e2:	d826      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094e8:	d02b      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80094ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094ee:	d820      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f4:	d012      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80094f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094fa:	d81a      	bhi.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d022      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009504:	d115      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800950a:	3308      	adds	r3, #8
 800950c:	2101      	movs	r1, #1
 800950e:	4618      	mov	r0, r3
 8009510:	f002 f920 	bl	800b754 <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800951a:	e015      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800951c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009520:	3328      	adds	r3, #40	@ 0x28
 8009522:	2101      	movs	r1, #1
 8009524:	4618      	mov	r0, r3
 8009526:	f002 f9c7 	bl	800b8b8 <RCCEx_PLL3_Config>
 800952a:	4603      	mov	r3, r0
 800952c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009530:	e00a      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009538:	e006      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800953a:	bf00      	nop
 800953c:	e004      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800953e:	bf00      	nop
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009548:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10d      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009554:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800955c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800955e:	4a02      	ldr	r2, [pc, #8]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009560:	430b      	orrs	r3, r1
 8009562:	6513      	str	r3, [r2, #80]	@ 0x50
 8009564:	e006      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009566:	bf00      	nop
 8009568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009570:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009580:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800958a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d055      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800959c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095a0:	d033      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80095a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095a6:	d82c      	bhi.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ac:	d02f      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b2:	d826      	bhi.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095b8:	d02b      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80095ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095be:	d820      	bhi.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095c4:	d012      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80095c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ca:	d81a      	bhi.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d022      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80095d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095d4:	d115      	bne.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095da:	3308      	adds	r3, #8
 80095dc:	2101      	movs	r1, #1
 80095de:	4618      	mov	r0, r3
 80095e0:	f002 f8b8 	bl	800b754 <RCCEx_PLL2_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095ea:	e015      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80095f0:	3328      	adds	r3, #40	@ 0x28
 80095f2:	2101      	movs	r1, #1
 80095f4:	4618      	mov	r0, r3
 80095f6:	f002 f95f 	bl	800b8b8 <RCCEx_PLL3_Config>
 80095fa:	4603      	mov	r3, r0
 80095fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009600:	e00a      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009608:	e006      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800960a:	bf00      	nop
 800960c:	e004      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009618:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009620:	4bb6      	ldr	r3, [pc, #728]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009624:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800962c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009630:	4ab2      	ldr	r2, [pc, #712]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009632:	430b      	orrs	r3, r1
 8009634:	6593      	str	r3, [r2, #88]	@ 0x58
 8009636:	e003      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009638:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800963c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800964c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009650:	2300      	movs	r3, #0
 8009652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009656:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800965a:	460b      	mov	r3, r1
 800965c:	4313      	orrs	r3, r2
 800965e:	d02a      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8009660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800966a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800966e:	d10a      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009674:	3308      	adds	r3, #8
 8009676:	2101      	movs	r1, #1
 8009678:	4618      	mov	r0, r3
 800967a:	f002 f86b 	bl	800b754 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8009684:	e004      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800968c:	e000      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800968e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009690:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009698:	4b98      	ldr	r3, [pc, #608]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800969a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80096a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a6:	4a95      	ldr	r2, [pc, #596]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80096a8:	430b      	orrs	r3, r1
 80096aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096ac:	e003      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80096b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80096c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80096cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d037      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80096d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096e0:	d00e      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80096e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096e6:	d816      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d018      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80096ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096f0:	d111      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b82      	ldr	r3, [pc, #520]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f6:	4a81      	ldr	r2, [pc, #516]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80096fe:	e00f      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009704:	3308      	adds	r3, #8
 8009706:	2101      	movs	r1, #1
 8009708:	4618      	mov	r0, r3
 800970a:	f002 f823 	bl	800b754 <RCCEx_PLL2_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009714:	e004      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800971c:	e000      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800971e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009728:	4b74      	ldr	r3, [pc, #464]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800972a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009736:	4a71      	ldr	r2, [pc, #452]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009738:	430b      	orrs	r3, r1
 800973a:	6513      	str	r3, [r2, #80]	@ 0x50
 800973c:	e003      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009742:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009752:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009756:	2300      	movs	r3, #0
 8009758:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800975c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009760:	460b      	mov	r3, r1
 8009762:	4313      	orrs	r3, r2
 8009764:	d03a      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800976a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800976c:	2b03      	cmp	r3, #3
 800976e:	d81d      	bhi.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8009770:	a201      	add	r2, pc, #4	@ (adr r2, 8009778 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097b5 	.word	0x080097b5
 800977c:	08009789 	.word	0x08009789
 8009780:	08009797 	.word	0x08009797
 8009784:	080097b5 	.word	0x080097b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009788:	4b5c      	ldr	r3, [pc, #368]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800978a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978c:	4a5b      	ldr	r2, [pc, #364]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800978e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009794:	e00f      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800979a:	3308      	adds	r3, #8
 800979c:	2102      	movs	r1, #2
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 ffd8 	bl	800b754 <RCCEx_PLL2_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097aa:	e004      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80097b2:	e000      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80097b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097be:	4b4f      	ldr	r3, [pc, #316]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80097c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c2:	f023 0103 	bic.w	r1, r3, #3
 80097c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097cc:	4a4b      	ldr	r2, [pc, #300]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80097ce:	430b      	orrs	r3, r1
 80097d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097d2:	e003      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80097d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80097e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097ec:	2300      	movs	r3, #0
 80097ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80097f6:	460b      	mov	r3, r1
 80097f8:	4313      	orrs	r3, r2
 80097fa:	f000 80a0 	beq.w	800993e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097fe:	4b40      	ldr	r3, [pc, #256]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a3f      	ldr	r2, [pc, #252]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800980a:	f7fa fa81 	bl	8003d10 <HAL_GetTick>
 800980e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009812:	e00b      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009814:	f7fa fa7c 	bl	8003d10 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	2b64      	cmp	r3, #100	@ 0x64
 8009822:	d903      	bls.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800982a:	e005      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982c:	4b34      	ldr	r3, [pc, #208]	@ (8009900 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0ed      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8009838:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800983c:	2b00      	cmp	r3, #0
 800983e:	d17a      	bne.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009840:	4b2e      	ldr	r3, [pc, #184]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009842:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800984c:	4053      	eors	r3, r2
 800984e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009852:	2b00      	cmp	r3, #0
 8009854:	d015      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009856:	4b29      	ldr	r3, [pc, #164]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800985a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800985e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009862:	4b26      	ldr	r3, [pc, #152]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009866:	4a25      	ldr	r2, [pc, #148]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800986c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800986e:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009872:	4a22      	ldr	r2, [pc, #136]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009878:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800987a:	4a20      	ldr	r2, [pc, #128]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800987c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009880:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009886:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800988a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800988e:	d118      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009890:	f7fa fa3e 	bl	8003d10 <HAL_GetTick>
 8009894:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009898:	e00d      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800989a:	f7fa fa39 	bl	8003d10 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098a4:	1ad2      	subs	r2, r2, r3
 80098a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d903      	bls.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80098b4:	e005      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098b6:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80098b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0eb      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80098c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d130      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80098d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098da:	d115      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80098dc:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80098e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80098ec:	091a      	lsrs	r2, r3, #4
 80098ee:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	4a02      	ldr	r2, [pc, #8]	@ (80098fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6113      	str	r3, [r2, #16]
 80098f8:	e00c      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
 8009900:	58024800 	.word	0x58024800
 8009904:	00ffffcf 	.word	0x00ffffcf
 8009908:	4bd4      	ldr	r3, [pc, #848]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	4ad3      	ldr	r2, [pc, #844]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800990e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009912:	6113      	str	r3, [r2, #16]
 8009914:	4bd1      	ldr	r3, [pc, #836]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009916:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800991c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009924:	4acd      	ldr	r2, [pc, #820]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009926:	430b      	orrs	r3, r1
 8009928:	6713      	str	r3, [r2, #112]	@ 0x70
 800992a:	e008      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800992c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009930:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8009934:	e003      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009936:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800993a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800993e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f002 0301 	and.w	r3, r2, #1
 800994a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800994e:	2300      	movs	r3, #0
 8009950:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009958:	460b      	mov	r3, r1
 800995a:	4313      	orrs	r3, r2
 800995c:	f000 808b 	beq.w	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009968:	2b28      	cmp	r3, #40	@ 0x28
 800996a:	d86b      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800996c:	a201      	add	r2, pc, #4	@ (adr r2, 8009974 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800996e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009972:	bf00      	nop
 8009974:	08009a4d 	.word	0x08009a4d
 8009978:	08009a45 	.word	0x08009a45
 800997c:	08009a45 	.word	0x08009a45
 8009980:	08009a45 	.word	0x08009a45
 8009984:	08009a45 	.word	0x08009a45
 8009988:	08009a45 	.word	0x08009a45
 800998c:	08009a45 	.word	0x08009a45
 8009990:	08009a45 	.word	0x08009a45
 8009994:	08009a19 	.word	0x08009a19
 8009998:	08009a45 	.word	0x08009a45
 800999c:	08009a45 	.word	0x08009a45
 80099a0:	08009a45 	.word	0x08009a45
 80099a4:	08009a45 	.word	0x08009a45
 80099a8:	08009a45 	.word	0x08009a45
 80099ac:	08009a45 	.word	0x08009a45
 80099b0:	08009a45 	.word	0x08009a45
 80099b4:	08009a2f 	.word	0x08009a2f
 80099b8:	08009a45 	.word	0x08009a45
 80099bc:	08009a45 	.word	0x08009a45
 80099c0:	08009a45 	.word	0x08009a45
 80099c4:	08009a45 	.word	0x08009a45
 80099c8:	08009a45 	.word	0x08009a45
 80099cc:	08009a45 	.word	0x08009a45
 80099d0:	08009a45 	.word	0x08009a45
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a45 	.word	0x08009a45
 80099dc:	08009a45 	.word	0x08009a45
 80099e0:	08009a45 	.word	0x08009a45
 80099e4:	08009a45 	.word	0x08009a45
 80099e8:	08009a45 	.word	0x08009a45
 80099ec:	08009a45 	.word	0x08009a45
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a45 	.word	0x08009a45
 80099fc:	08009a45 	.word	0x08009a45
 8009a00:	08009a45 	.word	0x08009a45
 8009a04:	08009a45 	.word	0x08009a45
 8009a08:	08009a45 	.word	0x08009a45
 8009a0c:	08009a45 	.word	0x08009a45
 8009a10:	08009a45 	.word	0x08009a45
 8009a14:	08009a4d 	.word	0x08009a4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fe97 	bl	800b754 <RCCEx_PLL2_Config>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a2c:	e00f      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a32:	3328      	adds	r3, #40	@ 0x28
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 ff3e 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a42:	e004      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8009a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10b      	bne.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a56:	4b81      	ldr	r3, [pc, #516]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a66:	4a7d      	ldr	r2, [pc, #500]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a6c:	e003      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009a72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f002 0302 	and.w	r3, r2, #2
 8009a82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009a8c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009a90:	460b      	mov	r3, r1
 8009a92:	4313      	orrs	r3, r2
 8009a94:	d042      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a9c:	2b05      	cmp	r3, #5
 8009a9e:	d825      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8009aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8009aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa6:	bf00      	nop
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009ac1 	.word	0x08009ac1
 8009ab0:	08009ad7 	.word	0x08009ad7
 8009ab4:	08009af5 	.word	0x08009af5
 8009ab8:	08009af5 	.word	0x08009af5
 8009abc:	08009af5 	.word	0x08009af5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 fe43 	bl	800b754 <RCCEx_PLL2_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ad4:	e00f      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ada:	3328      	adds	r3, #40	@ 0x28
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 feea 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009aea:	e004      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009af2:	e000      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8009af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009afe:	4b57      	ldr	r3, [pc, #348]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b02:	f023 0107 	bic.w	r1, r3, #7
 8009b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b0c:	4a53      	ldr	r2, [pc, #332]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b12:	e003      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009b18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f002 0304 	and.w	r3, r2, #4
 8009b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d044      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b44:	2b05      	cmp	r3, #5
 8009b46:	d825      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b9d 	.word	0x08009b9d
 8009b54:	08009b69 	.word	0x08009b69
 8009b58:	08009b7f 	.word	0x08009b7f
 8009b5c:	08009b9d 	.word	0x08009b9d
 8009b60:	08009b9d 	.word	0x08009b9d
 8009b64:	08009b9d 	.word	0x08009b9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	2101      	movs	r1, #1
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fdef 	bl	800b754 <RCCEx_PLL2_Config>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b7c:	e00f      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b82:	3328      	adds	r3, #40	@ 0x28
 8009b84:	2101      	movs	r1, #1
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 fe96 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b92:	e004      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009b9a:	e000      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8009b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009baa:	f023 0107 	bic.w	r1, r3, #7
 8009bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bb6:	4a29      	ldr	r2, [pc, #164]	@ (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bbc:	e003      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009bc2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f002 0320 	and.w	r3, r2, #32
 8009bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009be0:	460b      	mov	r3, r1
 8009be2:	4313      	orrs	r3, r2
 8009be4:	d057      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bf2:	d035      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8009bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009bf8:	d82c      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8009bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfe:	d031      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8009c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c04:	d826      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8009c06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c0a:	d02d      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8009c0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c10:	d820      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8009c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c16:	d012      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8009c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c1c:	d81a      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d024      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8009c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c26:	d115      	bne.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 fd8f 	bl	800b754 <RCCEx_PLL2_Config>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c3c:	e017      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c42:	3328      	adds	r3, #40	@ 0x28
 8009c44:	2102      	movs	r1, #2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 fe36 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c52:	e00c      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009c5a:	e008      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8009c5c:	58024400 	.word	0x58024400
        break;
 8009c60:	bf00      	nop
 8009c62:	e004      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8009c64:	bf00      	nop
 8009c66:	e002      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8009c68:	bf00      	nop
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8009c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c76:	4bc2      	ldr	r3, [pc, #776]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c86:	4abe      	ldr	r2, [pc, #760]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c8c:	e003      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009c92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	d055      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009cbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cc2:	d033      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8009cc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cc8:	d82c      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8009cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cce:	d02f      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8009cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cd4:	d826      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8009cd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cda:	d02b      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8009cdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ce0:	d820      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8009ce2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ce6:	d012      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8009ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cec:	d81a      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d022      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8009cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cf6:	d115      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 fd27 	bl	800b754 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d0c:	e015      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d12:	3328      	adds	r3, #40	@ 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fdce 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d22:	e00a      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009d2a:	e006      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8009d2c:	bf00      	nop
 8009d2e:	e004      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d42:	4b8f      	ldr	r3, [pc, #572]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d52:	4a8b      	ldr	r2, [pc, #556]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d58:	e003      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009d5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009d6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d055      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d8e:	d033      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8009d90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d94:	d82c      	bhi.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8009d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d9a:	d02f      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da0:	d826      	bhi.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8009da2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009da6:	d02b      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8009da8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dac:	d820      	bhi.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8009dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009db2:	d012      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009db8:	d81a      	bhi.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d022      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8009dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dc2:	d115      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009dc8:	3308      	adds	r3, #8
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 fcc1 	bl	800b754 <RCCEx_PLL2_Config>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dd8:	e015      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009dde:	3328      	adds	r3, #40	@ 0x28
 8009de0:	2102      	movs	r1, #2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 fd68 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dee:	e00a      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009df6:	e006      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8009df8:	bf00      	nop
 8009dfa:	e004      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8009dfc:	bf00      	nop
 8009dfe:	e002      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8009e00:	bf00      	nop
 8009e02:	e000      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8009e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10b      	bne.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e12:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e1e:	4a58      	ldr	r2, [pc, #352]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e20:	430b      	orrs	r3, r1
 8009e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e24:	e003      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009e2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f002 0308 	and.w	r3, r2, #8
 8009e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e44:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	d01e      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e5a:	d10c      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e60:	3328      	adds	r3, #40	@ 0x28
 8009e62:	2102      	movs	r1, #2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fd27 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e76:	4b42      	ldr	r3, [pc, #264]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e86:	4a3e      	ldr	r2, [pc, #248]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f002 0310 	and.w	r3, r2, #16
 8009e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ea2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d01e      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb8:	d10c      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ebe:	3328      	adds	r3, #40	@ 0x28
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fcf8 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ee4:	4a26      	ldr	r2, [pc, #152]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ef6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009efa:	2300      	movs	r3, #0
 8009efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f04:	460b      	mov	r3, r1
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d040      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f16:	d022      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8009f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f1c:	d81b      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8009f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f26:	d00b      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8009f28:	e015      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f2e:	3308      	adds	r3, #8
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 fc0e 	bl	800b754 <RCCEx_PLL2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f3e:	e00f      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f44:	3328      	adds	r3, #40	@ 0x28
 8009f46:	2102      	movs	r1, #2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fcb5 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f54:	e004      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009f5c:	e000      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8009f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10d      	bne.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f78:	4a01      	ldr	r2, [pc, #4]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f7e:	e005      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009f88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	d03b      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fb4:	d01f      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8009fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fba:	d818      	bhi.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8009fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc0:	d003      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8009fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fc6:	d007      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8009fc8:	e011      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fca:	4b64      	ldr	r3, [pc, #400]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fce:	4a63      	ldr	r2, [pc, #396]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8009fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fd6:	e00f      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fdc:	3328      	adds	r3, #40	@ 0x28
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f001 fc69 	bl	800b8b8 <RCCEx_PLL3_Config>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8009fec:	e004      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8009ff4:	e000      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8009ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ff8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a000:	4b56      	ldr	r3, [pc, #344]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a004:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a010:	4a52      	ldr	r2, [pc, #328]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a012:	430b      	orrs	r3, r1
 800a014:	6553      	str	r3, [r2, #84]	@ 0x54
 800a016:	e003      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a018:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a01c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a02c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a02e:	2300      	movs	r3, #0
 800a030:	677b      	str	r3, [r7, #116]	@ 0x74
 800a032:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a036:	460b      	mov	r3, r1
 800a038:	4313      	orrs	r3, r2
 800a03a:	d031      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800a046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a04a:	d007      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800a04c:	e011      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04e:	4b43      	ldr	r3, [pc, #268]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a052:	4a42      	ldr	r2, [pc, #264]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a05a:	e00e      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a05c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a060:	3308      	adds	r3, #8
 800a062:	2102      	movs	r1, #2
 800a064:	4618      	mov	r0, r3
 800a066:	f001 fb75 	bl	800b754 <RCCEx_PLL2_Config>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a070:	e003      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a082:	4b36      	ldr	r3, [pc, #216]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a08a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a090:	4a32      	ldr	r2, [pc, #200]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a092:	430b      	orrs	r3, r1
 800a094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a096:	e003      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a09c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a0ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	d00c      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0c0:	3328      	adds	r3, #40	@ 0x28
 800a0c2:	2102      	movs	r1, #2
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fbf7 	bl	800b8b8 <RCCEx_PLL3_Config>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a0e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	d03a      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a0f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0fe:	d018      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800a100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a104:	d811      	bhi.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a10a:	d014      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800a10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a110:	d80b      	bhi.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d011      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800a116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11a:	d106      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a11c:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a120:	4a0e      	ldr	r2, [pc, #56]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a128:	e008      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800a130:	e004      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a132:	bf00      	nop
 800a134:	e002      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a13a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a144:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a148:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a14c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a154:	4a01      	ldr	r2, [pc, #4]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a156:	430b      	orrs	r3, r1
 800a158:	6553      	str	r3, [r2, #84]	@ 0x54
 800a15a:	e005      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800a15c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a160:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a164:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a174:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a176:	2300      	movs	r3, #0
 800a178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a17a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a17e:	460b      	mov	r3, r1
 800a180:	4313      	orrs	r3, r2
 800a182:	d009      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a184:	4baa      	ldr	r3, [pc, #680]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a188:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a18c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a192:	4aa7      	ldr	r2, [pc, #668]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a194:	430b      	orrs	r3, r1
 800a196:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a1a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	d00a      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a1b4:	4b9e      	ldr	r3, [pc, #632]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a1bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a1c4:	4a9a      	ldr	r2, [pc, #616]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a1d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1d8:	2300      	movs	r3, #0
 800a1da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	d009      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1e6:	4b92      	ldr	r3, [pc, #584]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a1ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1f4:	4a8e      	ldr	r2, [pc, #568]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a1fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a206:	643b      	str	r3, [r7, #64]	@ 0x40
 800a208:	2300      	movs	r3, #0
 800a20a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a20c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a210:	460b      	mov	r3, r1
 800a212:	4313      	orrs	r3, r2
 800a214:	d00e      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a216:	4b86      	ldr	r3, [pc, #536]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	4a85      	ldr	r2, [pc, #532]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a21c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a220:	6113      	str	r3, [r2, #16]
 800a222:	4b83      	ldr	r3, [pc, #524]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a224:	6919      	ldr	r1, [r3, #16]
 800a226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a22a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a22e:	4a80      	ldr	r2, [pc, #512]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a230:	430b      	orrs	r3, r1
 800a232:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a240:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a246:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a24a:	460b      	mov	r3, r1
 800a24c:	4313      	orrs	r3, r2
 800a24e:	d009      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a250:	4b77      	ldr	r3, [pc, #476]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a254:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25e:	4a74      	ldr	r2, [pc, #464]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a260:	430b      	orrs	r3, r1
 800a262:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a270:	633b      	str	r3, [r7, #48]	@ 0x30
 800a272:	2300      	movs	r3, #0
 800a274:	637b      	str	r3, [r7, #52]	@ 0x34
 800a276:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a27a:	460b      	mov	r3, r1
 800a27c:	4313      	orrs	r3, r2
 800a27e:	d00a      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a280:	4b6b      	ldr	r3, [pc, #428]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a290:	4a67      	ldr	r2, [pc, #412]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a292:	430b      	orrs	r3, r1
 800a294:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	d011      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fa4a 	bl	800b754 <RCCEx_PLL2_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a2c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a2d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6239      	str	r1, [r7, #32]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d011      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 fa2a 	bl	800b754 <RCCEx_PLL2_Config>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	2100      	movs	r1, #0
 800a320:	61b9      	str	r1, [r7, #24]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a32c:	460b      	mov	r3, r1
 800a32e:	4313      	orrs	r3, r2
 800a330:	d011      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a336:	3308      	adds	r3, #8
 800a338:	2102      	movs	r1, #2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 fa0a 	bl	800b754 <RCCEx_PLL2_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	2100      	movs	r1, #0
 800a360:	6139      	str	r1, [r7, #16]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a36c:	460b      	mov	r3, r1
 800a36e:	4313      	orrs	r3, r2
 800a370:	d011      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a376:	3328      	adds	r3, #40	@ 0x28
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f001 fa9c 	bl	800b8b8 <RCCEx_PLL3_Config>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800a386:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a392:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	2100      	movs	r1, #0
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	d011      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3b6:	3328      	adds	r3, #40	@ 0x28
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f001 fa7c 	bl	800b8b8 <RCCEx_PLL3_Config>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a3c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a3d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6039      	str	r1, [r7, #0]
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	607b      	str	r3, [r7, #4]
 800a3e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	d011      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3f6:	3328      	adds	r3, #40	@ 0x28
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 fa5c 	bl	800b8b8 <RCCEx_PLL3_Config>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800a406:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800a412:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800a416:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
}
 800a424:	4618      	mov	r0, r3
 800a426:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a42a:	46bd      	mov	sp, r7
 800a42c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a430:	58024400 	.word	0x58024400

0800a434 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b090      	sub	sp, #64	@ 0x40
 800a438:	af00      	add	r7, sp, #0
 800a43a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a43e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a442:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a446:	430b      	orrs	r3, r1
 800a448:	f040 8094 	bne.w	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a44c:	4b9e      	ldr	r3, [pc, #632]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a450:	f003 0307 	and.w	r3, r3, #7
 800a454:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a458:	2b04      	cmp	r3, #4
 800a45a:	f200 8087 	bhi.w	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a479 	.word	0x0800a479
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a4c9 	.word	0x0800a4c9
 800a470:	0800a565 	.word	0x0800a565
 800a474:	0800a4f1 	.word	0x0800a4f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a478:	4b93      	ldr	r3, [pc, #588]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a484:	d108      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a48a:	4618      	mov	r0, r3
 800a48c:	f001 f810 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a494:	f000 bd45 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49c:	f000 bd41 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4a0:	4b89      	ldr	r3, [pc, #548]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4ac:	d108      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ae:	f107 0318 	add.w	r3, r7, #24
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd54 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4bc:	f000 bd31 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c4:	f000 bd2d 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4c8:	4b7f      	ldr	r3, [pc, #508]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d4:	d108      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4d6:	f107 030c 	add.w	r3, r7, #12
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fe94 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e4:	f000 bd1d 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ec:	f000 bd19 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f0:	4b75      	ldr	r3, [pc, #468]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4fa:	4b73      	ldr	r3, [pc, #460]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0304 	and.w	r3, r3, #4
 800a502:	2b04      	cmp	r3, #4
 800a504:	d10c      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d109      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a50c:	4b6e      	ldr	r3, [pc, #440]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	08db      	lsrs	r3, r3, #3
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	4a6d      	ldr	r2, [pc, #436]	@ (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a51e:	e01f      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a520:	4b69      	ldr	r3, [pc, #420]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a52c:	d106      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a534:	d102      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a536:	4b66      	ldr	r3, [pc, #408]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53a:	e011      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a53c:	4b62      	ldr	r3, [pc, #392]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a548:	d106      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a550:	d102      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a552:	4b60      	ldr	r3, [pc, #384]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a556:	e003      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a55c:	f000 bce1 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a560:	f000 bcdf 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a564:	4b5c      	ldr	r3, [pc, #368]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	f000 bcdb 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	f000 bcd7 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a574:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a578:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a57c:	430b      	orrs	r3, r1
 800a57e:	f040 80ad 	bne.w	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a582:	4b51      	ldr	r3, [pc, #324]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a586:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a58a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a592:	d056      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a59a:	f200 8090 	bhi.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5a2:	f000 8088 	beq.w	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5aa:	f200 8088 	bhi.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	2b80      	cmp	r3, #128	@ 0x80
 800a5b2:	d032      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b6:	2b80      	cmp	r3, #128	@ 0x80
 800a5b8:	f200 8081 	bhi.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	2b40      	cmp	r3, #64	@ 0x40
 800a5c6:	d014      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a5c8:	e079      	b.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ca:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5d6:	d108      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 ff67 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e6:	f000 bc9c 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ee:	f000 bc98 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5f2:	4b35      	ldr	r3, [pc, #212]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5fe:	d108      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a600:	f107 0318 	add.w	r3, r7, #24
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fcab 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a60e:	f000 bc88 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a616:	f000 bc84 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a61a:	4b2b      	ldr	r3, [pc, #172]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a626:	d108      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a628:	f107 030c 	add.w	r3, r7, #12
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fdeb 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a636:	f000 bc74 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63e:	f000 bc70 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a642:	4b21      	ldr	r3, [pc, #132]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a646:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a64a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a64c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b04      	cmp	r3, #4
 800a656:	d10c      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d109      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a65e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	08db      	lsrs	r3, r3, #3
 800a664:	f003 0303 	and.w	r3, r3, #3
 800a668:	4a18      	ldr	r2, [pc, #96]	@ (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a66a:	fa22 f303 	lsr.w	r3, r2, r3
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a670:	e01f      	b.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a672:	4b15      	ldr	r3, [pc, #84]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67e:	d106      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a686:	d102      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a688:	4b11      	ldr	r3, [pc, #68]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a68c:	e011      	b.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a68e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a69a:	d106      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a2:	d102      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a8:	e003      	b.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6ae:	f000 bc38 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6b2:	f000 bc36 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6b6:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ba:	f000 bc32 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c2:	f000 bc2e 	b.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6c6:	bf00      	nop
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	003d0900 	.word	0x003d0900
 800a6d4:	017d7840 	.word	0x017d7840
 800a6d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a6dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	f040 809c 	bne.w	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a6ea:	4b9e      	ldr	r3, [pc, #632]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a6f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6fa:	d054      	beq.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a702:	f200 808b 	bhi.w	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a70c:	f000 8083 	beq.w	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a716:	f200 8081 	bhi.w	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a720:	d02f      	beq.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a728:	d878      	bhi.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d004      	beq.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a736:	d012      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a738:	e070      	b.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a73a:	4b8a      	ldr	r3, [pc, #552]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a746:	d107      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 feaf 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a756:	e3e4      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75c:	e3e1      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a75e:	4b81      	ldr	r3, [pc, #516]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a76a:	d107      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76c:	f107 0318 	add.w	r3, r7, #24
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fbf5 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77a:	e3d2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	e3cf      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a782:	4b78      	ldr	r3, [pc, #480]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a78a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a78e:	d107      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a790:	f107 030c 	add.w	r3, r7, #12
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fd37 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79e:	e3c0      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a4:	e3bd      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7a6:	4b6f      	ldr	r3, [pc, #444]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7b0:	4b6c      	ldr	r3, [pc, #432]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d10c      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d109      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c2:	4b68      	ldr	r3, [pc, #416]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	08db      	lsrs	r3, r3, #3
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	4a66      	ldr	r2, [pc, #408]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7d4:	e01e      	b.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7d6:	4b63      	ldr	r3, [pc, #396]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e2:	d106      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ea:	d102      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7ec:	4b5f      	ldr	r3, [pc, #380]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f0:	e010      	b.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7f2:	4b5c      	ldr	r3, [pc, #368]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7fe:	d106      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a806:	d102      	bne.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a808:	4b59      	ldr	r3, [pc, #356]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a80c:	e002      	b.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a812:	e386      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a814:	e385      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a816:	4b57      	ldr	r3, [pc, #348]	@ (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81a:	e382      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a820:	e37f      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a826:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a82a:	430b      	orrs	r3, r1
 800a82c:	f040 80a7 	bne.w	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a830:	4b4c      	ldr	r3, [pc, #304]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a834:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a838:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a840:	d055      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a848:	f200 8096 	bhi.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a852:	f000 8084 	beq.w	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a85c:	f200 808c 	bhi.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a866:	d030      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a86e:	f200 8083 	bhi.w	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a874:	2b00      	cmp	r3, #0
 800a876:	d004      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a87e:	d012      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a880:	e07a      	b.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a882:	4b38      	ldr	r3, [pc, #224]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a88a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a88e:	d107      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fe0b 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89e:	e340      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e33d      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8b2:	d107      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b4:	f107 0318 	add.w	r3, r7, #24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fb51 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c2:	e32e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e32b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8ca:	4b26      	ldr	r3, [pc, #152]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fc93 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e6:	e31c      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e319      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b04      	cmp	r3, #4
 800a902:	d10c      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a90a:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	08db      	lsrs	r3, r3, #3
 800a910:	f003 0303 	and.w	r3, r3, #3
 800a914:	4a14      	ldr	r2, [pc, #80]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a916:	fa22 f303 	lsr.w	r3, r2, r3
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a91c:	e01e      	b.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a91e:	4b11      	ldr	r3, [pc, #68]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a92a:	d106      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a932:	d102      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a934:	4b0d      	ldr	r3, [pc, #52]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a938:	e010      	b.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a93a:	4b0a      	ldr	r3, [pc, #40]	@ (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a946:	d106      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a94e:	d102      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a950:	4b07      	ldr	r3, [pc, #28]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a954:	e002      	b.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a95a:	e2e2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a95c:	e2e1      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a95e:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e2de      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a964:	58024400 	.word	0x58024400
 800a968:	03d09000 	.word	0x03d09000
 800a96c:	003d0900 	.word	0x003d0900
 800a970:	017d7840 	.word	0x017d7840
 800a974:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97c:	e2d1      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a982:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a986:	430b      	orrs	r3, r1
 800a988:	f040 809c 	bne.w	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a98c:	4b93      	ldr	r3, [pc, #588]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a990:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a994:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a99c:	d054      	beq.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9a4:	f200 808b 	bhi.w	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9ae:	f000 8083 	beq.w	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9b8:	f200 8081 	bhi.w	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9c2:	d02f      	beq.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ca:	d878      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d004      	beq.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d8:	d012      	beq.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a9da:	e070      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9dc:	4b7f      	ldr	r3, [pc, #508]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9e8:	d107      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fd5e 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f8:	e293      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fe:	e290      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa00:	4b76      	ldr	r3, [pc, #472]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa0c:	d107      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa0e:	f107 0318 	add.w	r3, r7, #24
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 faa4 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1c:	e281      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa22:	e27e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa24:	4b6d      	ldr	r3, [pc, #436]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa30:	d107      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa32:	f107 030c 	add.w	r3, r7, #12
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fbe6 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa40:	e26f      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa46:	e26c      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa48:	4b64      	ldr	r3, [pc, #400]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa52:	4b62      	ldr	r3, [pc, #392]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d10c      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d109      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa64:	4b5d      	ldr	r3, [pc, #372]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	08db      	lsrs	r3, r3, #3
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	4a5c      	ldr	r2, [pc, #368]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa76:	e01e      	b.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa78:	4b58      	ldr	r3, [pc, #352]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa84:	d106      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa8c:	d102      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa8e:	4b55      	ldr	r3, [pc, #340]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa92:	e010      	b.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa94:	4b51      	ldr	r3, [pc, #324]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaa0:	d106      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaa8:	d102      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaaa:	4b4f      	ldr	r3, [pc, #316]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaae:	e002      	b.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aab4:	e235      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aab6:	e234      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aab8:	4b4c      	ldr	r3, [pc, #304]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aabc:	e231      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac2:	e22e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aacc:	430b      	orrs	r3, r1
 800aace:	f040 808f 	bne.w	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aad2:	4b42      	ldr	r3, [pc, #264]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aad6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aada:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aae2:	d06b      	beq.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aaea:	d874      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aaf2:	d056      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aafa:	d86c      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab02:	d03b      	beq.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab0a:	d864      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab12:	d021      	beq.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab1a:	d85c      	bhi.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab28:	d004      	beq.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab2a:	e054      	b.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab2c:	f7fe fa22 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800ab30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab32:	e1f6      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab34:	4b29      	ldr	r3, [pc, #164]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab40:	d107      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab42:	f107 0318 	add.w	r3, r7, #24
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fa0a 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab50:	e1e7      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab56:	e1e4      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab58:	4b20      	ldr	r3, [pc, #128]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab64:	d107      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab66:	f107 030c 	add.w	r3, r7, #12
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fb4c 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab74:	e1d5      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7a:	e1d2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab7c:	4b17      	ldr	r3, [pc, #92]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0304 	and.w	r3, r3, #4
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d109      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab88:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	08db      	lsrs	r3, r3, #3
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	4a13      	ldr	r2, [pc, #76]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab94:	fa22 f303 	lsr.w	r3, r2, r3
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9a:	e1c2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba0:	e1bf      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aba2:	4b0e      	ldr	r3, [pc, #56]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abae:	d102      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800abb0:	4b0c      	ldr	r3, [pc, #48]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb4:	e1b5      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abba:	e1b2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abbc:	4b07      	ldr	r3, [pc, #28]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc8:	d102      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800abca:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e1a8      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e1a5      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abda:	e1a2      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abdc:	58024400 	.word	0x58024400
 800abe0:	03d09000 	.word	0x03d09000
 800abe4:	003d0900 	.word	0x003d0900
 800abe8:	017d7840 	.word	0x017d7840
 800abec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800abf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800abf8:	430b      	orrs	r3, r1
 800abfa:	d173      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800abfc:	4b9c      	ldr	r3, [pc, #624]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac0c:	d02f      	beq.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac14:	d863      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac22:	d012      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac24:	e05b      	b.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac26:	4b92      	ldr	r3, [pc, #584]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac32:	d107      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac34:	f107 0318 	add.w	r3, r7, #24
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 f991 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac42:	e16e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac48:	e16b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4a:	4b89      	ldr	r3, [pc, #548]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac56:	d107      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac58:	f107 030c 	add.w	r3, r7, #12
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fad3 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac66:	e15c      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6c:	e159      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac6e:	4b80      	ldr	r3, [pc, #512]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac78:	4b7d      	ldr	r3, [pc, #500]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d10c      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac8a:	4b79      	ldr	r3, [pc, #484]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	08db      	lsrs	r3, r3, #3
 800ac90:	f003 0303 	and.w	r3, r3, #3
 800ac94:	4a77      	ldr	r2, [pc, #476]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac96:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac9c:	e01e      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac9e:	4b74      	ldr	r3, [pc, #464]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acaa:	d106      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800acac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acb2:	d102      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acb4:	4b70      	ldr	r3, [pc, #448]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acb8:	e010      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acba:	4b6d      	ldr	r3, [pc, #436]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acc6:	d106      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800acc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acce:	d102      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acd0:	4b6a      	ldr	r3, [pc, #424]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acd4:	e002      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800acda:	e122      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acdc:	e121      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace2:	e11e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ace4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800acec:	430b      	orrs	r3, r1
 800acee:	d133      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800acf0:	4b5f      	ldr	r3, [pc, #380]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acf8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad06:	d012      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad08:	e023      	b.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad0a:	4b59      	ldr	r3, [pc, #356]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad16:	d107      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fbc7 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad26:	e0fc      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2c:	e0f9      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad2e:	4b50      	ldr	r3, [pc, #320]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad3a:	d107      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad3c:	f107 0318 	add.w	r3, r7, #24
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f90d 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4a:	e0ea      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad50:	e0e7      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad56:	e0e4      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad5c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ad60:	430b      	orrs	r3, r1
 800ad62:	f040 808d 	bne.w	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ad66:	4b42      	ldr	r3, [pc, #264]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ad6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad76:	d06b      	beq.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad7e:	d874      	bhi.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad86:	d056      	beq.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad8e:	d86c      	bhi.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad96:	d03b      	beq.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad9e:	d864      	bhi.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ada6:	d021      	beq.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ada8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adae:	d85c      	bhi.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800adb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adbc:	d004      	beq.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800adbe:	e054      	b.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800adc0:	f000 f8b8 	bl	800af34 <HAL_RCCEx_GetD3PCLK1Freq>
 800adc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adc6:	e0ac      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc8:	4b29      	ldr	r3, [pc, #164]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800add0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800add4:	d107      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add6:	f107 0318 	add.w	r3, r7, #24
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f8c0 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade4:	e09d      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adea:	e09a      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adec:	4b20      	ldr	r3, [pc, #128]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adf8:	d107      	bne.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfa:	f107 030c 	add.w	r3, r7, #12
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fa02 	bl	800b208 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae08:	e08b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae0e:	e088      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae10:	4b17      	ldr	r3, [pc, #92]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d109      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae1c:	4b14      	ldr	r3, [pc, #80]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	08db      	lsrs	r3, r3, #3
 800ae22:	f003 0303 	and.w	r3, r3, #3
 800ae26:	4a13      	ldr	r2, [pc, #76]	@ (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae28:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae2e:	e078      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae34:	e075      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae36:	4b0e      	ldr	r3, [pc, #56]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae42:	d102      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae44:	4b0c      	ldr	r3, [pc, #48]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae48:	e06b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae4e:	e068      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae50:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae5c:	d102      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ae5e:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae62:	e05e      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae68:	e05b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e058      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae70:	58024400 	.word	0x58024400
 800ae74:	03d09000 	.word	0x03d09000
 800ae78:	003d0900 	.word	0x003d0900
 800ae7c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae84:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	d148      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae8c:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae9c:	d02a      	beq.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aea4:	d838      	bhi.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeb2:	d00d      	beq.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aeb4:	e030      	b.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeb6:	4b1d      	ldr	r3, [pc, #116]	@ (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aec2:	d102      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aec4:	4b1a      	ldr	r3, [pc, #104]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec8:	e02b      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aece:	e028      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aed0:	4b16      	ldr	r3, [pc, #88]	@ (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aedc:	d107      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fae4 	bl	800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeec:	e019      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef2:	e016      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aef4:	4b0d      	ldr	r3, [pc, #52]	@ (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aefc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af00:	d107      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af02:	f107 0318 	add.w	r3, r7, #24
 800af06:	4618      	mov	r0, r3
 800af08:	f000 f82a 	bl	800af60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af10:	e007      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af16:	e004      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af1c:	e001      	b.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af24:	4618      	mov	r0, r3
 800af26:	3740      	adds	r7, #64	@ 0x40
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	58024400 	.word	0x58024400
 800af30:	017d7840 	.word	0x017d7840

0800af34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af38:	f7fd ffec 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 800af3c:	4602      	mov	r2, r0
 800af3e:	4b06      	ldr	r3, [pc, #24]	@ (800af58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	091b      	lsrs	r3, r3, #4
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	4904      	ldr	r1, [pc, #16]	@ (800af5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af4a:	5ccb      	ldrb	r3, [r1, r3]
 800af4c:	f003 031f 	and.w	r3, r3, #31
 800af50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af54:	4618      	mov	r0, r3
 800af56:	bd80      	pop	{r7, pc}
 800af58:	58024400 	.word	0x58024400
 800af5c:	08013e08 	.word	0x08013e08

0800af60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800af60:	b480      	push	{r7}
 800af62:	b089      	sub	sp, #36	@ 0x24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af68:	4ba1      	ldr	r3, [pc, #644]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af72:	4b9f      	ldr	r3, [pc, #636]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af76:	0b1b      	lsrs	r3, r3, #12
 800af78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af7e:	4b9c      	ldr	r3, [pc, #624]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af82:	091b      	lsrs	r3, r3, #4
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af8a:	4b99      	ldr	r3, [pc, #612]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8e:	08db      	lsrs	r3, r3, #3
 800af90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	fb02 f303 	mul.w	r3, r2, r3
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 8111 	beq.w	800b1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	f000 8083 	beq.w	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	f200 80a1 	bhi.w	800b100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d056      	beq.n	800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800afca:	e099      	b.n	800b100 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afcc:	4b88      	ldr	r3, [pc, #544]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0320 	and.w	r3, r3, #32
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d02d      	beq.n	800b034 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd8:	4b85      	ldr	r3, [pc, #532]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	08db      	lsrs	r3, r3, #3
 800afde:	f003 0303 	and.w	r3, r3, #3
 800afe2:	4a84      	ldr	r2, [pc, #528]	@ (800b1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
 800afe8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	ee07 3a90 	vmov	s15, r3
 800aff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b002:	4b7b      	ldr	r3, [pc, #492]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	ed97 6a03 	vldr	s12, [r7, #12]
 800b016:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b032:	e087      	b.n	800b144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b046:	4b6a      	ldr	r3, [pc, #424]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b056:	ed97 6a03 	vldr	s12, [r7, #12]
 800b05a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b076:	e065      	b.n	800b144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b08a:	4b59      	ldr	r3, [pc, #356]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b09e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ba:	e043      	b.n	800b144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ce:	4b48      	ldr	r3, [pc, #288]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0fe:	e021      	b.n	800b144 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b112:	4b37      	ldr	r3, [pc, #220]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b122:	ed97 6a03 	vldr	s12, [r7, #12]
 800b126:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b142:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b144:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b148:	0a5b      	lsrs	r3, r3, #9
 800b14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16a:	ee17 2a90 	vmov	r2, s15
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b172:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b198:	ee17 2a90 	vmov	r2, s15
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1a0:	4b13      	ldr	r3, [pc, #76]	@ (800b1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a4:	0e1b      	lsrs	r3, r3, #24
 800b1a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c6:	ee17 2a90 	vmov	r2, s15
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	609a      	str	r2, [r3, #8]
}
 800b1e2:	bf00      	nop
 800b1e4:	3724      	adds	r7, #36	@ 0x24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	58024400 	.word	0x58024400
 800b1f4:	03d09000 	.word	0x03d09000
 800b1f8:	46000000 	.word	0x46000000
 800b1fc:	4c742400 	.word	0x4c742400
 800b200:	4a742400 	.word	0x4a742400
 800b204:	4bbebc20 	.word	0x4bbebc20

0800b208 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b208:	b480      	push	{r7}
 800b20a:	b089      	sub	sp, #36	@ 0x24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b210:	4ba1      	ldr	r3, [pc, #644]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b214:	f003 0303 	and.w	r3, r3, #3
 800b218:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b21a:	4b9f      	ldr	r3, [pc, #636]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21e:	0d1b      	lsrs	r3, r3, #20
 800b220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b224:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b226:	4b9c      	ldr	r3, [pc, #624]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22a:	0a1b      	lsrs	r3, r3, #8
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b232:	4b99      	ldr	r3, [pc, #612]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b236:	08db      	lsrs	r3, r3, #3
 800b238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	fb02 f303 	mul.w	r3, r2, r3
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8111 	beq.w	800b478 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	f000 8083 	beq.w	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	2b02      	cmp	r3, #2
 800b262:	f200 80a1 	bhi.w	800b3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d056      	beq.n	800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b272:	e099      	b.n	800b3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b274:	4b88      	ldr	r3, [pc, #544]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0320 	and.w	r3, r3, #32
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d02d      	beq.n	800b2dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b280:	4b85      	ldr	r3, [pc, #532]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	08db      	lsrs	r3, r3, #3
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	4a84      	ldr	r2, [pc, #528]	@ (800b49c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b28c:	fa22 f303 	lsr.w	r3, r2, r3
 800b290:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	ee07 3a90 	vmov	s15, r3
 800b298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2da:	e087      	b.n	800b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b302:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b31e:	e065      	b.n	800b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b332:	4b59      	ldr	r3, [pc, #356]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b342:	ed97 6a03 	vldr	s12, [r7, #12]
 800b346:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b362:	e043      	b.n	800b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b376:	4b48      	ldr	r3, [pc, #288]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b37e:	ee07 3a90 	vmov	s15, r3
 800b382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b386:	ed97 6a03 	vldr	s12, [r7, #12]
 800b38a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3a6:	e021      	b.n	800b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ba:	4b37      	ldr	r3, [pc, #220]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b3ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f0:	0a5b      	lsrs	r3, r3, #9
 800b3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b406:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b412:	ee17 2a90 	vmov	r2, s15
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b41a:	4b1f      	ldr	r3, [pc, #124]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b41e:	0c1b      	lsrs	r3, r3, #16
 800b420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b430:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b434:	edd7 6a07 	vldr	s13, [r7, #28]
 800b438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b440:	ee17 2a90 	vmov	r2, s15
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b448:	4b13      	ldr	r3, [pc, #76]	@ (800b498 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44c:	0e1b      	lsrs	r3, r3, #24
 800b44e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b45e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b462:	edd7 6a07 	vldr	s13, [r7, #28]
 800b466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b46a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46e:	ee17 2a90 	vmov	r2, s15
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b476:	e008      	b.n	800b48a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	609a      	str	r2, [r3, #8]
}
 800b48a:	bf00      	nop
 800b48c:	3724      	adds	r7, #36	@ 0x24
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	03d09000 	.word	0x03d09000
 800b4a0:	46000000 	.word	0x46000000
 800b4a4:	4c742400 	.word	0x4c742400
 800b4a8:	4a742400 	.word	0x4a742400
 800b4ac:	4bbebc20 	.word	0x4bbebc20

0800b4b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	@ 0x24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4b8:	4ba0      	ldr	r3, [pc, #640]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4bc:	f003 0303 	and.w	r3, r3, #3
 800b4c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b4c2:	4b9e      	ldr	r3, [pc, #632]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	091b      	lsrs	r3, r3, #4
 800b4c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4ce:	4b9b      	ldr	r3, [pc, #620]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4d8:	4b98      	ldr	r3, [pc, #608]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4dc:	08db      	lsrs	r3, r3, #3
 800b4de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	fb02 f303 	mul.w	r3, r2, r3
 800b4e8:	ee07 3a90 	vmov	s15, r3
 800b4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 8111 	beq.w	800b71e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	f000 8083 	beq.w	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	2b02      	cmp	r3, #2
 800b508:	f200 80a1 	bhi.w	800b64e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d056      	beq.n	800b5c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b518:	e099      	b.n	800b64e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b51a:	4b88      	ldr	r3, [pc, #544]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02d      	beq.n	800b582 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b526:	4b85      	ldr	r3, [pc, #532]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	08db      	lsrs	r3, r3, #3
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	4a83      	ldr	r2, [pc, #524]	@ (800b740 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b532:	fa22 f303 	lsr.w	r3, r2, r3
 800b536:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b550:	4b7a      	ldr	r3, [pc, #488]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b560:	ed97 6a03 	vldr	s12, [r7, #12]
 800b564:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b580:	e087      	b.n	800b692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	ee07 3a90 	vmov	s15, r3
 800b588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b594:	4b69      	ldr	r3, [pc, #420]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59c:	ee07 3a90 	vmov	s15, r3
 800b5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c4:	e065      	b.n	800b692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b74c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5d8:	4b58      	ldr	r3, [pc, #352]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e0:	ee07 3a90 	vmov	s15, r3
 800b5e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b600:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b608:	e043      	b.n	800b692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	ee07 3a90 	vmov	s15, r3
 800b610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b614:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b750 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b61c:	4b47      	ldr	r3, [pc, #284]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b624:	ee07 3a90 	vmov	s15, r3
 800b628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b62c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b630:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b63c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b64c:	e021      	b.n	800b692 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	ee07 3a90 	vmov	s15, r3
 800b654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b658:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b748 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b65c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b660:	4b36      	ldr	r3, [pc, #216]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b670:	ed97 6a03 	vldr	s12, [r7, #12]
 800b674:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b744 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b67c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b68c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b690:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b692:	4b2a      	ldr	r3, [pc, #168]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b696:	0a5b      	lsrs	r3, r3, #9
 800b698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b69c:	ee07 3a90 	vmov	s15, r3
 800b6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b8:	ee17 2a90 	vmov	r2, s15
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b6c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c4:	0c1b      	lsrs	r3, r3, #16
 800b6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e6:	ee17 2a90 	vmov	r2, s15
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b6ee:	4b13      	ldr	r3, [pc, #76]	@ (800b73c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f2:	0e1b      	lsrs	r3, r3, #24
 800b6f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b704:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b708:	edd7 6a07 	vldr	s13, [r7, #28]
 800b70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b714:	ee17 2a90 	vmov	r2, s15
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b71c:	e008      	b.n	800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	609a      	str	r2, [r3, #8]
}
 800b730:	bf00      	nop
 800b732:	3724      	adds	r7, #36	@ 0x24
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	58024400 	.word	0x58024400
 800b740:	03d09000 	.word	0x03d09000
 800b744:	46000000 	.word	0x46000000
 800b748:	4c742400 	.word	0x4c742400
 800b74c:	4a742400 	.word	0x4a742400
 800b750:	4bbebc20 	.word	0x4bbebc20

0800b754 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b762:	4b53      	ldr	r3, [pc, #332]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d101      	bne.n	800b772 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e099      	b.n	800b8a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b772:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a4e      	ldr	r2, [pc, #312]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b778:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b77e:	f7f8 fac7 	bl	8003d10 <HAL_GetTick>
 800b782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b784:	e008      	b.n	800b798 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b786:	f7f8 fac3 	bl	8003d10 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	2b02      	cmp	r3, #2
 800b792:	d901      	bls.n	800b798 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e086      	b.n	800b8a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b798:	4b45      	ldr	r3, [pc, #276]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1f0      	bne.n	800b786 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7a4:	4b42      	ldr	r3, [pc, #264]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	031b      	lsls	r3, r3, #12
 800b7b2:	493f      	ldr	r1, [pc, #252]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	025b      	lsls	r3, r3, #9
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	431a      	orrs	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	041b      	lsls	r3, r3, #16
 800b7d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	061b      	lsls	r3, r3, #24
 800b7e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7e8:	4931      	ldr	r1, [pc, #196]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b7ee:	4b30      	ldr	r3, [pc, #192]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	492d      	ldr	r1, [pc, #180]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b800:	4b2b      	ldr	r3, [pc, #172]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b804:	f023 0220 	bic.w	r2, r3, #32
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	4928      	ldr	r1, [pc, #160]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b812:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b816:	4a26      	ldr	r2, [pc, #152]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b818:	f023 0310 	bic.w	r3, r3, #16
 800b81c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b81e:	4b24      	ldr	r3, [pc, #144]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b822:	4b24      	ldr	r3, [pc, #144]	@ (800b8b4 <RCCEx_PLL2_Config+0x160>)
 800b824:	4013      	ands	r3, r2
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	69d2      	ldr	r2, [r2, #28]
 800b82a:	00d2      	lsls	r2, r2, #3
 800b82c:	4920      	ldr	r1, [pc, #128]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b832:	4b1f      	ldr	r3, [pc, #124]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b836:	4a1e      	ldr	r2, [pc, #120]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b838:	f043 0310 	orr.w	r3, r3, #16
 800b83c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b844:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	4a19      	ldr	r2, [pc, #100]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b84a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b84e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b850:	e00f      	b.n	800b872 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d106      	bne.n	800b866 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b858:	4b15      	ldr	r3, [pc, #84]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	4a14      	ldr	r2, [pc, #80]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b85e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b864:	e005      	b.n	800b872 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b866:	4b12      	ldr	r3, [pc, #72]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	4a11      	ldr	r2, [pc, #68]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b86c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b872:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a0e      	ldr	r2, [pc, #56]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b87c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b87e:	f7f8 fa47 	bl	8003d10 <HAL_GetTick>
 800b882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b884:	e008      	b.n	800b898 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b886:	f7f8 fa43 	bl	8003d10 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d901      	bls.n	800b898 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e006      	b.n	800b8a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b898:	4b05      	ldr	r3, [pc, #20]	@ (800b8b0 <RCCEx_PLL2_Config+0x15c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d0f0      	beq.n	800b886 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	ffff0007 	.word	0xffff0007

0800b8b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8c6:	4b53      	ldr	r3, [pc, #332]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	f003 0303 	and.w	r3, r3, #3
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d101      	bne.n	800b8d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e099      	b.n	800ba0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8d6:	4b4f      	ldr	r3, [pc, #316]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a4e      	ldr	r2, [pc, #312]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b8dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8e2:	f7f8 fa15 	bl	8003d10 <HAL_GetTick>
 800b8e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8e8:	e008      	b.n	800b8fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8ea:	f7f8 fa11 	bl	8003d10 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d901      	bls.n	800b8fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e086      	b.n	800ba0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b8fc:	4b45      	ldr	r3, [pc, #276]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f0      	bne.n	800b8ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b908:	4b42      	ldr	r3, [pc, #264]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	051b      	lsls	r3, r3, #20
 800b916:	493f      	ldr	r1, [pc, #252]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	3b01      	subs	r3, #1
 800b922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	025b      	lsls	r3, r3, #9
 800b92e:	b29b      	uxth	r3, r3
 800b930:	431a      	orrs	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	3b01      	subs	r3, #1
 800b938:	041b      	lsls	r3, r3, #16
 800b93a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b93e:	431a      	orrs	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	3b01      	subs	r3, #1
 800b946:	061b      	lsls	r3, r3, #24
 800b948:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b94c:	4931      	ldr	r1, [pc, #196]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b952:	4b30      	ldr	r3, [pc, #192]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	492d      	ldr	r1, [pc, #180]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b960:	4313      	orrs	r3, r2
 800b962:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b964:	4b2b      	ldr	r3, [pc, #172]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b968:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	4928      	ldr	r1, [pc, #160]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b972:	4313      	orrs	r3, r2
 800b974:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b976:	4b27      	ldr	r3, [pc, #156]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97a:	4a26      	ldr	r2, [pc, #152]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b97c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b980:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b982:	4b24      	ldr	r3, [pc, #144]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b986:	4b24      	ldr	r3, [pc, #144]	@ (800ba18 <RCCEx_PLL3_Config+0x160>)
 800b988:	4013      	ands	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	69d2      	ldr	r2, [r2, #28]
 800b98e:	00d2      	lsls	r2, r2, #3
 800b990:	4920      	ldr	r1, [pc, #128]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b992:	4313      	orrs	r3, r2
 800b994:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b996:	4b1f      	ldr	r3, [pc, #124]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d106      	bne.n	800b9b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9a8:	4b1a      	ldr	r3, [pc, #104]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ac:	4a19      	ldr	r2, [pc, #100]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9b4:	e00f      	b.n	800b9d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d106      	bne.n	800b9ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9bc:	4b15      	ldr	r3, [pc, #84]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c0:	4a14      	ldr	r2, [pc, #80]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b9c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9c8:	e005      	b.n	800b9d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9ca:	4b12      	ldr	r3, [pc, #72]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ce:	4a11      	ldr	r2, [pc, #68]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a0e      	ldr	r2, [pc, #56]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9e2:	f7f8 f995 	bl	8003d10 <HAL_GetTick>
 800b9e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9e8:	e008      	b.n	800b9fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9ea:	f7f8 f991 	bl	8003d10 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d901      	bls.n	800b9fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	e006      	b.n	800ba0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ba14 <RCCEx_PLL3_Config+0x15c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0f0      	beq.n	800b9ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	58024400 	.word	0x58024400
 800ba18:	ffff0007 	.word	0xffff0007

0800ba1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	@ 0x28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e075      	b.n	800bb1a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d105      	bne.n	800ba46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f90b 	bl	800bc5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2204      	movs	r2, #4
 800ba4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f868 	bl	800bb24 <HAL_SD_InitCard>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e05d      	b.n	800bb1a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fdbf 	bl	800c5e8 <HAL_SD_GetCardStatus>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e052      	b.n	800bb1a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ba74:	7e3b      	ldrb	r3, [r7, #24]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ba7a:	7e7b      	ldrb	r3, [r7, #25]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d10a      	bne.n	800ba9e <HAL_SD_Init+0x82>
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <HAL_SD_Init+0x78>
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d004      	beq.n	800ba9e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba9a:	659a      	str	r2, [r3, #88]	@ 0x58
 800ba9c:	e00b      	b.n	800bab6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d104      	bne.n	800bab0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800baac:	659a      	str	r2, [r3, #88]	@ 0x58
 800baae:	e002      	b.n	800bab6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fe7d 	bl	800c7bc <HAL_SD_ConfigWideBusOperation>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e026      	b.n	800bb1a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bacc:	f7f8 f920 	bl	8003d10 <HAL_GetTick>
 800bad0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bad2:	e011      	b.n	800baf8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bad4:	f7f8 f91c 	bl	8003d10 <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d109      	bne.n	800baf8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800baea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e010      	b.n	800bb1a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f001 f82d 	bl	800cb58 <HAL_SD_GetCardState>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d1e7      	bne.n	800bad4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3728      	adds	r7, #40	@ 0x28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b08d      	sub	sp, #52	@ 0x34
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bb3c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bb40:	f04f 0100 	mov.w	r1, #0
 800bb44:	f7fe fc76 	bl	800a434 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb48:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d109      	bne.n	800bb64 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bb5e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e070      	b.n	800bc46 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb66:	0a1b      	lsrs	r3, r3, #8
 800bb68:	4a39      	ldr	r2, [pc, #228]	@ (800bc50 <HAL_SD_InitCard+0x12c>)
 800bb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6e:	091b      	lsrs	r3, r3, #4
 800bb70:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681c      	ldr	r4, [r3, #0]
 800bb76:	466a      	mov	r2, sp
 800bb78:	f107 0318 	add.w	r3, r7, #24
 800bb7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb80:	e882 0003 	stmia.w	r2, {r0, r1}
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f001 fe32 	bl	800d7f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 fe75 	bl	800d884 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bba6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d007      	beq.n	800bbc2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bbb2:	4a28      	ldr	r2, [pc, #160]	@ (800bc54 <HAL_SD_InitCard+0x130>)
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbba:	3301      	adds	r3, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f8 f8b3 	bl	8003d28 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 f8b6 	bl	800cd34 <SD_PowerON>
 800bbc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	431a      	orrs	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e02e      	b.n	800bc46 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 ffd5 	bl	800cb98 <SD_InitCard>
 800bbee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00b      	beq.n	800bc0e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	431a      	orrs	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e01b      	b.n	800bc46 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 feca 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800bc1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00f      	beq.n	800bc44 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a0b      	ldr	r2, [pc, #44]	@ (800bc58 <HAL_SD_InitCard+0x134>)
 800bc2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e000      	b.n	800bc46 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	372c      	adds	r7, #44	@ 0x2c
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd90      	pop	{r4, r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	014f8b59 	.word	0x014f8b59
 800bc54:	00012110 	.word	0x00012110
 800bc58:	1fe00fff 	.word	0x1fe00fff

0800bc5c <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b092      	sub	sp, #72	@ 0x48
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc7e:	f7f8 f847 	bl	8003d10 <HAL_GetTick>
 800bc82:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e167      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	f040 815a 	bne.w	800bf64 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bcb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	441a      	add	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d907      	bls.n	800bcd4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e14e      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2200      	movs	r2, #0
 800bce2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d002      	beq.n	800bcf2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcee:	025b      	lsls	r3, r3, #9
 800bcf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	025b      	lsls	r3, r3, #9
 800bcfc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bcfe:	2390      	movs	r3, #144	@ 0x90
 800bd00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd02:	2302      	movs	r3, #2
 800bd04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f107 0214 	add.w	r2, r7, #20
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f001 fe1d 	bl	800d958 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd2c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d90a      	bls.n	800bd4a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2202      	movs	r2, #2
 800bd38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 fe7b 	bl	800da3c <SDMMC_CmdReadMultiBlock>
 800bd46:	6478      	str	r0, [r7, #68]	@ 0x44
 800bd48:	e009      	b.n	800bd5e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 fe4d 	bl	800d9f6 <SDMMC_CmdReadSingleBlock>
 800bd5c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bd5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d012      	beq.n	800bd8a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a84      	ldr	r2, [pc, #528]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800bd6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd72:	431a      	orrs	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e0f3      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd8e:	e058      	b.n	800be42 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d033      	beq.n	800be06 <HAL_SD_ReadBlocks+0x196>
 800bd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bda0:	2b1f      	cmp	r3, #31
 800bda2:	d930      	bls.n	800be06 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800bda4:	2300      	movs	r3, #0
 800bda6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bda8:	e027      	b.n	800bdfa <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fd4a 	bl	800d848 <SDMMC_ReadFIFO>
 800bdb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	0a1b      	lsrs	r3, r3, #8
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdcc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd6:	0c1b      	lsrs	r3, r3, #16
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bddc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde0:	3301      	adds	r3, #1
 800bde2:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	0e1b      	lsrs	r3, r3, #24
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800bdf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdfc:	2b07      	cmp	r3, #7
 800bdfe:	d9d4      	bls.n	800bdaa <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800be00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be02:	3b20      	subs	r3, #32
 800be04:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800be06:	f7f7 ff83 	bl	8003d10 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be12:	429a      	cmp	r2, r3
 800be14:	d902      	bls.n	800be1c <HAL_SD_ReadBlocks+0x1ac>
 800be16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d112      	bne.n	800be42 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a56      	ldr	r2, [pc, #344]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800be22:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e097      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be48:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d09f      	beq.n	800bd90 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be5e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d022      	beq.n	800beb4 <HAL_SD_ReadBlocks+0x244>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d91f      	bls.n	800beb4 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d01b      	beq.n	800beb4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4618      	mov	r0, r3
 800be82:	f001 fe45 	bl	800db10 <SDMMC_CmdStopTransfer>
 800be86:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800be88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d012      	beq.n	800beb4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a3a      	ldr	r2, [pc, #232]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800be94:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be9c:	431a      	orrs	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e05e      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d012      	beq.n	800bee8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a2d      	ldr	r2, [pc, #180]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800bec8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bece:	f043 0208 	orr.w	r2, r3, #8
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e044      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d012      	beq.n	800bf1c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a20      	ldr	r2, [pc, #128]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800befc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf02:	f043 0202 	orr.w	r2, r3, #2
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e02a      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d012      	beq.n	800bf50 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a13      	ldr	r2, [pc, #76]	@ (800bf7c <HAL_SD_ReadBlocks+0x30c>)
 800bf30:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf36:	f043 0220 	orr.w	r2, r3, #32
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e010      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a0a      	ldr	r2, [pc, #40]	@ (800bf80 <HAL_SD_ReadBlocks+0x310>)
 800bf56:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	e006      	b.n	800bf72 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf68:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
  }
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3748      	adds	r7, #72	@ 0x48
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	1fe00fff 	.word	0x1fe00fff
 800bf80:	18000f3a 	.word	0x18000f3a

0800bf84 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b092      	sub	sp, #72	@ 0x48
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf92:	f7f7 febd 	bl	8003d10 <HAL_GetTick>
 800bf96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d107      	bne.n	800bfb6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfaa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e16b      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	f040 815e 	bne.w	800c280 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bfca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	441a      	add	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d907      	bls.n	800bfe8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfdc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e152      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2203      	movs	r2, #3
 800bfec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2200      	movs	r2, #0
 800bff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d002      	beq.n	800c006 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	025b      	lsls	r3, r3, #9
 800c004:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
 800c00a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	025b      	lsls	r3, r3, #9
 800c010:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c012:	2390      	movs	r3, #144	@ 0x90
 800c014:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c016:	2300      	movs	r3, #0
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c01e:	2300      	movs	r3, #0
 800c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f107 0218 	add.w	r2, r7, #24
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f001 fc93 	bl	800d958 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c040:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d90a      	bls.n	800c05e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2220      	movs	r2, #32
 800c04c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c054:	4618      	mov	r0, r3
 800c056:	f001 fd37 	bl	800dac8 <SDMMC_CmdWriteMultiBlock>
 800c05a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c05c:	e009      	b.n	800c072 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2210      	movs	r2, #16
 800c062:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 fd09 	bl	800da82 <SDMMC_CmdWriteSingleBlock>
 800c070:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c074:	2b00      	cmp	r3, #0
 800c076:	d012      	beq.n	800c09e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a86      	ldr	r2, [pc, #536]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c07e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c086:	431a      	orrs	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e0f7      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c0a2:	e05c      	b.n	800c15e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d037      	beq.n	800c122 <HAL_SD_WriteBlocks+0x19e>
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b4:	2b1f      	cmp	r3, #31
 800c0b6:	d934      	bls.n	800c122 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0bc:	e02b      	b.n	800c116 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	021a      	lsls	r2, r3, #8
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d8:	3301      	adds	r3, #1
 800c0da:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	041a      	lsls	r2, r3, #16
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	061a      	lsls	r2, r3, #24
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f107 0214 	add.w	r2, r7, #20
 800c108:	4611      	mov	r1, r2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f001 fba9 	bl	800d862 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800c110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c112:	3301      	adds	r3, #1
 800c114:	643b      	str	r3, [r7, #64]	@ 0x40
 800c116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c118:	2b07      	cmp	r3, #7
 800c11a:	d9d0      	bls.n	800c0be <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c11e:	3b20      	subs	r3, #32
 800c120:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c122:	f7f7 fdf5 	bl	8003d10 <HAL_GetTick>
 800c126:	4602      	mov	r2, r0
 800c128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c12e:	429a      	cmp	r2, r3
 800c130:	d902      	bls.n	800c138 <HAL_SD_WriteBlocks+0x1b4>
 800c132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c134:	2b00      	cmp	r3, #0
 800c136:	d112      	bne.n	800c15e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a56      	ldr	r2, [pc, #344]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c13e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c146:	431a      	orrs	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e097      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c164:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d09b      	beq.n	800c0a4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c17a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c186:	2b00      	cmp	r3, #0
 800c188:	d022      	beq.n	800c1d0 <HAL_SD_WriteBlocks+0x24c>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d91f      	bls.n	800c1d0 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c194:	2b03      	cmp	r3, #3
 800c196:	d01b      	beq.n	800c1d0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 fcb7 	bl	800db10 <SDMMC_CmdStopTransfer>
 800c1a2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d012      	beq.n	800c1d0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a3a      	ldr	r2, [pc, #232]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c1b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e05e      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d6:	f003 0308 	and.w	r3, r3, #8
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d012      	beq.n	800c204 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a2d      	ldr	r2, [pc, #180]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c1e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ea:	f043 0208 	orr.w	r2, r3, #8
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e044      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d012      	beq.n	800c238 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a20      	ldr	r2, [pc, #128]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c218:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c21e:	f043 0202 	orr.w	r2, r3, #2
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e02a      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c23e:	f003 0310 	and.w	r3, r3, #16
 800c242:	2b00      	cmp	r3, #0
 800c244:	d012      	beq.n	800c26c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a13      	ldr	r2, [pc, #76]	@ (800c298 <HAL_SD_WriteBlocks+0x314>)
 800c24c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c252:	f043 0210 	orr.w	r2, r3, #16
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e010      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a0a      	ldr	r2, [pc, #40]	@ (800c29c <HAL_SD_WriteBlocks+0x318>)
 800c272:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	e006      	b.n	800c28e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c284:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
  }
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3748      	adds	r7, #72	@ 0x48
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	1fe00fff 	.word	0x1fe00fff
 800c29c:	18000f3a 	.word	0x18000f3a

0800c2a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ae:	0f9b      	lsrs	r3, r3, #30
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ba:	0e9b      	lsrs	r3, r3, #26
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 030f 	and.w	r3, r3, #15
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2cc:	0e1b      	lsrs	r3, r3, #24
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f003 0303 	and.w	r3, r3, #3
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2de:	0c1b      	lsrs	r3, r3, #16
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ea:	0a1b      	lsrs	r3, r3, #8
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c300:	0d1b      	lsrs	r3, r3, #20
 800c302:	b29a      	uxth	r2, r3
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c30c:	0c1b      	lsrs	r3, r3, #16
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	f003 030f 	and.w	r3, r3, #15
 800c314:	b2da      	uxtb	r2, r3
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c31e:	0bdb      	lsrs	r3, r3, #15
 800c320:	b2db      	uxtb	r3, r3
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	b2da      	uxtb	r2, r3
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c330:	0b9b      	lsrs	r3, r3, #14
 800c332:	b2db      	uxtb	r3, r3
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c342:	0b5b      	lsrs	r3, r3, #13
 800c344:	b2db      	uxtb	r3, r3
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c354:	0b1b      	lsrs	r3, r3, #12
 800c356:	b2db      	uxtb	r3, r3
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2200      	movs	r2, #0
 800c366:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d163      	bne.n	800c438 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c374:	009a      	lsls	r2, r3, #2
 800c376:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c37a:	4013      	ands	r3, r2
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c380:	0f92      	lsrs	r2, r2, #30
 800c382:	431a      	orrs	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c38c:	0edb      	lsrs	r3, r3, #27
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	f003 0307 	and.w	r3, r3, #7
 800c394:	b2da      	uxtb	r2, r3
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c39e:	0e1b      	lsrs	r3, r3, #24
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3b0:	0d5b      	lsrs	r3, r3, #21
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	f003 0307 	and.w	r3, r3, #7
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3c2:	0c9b      	lsrs	r3, r3, #18
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3d4:	0bdb      	lsrs	r3, r3, #15
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	7e1b      	ldrb	r3, [r3, #24]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	3302      	adds	r3, #2
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c402:	fb03 f202 	mul.w	r2, r3, r2
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	7a1b      	ldrb	r3, [r3, #8]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 030f 	and.w	r3, r3, #15
 800c414:	2201      	movs	r2, #1
 800c416:	409a      	lsls	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c424:	0a52      	lsrs	r2, r2, #9
 800c426:	fb03 f202 	mul.w	r2, r3, r2
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c434:	655a      	str	r2, [r3, #84]	@ 0x54
 800c436:	e031      	b.n	800c49c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d11d      	bne.n	800c47c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c444:	041b      	lsls	r3, r3, #16
 800c446:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c44e:	0c1b      	lsrs	r3, r3, #16
 800c450:	431a      	orrs	r2, r3
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	3301      	adds	r3, #1
 800c45c:	029a      	lsls	r2, r3, #10
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c470:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	655a      	str	r2, [r3, #84]	@ 0x54
 800c47a:	e00f      	b.n	800c49c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a58      	ldr	r2, [pc, #352]	@ (800c5e4 <HAL_SD_GetCardCSD+0x344>)
 800c482:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c488:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	e09d      	b.n	800c5d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4a0:	0b9b      	lsrs	r3, r3, #14
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4b2:	09db      	lsrs	r3, r3, #7
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4d4:	0fdb      	lsrs	r3, r3, #31
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4e0:	0f5b      	lsrs	r3, r3, #29
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f003 0303 	and.w	r3, r3, #3
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4f2:	0e9b      	lsrs	r3, r3, #26
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c504:	0d9b      	lsrs	r3, r3, #22
 800c506:	b2db      	uxtb	r3, r3
 800c508:	f003 030f 	and.w	r3, r3, #15
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c516:	0d5b      	lsrs	r3, r3, #21
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c532:	0c1b      	lsrs	r3, r3, #16
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c546:	0bdb      	lsrs	r3, r3, #15
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c55a:	0b9b      	lsrs	r3, r3, #14
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	b2da      	uxtb	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c56e:	0b5b      	lsrs	r3, r3, #13
 800c570:	b2db      	uxtb	r3, r3
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	b2da      	uxtb	r2, r3
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c582:	0b1b      	lsrs	r3, r3, #12
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c596:	0a9b      	lsrs	r3, r3, #10
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5aa:	0a1b      	lsrs	r3, r3, #8
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5be:	085b      	lsrs	r3, r3, #1
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	1fe00fff 	.word	0x1fe00fff

0800c5e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b094      	sub	sp, #80	@ 0x50
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b03      	cmp	r3, #3
 800c602:	d101      	bne.n	800c608 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e0a7      	b.n	800c758 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c608:	f107 0308 	add.w	r3, r7, #8
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fc1e 	bl	800ce50 <SD_SendSDStatus>
 800c614:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d011      	beq.n	800c640 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a4f      	ldr	r2, [pc, #316]	@ (800c760 <HAL_SD_GetCardStatus+0x178>)
 800c622:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c63e:	e070      	b.n	800c722 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	099b      	lsrs	r3, r3, #6
 800c644:	b2db      	uxtb	r3, r3
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	095b      	lsrs	r3, r3, #5
 800c654:	b2db      	uxtb	r3, r3
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	0a1b      	lsrs	r3, r3, #8
 800c664:	b29b      	uxth	r3, r3
 800c666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	0e1b      	lsrs	r3, r3, #24
 800c670:	b29b      	uxth	r3, r3
 800c672:	4313      	orrs	r3, r2
 800c674:	b29a      	uxth	r2, r3
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	061a      	lsls	r2, r3, #24
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	021b      	lsls	r3, r3, #8
 800c682:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c686:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c690:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	0e1b      	lsrs	r3, r3, #24
 800c696:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	0a1b      	lsrs	r3, r3, #8
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	0d1b      	lsrs	r3, r3, #20
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 030f 	and.w	r3, r3, #15
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	0c1b      	lsrs	r3, r3, #16
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	0a9b      	lsrs	r3, r3, #10
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	0a1b      	lsrs	r3, r3, #8
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	091b      	lsrs	r3, r3, #4
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	f003 030f 	and.w	r3, r3, #15
 800c704:	b2da      	uxtb	r2, r3
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	f003 030f 	and.w	r3, r3, #15
 800c712:	b2da      	uxtb	r2, r3
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	0e1b      	lsrs	r3, r3, #24
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c72a:	4618      	mov	r0, r3
 800c72c:	f001 f940 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800c730:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00d      	beq.n	800c754 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a08      	ldr	r2, [pc, #32]	@ (800c760 <HAL_SD_GetCardStatus+0x178>)
 800c73e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c744:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800c754:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3750      	adds	r7, #80	@ 0x50
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	1fe00fff 	.word	0x1fe00fff

0800c764 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b08d      	sub	sp, #52	@ 0x34
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2203      	movs	r2, #3
 800c7d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d02e      	beq.n	800c83a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7e2:	d106      	bne.n	800c7f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	635a      	str	r2, [r3, #52]	@ 0x34
 800c7f0:	e029      	b.n	800c846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7f8:	d10a      	bne.n	800c810 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fc20 	bl	800d040 <SD_WideBus_Enable>
 800c800:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	431a      	orrs	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	635a      	str	r2, [r3, #52]	@ 0x34
 800c80e:	e01a      	b.n	800c846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fc5d 	bl	800d0d6 <SD_WideBus_Disable>
 800c81c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	431a      	orrs	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	635a      	str	r2, [r3, #52]	@ 0x34
 800c82a:	e00c      	b.n	800c846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c830:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	635a      	str	r2, [r3, #52]	@ 0x34
 800c838:	e005      	b.n	800c846 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c83e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a5f      	ldr	r2, [pc, #380]	@ (800c9d0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c854:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c85c:	e096      	b.n	800c98c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c85e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c862:	f04f 0100 	mov.w	r1, #0
 800c866:	f7fd fde5 	bl	800a434 <HAL_RCCEx_GetPeriphCLKFreq>
 800c86a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 8083 	beq.w	800c97a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	695a      	ldr	r2, [r3, #20]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	4950      	ldr	r1, [pc, #320]	@ (800c9d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c892:	fba1 1303 	umull	r1, r3, r1, r3
 800c896:	0e1b      	lsrs	r3, r3, #24
 800c898:	429a      	cmp	r2, r3
 800c89a:	d303      	bcc.n	800c8a4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	e05a      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8ac:	d103      	bne.n	800c8b6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	e051      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8be:	d126      	bne.n	800c90e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10e      	bne.n	800c8e6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	4a43      	ldr	r2, [pc, #268]	@ (800c9d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d906      	bls.n	800c8de <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4a40      	ldr	r2, [pc, #256]	@ (800c9d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d8:	0e5b      	lsrs	r3, r3, #25
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	e03d      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	61bb      	str	r3, [r7, #24]
 800c8e4:	e039      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	69fa      	ldr	r2, [r7, #28]
 800c8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8f2:	4a39      	ldr	r2, [pc, #228]	@ (800c9d8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d906      	bls.n	800c906 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4a36      	ldr	r2, [pc, #216]	@ (800c9d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c900:	0e5b      	lsrs	r3, r3, #25
 800c902:	61bb      	str	r3, [r7, #24]
 800c904:	e029      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	61bb      	str	r3, [r7, #24]
 800c90c:	e025      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10e      	bne.n	800c934 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4a30      	ldr	r2, [pc, #192]	@ (800c9dc <HAL_SD_ConfigWideBusOperation+0x220>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d906      	bls.n	800c92c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4a2c      	ldr	r2, [pc, #176]	@ (800c9d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c922:	fba2 2303 	umull	r2, r3, r2, r3
 800c926:	0e1b      	lsrs	r3, r3, #24
 800c928:	61bb      	str	r3, [r7, #24]
 800c92a:	e016      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	61bb      	str	r3, [r7, #24]
 800c932:	e012      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	69fa      	ldr	r2, [r7, #28]
 800c93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c940:	4a26      	ldr	r2, [pc, #152]	@ (800c9dc <HAL_SD_ConfigWideBusOperation+0x220>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d906      	bls.n	800c954 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4a22      	ldr	r2, [pc, #136]	@ (800c9d4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c94a:	fba2 2303 	umull	r2, r3, r2, r3
 800c94e:	0e1b      	lsrs	r3, r3, #24
 800c950:	61bb      	str	r3, [r7, #24]
 800c952:	e002      	b.n	800c95a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681c      	ldr	r4, [r3, #0]
 800c95e:	466a      	mov	r2, sp
 800c960:	f107 0314 	add.w	r3, r7, #20
 800c964:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c968:	e882 0003 	stmia.w	r2, {r0, r1}
 800c96c:	f107 0308 	add.w	r3, r7, #8
 800c970:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c972:	4620      	mov	r0, r4
 800c974:	f000 ff3e 	bl	800d7f4 <SDMMC_Init>
 800c978:	e008      	b.n	800c98c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c97e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f80b 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800c99a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800c9d0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c9a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	372c      	adds	r7, #44	@ 0x2c
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd90      	pop	{r4, r7, pc}
 800c9d0:	1fe00fff 	.word	0x1fe00fff
 800c9d4:	55e63b89 	.word	0x55e63b89
 800c9d8:	02faf080 	.word	0x02faf080
 800c9dc:	017d7840 	.word	0x017d7840

0800c9e0 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2203      	movs	r2, #3
 800c9f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d027      	beq.n	800ca4c <HAL_SD_ConfigSpeedBusOperation+0x6c>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d85c      	bhi.n	800cabc <HAL_SD_ConfigSpeedBusOperation+0xdc>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <HAL_SD_ConfigSpeedBusOperation+0x30>
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d046      	beq.n	800ca9c <HAL_SD_ConfigSpeedBusOperation+0xbc>
 800ca0e:	e055      	b.n	800cabc <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca18:	d008      	beq.n	800ca2c <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800ca1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca22:	d003      	beq.n	800ca2c <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d150      	bne.n	800cace <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800ca2c:	4947      	ldr	r1, [pc, #284]	@ (800cb4c <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fc6c 	bl	800d30c <SD_SwitchSpeed>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d049      	beq.n	800cace <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 800ca4a:	e040      	b.n	800cace <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca54:	d008      	beq.n	800ca68 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800ca5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca5e:	d003      	beq.n	800ca68 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d10f      	bne.n	800ca88 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800ca68:	4938      	ldr	r1, [pc, #224]	@ (800cb4c <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fc4e 	bl	800d30c <SD_SwitchSpeed>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d011      	beq.n	800ca9a <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca7a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800ca86:	e008      	b.n	800ca9a <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ca98:	e01c      	b.n	800cad4 <HAL_SD_ConfigSpeedBusOperation+0xf4>
 800ca9a:	e01b      	b.n	800cad4 <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800ca9c:	492c      	ldr	r1, [pc, #176]	@ (800cb50 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fc34 	bl	800d30c <SD_SwitchSpeed>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d013      	beq.n	800cad2 <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	75fb      	strb	r3, [r7, #23]
      }

      break;
 800caba:	e00a      	b.n	800cad2 <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cac0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	75fb      	strb	r3, [r7, #23]
      break;
 800cacc:	e002      	b.n	800cad4 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 800cace:	bf00      	nop
 800cad0:	e000      	b.n	800cad4 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 800cad2:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 800cad4:	f7f7 f91c 	bl	8003d10 <HAL_GetTick>
 800cad8:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cada:	e011      	b.n	800cb00 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cadc:	f7f7 f918 	bl	8003d10 <HAL_GetTick>
 800cae0:	4602      	mov	r2, r0
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caea:	d109      	bne.n	800cb00 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800caf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e021      	b.n	800cb44 <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f829 	bl	800cb58 <HAL_SD_GetCardState>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d1e7      	bne.n	800cadc <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 ff4b 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800cb1a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00b      	beq.n	800cb3a <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a0b      	ldr	r2, [pc, #44]	@ (800cb54 <HAL_SD_ConfigSpeedBusOperation+0x174>)
 800cb28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	80ffff01 	.word	0x80ffff01
 800cb50:	80ffff00 	.word	0x80ffff00
 800cb54:	1fe00fff 	.word	0x1fe00fff

0800cb58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cb64:	f107 030c 	add.w	r3, r7, #12
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fa40 	bl	800cff0 <SD_SendStatus>
 800cb70:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	431a      	orrs	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	0a5b      	lsrs	r3, r3, #9
 800cb88:	f003 030f 	and.w	r3, r3, #15
 800cb8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cb8e:	693b      	ldr	r3, [r7, #16]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b090      	sub	sp, #64	@ 0x40
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cba0:	2300      	movs	r3, #0
 800cba2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cba4:	f7f7 f8b4 	bl	8003d10 <HAL_GetTick>
 800cba8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fe79 	bl	800d8a6 <SDMMC_GetPowerState>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cbba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cbbe:	e0b5      	b.n	800cd2c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d02e      	beq.n	800cc26 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f001 f8c4 	bl	800dd5a <SDMMC_CmdSendCID>
 800cbd2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <SD_InitCard+0x46>
    {
      return errorstate;
 800cbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbdc:	e0a6      	b.n	800cd2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 fea4 	bl	800d932 <SDMMC_GetResponse>
 800cbea:	4602      	mov	r2, r0
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2104      	movs	r1, #4
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fe9b 	bl	800d932 <SDMMC_GetResponse>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2108      	movs	r1, #8
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fe92 	bl	800d932 <SDMMC_GetResponse>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	210c      	movs	r1, #12
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fe89 	bl	800d932 <SDMMC_GetResponse>
 800cc20:	4602      	mov	r2, r0
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d01d      	beq.n	800cc6a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cc2e:	e019      	b.n	800cc64 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f107 020a 	add.w	r2, r7, #10
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f001 f8cc 	bl	800ddd8 <SDMMC_CmdSetRelAdd>
 800cc40:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800cc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <SD_InitCard+0xb4>
      {
        return errorstate;
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	e06f      	b.n	800cd2c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cc4c:	f7f7 f860 	bl	8003d10 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	f241 3287 	movw	r2, #4999	@ 0x1387
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d902      	bls.n	800cc64 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800cc5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc62:	e063      	b.n	800cd2c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cc64:	897b      	ldrh	r3, [r7, #10]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0e2      	beq.n	800cc30 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	d036      	beq.n	800cce0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cc72:	897b      	ldrh	r3, [r7, #10]
 800cc74:	461a      	mov	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc82:	041b      	lsls	r3, r3, #16
 800cc84:	4619      	mov	r1, r3
 800cc86:	4610      	mov	r0, r2
 800cc88:	f001 f886 	bl	800dd98 <SDMMC_CmdSendCSD>
 800cc8c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <SD_InitCard+0x100>
    {
      return errorstate;
 800cc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc96:	e049      	b.n	800cd2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 fe47 	bl	800d932 <SDMMC_GetResponse>
 800cca4:	4602      	mov	r2, r0
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2104      	movs	r1, #4
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fe3e 	bl	800d932 <SDMMC_GetResponse>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2108      	movs	r1, #8
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fe35 	bl	800d932 <SDMMC_GetResponse>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	210c      	movs	r1, #12
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fe2c 	bl	800d932 <SDMMC_GetResponse>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2104      	movs	r1, #4
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 fe23 	bl	800d932 <SDMMC_GetResponse>
 800ccec:	4603      	mov	r3, r0
 800ccee:	0d1a      	lsrs	r2, r3, #20
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ccf4:	f107 030c 	add.w	r3, r7, #12
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fad0 	bl	800c2a0 <HAL_SD_GetCardCSD>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cd0a:	e00f      	b.n	800cd2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd14:	041b      	lsls	r3, r3, #16
 800cd16:	4619      	mov	r1, r3
 800cd18:	4610      	mov	r0, r2
 800cd1a:	f000 ff35 	bl	800db88 <SDMMC_CmdSelDesel>
 800cd1e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <SD_InitCard+0x192>
  {
    return errorstate;
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	e000      	b.n	800cd2c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3740      	adds	r7, #64	@ 0x40
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cd40:	2300      	movs	r3, #0
 800cd42:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 ff3e 	bl	800dbce <SDMMC_CmdGoIdleState>
 800cd52:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	e072      	b.n	800ce44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 ff51 	bl	800dc0a <SDMMC_CmdOperCond>
 800cd68:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd70:	d10d      	bne.n	800cd8e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 ff26 	bl	800dbce <SDMMC_CmdGoIdleState>
 800cd82:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d004      	beq.n	800cd94 <SD_PowerON+0x60>
    {
      return errorstate;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	e05a      	b.n	800ce44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d137      	bne.n	800ce0c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2100      	movs	r1, #0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 ff51 	bl	800dc4a <SDMMC_CmdAppCommand>
 800cda8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d02d      	beq.n	800ce0c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdb0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cdb4:	e046      	b.n	800ce44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2100      	movs	r1, #0
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 ff44 	bl	800dc4a <SDMMC_CmdAppCommand>
 800cdc2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <SD_PowerON+0x9a>
    {
      return errorstate;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	e03a      	b.n	800ce44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	491e      	ldr	r1, [pc, #120]	@ (800ce4c <SD_PowerON+0x118>)
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 ff5b 	bl	800dc90 <SDMMC_CmdAppOperCommand>
 800cdda:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d002      	beq.n	800cde8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cde2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cde6:	e02d      	b.n	800ce44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2100      	movs	r1, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fd9f 	bl	800d932 <SDMMC_GetResponse>
 800cdf4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	0fdb      	lsrs	r3, r3, #31
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d101      	bne.n	800ce02 <SD_PowerON+0xce>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <SD_PowerON+0xd0>
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]

    count++;
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d802      	bhi.n	800ce1c <SD_PowerON+0xe8>
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0cc      	beq.n	800cdb6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d902      	bls.n	800ce2c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ce26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce2a:	e00b      	b.n	800ce44 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	c1100000 	.word	0xc1100000

0800ce50 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08c      	sub	sp, #48	@ 0x30
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce5a:	f7f6 ff59 	bl	8003d10 <HAL_GetTick>
 800ce5e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2100      	movs	r1, #0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 fd61 	bl	800d932 <SDMMC_GetResponse>
 800ce70:	4603      	mov	r3, r0
 800ce72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce7a:	d102      	bne.n	800ce82 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ce7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce80:	e0b0      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2140      	movs	r1, #64	@ 0x40
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fd91 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800ce8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d005      	beq.n	800cea2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	e0a0      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceaa:	041b      	lsls	r3, r3, #16
 800ceac:	4619      	mov	r1, r3
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f000 fecb 	bl	800dc4a <SDMMC_CmdAppCommand>
 800ceb4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	e08d      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295
 800cecc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cece:	2340      	movs	r3, #64	@ 0x40
 800ced0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ced2:	2360      	movs	r3, #96	@ 0x60
 800ced4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ced6:	2302      	movs	r3, #2
 800ced8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cede:	2301      	movs	r3, #1
 800cee0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f107 0208 	add.w	r2, r7, #8
 800ceea:	4611      	mov	r1, r2
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 fd33 	bl	800d958 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 ffb3 	bl	800de62 <SDMMC_CmdStatusRegister>
 800cefc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d02b      	beq.n	800cf5c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cf0c:	6a3b      	ldr	r3, [r7, #32]
 800cf0e:	e069      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800cf1e:	2300      	movs	r3, #0
 800cf20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf22:	e00d      	b.n	800cf40 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fc8d 	bl	800d848 <SDMMC_ReadFIFO>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf32:	601a      	str	r2, [r3, #0]
        pData++;
 800cf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf36:	3304      	adds	r3, #4
 800cf38:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf42:	2b07      	cmp	r3, #7
 800cf44:	d9ee      	bls.n	800cf24 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cf46:	f7f6 fee3 	bl	8003d10 <HAL_GetTick>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf54:	d102      	bne.n	800cf5c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cf56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf5a:	e043      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf62:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0d2      	beq.n	800cf10 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf70:	f003 0308 	and.w	r3, r3, #8
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cf78:	2308      	movs	r3, #8
 800cf7a:	e033      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	e02a      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf94:	f003 0320 	and.w	r3, r3, #32
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d017      	beq.n	800cfcc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cf9c:	2320      	movs	r3, #32
 800cf9e:	e021      	b.n	800cfe4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fc4f 	bl	800d848 <SDMMC_ReadFIFO>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	601a      	str	r2, [r3, #0]
    pData++;
 800cfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfb6:	f7f6 feab 	bl	8003d10 <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc4:	d102      	bne.n	800cfcc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cfc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cfca:	e00b      	b.n	800cfe4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e2      	bne.n	800cfa0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a03      	ldr	r2, [pc, #12]	@ (800cfec <SD_SendSDStatus+0x19c>)
 800cfe0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3730      	adds	r7, #48	@ 0x30
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	18000f3a 	.word	0x18000f3a

0800cff0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d000:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d004:	e018      	b.n	800d038 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d00e:	041b      	lsls	r3, r3, #16
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f000 ff02 	bl	800de1c <SDMMC_CmdSendStatus>
 800d018:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	e009      	b.n	800d038 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 fc81 	bl	800d932 <SDMMC_GetResponse>
 800d030:	4602      	mov	r2, r0
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	2300      	movs	r3, #0
 800d04e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2100      	movs	r1, #0
 800d056:	4618      	mov	r0, r3
 800d058:	f000 fc6b 	bl	800d932 <SDMMC_GetResponse>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d066:	d102      	bne.n	800d06e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d068:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d06c:	e02f      	b.n	800d0ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d06e:	f107 030c 	add.w	r3, r7, #12
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f879 	bl	800d16c <SD_FindSCR>
 800d07a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	e023      	b.n	800d0ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01c      	beq.n	800d0ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d098:	041b      	lsls	r3, r3, #16
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f000 fdd4 	bl	800dc4a <SDMMC_CmdAppCommand>
 800d0a2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	e00f      	b.n	800d0ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2102      	movs	r1, #2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 fe0b 	bl	800dcd0 <SDMMC_CmdBusWidth>
 800d0ba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	e003      	b.n	800d0ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e001      	b.n	800d0ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d0ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b086      	sub	sp, #24
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fc20 	bl	800d932 <SDMMC_GetResponse>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0fc:	d102      	bne.n	800d104 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d102:	e02f      	b.n	800d164 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d104:	f107 030c 	add.w	r3, r7, #12
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f82e 	bl	800d16c <SD_FindSCR>
 800d110:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	e023      	b.n	800d164 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d122:	2b00      	cmp	r3, #0
 800d124:	d01c      	beq.n	800d160 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d12e:	041b      	lsls	r3, r3, #16
 800d130:	4619      	mov	r1, r3
 800d132:	4610      	mov	r0, r2
 800d134:	f000 fd89 	bl	800dc4a <SDMMC_CmdAppCommand>
 800d138:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	e00f      	b.n	800d164 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2100      	movs	r1, #0
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fdc0 	bl	800dcd0 <SDMMC_CmdBusWidth>
 800d150:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	e003      	b.n	800d164 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e001      	b.n	800d164 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d160:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08e      	sub	sp, #56	@ 0x38
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d176:	f7f6 fdcb 	bl	8003d10 <HAL_GetTick>
 800d17a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d180:	2300      	movs	r3, #0
 800d182:	60bb      	str	r3, [r7, #8]
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2108      	movs	r1, #8
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fc0c 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800d198:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a2:	e0ad      	b.n	800d300 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ac:	041b      	lsls	r3, r3, #16
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f000 fd4a 	bl	800dc4a <SDMMC_CmdAppCommand>
 800d1b6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c0:	e09e      	b.n	800d300 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d1c8:	2308      	movs	r3, #8
 800d1ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d1cc:	2330      	movs	r3, #48	@ 0x30
 800d1ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f107 0210 	add.w	r2, r7, #16
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f000 fbb6 	bl	800d958 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 fd90 	bl	800dd16 <SDMMC_CmdSendSCR>
 800d1f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d027      	beq.n	800d24e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d200:	e07e      	b.n	800d300 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d113      	bne.n	800d238 <SD_FindSCR+0xcc>
 800d210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d212:	2b00      	cmp	r3, #0
 800d214:	d110      	bne.n	800d238 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fb14 	bl	800d848 <SDMMC_ReadFIFO>
 800d220:	4603      	mov	r3, r0
 800d222:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 fb0d 	bl	800d848 <SDMMC_ReadFIFO>
 800d22e:	4603      	mov	r3, r0
 800d230:	60fb      	str	r3, [r7, #12]
      index++;
 800d232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d234:	3301      	adds	r3, #1
 800d236:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d238:	f7f6 fd6a 	bl	8003d10 <HAL_GetTick>
 800d23c:	4602      	mov	r2, r0
 800d23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d102      	bne.n	800d24e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d248:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d24c:	e058      	b.n	800d300 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d254:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d258:	4013      	ands	r3, r2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0d1      	beq.n	800d202 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d264:	f003 0308 	and.w	r3, r3, #8
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2208      	movs	r2, #8
 800d272:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d274:	2308      	movs	r3, #8
 800d276:	e043      	b.n	800d300 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d27e:	f003 0302 	and.w	r3, r3, #2
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2202      	movs	r2, #2
 800d28c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d28e:	2302      	movs	r3, #2
 800d290:	e036      	b.n	800d300 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d005      	beq.n	800d2ac <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2220      	movs	r2, #32
 800d2a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d2a8:	2320      	movs	r3, #32
 800d2aa:	e029      	b.n	800d300 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a15      	ldr	r2, [pc, #84]	@ (800d308 <SD_FindSCR+0x19c>)
 800d2b2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	061a      	lsls	r2, r3, #24
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	021b      	lsls	r3, r3, #8
 800d2bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	0a1b      	lsrs	r3, r3, #8
 800d2c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d2ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	0e1b      	lsrs	r3, r3, #24
 800d2d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d4:	601a      	str	r2, [r3, #0]
    scr++;
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	3304      	adds	r3, #4
 800d2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	061a      	lsls	r2, r3, #24
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	021b      	lsls	r3, r3, #8
 800d2e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	0a1b      	lsrs	r3, r3, #8
 800d2ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d2f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	0e1b      	lsrs	r3, r3, #24
 800d2f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3738      	adds	r7, #56	@ 0x38
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	18000f3a 	.word	0x18000f3a

0800d30c <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b09d      	sub	sp, #116	@ 0x74
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800d316:	2300      	movs	r3, #0
 800d318:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800d31a:	f107 0308 	add.w	r3, r7, #8
 800d31e:	2240      	movs	r2, #64	@ 0x40
 800d320:	2100      	movs	r1, #0
 800d322:	4618      	mov	r0, r3
 800d324:	f005 ff0a 	bl	801313c <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 800d328:	2300      	movs	r3, #0
 800d32a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 800d32c:	f7f6 fcf0 	bl	8003d10 <HAL_GetTick>
 800d330:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d33a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d33e:	e0ad      	b.n	800d49c <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d344:	2bff      	cmp	r3, #255	@ 0xff
 800d346:	f240 80a8 	bls.w	800d49a <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2200      	movs	r2, #0
 800d350:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2140      	movs	r1, #64	@ 0x40
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fb29 	bl	800d9b0 <SDMMC_CmdBlockLength>
 800d35e:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 800d360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 800d366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d368:	e098      	b.n	800d49c <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d36a:	f04f 33ff 	mov.w	r3, #4294967295
 800d36e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 800d370:	2340      	movs	r3, #64	@ 0x40
 800d372:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800d374:	2360      	movs	r3, #96	@ 0x60
 800d376:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d378:	2302      	movs	r3, #2
 800d37a:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800d380:	2301      	movs	r3, #1
 800d382:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800d38c:	4611      	mov	r1, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 fae2 	bl	800d958 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 fd83 	bl	800dea6 <SDMMC_CmdSwitch>
 800d3a0:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d036      	beq.n	800d416 <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 800d3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3aa:	e077      	b.n	800d49c <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01a      	beq.n	800d3f0 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3be:	e011      	b.n	800d3e4 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6819      	ldr	r1, [r3, #0]
 800d3c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c6:	00da      	lsls	r2, r3, #3
 800d3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ca:	18d4      	adds	r4, r2, r3
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	f000 fa3b 	bl	800d848 <SDMMC_ReadFIFO>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	00a3      	lsls	r3, r4, #2
 800d3d6:	3370      	adds	r3, #112	@ 0x70
 800d3d8:	443b      	add	r3, r7
 800d3da:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 800d3de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3e6:	2b07      	cmp	r3, #7
 800d3e8:	d9ea      	bls.n	800d3c0 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 800d3ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 800d3f0:	f7f6 fc8e 	bl	8003d10 <HAL_GetTick>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d10a      	bne.n	800d416 <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d406:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 800d410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d414:	e042      	b.n	800d49c <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d41c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d420:	4013      	ands	r3, r2
 800d422:	2b00      	cmp	r3, #0
 800d424:	d0c2      	beq.n	800d3ac <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2208      	movs	r2, #8
 800d43a:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 800d43c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d43e:	e02d      	b.n	800d49c <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2202      	movs	r2, #2
 800d454:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 800d456:	2302      	movs	r3, #2
 800d458:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 800d45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d45c:	e01e      	b.n	800d49c <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d464:	f003 0320 	and.w	r3, r3, #32
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d007      	beq.n	800d47c <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2220      	movs	r2, #32
 800d472:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 800d474:	2320      	movs	r3, #32
 800d476:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 800d478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d47a:	e00f      	b.n	800d49c <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a08      	ldr	r2, [pc, #32]	@ (800d4a4 <SD_SwitchSpeed+0x198>)
 800d482:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 800d484:	f107 0308 	add.w	r3, r7, #8
 800d488:	330d      	adds	r3, #13
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d494:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d498:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 800d49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3774      	adds	r7, #116	@ 0x74
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd90      	pop	{r4, r7, pc}
 800d4a4:	18000f3a 	.word	0x18000f3a

0800d4a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d101      	bne.n	800d4bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e02b      	b.n	800d514 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d106      	bne.n	800d4d6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f825 	bl	800d520 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2202      	movs	r2, #2
 800d4da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f000 f881 	bl	800d5f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	f000 f8d5 	bl	800d6a8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d4fe:	4b07      	ldr	r3, [pc, #28]	@ (800d51c <HAL_SDRAM_Init+0x74>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a06      	ldr	r2, [pc, #24]	@ (800d51c <HAL_SDRAM_Init+0x74>)
 800d504:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d508:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	52004000 	.word	0x52004000

0800d520 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d546:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d548:	7dfb      	ldrb	r3, [r7, #23]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d101      	bne.n	800d552 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d54e:	2302      	movs	r3, #2
 800d550:	e021      	b.n	800d596 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d002      	beq.n	800d55e <HAL_SDRAM_SendCommand+0x2a>
 800d558:	7dfb      	ldrb	r3, [r7, #23]
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d118      	bne.n	800d590 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2202      	movs	r2, #2
 800d562:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f904 	bl	800d77c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d104      	bne.n	800d586 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2205      	movs	r2, #5
 800d580:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d584:	e006      	b.n	800d594 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d58e:	e001      	b.n	800d594 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d101      	bne.n	800d5b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e016      	b.n	800d5e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d10f      	bne.n	800d5e4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f8f6 	bl	800d7c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	e000      	b.n	800d5e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d121      	bne.n	800d646 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	4b27      	ldr	r3, [pc, #156]	@ (800d6a4 <FMC_SDRAM_Init+0xb4>)
 800d608:	4013      	ands	r3, r2
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	6851      	ldr	r1, [r2, #4]
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	6892      	ldr	r2, [r2, #8]
 800d612:	4311      	orrs	r1, r2
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	68d2      	ldr	r2, [r2, #12]
 800d618:	4311      	orrs	r1, r2
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	6912      	ldr	r2, [r2, #16]
 800d61e:	4311      	orrs	r1, r2
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	6952      	ldr	r2, [r2, #20]
 800d624:	4311      	orrs	r1, r2
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	6992      	ldr	r2, [r2, #24]
 800d62a:	4311      	orrs	r1, r2
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	69d2      	ldr	r2, [r2, #28]
 800d630:	4311      	orrs	r1, r2
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	6a12      	ldr	r2, [r2, #32]
 800d636:	4311      	orrs	r1, r2
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d63c:	430a      	orrs	r2, r1
 800d63e:	431a      	orrs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	e026      	b.n	800d694 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	69d9      	ldr	r1, [r3, #28]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	4319      	orrs	r1, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65c:	430b      	orrs	r3, r1
 800d65e:	431a      	orrs	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	4b0e      	ldr	r3, [pc, #56]	@ (800d6a4 <FMC_SDRAM_Init+0xb4>)
 800d66a:	4013      	ands	r3, r2
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	6851      	ldr	r1, [r2, #4]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	6892      	ldr	r2, [r2, #8]
 800d674:	4311      	orrs	r1, r2
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	68d2      	ldr	r2, [r2, #12]
 800d67a:	4311      	orrs	r1, r2
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	6912      	ldr	r2, [r2, #16]
 800d680:	4311      	orrs	r1, r2
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	6952      	ldr	r2, [r2, #20]
 800d686:	4311      	orrs	r1, r2
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	6992      	ldr	r2, [r2, #24]
 800d68c:	430a      	orrs	r2, r1
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	ffff8000 	.word	0xffff8000

0800d6a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d128      	bne.n	800d70c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	1e59      	subs	r1, r3, #1
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	4319      	orrs	r1, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	021b      	lsls	r3, r3, #8
 800d6da:	4319      	orrs	r1, r3
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	031b      	lsls	r3, r3, #12
 800d6e4:	4319      	orrs	r1, r3
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	041b      	lsls	r3, r3, #16
 800d6ee:	4319      	orrs	r1, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	051b      	lsls	r3, r3, #20
 800d6f8:	4319      	orrs	r1, r3
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	061b      	lsls	r3, r3, #24
 800d702:	430b      	orrs	r3, r1
 800d704:	431a      	orrs	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	609a      	str	r2, [r3, #8]
 800d70a:	e02d      	b.n	800d768 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689a      	ldr	r2, [r3, #8]
 800d710:	4b19      	ldr	r3, [pc, #100]	@ (800d778 <FMC_SDRAM_Timing_Init+0xd0>)
 800d712:	4013      	ands	r3, r2
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	68d2      	ldr	r2, [r2, #12]
 800d718:	3a01      	subs	r2, #1
 800d71a:	0311      	lsls	r1, r2, #12
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	6952      	ldr	r2, [r2, #20]
 800d720:	3a01      	subs	r2, #1
 800d722:	0512      	lsls	r2, r2, #20
 800d724:	430a      	orrs	r2, r1
 800d726:	431a      	orrs	r2, r3
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	1e59      	subs	r1, r3, #1
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	3b01      	subs	r3, #1
 800d740:	011b      	lsls	r3, r3, #4
 800d742:	4319      	orrs	r1, r3
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	3b01      	subs	r3, #1
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	4319      	orrs	r1, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	691b      	ldr	r3, [r3, #16]
 800d752:	3b01      	subs	r3, #1
 800d754:	041b      	lsls	r3, r3, #16
 800d756:	4319      	orrs	r1, r3
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	061b      	lsls	r3, r3, #24
 800d760:	430b      	orrs	r3, r1
 800d762:	431a      	orrs	r2, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	ff0f0fff 	.word	0xff0f0fff

0800d77c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	691a      	ldr	r2, [r3, #16]
 800d78c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c0 <FMC_SDRAM_SendCommand+0x44>)
 800d78e:	4013      	ands	r3, r2
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	6811      	ldr	r1, [r2, #0]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	6852      	ldr	r2, [r2, #4]
 800d798:	4311      	orrs	r1, r2
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	6892      	ldr	r2, [r2, #8]
 800d79e:	3a01      	subs	r2, #1
 800d7a0:	0152      	lsls	r2, r2, #5
 800d7a2:	4311      	orrs	r1, r2
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	68d2      	ldr	r2, [r2, #12]
 800d7a8:	0252      	lsls	r2, r2, #9
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	ffc00000 	.word	0xffc00000

0800d7c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	695a      	ldr	r2, [r3, #20]
 800d7d2:	4b07      	ldr	r3, [pc, #28]	@ (800d7f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	0052      	lsls	r2, r2, #1
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	ffffc001 	.word	0xffffc001

0800d7f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	b480      	push	{r7}
 800d7f8:	b085      	sub	sp, #20
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	f107 001c 	add.w	r0, r7, #28
 800d802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d80a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d80c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d80e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d812:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d816:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d81a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	4b07      	ldr	r3, [pc, #28]	@ (800d844 <SDMMC_Init+0x50>)
 800d828:	4013      	ands	r3, r2
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	431a      	orrs	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3714      	adds	r7, #20
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	b004      	add	sp, #16
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	ffc02c00 	.word	0xffc02c00

0800d848 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d862:	b480      	push	{r7}
 800d864:	b083      	sub	sp, #12
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f043 0203 	orr.w	r2, r3, #3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b083      	sub	sp, #12
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 0303 	and.w	r3, r3, #3
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
	...

0800d8c4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d8e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d8e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d8ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	4b06      	ldr	r3, [pc, #24]	@ (800d914 <SDMMC_SendCommand+0x50>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	431a      	orrs	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	fffee0c0 	.word	0xfffee0c0

0800d918 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	b2db      	uxtb	r3, r3
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d932:	b480      	push	{r7}
 800d934:	b085      	sub	sp, #20
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	3314      	adds	r3, #20
 800d940:	461a      	mov	r2, r3
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	4413      	add	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d97e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d984:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d98a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d996:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	431a      	orrs	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d9a2:	2300      	movs	r3, #0

}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b088      	sub	sp, #32
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d9be:	2310      	movs	r3, #16
 800d9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9d2:	f107 0308 	add.w	r3, r7, #8
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7ff ff73 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d9de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9e2:	2110      	movs	r1, #16
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fa81 	bl	800deec <SDMMC_GetCmdResp1>
 800d9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9ec:	69fb      	ldr	r3, [r7, #28]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3720      	adds	r7, #32
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b088      	sub	sp, #32
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da04:	2311      	movs	r3, #17
 800da06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da0e:	2300      	movs	r3, #0
 800da10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da18:	f107 0308 	add.w	r3, r7, #8
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff ff50 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da28:	2111      	movs	r1, #17
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fa5e 	bl	800deec <SDMMC_GetCmdResp1>
 800da30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da32:	69fb      	ldr	r3, [r7, #28]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3720      	adds	r7, #32
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da4a:	2312      	movs	r3, #18
 800da4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da5e:	f107 0308 	add.w	r3, r7, #8
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff ff2d 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da6e:	2112      	movs	r1, #18
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fa3b 	bl	800deec <SDMMC_GetCmdResp1>
 800da76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da78:	69fb      	ldr	r3, [r7, #28]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3720      	adds	r7, #32
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b088      	sub	sp, #32
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800da90:	2318      	movs	r3, #24
 800da92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da9a:	2300      	movs	r3, #0
 800da9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800daa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff ff0a 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dab4:	2118      	movs	r1, #24
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fa18 	bl	800deec <SDMMC_GetCmdResp1>
 800dabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dabe:	69fb      	ldr	r3, [r7, #28]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dad6:	2319      	movs	r3, #25
 800dad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dae0:	2300      	movs	r3, #0
 800dae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff fee7 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800daf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dafa:	2119      	movs	r1, #25
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 f9f5 	bl	800deec <SDMMC_GetCmdResp1>
 800db02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db04:	69fb      	ldr	r3, [r7, #28]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db1c:	230c      	movs	r3, #12
 800db1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800db24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db26:	2300      	movs	r3, #0
 800db28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db2e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db48:	f107 0308 	add.w	r3, r7, #8
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff feb8 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db54:	4a0b      	ldr	r2, [pc, #44]	@ (800db84 <SDMMC_CmdStopTransfer+0x74>)
 800db56:	210c      	movs	r1, #12
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f9c7 	bl	800deec <SDMMC_GetCmdResp1>
 800db5e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db72:	d101      	bne.n	800db78 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800db74:	2300      	movs	r3, #0
 800db76:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800db78:	69fb      	ldr	r3, [r7, #28]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	05f5e100 	.word	0x05f5e100

0800db88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800db96:	2307      	movs	r3, #7
 800db98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800db9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dba0:	2300      	movs	r3, #0
 800dba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbaa:	f107 0308 	add.w	r3, r7, #8
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff fe87 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbba:	2107      	movs	r1, #7
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f995 	bl	800deec <SDMMC_GetCmdResp1>
 800dbc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbc4:	69fb      	ldr	r3, [r7, #28]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3720      	adds	r7, #32
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b088      	sub	sp, #32
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbec:	f107 0308 	add.w	r3, r7, #8
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7ff fe66 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fbb9 	bl	800e370 <SDMMC_GetCmdError>
 800dbfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc00:	69fb      	ldr	r3, [r7, #28]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3720      	adds	r7, #32
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b088      	sub	sp, #32
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800dc16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc18:	2308      	movs	r3, #8
 800dc1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc2c:	f107 0308 	add.w	r3, r7, #8
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff fe46 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fb4b 	bl	800e2d4 <SDMMC_GetCmdResp7>
 800dc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc40:	69fb      	ldr	r3, [r7, #28]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b088      	sub	sp, #32
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc58:	2337      	movs	r3, #55	@ 0x37
 800dc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc62:	2300      	movs	r3, #0
 800dc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc6c:	f107 0308 	add.w	r3, r7, #8
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff fe26 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc7c:	2137      	movs	r1, #55	@ 0x37
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f934 	bl	800deec <SDMMC_GetCmdResp1>
 800dc84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc86:	69fb      	ldr	r3, [r7, #28]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3720      	adds	r7, #32
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dc9e:	2329      	movs	r3, #41	@ 0x29
 800dca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dca2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcb2:	f107 0308 	add.w	r3, r7, #8
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff fe03 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fa50 	bl	800e164 <SDMMC_GetCmdResp3>
 800dcc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dcde:	2306      	movs	r3, #6
 800dce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dce8:	2300      	movs	r3, #0
 800dcea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcf2:	f107 0308 	add.w	r3, r7, #8
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7ff fde3 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dcfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd02:	2106      	movs	r1, #6
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f8f1 	bl	800deec <SDMMC_GetCmdResp1>
 800dd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd0c:	69fb      	ldr	r3, [r7, #28]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b088      	sub	sp, #32
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd22:	2333      	movs	r3, #51	@ 0x33
 800dd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd36:	f107 0308 	add.w	r3, r7, #8
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff fdc1 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd46:	2133      	movs	r1, #51	@ 0x33
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f8cf 	bl	800deec <SDMMC_GetCmdResp1>
 800dd4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd50:	69fb      	ldr	r3, [r7, #28]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd66:	2302      	movs	r3, #2
 800dd68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800dd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd70:	2300      	movs	r3, #0
 800dd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd7a:	f107 0308 	add.w	r3, r7, #8
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff fd9f 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f9a2 	bl	800e0d0 <SDMMC_GetCmdResp2>
 800dd8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dda6:	2309      	movs	r3, #9
 800dda8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ddae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff fd7f 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f982 	bl	800e0d0 <SDMMC_GetCmdResp2>
 800ddcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddce:	69fb      	ldr	r3, [r7, #28]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3720      	adds	r7, #32
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dde6:	2303      	movs	r3, #3
 800dde8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddfa:	f107 0308 	add.w	r3, r7, #8
 800ddfe:	4619      	mov	r1, r3
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fd5f 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	2103      	movs	r1, #3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 f9ea 	bl	800e1e4 <SDMMC_GetCmdResp6>
 800de10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de12:	69fb      	ldr	r3, [r7, #28]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3720      	adds	r7, #32
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b088      	sub	sp, #32
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de2a:	230d      	movs	r3, #13
 800de2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de34:	2300      	movs	r3, #0
 800de36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de3e:	f107 0308 	add.w	r3, r7, #8
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff fd3d 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de4e:	210d      	movs	r1, #13
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f84b 	bl	800deec <SDMMC_GetCmdResp1>
 800de56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de58:	69fb      	ldr	r3, [r7, #28]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b088      	sub	sp, #32
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800de6e:	230d      	movs	r3, #13
 800de70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fd1b 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800de8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de92:	210d      	movs	r1, #13
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f829 	bl	800deec <SDMMC_GetCmdResp1>
 800de9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de9c:	69fb      	ldr	r3, [r7, #28]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3720      	adds	r7, #32
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b088      	sub	sp, #32
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800deb4:	2306      	movs	r3, #6
 800deb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800deb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800debc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dec8:	f107 0308 	add.w	r3, r7, #8
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fcf8 	bl	800d8c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800ded4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ded8:	2106      	movs	r1, #6
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f806 	bl	800deec <SDMMC_GetCmdResp1>
 800dee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dee2:	69fb      	ldr	r3, [r7, #28]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3720      	adds	r7, #32
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	460b      	mov	r3, r1
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800defa:	4b70      	ldr	r3, [pc, #448]	@ (800e0bc <SDMMC_GetCmdResp1+0x1d0>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a70      	ldr	r2, [pc, #448]	@ (800e0c0 <SDMMC_GetCmdResp1+0x1d4>)
 800df00:	fba2 2303 	umull	r2, r3, r2, r3
 800df04:	0a5a      	lsrs	r2, r3, #9
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	fb02 f303 	mul.w	r3, r2, r3
 800df0c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	1e5a      	subs	r2, r3, #1
 800df12:	61fa      	str	r2, [r7, #28]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800df1c:	e0c9      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df22:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	4b67      	ldr	r3, [pc, #412]	@ (800e0c4 <SDMMC_GetCmdResp1+0x1d8>)
 800df28:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d0ef      	beq.n	800df0e <SDMMC_GetCmdResp1+0x22>
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1ea      	bne.n	800df0e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d004      	beq.n	800df4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2204      	movs	r2, #4
 800df48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df4a:	2304      	movs	r3, #4
 800df4c:	e0b1      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2201      	movs	r2, #1
 800df5e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df60:	2301      	movs	r3, #1
 800df62:	e0a6      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	4a58      	ldr	r2, [pc, #352]	@ (800e0c8 <SDMMC_GetCmdResp1+0x1dc>)
 800df68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff fcd4 	bl	800d918 <SDMMC_GetCommandResponse>
 800df70:	4603      	mov	r3, r0
 800df72:	461a      	mov	r2, r3
 800df74:	7afb      	ldrb	r3, [r7, #11]
 800df76:	4293      	cmp	r3, r2
 800df78:	d001      	beq.n	800df7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e099      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800df7e:	2100      	movs	r1, #0
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f7ff fcd6 	bl	800d932 <SDMMC_GetResponse>
 800df86:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	4b50      	ldr	r3, [pc, #320]	@ (800e0cc <SDMMC_GetCmdResp1+0x1e0>)
 800df8c:	4013      	ands	r3, r2
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df92:	2300      	movs	r3, #0
 800df94:	e08d      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da02      	bge.n	800dfa2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dfa0:	e087      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dfac:	2340      	movs	r3, #64	@ 0x40
 800dfae:	e080      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfba:	2380      	movs	r3, #128	@ 0x80
 800dfbc:	e079      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfcc:	e071      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfdc:	e069      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfec:	e061      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dff8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dffc:	e059      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e00c:	e051      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e01c:	e049      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e028:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e02c:	e041      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e03c:	e039      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e048:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e04c:	e031      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e058:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e05c:	e029      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e068:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e06c:	e021      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e078:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e07c:	e019      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e088:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e08c:	e011      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e098:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e09c:	e009      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f003 0308 	and.w	r3, r3, #8
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e0a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e0ac:	e001      	b.n	800e0b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	200000a8 	.word	0x200000a8
 800e0c0:	10624dd3 	.word	0x10624dd3
 800e0c4:	00200045 	.word	0x00200045
 800e0c8:	002000c5 	.word	0x002000c5
 800e0cc:	fdffe008 	.word	0xfdffe008

0800e0d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e0d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e158 <SDMMC_GetCmdResp2+0x88>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a1f      	ldr	r2, [pc, #124]	@ (800e15c <SDMMC_GetCmdResp2+0x8c>)
 800e0de:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e2:	0a5b      	lsrs	r3, r3, #9
 800e0e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0e8:	fb02 f303 	mul.w	r3, r2, r3
 800e0ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	1e5a      	subs	r2, r3, #1
 800e0f2:	60fa      	str	r2, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0fc:	e026      	b.n	800e14c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e102:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0ef      	beq.n	800e0ee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1ea      	bne.n	800e0ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e11c:	f003 0304 	and.w	r3, r3, #4
 800e120:	2b00      	cmp	r3, #0
 800e122:	d004      	beq.n	800e12e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2204      	movs	r2, #4
 800e128:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e12a:	2304      	movs	r3, #4
 800e12c:	e00e      	b.n	800e14c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d004      	beq.n	800e144 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e140:	2301      	movs	r3, #1
 800e142:	e003      	b.n	800e14c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a06      	ldr	r2, [pc, #24]	@ (800e160 <SDMMC_GetCmdResp2+0x90>)
 800e148:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	200000a8 	.word	0x200000a8
 800e15c:	10624dd3 	.word	0x10624dd3
 800e160:	002000c5 	.word	0x002000c5

0800e164 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e16c:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d8 <SDMMC_GetCmdResp3+0x74>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a1a      	ldr	r2, [pc, #104]	@ (800e1dc <SDMMC_GetCmdResp3+0x78>)
 800e172:	fba2 2303 	umull	r2, r3, r2, r3
 800e176:	0a5b      	lsrs	r3, r3, #9
 800e178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e17c:	fb02 f303 	mul.w	r3, r2, r3
 800e180:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	1e5a      	subs	r2, r3, #1
 800e186:	60fa      	str	r2, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e18c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e190:	e01b      	b.n	800e1ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e196:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0ef      	beq.n	800e182 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1ea      	bne.n	800e182 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d004      	beq.n	800e1c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2204      	movs	r2, #4
 800e1bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1be:	2304      	movs	r3, #4
 800e1c0:	e003      	b.n	800e1ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a06      	ldr	r2, [pc, #24]	@ (800e1e0 <SDMMC_GetCmdResp3+0x7c>)
 800e1c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3714      	adds	r7, #20
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	200000a8 	.word	0x200000a8
 800e1dc:	10624dd3 	.word	0x10624dd3
 800e1e0:	002000c5 	.word	0x002000c5

0800e1e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	607a      	str	r2, [r7, #4]
 800e1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1f2:	4b35      	ldr	r3, [pc, #212]	@ (800e2c8 <SDMMC_GetCmdResp6+0xe4>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a35      	ldr	r2, [pc, #212]	@ (800e2cc <SDMMC_GetCmdResp6+0xe8>)
 800e1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fc:	0a5b      	lsrs	r3, r3, #9
 800e1fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e202:	fb02 f303 	mul.w	r3, r2, r3
 800e206:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	1e5a      	subs	r2, r3, #1
 800e20c:	61fa      	str	r2, [r7, #28]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d102      	bne.n	800e218 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e212:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e216:	e052      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e224:	2b00      	cmp	r3, #0
 800e226:	d0ef      	beq.n	800e208 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1ea      	bne.n	800e208 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2204      	movs	r2, #4
 800e242:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e244:	2304      	movs	r3, #4
 800e246:	e03a      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e24c:	f003 0301 	and.w	r3, r3, #1
 800e250:	2b00      	cmp	r3, #0
 800e252:	d004      	beq.n	800e25e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2201      	movs	r2, #1
 800e258:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e02f      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff fb5a 	bl	800d918 <SDMMC_GetCommandResponse>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d001      	beq.n	800e272 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e26e:	2301      	movs	r3, #1
 800e270:	e025      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	4a16      	ldr	r2, [pc, #88]	@ (800e2d0 <SDMMC_GetCmdResp6+0xec>)
 800e276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e278:	2100      	movs	r1, #0
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7ff fb59 	bl	800d932 <SDMMC_GetResponse>
 800e280:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d106      	bne.n	800e29a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	0c1b      	lsrs	r3, r3, #16
 800e290:	b29a      	uxth	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e296:	2300      	movs	r3, #0
 800e298:	e011      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e2a8:	e009      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e2b8:	e001      	b.n	800e2be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	200000a8 	.word	0x200000a8
 800e2cc:	10624dd3 	.word	0x10624dd3
 800e2d0:	002000c5 	.word	0x002000c5

0800e2d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e2dc:	4b22      	ldr	r3, [pc, #136]	@ (800e368 <SDMMC_GetCmdResp7+0x94>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a22      	ldr	r2, [pc, #136]	@ (800e36c <SDMMC_GetCmdResp7+0x98>)
 800e2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e6:	0a5b      	lsrs	r3, r3, #9
 800e2e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2ec:	fb02 f303 	mul.w	r3, r2, r3
 800e2f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	1e5a      	subs	r2, r3, #1
 800e2f6:	60fa      	str	r2, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e300:	e02c      	b.n	800e35c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e306:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0ef      	beq.n	800e2f2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1ea      	bne.n	800e2f2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e320:	f003 0304 	and.w	r3, r3, #4
 800e324:	2b00      	cmp	r3, #0
 800e326:	d004      	beq.n	800e332 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2204      	movs	r2, #4
 800e32c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e32e:	2304      	movs	r3, #4
 800e330:	e014      	b.n	800e35c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e336:	f003 0301 	and.w	r3, r3, #1
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d004      	beq.n	800e348 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2201      	movs	r2, #1
 800e342:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e344:	2301      	movs	r3, #1
 800e346:	e009      	b.n	800e35c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2240      	movs	r2, #64	@ 0x40
 800e358:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e35a:	2300      	movs	r3, #0

}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	200000a8 	.word	0x200000a8
 800e36c:	10624dd3 	.word	0x10624dd3

0800e370 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e378:	4b11      	ldr	r3, [pc, #68]	@ (800e3c0 <SDMMC_GetCmdError+0x50>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <SDMMC_GetCmdError+0x54>)
 800e37e:	fba2 2303 	umull	r2, r3, r2, r3
 800e382:	0a5b      	lsrs	r3, r3, #9
 800e384:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e388:	fb02 f303 	mul.w	r3, r2, r3
 800e38c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	1e5a      	subs	r2, r3, #1
 800e392:	60fa      	str	r2, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d102      	bne.n	800e39e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e398:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e39c:	e009      	b.n	800e3b2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0f1      	beq.n	800e38e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a06      	ldr	r2, [pc, #24]	@ (800e3c8 <SDMMC_GetCmdError+0x58>)
 800e3ae:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	200000a8 	.word	0x200000a8
 800e3c4:	10624dd3 	.word	0x10624dd3
 800e3c8:	002000c5 	.word	0x002000c5

0800e3cc <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b087      	sub	sp, #28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	3b04      	subs	r3, #4
 800e3dc:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800e3de:	2300      	movs	r3, #0
 800e3e0:	82fb      	strh	r3, [r7, #22]
 800e3e2:	e02a      	b.n	800e43a <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800e3e4:	8afb      	ldrh	r3, [r7, #22]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	781a      	ldrb	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d11f      	bne.n	800e434 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800e3f4:	8afb      	ldrh	r3, [r7, #22]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	781a      	ldrb	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3301      	adds	r3, #1
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d115      	bne.n	800e434 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800e408:	8afb      	ldrh	r3, [r7, #22]
 800e40a:	3302      	adds	r3, #2
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	781a      	ldrb	r2, [r3, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	3302      	adds	r3, #2
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d10b      	bne.n	800e434 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800e41c:	8afb      	ldrh	r3, [r7, #22]
 800e41e:	3303      	adds	r3, #3
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	4413      	add	r3, r2
 800e424:	781a      	ldrb	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3303      	adds	r3, #3
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d101      	bne.n	800e434 <__AVI_SearchID+0x68>
            return i;  
 800e430:	8afb      	ldrh	r3, [r7, #22]
 800e432:	e007      	b.n	800e444 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800e434:	8afb      	ldrh	r3, [r7, #22]
 800e436:	3301      	adds	r3, #1
 800e438:	82fb      	strh	r3, [r7, #22]
 800e43a:	8afb      	ldrh	r3, [r7, #22]
 800e43c:	68ba      	ldr	r2, [r7, #8]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d8d0      	bhi.n	800e3e4 <__AVI_SearchID+0x18>
  }
  return 0;    
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	371c      	adds	r7, #28
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	3302      	adds	r3, #2
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	021b      	lsls	r3, r3, #8
 800e462:	b21a      	sxth	r2, r3
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	3303      	adds	r3, #3
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	b21b      	sxth	r3, r3
 800e46c:	4313      	orrs	r3, r2
 800e46e:	b21b      	sxth	r3, r3
 800e470:	b29a      	uxth	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	3304      	adds	r3, #4
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	461a      	mov	r2, r3
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	3305      	adds	r3, #5
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	021b      	lsls	r3, r3, #8
 800e486:	431a      	orrs	r2, r3
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	3306      	adds	r3, #6
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	041b      	lsls	r3, r3, #16
 800e490:	431a      	orrs	r2, r3
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	3307      	adds	r3, #7
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	061b      	lsls	r3, r3, #24
 800e49a:	4313      	orrs	r3, r2
 800e49c:	461a      	mov	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d004      	beq.n	800e4b8 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	8bdb      	ldrh	r3, [r3, #30]
 800e4bc:	f246 4263 	movw	r2, #25699	@ 0x6463
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d005      	beq.n	800e4d0 <__AVI_GetStreamInfo+0x80>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8bdb      	ldrh	r3, [r3, #30]
 800e4c8:	f247 7262 	movw	r2, #30562	@ 0x7762
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d101      	bne.n	800e4d4 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e000      	b.n	800e4d6 <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800e4d4:	230b      	movs	r3, #11
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
	...

0800e4e4 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08e      	sub	sp, #56	@ 0x38
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800e4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a87      	ldr	r2, [pc, #540]	@ (800e720 <__AVI_Init+0x23c>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d001      	beq.n	800e50c <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800e508:	2301      	movs	r3, #1
 800e50a:	e170      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	4a84      	ldr	r2, [pc, #528]	@ (800e724 <__AVI_Init+0x240>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d001      	beq.n	800e51a <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800e516:	2302      	movs	r3, #2
 800e518:	e169      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	330c      	adds	r3, #12
 800e51e:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800e524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a7f      	ldr	r2, [pc, #508]	@ (800e728 <__AVI_Init+0x244>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d001      	beq.n	800e532 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800e52e:	2303      	movs	r3, #3
 800e530:	e15d      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800e532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	4a7d      	ldr	r2, [pc, #500]	@ (800e72c <__AVI_Init+0x248>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d001      	beq.n	800e540 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800e53c:	2304      	movs	r3, #4
 800e53e:	e156      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	330c      	adds	r3, #12
 800e544:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a78      	ldr	r2, [pc, #480]	@ (800e730 <__AVI_Init+0x24c>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d001      	beq.n	800e558 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800e554:	2305      	movs	r3, #5
 800e556:	e14a      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800e558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55a:	689a      	ldr	r2, [r3, #8]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	699a      	ldr	r2, [r3, #24]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800e568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	3308      	adds	r3, #8
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	4413      	add	r3, r2
 800e572:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800e578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a6a      	ldr	r2, [pc, #424]	@ (800e728 <__AVI_Init+0x244>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d001      	beq.n	800e586 <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800e582:	2303      	movs	r3, #3
 800e584:	e133      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800e586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	4a6a      	ldr	r2, [pc, #424]	@ (800e734 <__AVI_Init+0x250>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d001      	beq.n	800e594 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800e590:	2306      	movs	r3, #6
 800e592:	e12c      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	330c      	adds	r3, #12
 800e598:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800e59a:	6a3b      	ldr	r3, [r7, #32]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a66      	ldr	r2, [pc, #408]	@ (800e738 <__AVI_Init+0x254>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d001      	beq.n	800e5a8 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800e5a4:	2307      	movs	r3, #7
 800e5a6:	e122      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	4a63      	ldr	r2, [pc, #396]	@ (800e73c <__AVI_Init+0x258>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d16a      	bne.n	800e688 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	4a62      	ldr	r2, [pc, #392]	@ (800e740 <__AVI_Init+0x25c>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d001      	beq.n	800e5c0 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800e5bc:	230a      	movs	r3, #10
 800e5be:	e116      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800e5c0:	4a60      	ldr	r2, [pc, #384]	@ (800e744 <__AVI_Init+0x260>)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800e5c6:	4a60      	ldr	r2, [pc, #384]	@ (800e748 <__AVI_Init+0x264>)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	3314      	adds	r3, #20
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a5b      	ldr	r2, [pc, #364]	@ (800e74c <__AVI_Init+0x268>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d001      	beq.n	800e5e6 <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800e5e2:	2308      	movs	r3, #8
 800e5e4:	e103      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	68da      	ldr	r2, [r3, #12]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	691a      	ldr	r2, [r3, #16]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800e5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	4413      	add	r3, r2
 800e600:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800e606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a47      	ldr	r2, [pc, #284]	@ (800e728 <__AVI_Init+0x244>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d009      	beq.n	800e624 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	839a      	strh	r2, [r3, #28]
 800e622:	e0b7      	b.n	800e794 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800e624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e626:	689b      	ldr	r3, [r3, #8]
 800e628:	4a42      	ldr	r2, [pc, #264]	@ (800e734 <__AVI_Init+0x250>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d001      	beq.n	800e632 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800e62e:	2306      	movs	r3, #6
 800e630:	e0dd      	b.n	800e7ee <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	330c      	adds	r3, #12
 800e636:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800e638:	6a3b      	ldr	r3, [r7, #32]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a3e      	ldr	r2, [pc, #248]	@ (800e738 <__AVI_Init+0x254>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d001      	beq.n	800e646 <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800e642:	2307      	movs	r3, #7
 800e644:	e0d3      	b.n	800e7ee <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800e646:	6a3b      	ldr	r3, [r7, #32]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	4a41      	ldr	r2, [pc, #260]	@ (800e750 <__AVI_Init+0x26c>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d001      	beq.n	800e654 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800e650:	230a      	movs	r3, #10
 800e652:	e0cc      	b.n	800e7ee <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800e654:	6a3b      	ldr	r3, [r7, #32]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	3314      	adds	r3, #20
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	4413      	add	r3, r2
 800e65e:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a39      	ldr	r2, [pc, #228]	@ (800e74c <__AVI_Init+0x268>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d001      	beq.n	800e66e <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800e66a:	2308      	movs	r3, #8
 800e66c:	e0bf      	b.n	800e7ee <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	68da      	ldr	r2, [r3, #12]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	895a      	ldrh	r2, [r3, #10]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	891a      	ldrh	r2, [r3, #8]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	839a      	strh	r2, [r3, #28]
 800e686:	e085      	b.n	800e794 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	4a30      	ldr	r2, [pc, #192]	@ (800e750 <__AVI_Init+0x26c>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	f040 8080 	bne.w	800e794 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800e694:	4a2f      	ldr	r2, [pc, #188]	@ (800e754 <__AVI_Init+0x270>)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800e69a:	4a2f      	ldr	r2, [pc, #188]	@ (800e758 <__AVI_Init+0x274>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	3314      	adds	r3, #20
 800e6a6:	68ba      	ldr	r2, [r7, #8]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a26      	ldr	r2, [pc, #152]	@ (800e74c <__AVI_Init+0x268>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d001      	beq.n	800e6ba <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800e6b6:	2308      	movs	r3, #8
 800e6b8:	e099      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	68da      	ldr	r2, [r3, #12]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	895a      	ldrh	r2, [r3, #10]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	891a      	ldrh	r2, [r3, #8]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800e6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	4413      	add	r3, r2
 800e6dc:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800e6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a10      	ldr	r2, [pc, #64]	@ (800e728 <__AVI_Init+0x244>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d001      	beq.n	800e6f0 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	e07e      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800e6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	4a0f      	ldr	r2, [pc, #60]	@ (800e734 <__AVI_Init+0x250>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d001      	beq.n	800e6fe <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800e6fa:	2306      	movs	r3, #6
 800e6fc:	e077      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	330c      	adds	r3, #12
 800e702:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a0b      	ldr	r2, [pc, #44]	@ (800e738 <__AVI_Init+0x254>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d001      	beq.n	800e712 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800e70e:	2307      	movs	r3, #7
 800e710:	e06d      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	4a09      	ldr	r2, [pc, #36]	@ (800e73c <__AVI_Init+0x258>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d01f      	beq.n	800e75c <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800e71c:	230a      	movs	r3, #10
 800e71e:	e066      	b.n	800e7ee <__AVI_Init+0x30a>
 800e720:	46464952 	.word	0x46464952
 800e724:	20495641 	.word	0x20495641
 800e728:	5453494c 	.word	0x5453494c
 800e72c:	6c726468 	.word	0x6c726468
 800e730:	68697661 	.word	0x68697661
 800e734:	6c727473 	.word	0x6c727473
 800e738:	68727473 	.word	0x68727473
 800e73c:	73646976 	.word	0x73646976
 800e740:	47504a4d 	.word	0x47504a4d
 800e744:	080138f8 	.word	0x080138f8
 800e748:	08013910 	.word	0x08013910
 800e74c:	66727473 	.word	0x66727473
 800e750:	73647561 	.word	0x73647561
 800e754:	08013900 	.word	0x08013900
 800e758:	08013908 	.word	0x08013908
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	3314      	adds	r3, #20
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	4413      	add	r3, r2
 800e766:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a22      	ldr	r2, [pc, #136]	@ (800e7f8 <__AVI_Init+0x314>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d001      	beq.n	800e776 <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800e772:	2308      	movs	r3, #8
 800e774:	e03b      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	4a20      	ldr	r2, [pc, #128]	@ (800e7fc <__AVI_Init+0x318>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d001      	beq.n	800e784 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800e780:	230a      	movs	r3, #10
 800e782:	e034      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	68da      	ldr	r2, [r3, #12]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	691a      	ldr	r2, [r3, #16]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800e794:	4a1a      	ldr	r2, [pc, #104]	@ (800e800 <__AVI_Init+0x31c>)
 800e796:	6879      	ldr	r1, [r7, #4]
 800e798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e79a:	f7ff fe17 	bl	800e3cc <__AVI_SearchID>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800e7a2:	8afb      	ldrh	r3, [r7, #22]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800e7a8:	2309      	movs	r3, #9
 800e7aa:	e020      	b.n	800e7ee <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d01a      	beq.n	800e7ea <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800e7b4:	8afb      	ldrh	r3, [r7, #22]
 800e7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7b8:	4413      	add	r3, r2
 800e7ba:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7c6:	f7ff fe01 	bl	800e3cc <__AVI_SearchID>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800e7ce:	8afb      	ldrh	r3, [r7, #22]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d101      	bne.n	800e7d8 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800e7d4:	230b      	movs	r3, #11
 800e7d6:	e00a      	b.n	800e7ee <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800e7d8:	8afb      	ldrh	r3, [r7, #22]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7de:	4413      	add	r3, r2
 800e7e0:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e4:	881a      	ldrh	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800e7ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3738      	adds	r7, #56	@ 0x38
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	66727473 	.word	0x66727473
 800e7fc:	47504a4d 	.word	0x47504a4d
 800e800:	08013918 	.word	0x08013918

0800e804 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800e812:	2300      	movs	r3, #0
 800e814:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6a3a      	ldr	r2, [r7, #32]
 800e826:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e82c:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800e82e:	2100      	movs	r1, #0
 800e830:	68b8      	ldr	r0, [r7, #8]
 800e832:	f003 fce4 	bl	80121fe <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e83a:	f107 0314 	add.w	r3, r7, #20
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	f003 faf5 	bl	8011e30 <f_read>
  if(readSize != VideoBufferSize)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d001      	beq.n	800e852 <AVI_ParserInit+0x4e>
  {
    return 1;
 800e84e:	2301      	movs	r3, #1
 800e850:	e013      	b.n	800e87a <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	4619      	mov	r1, r3
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7ff fe42 	bl	800e4e4 <__AVI_Init>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <AVI_ParserInit+0x66>
  {
    return 1;    
 800e866:	2301      	movs	r3, #1
 800e868:	e007      	b.n	800e87a <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	68da      	ldr	r2, [r3, #12]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file)  
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	60bb      	str	r3, [r7, #8]
  
  if(pavi->CurrentImage== 0 )
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e896:	2b00      	cmp	r3, #0
 800e898:	d124      	bne.n	800e8e4 <AVI_GetFrame+0x60>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800e89a:	2100      	movs	r1, #0
 800e89c:	6838      	ldr	r0, [r7, #0]
 800e89e:	f003 fcae 	bl	80121fe <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8aa:	f107 0308 	add.w	r3, r7, #8
 800e8ae:	6838      	ldr	r0, [r7, #0]
 800e8b0:	f003 fabe 	bl	8011e30 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8bc:	4a2a      	ldr	r2, [pc, #168]	@ (800e968 <AVI_GetFrame+0xe4>)
 800e8be:	4619      	mov	r1, r3
 800e8c0:	f7ff fd84 	bl	800e3cc <__AVI_SearchID>
 800e8c4:	60f8      	str	r0, [r7, #12]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	4413      	add	r3, r2
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff fdbc 	bl	800e450 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	330c      	adds	r3, #12
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6838      	ldr	r0, [r7, #0]
 800e8e0:	f003 fc8d 	bl	80121fe <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a1a      	ldr	r2, [r3, #32]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	8bdb      	ldrh	r3, [r3, #30]
 800e8f0:	f246 4263 	movw	r2, #25699	@ 0x6463
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d115      	bne.n	800e924 <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e900:	f103 0208 	add.w	r2, r3, #8
 800e904:	f107 0308 	add.w	r3, r7, #8
 800e908:	6838      	ldr	r0, [r7, #0]
 800e90a:	f003 fa91 	bl	8011e30 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	4413      	add	r3, r2
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff fd98 	bl	800e450 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 800e920:	2301      	movs	r3, #1
 800e922:	e01c      	b.n	800e95e <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8bdb      	ldrh	r3, [r3, #30]
 800e928:	f247 7262 	movw	r2, #30562	@ 0x7762
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d115      	bne.n	800e95c <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e938:	f103 0208 	add.w	r2, r3, #8
 800e93c:	f107 0308 	add.w	r3, r7, #8
 800e940:	6838      	ldr	r0, [r7, #0]
 800e942:	f003 fa75 	bl	8011e30 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	4413      	add	r3, r2
 800e950:	4619      	mov	r1, r3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff fd7c 	bl	800e450 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800e958:	2302      	movs	r3, #2
 800e95a:	e000      	b.n	800e95e <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	08013918 	.word	0x08013918

0800e96c <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af02      	add	r7, sp, #8
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800e97a:	4a11      	ldr	r2, [pc, #68]	@ (800e9c0 <JPEG_Decode_DMA+0x54>)
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800e980:	4a10      	ldr	r2, [pc, #64]	@ (800e9c4 <JPEG_Decode_DMA+0x58>)
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800e986:	4b10      	ldr	r3, [pc, #64]	@ (800e9c8 <JPEG_Decode_DMA+0x5c>)
 800e988:	2200      	movs	r2, #0
 800e98a:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800e98c:	4a0f      	ldr	r2, [pc, #60]	@ (800e9cc <JPEG_Decode_DMA+0x60>)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800e992:	4b0f      	ldr	r3, [pc, #60]	@ (800e9d0 <JPEG_Decode_DMA+0x64>)
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800e998:	4b09      	ldr	r3, [pc, #36]	@ (800e9c0 <JPEG_Decode_DMA+0x54>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4619      	mov	r1, r3
 800e99e:	4b09      	ldr	r3, [pc, #36]	@ (800e9c4 <JPEG_Decode_DMA+0x58>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7f6 ff04 	bl	80057be <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800e9b6:	2300      	movs	r3, #0
  
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20000438 	.word	0x20000438
 800e9c4:	20000434 	.word	0x20000434
 800e9c8:	20000440 	.word	0x20000440
 800e9cc:	2000043c 	.word	0x2000043c
 800e9d0:	20000430 	.word	0x20000430

0800e9d4 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
}
 800e9de:	bf00      	nop
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
	...

0800e9ec <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800e9f6:	4b19      	ldr	r3, [pc, #100]	@ (800ea5c <HAL_JPEG_GetDataCallback+0x70>)
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4a17      	ldr	r2, [pc, #92]	@ (800ea5c <HAL_JPEG_GetDataCallback+0x70>)
 800ea00:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800ea02:	4b16      	ldr	r3, [pc, #88]	@ (800ea5c <HAL_JPEG_GetDataCallback+0x70>)
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	4b16      	ldr	r3, [pc, #88]	@ (800ea60 <HAL_JPEG_GetDataCallback+0x74>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d218      	bcs.n	800ea40 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800ea0e:	4b15      	ldr	r3, [pc, #84]	@ (800ea64 <HAL_JPEG_GetDataCallback+0x78>)
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	4413      	add	r3, r2
 800ea16:	4a13      	ldr	r2, [pc, #76]	@ (800ea64 <HAL_JPEG_GetDataCallback+0x78>)
 800ea18:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800ea1a:	4b11      	ldr	r3, [pc, #68]	@ (800ea60 <HAL_JPEG_GetDataCallback+0x74>)
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea5c <HAL_JPEG_GetDataCallback+0x70>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea28:	d303      	bcc.n	800ea32 <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800ea2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ea2e:	60fb      	str	r3, [r7, #12]
 800ea30:	e008      	b.n	800ea44 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800ea32:	4b0b      	ldr	r3, [pc, #44]	@ (800ea60 <HAL_JPEG_GetDataCallback+0x74>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	4b09      	ldr	r3, [pc, #36]	@ (800ea5c <HAL_JPEG_GetDataCallback+0x70>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	e001      	b.n	800ea44 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800ea40:	2300      	movs	r3, #0
 800ea42:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800ea44:	4b07      	ldr	r3, [pc, #28]	@ (800ea64 <HAL_JPEG_GetDataCallback+0x78>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7f6 ff71 	bl	8005934 <HAL_JPEG_ConfigInputBuffer>
  
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20000440 	.word	0x20000440
 800ea60:	2000043c 	.word	0x2000043c
 800ea64:	20000438 	.word	0x20000438

0800ea68 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800ea74:	4b08      	ldr	r3, [pc, #32]	@ (800ea98 <HAL_JPEG_DataReadyCallback+0x30>)
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	4a06      	ldr	r2, [pc, #24]	@ (800ea98 <HAL_JPEG_DataReadyCallback+0x30>)
 800ea7e:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800ea80:	4b05      	ldr	r3, [pc, #20]	@ (800ea98 <HAL_JPEG_DataReadyCallback+0x30>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ea88:	4619      	mov	r1, r3
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f7f6 ff64 	bl	8005958 <HAL_JPEG_ConfigOutputBuffer>
}
 800ea90:	bf00      	nop
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20000434 	.word	0x20000434

0800ea9c <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800eaa4:	f000 f950 	bl	800ed48 <Error_Handler>
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800eab8:	4b04      	ldr	r3, [pc, #16]	@ (800eacc <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800eaba:	2201      	movs	r2, #1
 800eabc:	601a      	str	r2, [r3, #0]
}
 800eabe:	bf00      	nop
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	20000430 	.word	0x20000430

0800ead0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b089      	sub	sp, #36	@ 0x24
 800ead4:	af02      	add	r7, sp, #8
  uint32_t isfirstFrame =0 , startTime = 0;
 800ead6:	2300      	movs	r3, #0
 800ead8:	617b      	str	r3, [r7, #20]
 800eada:	2300      	movs	r3, #0
 800eadc:	607b      	str	r3, [r7, #4]
  uint32_t file_error = 0, sd_detection_error = 0;  
 800eade:	2300      	movs	r3, #0
 800eae0:	613b      	str	r3, [r7, #16]
 800eae2:	2300      	movs	r3, #0
 800eae4:	60fb      	str	r3, [r7, #12]
  uint32_t jpegOutDataAdreess = JPEG_OUTPUT_DATA_BUFFER0;
 800eae6:	4b83      	ldr	r3, [pc, #524]	@ (800ecf4 <main+0x224>)
 800eae8:	60bb      	str	r3, [r7, #8]
  uint32_t FrameType = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	603b      	str	r3, [r7, #0]
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7) 
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();  
 800eaee:	f000 fb81 	bl	800f1f4 <MPU_Config>
   
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800eaf2:	f000 fbc1 	bl	800f278 <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800eaf6:	f7f5 f87d 	bl	8003bf4 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800eafa:	f000 fae5 	bl	800f0c8 <SystemClock_Config>
  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of 
     HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */  
  
  /*##-1- Initialize the LEDs , SDRAM and LCD ################################*/
  /*Initialize LED3 */
  BSP_LED_Init(LED3);
 800eafe:	2002      	movs	r0, #2
 800eb00:	f7f3 fa92 	bl	8002028 <BSP_LED_Init>
 
 /*Initialize The SDRAM */  
  BSP_SDRAM_Init(0);  
 800eb04:	2000      	movs	r0, #0
 800eb06:	f7f4 fe57 	bl	80037b8 <BSP_SDRAM_Init>

  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	f7f3 faf4 	bl	80020fa <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800eb12:	4879      	ldr	r0, [pc, #484]	@ (800ecf8 <main+0x228>)
 800eb14:	f003 feb4 	bl	8012880 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);     
 800eb18:	2000      	movs	r0, #0
 800eb1a:	f003 ff07 	bl	801292c <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE); 
 800eb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb22:	f003 ff89 	bl	8012a38 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font24);
 800eb26:	4875      	ldr	r0, [pc, #468]	@ (800ecfc <main+0x22c>)
 800eb28:	f003 ff46 	bl	80129b8 <UTIL_LCD_SetFont>
  
  BSP_LCD_GetXSize(0 ,&LCD_X_Size);
 800eb2c:	4974      	ldr	r1, [pc, #464]	@ (800ed00 <main+0x230>)
 800eb2e:	2000      	movs	r0, #0
 800eb30:	f7f3 fe74 	bl	800281c <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0 ,&LCD_Y_Size);
 800eb34:	4973      	ldr	r1, [pc, #460]	@ (800ed04 <main+0x234>)
 800eb36:	2000      	movs	r0, #0
 800eb38:	f7f3 fe98 	bl	800286c <BSP_LCD_GetYSize>
  
  /*##-2- Initialize the HW JPEG Codec  ######################################*/
  /* Init the HAL JPEG driver */
  JPEG_Handle.Instance = JPEG;
 800eb3c:	4b72      	ldr	r3, [pc, #456]	@ (800ed08 <main+0x238>)
 800eb3e:	4a73      	ldr	r2, [pc, #460]	@ (800ed0c <main+0x23c>)
 800eb40:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800eb42:	4871      	ldr	r0, [pc, #452]	@ (800ed08 <main+0x238>)
 800eb44:	f7f6 fd24 	bl	8005590 <HAL_JPEG_Init>
  
  /*##-3- Link the micro SD disk I/O driver ##################################*/
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800eb48:	4971      	ldr	r1, [pc, #452]	@ (800ed10 <main+0x240>)
 800eb4a:	4872      	ldr	r0, [pc, #456]	@ (800ed14 <main+0x244>)
 800eb4c:	f003 fdac 	bl	80126a8 <FATFS_LinkDriver>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f040 80cb 	bne.w	800ecee <main+0x21e>
  {
    /*##-4- Init the SD Card #################################################*/
    SD_Initialize();
 800eb58:	f000 f9ba 	bl	800eed0 <SD_Initialize>
    
    if(BSP_SD_IsDetected(0))
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	f7f4 fccf 	bl	8003500 <BSP_SD_IsDetected>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f000 80b7 	beq.w	800ecd8 <main+0x208>
    {    
      /*##-5- Register the file system object to the FatFs module ##############*/
      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	4968      	ldr	r1, [pc, #416]	@ (800ed10 <main+0x240>)
 800eb6e:	486a      	ldr	r0, [pc, #424]	@ (800ed18 <main+0x248>)
 800eb70:	f002 ff4e 	bl	8011a10 <f_mount>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f040 80b0 	bne.w	800ecdc <main+0x20c>
      {
        /*##-6- Open the MJPEG avi file with read access #######################*/
        if(f_open(&MJPEG_File, "video.avi", FA_READ) == FR_OK)
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	4967      	ldr	r1, [pc, #412]	@ (800ed1c <main+0x24c>)
 800eb80:	4867      	ldr	r0, [pc, #412]	@ (800ed20 <main+0x250>)
 800eb82:	f002 ff8b 	bl	8011a9c <f_open>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f040 80a2 	bne.w	800ecd2 <main+0x202>
        {
          isfirstFrame = 1;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	617b      	str	r3, [r7, #20]
          FrameRate = 0;
 800eb92:	4b64      	ldr	r3, [pc, #400]	@ (800ed24 <main+0x254>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]
          /* parse the AVI file Header*/
          if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800eb98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	4b62      	ldr	r3, [pc, #392]	@ (800ed28 <main+0x258>)
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800eba6:	4a61      	ldr	r2, [pc, #388]	@ (800ed2c <main+0x25c>)
 800eba8:	495d      	ldr	r1, [pc, #372]	@ (800ed20 <main+0x250>)
 800ebaa:	4861      	ldr	r0, [pc, #388]	@ (800ed30 <main+0x260>)
 800ebac:	f7ff fe2a 	bl	800e804 <AVI_ParserInit>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <main+0xea>
          {
            Error_Handler();
 800ebb6:	f000 f8c7 	bl	800ed48 <Error_Handler>
          }
          startTime = HAL_GetTick();
 800ebba:	f7f5 f8a9 	bl	8003d10 <HAL_GetTick>
 800ebbe:	6078      	str	r0, [r7, #4]
          
          do
          {         
            
            FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);
 800ebc0:	4957      	ldr	r1, [pc, #348]	@ (800ed20 <main+0x250>)
 800ebc2:	485b      	ldr	r0, [pc, #364]	@ (800ed30 <main+0x260>)
 800ebc4:	f7ff fe5e 	bl	800e884 <AVI_GetFrame>
 800ebc8:	6038      	str	r0, [r7, #0]
            
            if(FrameType == AVI_VIDEO_FRAME)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d15d      	bne.n	800ec8c <main+0x1bc>
            {
              AVI_Handel.CurrentImage ++;
 800ebd0:	4b57      	ldr	r3, [pc, #348]	@ (800ed30 <main+0x260>)
 800ebd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	4a56      	ldr	r2, [pc, #344]	@ (800ed30 <main+0x260>)
 800ebd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
              
              /*##-7- Start decoding the current JPEG frame with DMA (Not Blocking ) Method ################*/
              JPEG_Decode_DMA(&JPEG_Handle,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );
 800ebda:	4954      	ldr	r1, [pc, #336]	@ (800ed2c <main+0x25c>)
 800ebdc:	4b54      	ldr	r3, [pc, #336]	@ (800ed30 <main+0x260>)
 800ebde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	4849      	ldr	r0, [pc, #292]	@ (800ed08 <main+0x238>)
 800ebe4:	f7ff fec2 	bl	800e96c <JPEG_Decode_DMA>
              
              
              /*##-8- Wait till end of JPEG decoding ###########################*/
              while(Jpeg_HWDecodingEnd == 0)
 800ebe8:	bf00      	nop
 800ebea:	4b52      	ldr	r3, [pc, #328]	@ (800ed34 <main+0x264>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d0fb      	beq.n	800ebea <main+0x11a>
              {
              }
              
              if(isfirstFrame == 1)
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d110      	bne.n	800ec1a <main+0x14a>
              {
                isfirstFrame = 0;              
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	617b      	str	r3, [r7, #20]
                /*##-9- Get JPEG Info  #########################################*/
                HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info); 
 800ebfc:	494e      	ldr	r1, [pc, #312]	@ (800ed38 <main+0x268>)
 800ebfe:	4842      	ldr	r0, [pc, #264]	@ (800ed08 <main+0x238>)
 800ec00:	f7f6 fd48 	bl	8005694 <HAL_JPEG_GetInfo>
                
                /*##-10- Initialize the DMA2D ##################################*/
                DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800ec04:	4b4c      	ldr	r3, [pc, #304]	@ (800ed38 <main+0x268>)
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	4a4b      	ldr	r2, [pc, #300]	@ (800ed38 <main+0x268>)
 800ec0c:	6892      	ldr	r2, [r2, #8]
 800ec0e:	b291      	uxth	r1, r2
 800ec10:	4a49      	ldr	r2, [pc, #292]	@ (800ed38 <main+0x268>)
 800ec12:	6852      	ldr	r2, [r2, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 f89f 	bl	800ed58 <DMA2D_Init>
              }
              /*##-11- Copy the Decoded frame to the display frame buffer using the DMA2D #*/            
              DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800ec1a:	68b8      	ldr	r0, [r7, #8]
 800ec1c:	4b46      	ldr	r3, [pc, #280]	@ (800ed38 <main+0x268>)
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	4b45      	ldr	r3, [pc, #276]	@ (800ed38 <main+0x268>)
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800ec2c:	f000 f912 	bl	800ee54 <DMA2D_CopyBuffer>
              
              jpegOutDataAdreess = (jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	4a30      	ldr	r2, [pc, #192]	@ (800ecf4 <main+0x224>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d101      	bne.n	800ec3c <main+0x16c>
 800ec38:	4b40      	ldr	r3, [pc, #256]	@ (800ed3c <main+0x26c>)
 800ec3a:	e000      	b.n	800ec3e <main+0x16e>
 800ec3c:	4b2d      	ldr	r3, [pc, #180]	@ (800ecf4 <main+0x224>)
 800ec3e:	60bb      	str	r3, [r7, #8]
              
#ifdef USE_FRAMERATE_REGULATION
              /* Regulate the frame rate to the video native frame rate by inserting delays */
              FrameRate =  (HAL_GetTick() - startTime) + 1;
 800ec40:	f7f5 f866 	bl	8003d10 <HAL_GetTick>
 800ec44:	4602      	mov	r2, r0
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	4a35      	ldr	r2, [pc, #212]	@ (800ed24 <main+0x254>)
 800ec4e:	6013      	str	r3, [r2, #0]
              if(FrameRate < ((AVI_Handel.aviInfo.SecPerFrame/1000) * AVI_Handel.CurrentImage))
 800ec50:	4b37      	ldr	r3, [pc, #220]	@ (800ed30 <main+0x260>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a3a      	ldr	r2, [pc, #232]	@ (800ed40 <main+0x270>)
 800ec56:	fba2 2303 	umull	r2, r3, r2, r3
 800ec5a:	099b      	lsrs	r3, r3, #6
 800ec5c:	4a34      	ldr	r2, [pc, #208]	@ (800ed30 <main+0x260>)
 800ec5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ec60:	fb03 f202 	mul.w	r2, r3, r2
 800ec64:	4b2f      	ldr	r3, [pc, #188]	@ (800ed24 <main+0x254>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d90f      	bls.n	800ec8c <main+0x1bc>
              {
                HAL_Delay(((AVI_Handel.aviInfo.SecPerFrame /1000) * AVI_Handel.CurrentImage) - FrameRate);
 800ec6c:	4b30      	ldr	r3, [pc, #192]	@ (800ed30 <main+0x260>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a33      	ldr	r2, [pc, #204]	@ (800ed40 <main+0x270>)
 800ec72:	fba2 2303 	umull	r2, r3, r2, r3
 800ec76:	099b      	lsrs	r3, r3, #6
 800ec78:	4a2d      	ldr	r2, [pc, #180]	@ (800ed30 <main+0x260>)
 800ec7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ec7c:	fb03 f202 	mul.w	r2, r3, r2
 800ec80:	4b28      	ldr	r3, [pc, #160]	@ (800ed24 <main+0x254>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7f5 f84e 	bl	8003d28 <HAL_Delay>
              }
#endif /* USE_FRAMERATE_REGULATION */
            }
            
            
          }while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 800ec8c:	4b28      	ldr	r3, [pc, #160]	@ (800ed30 <main+0x260>)
 800ec8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec90:	4b27      	ldr	r3, [pc, #156]	@ (800ed30 <main+0x260>)
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d393      	bcc.n	800ebc0 <main+0xf0>
          
          HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);  /* wait for the Last DMA2D transfer to ends */
 800ec98:	2132      	movs	r1, #50	@ 0x32
 800ec9a:	482a      	ldr	r0, [pc, #168]	@ (800ed44 <main+0x274>)
 800ec9c:	f7f5 faa5 	bl	80041ea <HAL_DMA2D_PollForTransfer>
          
          if(AVI_Handel.CurrentImage > 0)
 800eca0:	4b23      	ldr	r3, [pc, #140]	@ (800ed30 <main+0x260>)
 800eca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d010      	beq.n	800ecca <main+0x1fa>
          {
            /*##-12- Calc the average decode frame rate #*/
            FrameRate =  (AVI_Handel.CurrentImage * 1000)/(HAL_GetTick() - startTime);
 800eca8:	4b21      	ldr	r3, [pc, #132]	@ (800ed30 <main+0x260>)
 800ecaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ecb0:	fb02 f403 	mul.w	r4, r2, r3
 800ecb4:	f7f5 f82c 	bl	8003d10 <HAL_GetTick>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	fbb4 f3f3 	udiv	r3, r4, r3
 800ecc2:	4a18      	ldr	r2, [pc, #96]	@ (800ed24 <main+0x254>)
 800ecc4:	6013      	str	r3, [r2, #0]
            /* Display decoding info */
            LCD_BriefDisplay();           
 800ecc6:	f000 f90b 	bl	800eee0 <LCD_BriefDisplay>
          }
          /*Close the avi file*/
          f_close(&MJPEG_File);
 800ecca:	4815      	ldr	r0, [pc, #84]	@ (800ed20 <main+0x250>)
 800eccc:	f003 fa6d 	bl	80121aa <f_close>
 800ecd0:	e004      	b.n	800ecdc <main+0x20c>
        }
        else /* Can't Open avi file*/
        {
          file_error = 1;          
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	613b      	str	r3, [r7, #16]
 800ecd6:	e001      	b.n	800ecdc <main+0x20c>
        }    
      }
    }
    else
    {
      sd_detection_error = 1;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	60fb      	str	r3, [r7, #12]
    }

    if((file_error != 0) || (sd_detection_error != 0))
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <main+0x218>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <main+0x21e>
    {
      LCD_FileErrorDisplay();
 800ece8:	f000 f9c4 	bl	800f074 <LCD_FileErrorDisplay>
    }    
  }
 
  /* Infinite loop */
  while (1)
 800ecec:	bf00      	nop
 800ecee:	bf00      	nop
 800ecf0:	e7fd      	b.n	800ecee <main+0x21e>
 800ecf2:	bf00      	nop
 800ecf4:	d0600000 	.word	0xd0600000
 800ecf8:	08013ddc 	.word	0x08013ddc
 800ecfc:	200000b8 	.word	0x200000b8
 800ed00:	20000518 	.word	0x20000518
 800ed04:	2000051c 	.word	0x2000051c
 800ed08:	20000444 	.word	0x20000444
 800ed0c:	52003000 	.word	0x52003000
 800ed10:	20000758 	.word	0x20000758
 800ed14:	08014078 	.word	0x08014078
 800ed18:	20000524 	.word	0x20000524
 800ed1c:	08013920 	.word	0x08013920
 800ed20:	2000075c 	.word	0x2000075c
 800ed24:	20000520 	.word	0x20000520
 800ed28:	200189d4 	.word	0x200189d4
 800ed2c:	200009d4 	.word	0x200009d4
 800ed30:	2000098c 	.word	0x2000098c
 800ed34:	20000430 	.word	0x20000430
 800ed38:	20000504 	.word	0x20000504
 800ed3c:	d0800000 	.word	0xd0800000
 800ed40:	10624dd3 	.word	0x10624dd3
 800ed44:	2000049c 	.word	0x2000049c

0800ed48 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 800ed4c:	2002      	movs	r0, #2
 800ed4e:	f7f3 f9af 	bl	80020b0 <BSP_LED_On>
  while(1)
 800ed52:	bf00      	nop
 800ed54:	e7fd      	b.n	800ed52 <Error_Handler+0xa>
	...

0800ed58 <DMA2D_Init>:
  * @param  ysize: Image Height
  * @param  ChromaSampling: YCbCr CHroma sampling : 4:2:0, 4:2:2 or 4:4:4  
  * @retval None
  */
static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{   
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	603a      	str	r2, [r7, #0]
 800ed62:	80fb      	strh	r3, [r7, #6]
 800ed64:	460b      	mov	r3, r1
 800ed66:	80bb      	strh	r3, [r7, #4]
  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;  
 800ed68:	2301      	movs	r3, #1
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60bb      	str	r3, [r7, #8]
  
  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d10d      	bne.n	800ed92 <DMA2D_Init+0x3a>
  {
    cssMode = DMA2D_CSS_420;
 800ed76:	2302      	movs	r3, #2
 800ed78:	60fb      	str	r3, [r7, #12]
    
    inputLineOffset = xsize % 16;
 800ed7a:	88fb      	ldrh	r3, [r7, #6]
 800ed7c:	f003 030f 	and.w	r3, r3, #15
 800ed80:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d025      	beq.n	800edd4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	f1c3 0310 	rsb	r3, r3, #16
 800ed8e:	60bb      	str	r3, [r7, #8]
 800ed90:	e020      	b.n	800edd4 <DMA2D_Init+0x7c>
    }    
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10d      	bne.n	800edb4 <DMA2D_Init+0x5c>
  {
    cssMode = DMA2D_NO_CSS;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	60fb      	str	r3, [r7, #12]
    
    inputLineOffset = xsize % 8;
 800ed9c:	88fb      	ldrh	r3, [r7, #6]
 800ed9e:	f003 0307 	and.w	r3, r3, #7
 800eda2:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d014      	beq.n	800edd4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 8 - inputLineOffset;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f1c3 0308 	rsb	r3, r3, #8
 800edb0:	60bb      	str	r3, [r7, #8]
 800edb2:	e00f      	b.n	800edd4 <DMA2D_Init+0x7c>
    }    
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	d10c      	bne.n	800edd4 <DMA2D_Init+0x7c>
  {
    cssMode = DMA2D_CSS_422;
 800edba:	2301      	movs	r3, #1
 800edbc:	60fb      	str	r3, [r7, #12]
    
    inputLineOffset = xsize % 16;
 800edbe:	88fb      	ldrh	r3, [r7, #6]
 800edc0:	f003 030f 	and.w	r3, r3, #15
 800edc4:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <DMA2D_Init+0x7c>
    {
      inputLineOffset = 16 - inputLineOffset;
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	f1c3 0310 	rsb	r3, r3, #16
 800edd2:	60bb      	str	r3, [r7, #8]
    }      
  }  
  
  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/ 
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800edd4:	4b1c      	ldr	r3, [pc, #112]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800edda:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800eddc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edde:	2200      	movs	r2, #0
 800ede0:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_Size - xsize; 
 800ede2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee4c <DMA2D_Init+0xf4>)
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	88fb      	ldrh	r3, [r7, #6]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	4a17      	ldr	r2, [pc, #92]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edec:	60d3      	str	r3, [r2, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/  
 800edee:	4b16      	ldr	r3, [pc, #88]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edf0:	2200      	movs	r2, #0
 800edf2:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */  
 800edf4:	4b14      	ldr	r3, [pc, #80]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edf6:	2200      	movs	r2, #0
 800edf8:	615a      	str	r2, [r3, #20]
  
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 800edfa:	4b13      	ldr	r3, [pc, #76]	@ (800ee48 <DMA2D_Init+0xf0>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	621a      	str	r2, [r3, #32]
  
  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800ee00:	4b11      	ldr	r3, [pc, #68]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee02:	2201      	movs	r2, #1
 800ee04:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800ee06:	4b10      	ldr	r3, [pc, #64]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee08:	22ff      	movs	r2, #255	@ 0xff
 800ee0a:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800ee0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee0e:	220b      	movs	r2, #11
 800ee10:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800ee12:	4a0d      	ldr	r2, [pc, #52]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800ee18:	4a0b      	ldr	r2, [pc, #44]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 800ee1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */  
 800ee24:	4b08      	ldr	r3, [pc, #32]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	655a      	str	r2, [r3, #84]	@ 0x54
  
  DMA2D_Handle.Instance          = DMA2D; 
 800ee2a:	4b07      	ldr	r3, [pc, #28]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee2c:	4a08      	ldr	r2, [pc, #32]	@ (800ee50 <DMA2D_Init+0xf8>)
 800ee2e:	601a      	str	r2, [r3, #0]
  
  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 800ee30:	4805      	ldr	r0, [pc, #20]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee32:	f7f5 f941 	bl	80040b8 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);  
 800ee36:	2101      	movs	r1, #1
 800ee38:	4803      	ldr	r0, [pc, #12]	@ (800ee48 <DMA2D_Init+0xf0>)
 800ee3a:	f7f5 fabf 	bl	80043bc <HAL_DMA2D_ConfigLayer>
}
 800ee3e:	bf00      	nop
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2000049c 	.word	0x2000049c
 800ee4c:	20000518 	.word	0x20000518
 800ee50:	52001000 	.word	0x52001000

0800ee54 <DMA2D_CopyBuffer>:
  * @param  ImageWidth: image width
  * @param  ImageHeight: image Height 
  * @retval None
  */
static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	@ 0x28
 800ee58:	af02      	add	r7, sp, #8
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	4611      	mov	r1, r2
 800ee60:	461a      	mov	r2, r3
 800ee62:	460b      	mov	r3, r1
 800ee64:	80fb      	strh	r3, [r7, #6]
 800ee66:	4613      	mov	r3, r2
 800ee68:	80bb      	strh	r3, [r7, #4]
  
  uint32_t xPos, yPos, destination;       
  
  /*##-1- calculate the destination transfer address  ############*/
  xPos = (LCD_X_Size - JPEG_Info.ImageWidth)/2;
 800ee6a:	4b15      	ldr	r3, [pc, #84]	@ (800eec0 <DMA2D_CopyBuffer+0x6c>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	4b15      	ldr	r3, [pc, #84]	@ (800eec4 <DMA2D_CopyBuffer+0x70>)
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	085b      	lsrs	r3, r3, #1
 800ee76:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_Size - JPEG_Info.ImageHeight)/2;     
 800ee78:	4b13      	ldr	r3, [pc, #76]	@ (800eec8 <DMA2D_CopyBuffer+0x74>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	4b11      	ldr	r3, [pc, #68]	@ (800eec4 <DMA2D_CopyBuffer+0x70>)
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	085b      	lsrs	r3, r3, #1
 800ee84:	61bb      	str	r3, [r7, #24]
  
  destination = (uint32_t)pDst + ((yPos * LCD_X_Size) + xPos) * 4;
 800ee86:	4b0e      	ldr	r3, [pc, #56]	@ (800eec0 <DMA2D_CopyBuffer+0x6c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	69ba      	ldr	r2, [r7, #24]
 800ee8c:	fb03 f202 	mul.w	r2, r3, r2
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	4413      	add	r3, r2
 800ee94:	009a      	lsls	r2, r3, #2
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	4413      	add	r3, r2
 800ee9a:	617b      	str	r3, [r7, #20]
 
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 25);  /* wait for the previous DMA2D transfer to ends */
 800ee9c:	2119      	movs	r1, #25
 800ee9e:	480b      	ldr	r0, [pc, #44]	@ (800eecc <DMA2D_CopyBuffer+0x78>)
 800eea0:	f7f5 f9a3 	bl	80041ea <HAL_DMA2D_PollForTransfer>
  /* copy the new decoded frame to the LCD Frame buffer*/
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800eea4:	68f9      	ldr	r1, [r7, #12]
 800eea6:	88fa      	ldrh	r2, [r7, #6]
 800eea8:	88bb      	ldrh	r3, [r7, #4]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	4613      	mov	r3, r2
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	4806      	ldr	r0, [pc, #24]	@ (800eecc <DMA2D_CopyBuffer+0x78>)
 800eeb2:	f7f5 f96f 	bl	8004194 <HAL_DMA2D_Start>
  
}
 800eeb6:	bf00      	nop
 800eeb8:	3720      	adds	r7, #32
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	20000518 	.word	0x20000518
 800eec4:	20000504 	.word	0x20000504
 800eec8:	2000051c 	.word	0x2000051c
 800eecc:	2000049c 	.word	0x2000049c

0800eed0 <SD_Initialize>:

static void SD_Initialize(void)
{  
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
  BSP_SD_Init(0);
 800eed4:	2000      	movs	r0, #0
 800eed6:	f7f4 fa6f 	bl	80033b8 <BSP_SD_Init>
}
 800eeda:	bf00      	nop
 800eedc:	bd80      	pop	{r7, pc}
	...

0800eee0 <LCD_BriefDisplay>:
  * @brief  Display Example description.
  * @param  None  
  * @retval None
  */
static void LCD_BriefDisplay(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b092      	sub	sp, #72	@ 0x48
 800eee4:	af02      	add	r7, sp, #8
  char message[64];

  UTIL_LCD_SetFont(&Font24);
 800eee6:	4852      	ldr	r0, [pc, #328]	@ (800f030 <LCD_BriefDisplay+0x150>)
 800eee8:	f003 fd66 	bl	80129b8 <UTIL_LCD_SetFont>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
 800eef0:	f003 fda2 	bl	8012a38 <UTIL_LCD_Clear>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800eef4:	484f      	ldr	r0, [pc, #316]	@ (800f034 <LCD_BriefDisplay+0x154>)
 800eef6:	f003 fd4b 	bl	8012990 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800eefa:	484e      	ldr	r0, [pc, #312]	@ (800f034 <LCD_BriefDisplay+0x154>)
 800eefc:	f003 fd34 	bl	8012968 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 0, LCD_X_Size, 112, UTIL_LCD_COLOR_WHITE);  
 800ef00:	4b4d      	ldr	r3, [pc, #308]	@ (800f038 <LCD_BriefDisplay+0x158>)
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	f04f 33ff 	mov.w	r3, #4294967295
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	2370      	movs	r3, #112	@ 0x70
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	2000      	movs	r0, #0
 800ef10:	f003 fea2 	bl	8012c58 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	f003 fd26 	bl	8012968 <UTIL_LCD_SetTextColor>

  UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"MJPEG Video Decoding example", CENTER_MODE);
 800ef1c:	f003 fd60 	bl	80129e0 <UTIL_LCD_GetFont>
 800ef20:	4603      	mov	r3, r0
 800ef22:	88db      	ldrh	r3, [r3, #6]
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4619      	mov	r1, r3
 800ef28:	2301      	movs	r3, #1
 800ef2a:	4a44      	ldr	r2, [pc, #272]	@ (800f03c <LCD_BriefDisplay+0x15c>)
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	f003 fdcf 	bl	8012ad0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 800ef32:	4843      	ldr	r0, [pc, #268]	@ (800f040 <LCD_BriefDisplay+0x160>)
 800ef34:	f003 fd40 	bl	80129b8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"This example shows how to Decode and display", CENTER_MODE);
 800ef38:	f003 fd52 	bl	80129e0 <UTIL_LCD_GetFont>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	88db      	ldrh	r3, [r3, #6]
 800ef40:	461a      	mov	r2, r3
 800ef42:	4613      	mov	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	4619      	mov	r1, r3
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	4a3d      	ldr	r2, [pc, #244]	@ (800f044 <LCD_BriefDisplay+0x164>)
 800ef4e:	2000      	movs	r0, #0
 800ef50:	f003 fdbe 	bl	8012ad0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"an MJPEG video file located on the uSD", CENTER_MODE);  
 800ef54:	f003 fd44 	bl	80129e0 <UTIL_LCD_GetFont>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	88db      	ldrh	r3, [r3, #6]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	4613      	mov	r3, r2
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	4413      	add	r3, r2
 800ef64:	005b      	lsls	r3, r3, #1
 800ef66:	4619      	mov	r1, r3
 800ef68:	2301      	movs	r3, #1
 800ef6a:	4a37      	ldr	r2, [pc, #220]	@ (800f048 <LCD_BriefDisplay+0x168>)
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f003 fdaf 	bl	8012ad0 <UTIL_LCD_DisplayStringAt>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800ef72:	f04f 30ff 	mov.w	r0, #4294967295
 800ef76:	f003 fd0b 	bl	8012990 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800ef7a:	482e      	ldr	r0, [pc, #184]	@ (800f034 <LCD_BriefDisplay+0x154>)
 800ef7c:	f003 fcf4 	bl	8012968 <UTIL_LCD_SetTextColor>
  
  /* JPEG resolution */
  sprintf(message, "     Video Resolution            = %lu x %lu", JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800ef80:	4b32      	ldr	r3, [pc, #200]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800ef82:	68da      	ldr	r2, [r3, #12]
 800ef84:	4b31      	ldr	r3, [pc, #196]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	4638      	mov	r0, r7
 800ef8a:	4931      	ldr	r1, [pc, #196]	@ (800f050 <LCD_BriefDisplay+0x170>)
 800ef8c:	f004 f8b6 	bl	80130fc <siprintf>
  UTIL_LCD_DisplayStringAtLine(10, (uint8_t *)message);
 800ef90:	463b      	mov	r3, r7
 800ef92:	4619      	mov	r1, r3
 800ef94:	200a      	movs	r0, #10
 800ef96:	f003 fe49 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
  /* JPEG Quality */
  sprintf(message, "     JPEG Quality                =   %lu",JPEG_Info.ImageQuality );
 800ef9a:	4b2c      	ldr	r3, [pc, #176]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800ef9c:	691a      	ldr	r2, [r3, #16]
 800ef9e:	463b      	mov	r3, r7
 800efa0:	492c      	ldr	r1, [pc, #176]	@ (800f054 <LCD_BriefDisplay+0x174>)
 800efa2:	4618      	mov	r0, r3
 800efa4:	f004 f8aa 	bl	80130fc <siprintf>
  UTIL_LCD_DisplayStringAtLine(11, (uint8_t *)message);
 800efa8:	463b      	mov	r3, r7
 800efaa:	4619      	mov	r1, r3
 800efac:	200b      	movs	r0, #11
 800efae:	f003 fe3d 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
  /* JPEG Chroma Sampling */
  if(JPEG_Info.ChromaSubsampling  == JPEG_420_SUBSAMPLING)
 800efb2:	4b26      	ldr	r3, [pc, #152]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d105      	bne.n	800efc6 <LCD_BriefDisplay+0xe6>
  {
    sprintf(message, "     ChromaSubsampling           =  4:2:0");
 800efba:	463b      	mov	r3, r7
 800efbc:	4926      	ldr	r1, [pc, #152]	@ (800f058 <LCD_BriefDisplay+0x178>)
 800efbe:	4618      	mov	r0, r3
 800efc0:	f004 f89c 	bl	80130fc <siprintf>
 800efc4:	e012      	b.n	800efec <LCD_BriefDisplay+0x10c>
  }
  else if(JPEG_Info.ChromaSubsampling  == JPEG_422_SUBSAMPLING)
 800efc6:	4b21      	ldr	r3, [pc, #132]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d105      	bne.n	800efda <LCD_BriefDisplay+0xfa>
  {
    sprintf(message, "     ChromaSubsampling           =  4:2:2");
 800efce:	463b      	mov	r3, r7
 800efd0:	4922      	ldr	r1, [pc, #136]	@ (800f05c <LCD_BriefDisplay+0x17c>)
 800efd2:	4618      	mov	r0, r3
 800efd4:	f004 f892 	bl	80130fc <siprintf>
 800efd8:	e008      	b.n	800efec <LCD_BriefDisplay+0x10c>
  }
  else if(JPEG_Info.ChromaSubsampling  == JPEG_444_SUBSAMPLING)
 800efda:	4b1c      	ldr	r3, [pc, #112]	@ (800f04c <LCD_BriefDisplay+0x16c>)
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d104      	bne.n	800efec <LCD_BriefDisplay+0x10c>
  {
    sprintf(message, "     ChromaSubsampling           =  4:4:4");
 800efe2:	463b      	mov	r3, r7
 800efe4:	491e      	ldr	r1, [pc, #120]	@ (800f060 <LCD_BriefDisplay+0x180>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f004 f888 	bl	80130fc <siprintf>
  }
  
  UTIL_LCD_DisplayStringAtLine(12, (uint8_t *)message);
 800efec:	463b      	mov	r3, r7
 800efee:	4619      	mov	r1, r3
 800eff0:	200c      	movs	r0, #12
 800eff2:	f003 fe1b 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
  /* Decoding approximative decoding Frame rate */
  sprintf(message, "     Average Decoding Frame Rate =   %lu fps", FrameRate);
 800eff6:	4b1b      	ldr	r3, [pc, #108]	@ (800f064 <LCD_BriefDisplay+0x184>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	463b      	mov	r3, r7
 800effc:	491a      	ldr	r1, [pc, #104]	@ (800f068 <LCD_BriefDisplay+0x188>)
 800effe:	4618      	mov	r0, r3
 800f000:	f004 f87c 	bl	80130fc <siprintf>
  UTIL_LCD_DisplayStringAtLine(13, (uint8_t *)message);
 800f004:	463b      	mov	r3, r7
 800f006:	4619      	mov	r1, r3
 800f008:	200d      	movs	r0, #13
 800f00a:	f003 fe0f 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
  /* Number of decoded frames */
  sprintf(message, "     Number of Frames            =   %lu", AVI_Handel.aviInfo.TotalFrame);
 800f00e:	4b17      	ldr	r3, [pc, #92]	@ (800f06c <LCD_BriefDisplay+0x18c>)
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	463b      	mov	r3, r7
 800f014:	4916      	ldr	r1, [pc, #88]	@ (800f070 <LCD_BriefDisplay+0x190>)
 800f016:	4618      	mov	r0, r3
 800f018:	f004 f870 	bl	80130fc <siprintf>
  UTIL_LCD_DisplayStringAtLine(14, (uint8_t *)message);
 800f01c:	463b      	mov	r3, r7
 800f01e:	4619      	mov	r1, r3
 800f020:	200e      	movs	r0, #14
 800f022:	f003 fe03 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
}
 800f026:	bf00      	nop
 800f028:	3740      	adds	r7, #64	@ 0x40
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	200000b8 	.word	0x200000b8
 800f034:	ff0000ff 	.word	0xff0000ff
 800f038:	20000518 	.word	0x20000518
 800f03c:	0801392c 	.word	0x0801392c
 800f040:	200000c0 	.word	0x200000c0
 800f044:	0801394c 	.word	0x0801394c
 800f048:	0801397c 	.word	0x0801397c
 800f04c:	20000504 	.word	0x20000504
 800f050:	080139a4 	.word	0x080139a4
 800f054:	080139d4 	.word	0x080139d4
 800f058:	08013a00 	.word	0x08013a00
 800f05c:	08013a2c 	.word	0x08013a2c
 800f060:	08013a58 	.word	0x08013a58
 800f064:	20000520 	.word	0x20000520
 800f068:	08013a84 	.word	0x08013a84
 800f06c:	2000098c 	.word	0x2000098c
 800f070:	08013ab4 	.word	0x08013ab4

0800f074 <LCD_FileErrorDisplay>:
  * @brief  Display File access error message.
  * @param  None
  * @retval None
  */
static void LCD_FileErrorDisplay(void)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	af00      	add	r7, sp, #0

  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	f003 fc88 	bl	8012990 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE); 
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	f003 fc70 	bl	8012968 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800f088:	480a      	ldr	r0, [pc, #40]	@ (800f0b4 <LCD_FileErrorDisplay+0x40>)
 800f08a:	f003 fc6d 	bl	8012968 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font16);
 800f08e:	480a      	ldr	r0, [pc, #40]	@ (800f0b8 <LCD_FileErrorDisplay+0x44>)
 800f090:	f003 fc92 	bl	80129b8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAtLine(26, (uint8_t *)"     Unable to open MJPEG video file video.avi");
 800f094:	4909      	ldr	r1, [pc, #36]	@ (800f0bc <LCD_FileErrorDisplay+0x48>)
 800f096:	201a      	movs	r0, #26
 800f098:	f003 fdc8 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  UTIL_LCD_DisplayStringAtLine(27, (uint8_t *)"     Please Check that an MJPEG file named video.avi");
 800f09c:	4908      	ldr	r1, [pc, #32]	@ (800f0c0 <LCD_FileErrorDisplay+0x4c>)
 800f09e:	201b      	movs	r0, #27
 800f0a0:	f003 fdc4 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  UTIL_LCD_DisplayStringAtLine(28, (uint8_t *)"     is stored on the uSD");
 800f0a4:	4907      	ldr	r1, [pc, #28]	@ (800f0c4 <LCD_FileErrorDisplay+0x50>)
 800f0a6:	201c      	movs	r0, #28
 800f0a8:	f003 fdc0 	bl	8012c2c <UTIL_LCD_DisplayStringAtLine>
  
  Error_Handler();  
 800f0ac:	f7ff fe4c 	bl	800ed48 <Error_Handler>
}
 800f0b0:	bf00      	nop
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	ffff0000 	.word	0xffff0000
 800f0b8:	200000c0 	.word	0x200000c0
 800f0bc:	08013ae0 	.word	0x08013ae0
 800f0c0:	08013b10 	.word	0x08013b10
 800f0c4:	08013b48 	.word	0x08013b48

0800f0c8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b09e      	sub	sp, #120	@ 0x78
 800f0cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800f0d4:	2004      	movs	r0, #4
 800f0d6:	f7f8 ff39 	bl	8007f4c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f0da:	2300      	movs	r3, #0
 800f0dc:	607b      	str	r3, [r7, #4]
 800f0de:	4b42      	ldr	r3, [pc, #264]	@ (800f1e8 <SystemClock_Config+0x120>)
 800f0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e2:	4a41      	ldr	r2, [pc, #260]	@ (800f1e8 <SystemClock_Config+0x120>)
 800f0e4:	f023 0301 	bic.w	r3, r3, #1
 800f0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f0ea:	4b3f      	ldr	r3, [pc, #252]	@ (800f1e8 <SystemClock_Config+0x120>)
 800f0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	607b      	str	r3, [r7, #4]
 800f0f4:	4b3d      	ldr	r3, [pc, #244]	@ (800f1ec <SystemClock_Config+0x124>)
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	4a3c      	ldr	r2, [pc, #240]	@ (800f1ec <SystemClock_Config+0x124>)
 800f0fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f0fe:	6193      	str	r3, [r2, #24]
 800f100:	4b3a      	ldr	r3, [pc, #232]	@ (800f1ec <SystemClock_Config+0x124>)
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f108:	607b      	str	r3, [r7, #4]
 800f10a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800f10c:	bf00      	nop
 800f10e:	4b37      	ldr	r3, [pc, #220]	@ (800f1ec <SystemClock_Config+0x124>)
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f11a:	d1f8      	bne.n	800f10e <SystemClock_Config+0x46>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f11c:	2301      	movs	r3, #1
 800f11e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f120:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f124:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800f126:	2300      	movs	r3, #0
 800f128:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800f12a:	2300      	movs	r3, #0
 800f12c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f12e:	2302      	movs	r3, #2
 800f130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f132:	2302      	movs	r3, #2
 800f134:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800f136:	2305      	movs	r3, #5
 800f138:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800f13a:	23a0      	movs	r3, #160	@ 0xa0
 800f13c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800f13e:	2300      	movs	r3, #0
 800f140:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800f142:	2302      	movs	r3, #2
 800f144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800f146:	2302      	movs	r3, #2
 800f148:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f14a:	2304      	movs	r3, #4
 800f14c:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800f14e:	2300      	movs	r3, #0
 800f150:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800f152:	2308      	movs	r3, #8
 800f154:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800f156:	f107 0308 	add.w	r3, r7, #8
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7f8 ff50 	bl	8008000 <HAL_RCC_OscConfig>
 800f160:	4603      	mov	r3, r0
 800f162:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800f166:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800f16e:	f7ff fdeb 	bl	800ed48 <Error_Handler>
  }
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800f172:	233f      	movs	r3, #63	@ 0x3f
 800f174:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f176:	2303      	movs	r3, #3
 800f178:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800f17a:	2300      	movs	r3, #0
 800f17c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800f17e:	2308      	movs	r3, #8
 800f180:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800f182:	2340      	movs	r3, #64	@ 0x40
 800f184:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800f186:	2340      	movs	r3, #64	@ 0x40
 800f188:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 800f18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f18e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800f190:	2340      	movs	r3, #64	@ 0x40
 800f192:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800f194:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f198:	2104      	movs	r1, #4
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f9 fb8a 	bl	80088b4 <HAL_RCC_ClockConfig>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800f1a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800f1ae:	f7ff fdcb 	bl	800ed48 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */
 
  /*activate CSI clock mondatory for I/O Compensation Cell*/  
  __HAL_RCC_CSI_ENABLE() ;
 800f1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f0 <SystemClock_Config+0x128>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a0e      	ldr	r2, [pc, #56]	@ (800f1f0 <SystemClock_Config+0x128>)
 800f1b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1bc:	6013      	str	r3, [r2, #0]
    
  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800f1be:	4b0c      	ldr	r3, [pc, #48]	@ (800f1f0 <SystemClock_Config+0x128>)
 800f1c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f1c4:	4a0a      	ldr	r2, [pc, #40]	@ (800f1f0 <SystemClock_Config+0x128>)
 800f1c6:	f043 0302 	orr.w	r3, r3, #2
 800f1ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800f1ce:	4b08      	ldr	r3, [pc, #32]	@ (800f1f0 <SystemClock_Config+0x128>)
 800f1d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	603b      	str	r3, [r7, #0]
 800f1da:	683b      	ldr	r3, [r7, #0]
  
  /* Enables the I/O Compensation Cell */    
  HAL_EnableCompensationCell();  
 800f1dc:	f7f4 fdd4 	bl	8003d88 <HAL_EnableCompensationCell>
}
 800f1e0:	bf00      	nop
 800f1e2:	3778      	adds	r7, #120	@ 0x78
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	58000400 	.word	0x58000400
 800f1ec:	58024800 	.word	0x58024800
 800f1f0:	58024400 	.word	0x58024400

0800f1f4 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800f1fa:	f7f4 fee5 	bl	8003fc8 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800f1fe:	2301      	movs	r3, #1
 800f200:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800f202:	2300      	movs	r3, #0
 800f204:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800f206:	231f      	movs	r3, #31
 800f208:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800f20a:	2300      	movs	r3, #0
 800f20c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800f212:	2300      	movs	r3, #0
 800f214:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800f216:	2301      	movs	r3, #1
 800f218:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800f21e:	2300      	movs	r3, #0
 800f220:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800f222:	2387      	movs	r3, #135	@ 0x87
 800f224:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800f226:	2301      	movs	r3, #1
 800f228:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800f22a:	463b      	mov	r3, r7
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f4 ff03 	bl	8004038 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800f232:	2301      	movs	r3, #1
 800f234:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800f236:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800f23a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800f23c:	2318      	movs	r3, #24
 800f23e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800f240:	2303      	movs	r3, #3
 800f242:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800f248:	2301      	movs	r3, #1
 800f24a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800f24c:	2300      	movs	r3, #0
 800f24e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800f250:	2301      	movs	r3, #1
 800f252:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800f254:	2300      	movs	r3, #0
 800f256:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800f258:	2300      	movs	r3, #0
 800f25a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800f25c:	2300      	movs	r3, #0
 800f25e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800f260:	463b      	mov	r3, r7
 800f262:	4618      	mov	r0, r3
 800f264:	f7f4 fee8 	bl	8004038 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800f268:	2004      	movs	r0, #4
 800f26a:	f7f4 fec5 	bl	8003ff8 <HAL_MPU_Enable>
}
 800f26e:	bf00      	nop
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800f27e:	4b34      	ldr	r3, [pc, #208]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f280:	695b      	ldr	r3, [r3, #20]
 800f282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f286:	2b00      	cmp	r3, #0
 800f288:	d11b      	bne.n	800f2c2 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800f28a:	f3bf 8f4f 	dsb	sy
}
 800f28e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f290:	f3bf 8f6f 	isb	sy
}
 800f294:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800f296:	4b2e      	ldr	r3, [pc, #184]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f298:	2200      	movs	r2, #0
 800f29a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800f29e:	f3bf 8f4f 	dsb	sy
}
 800f2a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f2a4:	f3bf 8f6f 	isb	sy
}
 800f2a8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800f2aa:	4b29      	ldr	r3, [pc, #164]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	4a28      	ldr	r2, [pc, #160]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f2b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f2b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f2b6:	f3bf 8f4f 	dsb	sy
}
 800f2ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f2bc:	f3bf 8f6f 	isb	sy
}
 800f2c0:	e000      	b.n	800f2c4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800f2c2:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800f2c4:	4b22      	ldr	r3, [pc, #136]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d138      	bne.n	800f342 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800f2d0:	4b1f      	ldr	r3, [pc, #124]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f2d8:	f3bf 8f4f 	dsb	sy
}
 800f2dc:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800f2de:	4b1c      	ldr	r3, [pc, #112]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2e4:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	0b5b      	lsrs	r3, r3, #13
 800f2ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f2ee:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	08db      	lsrs	r3, r3, #3
 800f2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f2f8:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	015a      	lsls	r2, r3, #5
 800f2fe:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800f302:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f308:	4911      	ldr	r1, [pc, #68]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f30a:	4313      	orrs	r3, r2
 800f30c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	1e5a      	subs	r2, r3, #1
 800f314:	607a      	str	r2, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1ef      	bne.n	800f2fa <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	1e5a      	subs	r2, r3, #1
 800f31e:	60ba      	str	r2, [r7, #8]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e5      	bne.n	800f2f0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800f324:	f3bf 8f4f 	dsb	sy
}
 800f328:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800f32a:	4b09      	ldr	r3, [pc, #36]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f32c:	695b      	ldr	r3, [r3, #20]
 800f32e:	4a08      	ldr	r2, [pc, #32]	@ (800f350 <CPU_CACHE_Enable+0xd8>)
 800f330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f334:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f336:	f3bf 8f4f 	dsb	sy
}
 800f33a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f33c:	f3bf 8f6f 	isb	sy
}
 800f340:	e000      	b.n	800f344 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800f342:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	e000ed00 	.word	0xe000ed00

0800f354 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	4603      	mov	r3, r0
 800f35c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f35e:	4b0c      	ldr	r3, [pc, #48]	@ (800f390 <SD_CheckStatus+0x3c>)
 800f360:	2201      	movs	r2, #1
 800f362:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800f364:	2000      	movs	r0, #0
 800f366:	f7f4 f94f 	bl	8003608 <BSP_SD_GetCardState>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d107      	bne.n	800f380 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800f370:	4b07      	ldr	r3, [pc, #28]	@ (800f390 <SD_CheckStatus+0x3c>)
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	b2db      	uxtb	r3, r3
 800f376:	f023 0301 	bic.w	r3, r3, #1
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	4b04      	ldr	r3, [pc, #16]	@ (800f390 <SD_CheckStatus+0x3c>)
 800f37e:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800f380:	4b03      	ldr	r3, [pc, #12]	@ (800f390 <SD_CheckStatus+0x3c>)
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	b2db      	uxtb	r3, r3
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	200000b5 	.word	0x200000b5

0800f394 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff ffd7 	bl	800f354 <SD_CheckStatus>
 800f3a6:	4603      	mov	r3, r0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f3ba:	79fb      	ldrb	r3, [r7, #7]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff ffc9 	bl	800f354 <SD_CheckStatus>
 800f3c2:	4603      	mov	r3, r0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60b9      	str	r1, [r7, #8]
 800f3d4:	607a      	str	r2, [r7, #4]
 800f3d6:	603b      	str	r3, [r7, #0]
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	f7f4 f8ae 	bl	8003548 <BSP_SD_ReadBlocks>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d108      	bne.n	800f404 <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800f3f2:	bf00      	nop
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	f7f4 f907 	bl	8003608 <BSP_SD_GetCardState>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d1f9      	bne.n	800f3f4 <SD_read+0x28>
    {
    }
    res = RES_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f404:	7dfb      	ldrb	r3, [r7, #23]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3718      	adds	r7, #24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b086      	sub	sp, #24
 800f412:	af00      	add	r7, sp, #0
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
 800f41a:	4603      	mov	r3, r0
 800f41c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f41e:	2301      	movs	r3, #1
 800f420:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	2000      	movs	r0, #0
 800f42a:	f7f4 f8bd 	bl	80035a8 <BSP_SD_WriteBlocks>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d108      	bne.n	800f446 <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800f434:	bf00      	nop
 800f436:	2000      	movs	r0, #0
 800f438:	f7f4 f8e6 	bl	8003608 <BSP_SD_GetCardState>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f9      	bne.n	800f436 <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b08c      	sub	sp, #48	@ 0x30
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	603a      	str	r2, [r7, #0]
 800f45a:	71fb      	strb	r3, [r7, #7]
 800f45c:	460b      	mov	r3, r1
 800f45e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f466:	4b26      	ldr	r3, [pc, #152]	@ (800f500 <SD_ioctl+0xb0>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	f003 0301 	and.w	r3, r3, #1
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <SD_ioctl+0x28>
 800f474:	2303      	movs	r3, #3
 800f476:	e03e      	b.n	800f4f6 <SD_ioctl+0xa6>
  
  switch (cmd)
 800f478:	79bb      	ldrb	r3, [r7, #6]
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d836      	bhi.n	800f4ec <SD_ioctl+0x9c>
 800f47e:	a201      	add	r2, pc, #4	@ (adr r2, 800f484 <SD_ioctl+0x34>)
 800f480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f484:	0800f495 	.word	0x0800f495
 800f488:	0800f49d 	.word	0x0800f49d
 800f48c:	0800f4b7 	.word	0x0800f4b7
 800f490:	0800f4d3 	.word	0x0800f4d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f49a:	e02a      	b.n	800f4f2 <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800f49c:	f107 0308 	add.w	r3, r7, #8
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	f7f4 f8ca 	bl	800363c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f4a8:	6a3a      	ldr	r2, [r7, #32]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f4b4:	e01d      	b.n	800f4f2 <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800f4b6:	f107 0308 	add.w	r3, r7, #8
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7f4 f8bd 	bl	800363c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f4d0:	e00f      	b.n	800f4f2 <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800f4d2:	f107 0308 	add.w	r3, r7, #8
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	2000      	movs	r0, #0
 800f4da:	f7f4 f8af 	bl	800363c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800f4de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f4ea:	e002      	b.n	800f4f2 <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800f4ec:	2304      	movs	r3, #4
 800f4ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800f4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3730      	adds	r7, #48	@ 0x30
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	200000b5 	.word	0x200000b5

0800f504 <HAL_JPEG_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  
  /* Enable JPEG clock */
  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800f50c:	4b54      	ldr	r3, [pc, #336]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f50e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f512:	4a53      	ldr	r2, [pc, #332]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f514:	f043 0320 	orr.w	r3, r3, #32
 800f518:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800f51c:	4b50      	ldr	r3, [pc, #320]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f51e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f522:	f003 0320 	and.w	r3, r3, #32
 800f526:	60fb      	str	r3, [r7, #12]
 800f528:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable MDMA clock */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800f52a:	4b4d      	ldr	r3, [pc, #308]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f52c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f530:	4a4b      	ldr	r2, [pc, #300]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800f53a:	4b49      	ldr	r3, [pc, #292]	@ (800f660 <HAL_JPEG_MspInit+0x15c>)
 800f53c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	60bb      	str	r3, [r7, #8]
 800f546:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800f548:	220f      	movs	r2, #15
 800f54a:	2107      	movs	r1, #7
 800f54c:	2079      	movs	r0, #121	@ 0x79
 800f54e:	f7f4 fd06 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800f552:	2079      	movs	r0, #121	@ 0x79
 800f554:	f7f4 fd1d 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  
  /* Input MDMA */
  /* Set the parameters to be configured */ 
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800f558:	4b42      	ldr	r3, [pc, #264]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f55a:	2280      	movs	r2, #128	@ 0x80
 800f55c:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800f55e:	4b41      	ldr	r3, [pc, #260]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f560:	2200      	movs	r2, #0
 800f562:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800f564:	4b3f      	ldr	r3, [pc, #252]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f566:	2202      	movs	r2, #2
 800f568:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800f56a:	4b3e      	ldr	r3, [pc, #248]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f56c:	2200      	movs	r2, #0
 800f56e:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800f570:	4b3c      	ldr	r3, [pc, #240]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f572:	2200      	movs	r2, #0
 800f574:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800f576:	4b3b      	ldr	r3, [pc, #236]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f578:	2280      	movs	r2, #128	@ 0x80
 800f57a:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800f57c:	4b39      	ldr	r3, [pc, #228]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f57e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800f582:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800f584:	4b37      	ldr	r3, [pc, #220]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f586:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f58a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800f58c:	4b35      	ldr	r3, [pc, #212]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f58e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f592:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800f594:	4b33      	ldr	r3, [pc, #204]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f596:	2200      	movs	r2, #0
 800f598:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800f59a:	4b32      	ldr	r3, [pc, #200]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /*Using JPEG Input FIFO Threshold as a trigger for the MDMA*/
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH; /* Set the MDMA HW trigger to JPEG Input FIFO Threshold flag*/  
 800f5a0:	4b30      	ldr	r3, [pc, #192]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5a2:	2211      	movs	r2, #17
 800f5a4:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800f5a6:	4b2f      	ldr	r3, [pc, #188]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800f5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5ae:	2220      	movs	r2, #32
 800f5b0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800f5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5b4:	4a2c      	ldr	r2, [pc, #176]	@ (800f668 <HAL_JPEG_MspInit+0x164>)
 800f5b6:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800f5be:	4a29      	ldr	r2, [pc, #164]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaIn);  
 800f5c4:	4827      	ldr	r0, [pc, #156]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5c6:	f7f8 f965 	bl	8007894 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaIn);
 800f5ca:	4826      	ldr	r0, [pc, #152]	@ (800f664 <HAL_JPEG_MspInit+0x160>)
 800f5cc:	f7f8 f916 	bl	80077fc <HAL_MDMA_Init>
  
  
  /* Output MDMA */
  /* Set the parameters to be configured */ 
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800f5d0:	4b26      	ldr	r3, [pc, #152]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5d2:	22c0      	movs	r2, #192	@ 0xc0
 800f5d4:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800f5d6:	4b25      	ldr	r3, [pc, #148]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800f5dc:	4b23      	ldr	r3, [pc, #140]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800f5e2:	4b22      	ldr	r3, [pc, #136]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5e4:	2208      	movs	r2, #8
 800f5e6:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800f5e8:	4b20      	ldr	r3, [pc, #128]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5ea:	2220      	movs	r2, #32
 800f5ec:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800f5ee:	4b1f      	ldr	r3, [pc, #124]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800f5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800f5fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800f5fc:	4b1b      	ldr	r3, [pc, #108]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f5fe:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800f602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800f604:	4b19      	ldr	r3, [pc, #100]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f606:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800f60a:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800f60c:	4b17      	ldr	r3, [pc, #92]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f60e:	2200      	movs	r2, #0
 800f610:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800f612:	4b16      	ldr	r3, [pc, #88]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f614:	2200      	movs	r2, #0
 800f616:	639a      	str	r2, [r3, #56]	@ 0x38
  
  
  /*Using JPEG Output FIFO Threshold as a trigger for the MDMA*/
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH; /* Set the MDMA HW trigger to JPEG Output FIFO Threshold flag*/ 
 800f618:	4b14      	ldr	r3, [pc, #80]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f61a:	2213      	movs	r2, #19
 800f61c:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800f61e:	4b13      	ldr	r3, [pc, #76]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f620:	2200      	movs	r2, #0
 800f622:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800f624:	4b11      	ldr	r3, [pc, #68]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f626:	2220      	movs	r2, #32
 800f628:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800f62a:	4b10      	ldr	r3, [pc, #64]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f62c:	4a10      	ldr	r2, [pc, #64]	@ (800f670 <HAL_JPEG_MspInit+0x16c>)
 800f62e:	601a      	str	r2, [r3, #0]
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaOut);  
 800f630:	480e      	ldr	r0, [pc, #56]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f632:	f7f8 f92f 	bl	8007894 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaOut);
 800f636:	480d      	ldr	r0, [pc, #52]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f638:	f7f8 f8e0 	bl	80077fc <HAL_MDMA_Init>
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a0b      	ldr	r2, [pc, #44]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f640:	635a      	str	r2, [r3, #52]	@ 0x34
 800f642:	4a0a      	ldr	r2, [pc, #40]	@ (800f66c <HAL_JPEG_MspInit+0x168>)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800f648:	220f      	movs	r2, #15
 800f64a:	2108      	movs	r1, #8
 800f64c:	207a      	movs	r0, #122	@ 0x7a
 800f64e:	f7f4 fc86 	bl	8003f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800f652:	207a      	movs	r0, #122	@ 0x7a
 800f654:	f7f4 fc9d 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  
}
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	58024400 	.word	0x58024400
 800f664:	2001c9d4 	.word	0x2001c9d4
 800f668:	52000080 	.word	0x52000080
 800f66c:	2001ca40 	.word	0x2001ca40
 800f670:	52000040 	.word	0x52000040

0800f674 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
}
 800f678:	bf00      	nop
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800f682:	b480      	push	{r7}
 800f684:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800f686:	bf00      	nop
 800f688:	e7fd      	b.n	800f686 <HardFault_Handler+0x4>

0800f68a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800f68a:	b480      	push	{r7}
 800f68c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800f68e:	bf00      	nop
 800f690:	e7fd      	b.n	800f68e <MemManage_Handler+0x4>

0800f692 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800f692:	b480      	push	{r7}
 800f694:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800f696:	bf00      	nop
 800f698:	e7fd      	b.n	800f696 <BusFault_Handler+0x4>

0800f69a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800f69a:	b480      	push	{r7}
 800f69c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800f69e:	bf00      	nop
 800f6a0:	e7fd      	b.n	800f69e <UsageFault_Handler+0x4>

0800f6a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	af00      	add	r7, sp, #0
}
 800f6a6:	bf00      	nop
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0
}
 800f6b4:	bf00      	nop
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	af00      	add	r7, sp, #0
}
 800f6c2:	bf00      	nop
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800f6d0:	f7f4 fb0a 	bl	8003ce8 <HAL_IncTick>
}
 800f6d4:	bf00      	nop
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <JPEG_IRQHandler>:
  * @param  None
  * @retval None
  */

void JPEG_IRQHandler(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800f6dc:	4802      	ldr	r0, [pc, #8]	@ (800f6e8 <JPEG_IRQHandler+0x10>)
 800f6de:	f7f6 f957 	bl	8005990 <HAL_JPEG_IRQHandler>
}
 800f6e2:	bf00      	nop
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20000444 	.word	0x20000444

0800f6ec <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */

void MDMA_IRQHandler()
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800f6f0:	4b05      	ldr	r3, [pc, #20]	@ (800f708 <MDMA_IRQHandler+0x1c>)
 800f6f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f8 f9cd 	bl	8007a94 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800f6fa:	4b03      	ldr	r3, [pc, #12]	@ (800f708 <MDMA_IRQHandler+0x1c>)
 800f6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f8 f9c8 	bl	8007a94 <HAL_MDMA_IRQHandler>
}
 800f704:	bf00      	nop
 800f706:	bd80      	pop	{r7, pc}
 800f708:	20000444 	.word	0x20000444

0800f70c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f714:	4a14      	ldr	r2, [pc, #80]	@ (800f768 <_sbrk+0x5c>)
 800f716:	4b15      	ldr	r3, [pc, #84]	@ (800f76c <_sbrk+0x60>)
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f720:	4b13      	ldr	r3, [pc, #76]	@ (800f770 <_sbrk+0x64>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f728:	4b11      	ldr	r3, [pc, #68]	@ (800f770 <_sbrk+0x64>)
 800f72a:	4a12      	ldr	r2, [pc, #72]	@ (800f774 <_sbrk+0x68>)
 800f72c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f72e:	4b10      	ldr	r3, [pc, #64]	@ (800f770 <_sbrk+0x64>)
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	4413      	add	r3, r2
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d207      	bcs.n	800f74c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f73c:	f003 fd16 	bl	801316c <__errno>
 800f740:	4603      	mov	r3, r0
 800f742:	220c      	movs	r2, #12
 800f744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f746:	f04f 33ff 	mov.w	r3, #4294967295
 800f74a:	e009      	b.n	800f760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f74c:	4b08      	ldr	r3, [pc, #32]	@ (800f770 <_sbrk+0x64>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f752:	4b07      	ldr	r3, [pc, #28]	@ (800f770 <_sbrk+0x64>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4413      	add	r3, r2
 800f75a:	4a05      	ldr	r2, [pc, #20]	@ (800f770 <_sbrk+0x64>)
 800f75c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f75e:	68fb      	ldr	r3, [r7, #12]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20020000 	.word	0x20020000
 800f76c:	00002000 	.word	0x00002000
 800f770:	2001caac 	.word	0x2001caac
 800f774:	2001cc98 	.word	0x2001cc98

0800f778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800f778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f7b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f77c:	f7f4 f9c4 	bl	8003b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f780:	480c      	ldr	r0, [pc, #48]	@ (800f7b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800f782:	490d      	ldr	r1, [pc, #52]	@ (800f7b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800f784:	4a0d      	ldr	r2, [pc, #52]	@ (800f7bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800f786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f788:	e002      	b.n	800f790 <LoopCopyDataInit>

0800f78a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f78a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f78c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f78e:	3304      	adds	r3, #4

0800f790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f794:	d3f9      	bcc.n	800f78a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f796:	4a0a      	ldr	r2, [pc, #40]	@ (800f7c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800f798:	4c0a      	ldr	r4, [pc, #40]	@ (800f7c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800f79a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f79c:	e001      	b.n	800f7a2 <LoopFillZerobss>

0800f79e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f79e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f7a0:	3204      	adds	r2, #4

0800f7a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f7a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f7a4:	d3fb      	bcc.n	800f79e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f7a6:	f003 fce7 	bl	8013178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f7aa:	f7ff f991 	bl	800ead0 <main>
  bx  lr
 800f7ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f7b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800f7b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f7b8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800f7bc:	08016ba8 	.word	0x08016ba8
  ldr r2, =_sbss
 800f7c0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800f7c4:	2001cc98 	.word	0x2001cc98

0800f7c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f7c8:	e7fe      	b.n	800f7c8 <ADC3_IRQHandler>
	...

0800f7cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	4a08      	ldr	r2, [pc, #32]	@ (800f7fc <disk_status+0x30>)
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	4413      	add	r3, r2
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	79fa      	ldrb	r2, [r7, #7]
 800f7e4:	4905      	ldr	r1, [pc, #20]	@ (800f7fc <disk_status+0x30>)
 800f7e6:	440a      	add	r2, r1
 800f7e8:	7a12      	ldrb	r2, [r2, #8]
 800f7ea:	4610      	mov	r0, r2
 800f7ec:	4798      	blx	r3
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	2001cad8 	.word	0x2001cad8

0800f800 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	4a0e      	ldr	r2, [pc, #56]	@ (800f84c <disk_initialize+0x4c>)
 800f812:	5cd3      	ldrb	r3, [r2, r3]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d114      	bne.n	800f842 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f818:	79fb      	ldrb	r3, [r7, #7]
 800f81a:	4a0c      	ldr	r2, [pc, #48]	@ (800f84c <disk_initialize+0x4c>)
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	4413      	add	r3, r2
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	79fa      	ldrb	r2, [r7, #7]
 800f826:	4909      	ldr	r1, [pc, #36]	@ (800f84c <disk_initialize+0x4c>)
 800f828:	440a      	add	r2, r1
 800f82a:	7a12      	ldrb	r2, [r2, #8]
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f834:	7bfb      	ldrb	r3, [r7, #15]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f83a:	79fb      	ldrb	r3, [r7, #7]
 800f83c:	4a03      	ldr	r2, [pc, #12]	@ (800f84c <disk_initialize+0x4c>)
 800f83e:	2101      	movs	r1, #1
 800f840:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f842:	7bfb      	ldrb	r3, [r7, #15]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	2001cad8 	.word	0x2001cad8

0800f850 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f850:	b590      	push	{r4, r7, lr}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	607a      	str	r2, [r7, #4]
 800f85a:	603b      	str	r3, [r7, #0]
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	4a0a      	ldr	r2, [pc, #40]	@ (800f88c <disk_read+0x3c>)
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	689c      	ldr	r4, [r3, #8]
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	4a07      	ldr	r2, [pc, #28]	@ (800f88c <disk_read+0x3c>)
 800f870:	4413      	add	r3, r2
 800f872:	7a18      	ldrb	r0, [r3, #8]
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	68b9      	ldr	r1, [r7, #8]
 800f87a:	47a0      	blx	r4
 800f87c:	4603      	mov	r3, r0
 800f87e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
}
 800f882:	4618      	mov	r0, r3
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	bd90      	pop	{r4, r7, pc}
 800f88a:	bf00      	nop
 800f88c:	2001cad8 	.word	0x2001cad8

0800f890 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f890:	b590      	push	{r4, r7, lr}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	607a      	str	r2, [r7, #4]
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	4603      	mov	r3, r0
 800f89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
 800f8a2:	4a0a      	ldr	r2, [pc, #40]	@ (800f8cc <disk_write+0x3c>)
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	68dc      	ldr	r4, [r3, #12]
 800f8ac:	7bfb      	ldrb	r3, [r7, #15]
 800f8ae:	4a07      	ldr	r2, [pc, #28]	@ (800f8cc <disk_write+0x3c>)
 800f8b0:	4413      	add	r3, r2
 800f8b2:	7a18      	ldrb	r0, [r3, #8]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	47a0      	blx	r4
 800f8bc:	4603      	mov	r3, r0
 800f8be:	75fb      	strb	r3, [r7, #23]
  return res;
 800f8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	371c      	adds	r7, #28
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd90      	pop	{r4, r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	2001cad8 	.word	0x2001cad8

0800f8d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	603a      	str	r2, [r7, #0]
 800f8da:	71fb      	strb	r3, [r7, #7]
 800f8dc:	460b      	mov	r3, r1
 800f8de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f8e0:	79fb      	ldrb	r3, [r7, #7]
 800f8e2:	4a09      	ldr	r2, [pc, #36]	@ (800f908 <disk_ioctl+0x38>)
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	79fa      	ldrb	r2, [r7, #7]
 800f8ee:	4906      	ldr	r1, [pc, #24]	@ (800f908 <disk_ioctl+0x38>)
 800f8f0:	440a      	add	r2, r1
 800f8f2:	7a10      	ldrb	r0, [r2, #8]
 800f8f4:	79b9      	ldrb	r1, [r7, #6]
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	4798      	blx	r3
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	2001cad8 	.word	0x2001cad8

0800f90c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0
  return 0;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	3301      	adds	r3, #1
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f92c:	89fb      	ldrh	r3, [r7, #14]
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	b21a      	sxth	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b21b      	sxth	r3, r3
 800f938:	4313      	orrs	r3, r2
 800f93a:	b21b      	sxth	r3, r3
 800f93c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f93e:	89fb      	ldrh	r3, [r7, #14]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3303      	adds	r3, #3
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	021b      	lsls	r3, r3, #8
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	3202      	adds	r2, #2
 800f964:	7812      	ldrb	r2, [r2, #0]
 800f966:	4313      	orrs	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	3201      	adds	r2, #1
 800f972:	7812      	ldrb	r2, [r2, #0]
 800f974:	4313      	orrs	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	021b      	lsls	r3, r3, #8
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	7812      	ldrb	r2, [r2, #0]
 800f980:	4313      	orrs	r3, r2
 800f982:	60fb      	str	r3, [r7, #12]
	return rv;
 800f984:	68fb      	ldr	r3, [r7, #12]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f992:	b480      	push	{r7}
 800f994:	b083      	sub	sp, #12
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	460b      	mov	r3, r1
 800f99c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	1c5a      	adds	r2, r3, #1
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	887a      	ldrh	r2, [r7, #2]
 800f9a6:	b2d2      	uxtb	r2, r2
 800f9a8:	701a      	strb	r2, [r3, #0]
 800f9aa:	887b      	ldrh	r3, [r7, #2]
 800f9ac:	0a1b      	lsrs	r3, r3, #8
 800f9ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	607a      	str	r2, [r7, #4]
 800f9b6:	887a      	ldrh	r2, [r7, #2]
 800f9b8:	b2d2      	uxtb	r2, r2
 800f9ba:	701a      	strb	r2, [r3, #0]
}
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	1c5a      	adds	r2, r3, #1
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	683a      	ldr	r2, [r7, #0]
 800f9da:	b2d2      	uxtb	r2, r2
 800f9dc:	701a      	strb	r2, [r3, #0]
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	0a1b      	lsrs	r3, r3, #8
 800f9e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	607a      	str	r2, [r7, #4]
 800f9ea:	683a      	ldr	r2, [r7, #0]
 800f9ec:	b2d2      	uxtb	r2, r2
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	0a1b      	lsrs	r3, r3, #8
 800f9f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	607a      	str	r2, [r7, #4]
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	b2d2      	uxtb	r2, r2
 800fa00:	701a      	strb	r2, [r3, #0]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	0a1b      	lsrs	r3, r3, #8
 800fa06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	1c5a      	adds	r2, r3, #1
 800fa0c:	607a      	str	r2, [r7, #4]
 800fa0e:	683a      	ldr	r2, [r7, #0]
 800fa10:	b2d2      	uxtb	r2, r2
 800fa12:	701a      	strb	r2, [r3, #0]
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00d      	beq.n	800fa56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	1c53      	adds	r3, r2, #1
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	1c59      	adds	r1, r3, #1
 800fa44:	6179      	str	r1, [r7, #20]
 800fa46:	7812      	ldrb	r2, [r2, #0]
 800fa48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	607b      	str	r3, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d1f1      	bne.n	800fa3a <mem_cpy+0x1a>
	}
}
 800fa56:	bf00      	nop
 800fa58:	371c      	adds	r7, #28
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fa62:	b480      	push	{r7}
 800fa64:	b087      	sub	sp, #28
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	1c5a      	adds	r2, r3, #1
 800fa76:	617a      	str	r2, [r7, #20]
 800fa78:	68ba      	ldr	r2, [r7, #8]
 800fa7a:	b2d2      	uxtb	r2, r2
 800fa7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	607b      	str	r3, [r7, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1f3      	bne.n	800fa72 <mem_set+0x10>
}
 800fa8a:	bf00      	nop
 800fa8c:	bf00      	nop
 800fa8e:	371c      	adds	r7, #28
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fa98:	b480      	push	{r7}
 800fa9a:	b089      	sub	sp, #36	@ 0x24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	61fb      	str	r3, [r7, #28]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	61fa      	str	r2, [r7, #28]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	4619      	mov	r1, r3
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	1c5a      	adds	r2, r3, #1
 800fabe:	61ba      	str	r2, [r7, #24]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	1acb      	subs	r3, r1, r3
 800fac4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	3b01      	subs	r3, #1
 800faca:	607b      	str	r3, [r7, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <mem_cmp+0x40>
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d0eb      	beq.n	800fab0 <mem_cmp+0x18>

	return r;
 800fad8:	697b      	ldr	r3, [r7, #20]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3724      	adds	r7, #36	@ 0x24
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fae6:	b480      	push	{r7}
 800fae8:	b083      	sub	sp, #12
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800faf0:	e002      	b.n	800faf8 <chk_chr+0x12>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3301      	adds	r3, #1
 800faf6:	607b      	str	r3, [r7, #4]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d005      	beq.n	800fb0c <chk_chr+0x26>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	461a      	mov	r2, r3
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d1f2      	bne.n	800faf2 <chk_chr+0xc>
	return *str;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb26:	2300      	movs	r3, #0
 800fb28:	60bb      	str	r3, [r7, #8]
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	60fb      	str	r3, [r7, #12]
 800fb2e:	e029      	b.n	800fb84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fb30:	4a27      	ldr	r2, [pc, #156]	@ (800fbd0 <chk_lock+0xb4>)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	4413      	add	r3, r2
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01d      	beq.n	800fb7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb3e:	4a24      	ldr	r2, [pc, #144]	@ (800fbd0 <chk_lock+0xb4>)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	011b      	lsls	r3, r3, #4
 800fb44:	4413      	add	r3, r2
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d116      	bne.n	800fb7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fb50:	4a1f      	ldr	r2, [pc, #124]	@ (800fbd0 <chk_lock+0xb4>)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	011b      	lsls	r3, r3, #4
 800fb56:	4413      	add	r3, r2
 800fb58:	3304      	adds	r3, #4
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d10c      	bne.n	800fb7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb64:	4a1a      	ldr	r2, [pc, #104]	@ (800fbd0 <chk_lock+0xb4>)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	011b      	lsls	r3, r3, #4
 800fb6a:	4413      	add	r3, r2
 800fb6c:	3308      	adds	r3, #8
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d102      	bne.n	800fb7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb78:	e007      	b.n	800fb8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3301      	adds	r3, #1
 800fb82:	60fb      	str	r3, [r7, #12]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d9d2      	bls.n	800fb30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d109      	bne.n	800fba4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d102      	bne.n	800fb9c <chk_lock+0x80>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d101      	bne.n	800fba0 <chk_lock+0x84>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	e010      	b.n	800fbc2 <chk_lock+0xa6>
 800fba0:	2312      	movs	r3, #18
 800fba2:	e00e      	b.n	800fbc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d108      	bne.n	800fbbc <chk_lock+0xa0>
 800fbaa:	4a09      	ldr	r2, [pc, #36]	@ (800fbd0 <chk_lock+0xb4>)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	011b      	lsls	r3, r3, #4
 800fbb0:	4413      	add	r3, r2
 800fbb2:	330c      	adds	r3, #12
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbba:	d101      	bne.n	800fbc0 <chk_lock+0xa4>
 800fbbc:	2310      	movs	r3, #16
 800fbbe:	e000      	b.n	800fbc2 <chk_lock+0xa6>
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3714      	adds	r7, #20
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	2001cab8 	.word	0x2001cab8

0800fbd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	607b      	str	r3, [r7, #4]
 800fbde:	e002      	b.n	800fbe6 <enq_lock+0x12>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	607b      	str	r3, [r7, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d806      	bhi.n	800fbfa <enq_lock+0x26>
 800fbec:	4a09      	ldr	r2, [pc, #36]	@ (800fc14 <enq_lock+0x40>)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	011b      	lsls	r3, r3, #4
 800fbf2:	4413      	add	r3, r2
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1f2      	bne.n	800fbe0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	bf14      	ite	ne
 800fc00:	2301      	movne	r3, #1
 800fc02:	2300      	moveq	r3, #0
 800fc04:	b2db      	uxtb	r3, r3
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	2001cab8 	.word	0x2001cab8

0800fc18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc22:	2300      	movs	r3, #0
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	e01f      	b.n	800fc68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fc28:	4a41      	ldr	r2, [pc, #260]	@ (800fd30 <inc_lock+0x118>)
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	011b      	lsls	r3, r3, #4
 800fc2e:	4413      	add	r3, r2
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d113      	bne.n	800fc62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fc3a:	4a3d      	ldr	r2, [pc, #244]	@ (800fd30 <inc_lock+0x118>)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	011b      	lsls	r3, r3, #4
 800fc40:	4413      	add	r3, r2
 800fc42:	3304      	adds	r3, #4
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d109      	bne.n	800fc62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fc4e:	4a38      	ldr	r2, [pc, #224]	@ (800fd30 <inc_lock+0x118>)
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	011b      	lsls	r3, r3, #4
 800fc54:	4413      	add	r3, r2
 800fc56:	3308      	adds	r3, #8
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d006      	beq.n	800fc70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3301      	adds	r3, #1
 800fc66:	60fb      	str	r3, [r7, #12]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d9dc      	bls.n	800fc28 <inc_lock+0x10>
 800fc6e:	e000      	b.n	800fc72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fc70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d132      	bne.n	800fcde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	e002      	b.n	800fc84 <inc_lock+0x6c>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	3301      	adds	r3, #1
 800fc82:	60fb      	str	r3, [r7, #12]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d806      	bhi.n	800fc98 <inc_lock+0x80>
 800fc8a:	4a29      	ldr	r2, [pc, #164]	@ (800fd30 <inc_lock+0x118>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	011b      	lsls	r3, r3, #4
 800fc90:	4413      	add	r3, r2
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1f2      	bne.n	800fc7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d101      	bne.n	800fca2 <inc_lock+0x8a>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	e040      	b.n	800fd24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	4922      	ldr	r1, [pc, #136]	@ (800fd30 <inc_lock+0x118>)
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	011b      	lsls	r3, r3, #4
 800fcac:	440b      	add	r3, r1
 800fcae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689a      	ldr	r2, [r3, #8]
 800fcb4:	491e      	ldr	r1, [pc, #120]	@ (800fd30 <inc_lock+0x118>)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	011b      	lsls	r3, r3, #4
 800fcba:	440b      	add	r3, r1
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	695a      	ldr	r2, [r3, #20]
 800fcc4:	491a      	ldr	r1, [pc, #104]	@ (800fd30 <inc_lock+0x118>)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	011b      	lsls	r3, r3, #4
 800fcca:	440b      	add	r3, r1
 800fccc:	3308      	adds	r3, #8
 800fcce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fcd0:	4a17      	ldr	r2, [pc, #92]	@ (800fd30 <inc_lock+0x118>)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	011b      	lsls	r3, r3, #4
 800fcd6:	4413      	add	r3, r2
 800fcd8:	330c      	adds	r3, #12
 800fcda:	2200      	movs	r2, #0
 800fcdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d009      	beq.n	800fcf8 <inc_lock+0xe0>
 800fce4:	4a12      	ldr	r2, [pc, #72]	@ (800fd30 <inc_lock+0x118>)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	011b      	lsls	r3, r3, #4
 800fcea:	4413      	add	r3, r2
 800fcec:	330c      	adds	r3, #12
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <inc_lock+0xe0>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e015      	b.n	800fd24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d108      	bne.n	800fd10 <inc_lock+0xf8>
 800fcfe:	4a0c      	ldr	r2, [pc, #48]	@ (800fd30 <inc_lock+0x118>)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	011b      	lsls	r3, r3, #4
 800fd04:	4413      	add	r3, r2
 800fd06:	330c      	adds	r3, #12
 800fd08:	881b      	ldrh	r3, [r3, #0]
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	e001      	b.n	800fd14 <inc_lock+0xfc>
 800fd10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fd14:	4906      	ldr	r1, [pc, #24]	@ (800fd30 <inc_lock+0x118>)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	011b      	lsls	r3, r3, #4
 800fd1a:	440b      	add	r3, r1
 800fd1c:	330c      	adds	r3, #12
 800fd1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	3301      	adds	r3, #1
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3714      	adds	r7, #20
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	2001cab8 	.word	0x2001cab8

0800fd34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b085      	sub	sp, #20
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	607b      	str	r3, [r7, #4]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d825      	bhi.n	800fd94 <dec_lock+0x60>
		n = Files[i].ctr;
 800fd48:	4a17      	ldr	r2, [pc, #92]	@ (800fda8 <dec_lock+0x74>)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	011b      	lsls	r3, r3, #4
 800fd4e:	4413      	add	r3, r2
 800fd50:	330c      	adds	r3, #12
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fd56:	89fb      	ldrh	r3, [r7, #14]
 800fd58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd5c:	d101      	bne.n	800fd62 <dec_lock+0x2e>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fd62:	89fb      	ldrh	r3, [r7, #14]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <dec_lock+0x3a>
 800fd68:	89fb      	ldrh	r3, [r7, #14]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fd6e:	4a0e      	ldr	r2, [pc, #56]	@ (800fda8 <dec_lock+0x74>)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	4413      	add	r3, r2
 800fd76:	330c      	adds	r3, #12
 800fd78:	89fa      	ldrh	r2, [r7, #14]
 800fd7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd7c:	89fb      	ldrh	r3, [r7, #14]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d105      	bne.n	800fd8e <dec_lock+0x5a>
 800fd82:	4a09      	ldr	r2, [pc, #36]	@ (800fda8 <dec_lock+0x74>)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	011b      	lsls	r3, r3, #4
 800fd88:	4413      	add	r3, r2
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	737b      	strb	r3, [r7, #13]
 800fd92:	e001      	b.n	800fd98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fd94:	2302      	movs	r3, #2
 800fd96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fd98:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	2001cab8 	.word	0x2001cab8

0800fdac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	e010      	b.n	800fddc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fdba:	4a0d      	ldr	r2, [pc, #52]	@ (800fdf0 <clear_lock+0x44>)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	011b      	lsls	r3, r3, #4
 800fdc0:	4413      	add	r3, r2
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d105      	bne.n	800fdd6 <clear_lock+0x2a>
 800fdca:	4a09      	ldr	r2, [pc, #36]	@ (800fdf0 <clear_lock+0x44>)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	4413      	add	r3, r2
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d9eb      	bls.n	800fdba <clear_lock+0xe>
	}
}
 800fde2:	bf00      	nop
 800fde4:	bf00      	nop
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	2001cab8 	.word	0x2001cab8

0800fdf4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	78db      	ldrb	r3, [r3, #3]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d034      	beq.n	800fe72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	7858      	ldrb	r0, [r3, #1]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fe18:	2301      	movs	r3, #1
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	f7ff fd38 	bl	800f890 <disk_write>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800fe26:	2301      	movs	r3, #1
 800fe28:	73fb      	strb	r3, [r7, #15]
 800fe2a:	e022      	b.n	800fe72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	1ad2      	subs	r2, r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	69db      	ldr	r3, [r3, #28]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d217      	bcs.n	800fe72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	789b      	ldrb	r3, [r3, #2]
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	e010      	b.n	800fe6c <sync_window+0x78>
					wsect += fs->fsize;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	69db      	ldr	r3, [r3, #28]
 800fe4e:	697a      	ldr	r2, [r7, #20]
 800fe50:	4413      	add	r3, r2
 800fe52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7858      	ldrb	r0, [r3, #1]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fe5e:	2301      	movs	r3, #1
 800fe60:	697a      	ldr	r2, [r7, #20]
 800fe62:	f7ff fd15 	bl	800f890 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	613b      	str	r3, [r7, #16]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d8eb      	bhi.n	800fe4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe86:	2300      	movs	r3, #0
 800fe88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe8e:	683a      	ldr	r2, [r7, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d01b      	beq.n	800fecc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7ff ffad 	bl	800fdf4 <sync_window>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d113      	bne.n	800fecc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	7858      	ldrb	r0, [r3, #1]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800feae:	2301      	movs	r3, #1
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	f7ff fccd 	bl	800f850 <disk_read>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d004      	beq.n	800fec6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800febc:	f04f 33ff 	mov.w	r3, #4294967295
 800fec0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff ff87 	bl	800fdf4 <sync_window>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800feea:	7bfb      	ldrb	r3, [r7, #15]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d158      	bne.n	800ffa2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d148      	bne.n	800ff8a <sync_fs+0xb2>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	791b      	ldrb	r3, [r3, #4]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d144      	bne.n	800ff8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	3334      	adds	r3, #52	@ 0x34
 800ff04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff08:	2100      	movs	r1, #0
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7ff fda9 	bl	800fa62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3334      	adds	r3, #52	@ 0x34
 800ff14:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ff18:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff fd38 	bl	800f992 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3334      	adds	r3, #52	@ 0x34
 800ff26:	4921      	ldr	r1, [pc, #132]	@ (800ffac <sync_fs+0xd4>)
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7ff fd4d 	bl	800f9c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3334      	adds	r3, #52	@ 0x34
 800ff32:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ff36:	491e      	ldr	r1, [pc, #120]	@ (800ffb0 <sync_fs+0xd8>)
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7ff fd45 	bl	800f9c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3334      	adds	r3, #52	@ 0x34
 800ff42:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	695b      	ldr	r3, [r3, #20]
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	f7ff fd3b 	bl	800f9c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	3334      	adds	r3, #52	@ 0x34
 800ff56:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	4619      	mov	r1, r3
 800ff60:	4610      	mov	r0, r2
 800ff62:	f7ff fd31 	bl	800f9c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	1c5a      	adds	r2, r3, #1
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	7858      	ldrb	r0, [r3, #1]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f7ff fc86 	bl	800f890 <disk_write>
			fs->fsi_flag = 0;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	785b      	ldrb	r3, [r3, #1]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2100      	movs	r1, #0
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fc9c 	bl	800f8d0 <disk_ioctl>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <sync_fs+0xca>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ffa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	41615252 	.word	0x41615252
 800ffb0:	61417272 	.word	0x61417272

0800ffb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	3b02      	subs	r3, #2
 800ffc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	3b02      	subs	r3, #2
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d301      	bcc.n	800ffd4 <clust2sect+0x20>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	e008      	b.n	800ffe6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	895b      	ldrh	r3, [r3, #10]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	fb03 f202 	mul.w	r2, r3, r2
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe4:	4413      	add	r3, r2
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b086      	sub	sp, #24
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d904      	bls.n	8010012 <get_fat+0x20>
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	699b      	ldr	r3, [r3, #24]
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d302      	bcc.n	8010018 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010012:	2301      	movs	r3, #1
 8010014:	617b      	str	r3, [r7, #20]
 8010016:	e08e      	b.n	8010136 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010018:	f04f 33ff 	mov.w	r3, #4294967295
 801001c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b03      	cmp	r3, #3
 8010024:	d061      	beq.n	80100ea <get_fat+0xf8>
 8010026:	2b03      	cmp	r3, #3
 8010028:	dc7b      	bgt.n	8010122 <get_fat+0x130>
 801002a:	2b01      	cmp	r3, #1
 801002c:	d002      	beq.n	8010034 <get_fat+0x42>
 801002e:	2b02      	cmp	r3, #2
 8010030:	d041      	beq.n	80100b6 <get_fat+0xc4>
 8010032:	e076      	b.n	8010122 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	60fb      	str	r3, [r7, #12]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	085b      	lsrs	r3, r3, #1
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	0a5b      	lsrs	r3, r3, #9
 801004a:	4413      	add	r3, r2
 801004c:	4619      	mov	r1, r3
 801004e:	6938      	ldr	r0, [r7, #16]
 8010050:	f7ff ff14 	bl	800fe7c <move_window>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d166      	bne.n	8010128 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	60fa      	str	r2, [r7, #12]
 8010060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	4413      	add	r3, r2
 8010068:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801006c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	0a5b      	lsrs	r3, r3, #9
 8010076:	4413      	add	r3, r2
 8010078:	4619      	mov	r1, r3
 801007a:	6938      	ldr	r0, [r7, #16]
 801007c:	f7ff fefe 	bl	800fe7c <move_window>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d152      	bne.n	801012c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	4413      	add	r3, r2
 8010090:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010094:	021b      	lsls	r3, r3, #8
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	4313      	orrs	r3, r2
 801009a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	f003 0301 	and.w	r3, r3, #1
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <get_fat+0xba>
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	091b      	lsrs	r3, r3, #4
 80100aa:	e002      	b.n	80100b2 <get_fat+0xc0>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100b2:	617b      	str	r3, [r7, #20]
			break;
 80100b4:	e03f      	b.n	8010136 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	0a1b      	lsrs	r3, r3, #8
 80100be:	4413      	add	r3, r2
 80100c0:	4619      	mov	r1, r3
 80100c2:	6938      	ldr	r0, [r7, #16]
 80100c4:	f7ff feda 	bl	800fe7c <move_window>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d130      	bne.n	8010130 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80100dc:	4413      	add	r3, r2
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fc1c 	bl	800f91c <ld_word>
 80100e4:	4603      	mov	r3, r0
 80100e6:	617b      	str	r3, [r7, #20]
			break;
 80100e8:	e025      	b.n	8010136 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	09db      	lsrs	r3, r3, #7
 80100f2:	4413      	add	r3, r2
 80100f4:	4619      	mov	r1, r3
 80100f6:	6938      	ldr	r0, [r7, #16]
 80100f8:	f7ff fec0 	bl	800fe7c <move_window>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d118      	bne.n	8010134 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010110:	4413      	add	r3, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fc1a 	bl	800f94c <ld_dword>
 8010118:	4603      	mov	r3, r0
 801011a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801011e:	617b      	str	r3, [r7, #20]
			break;
 8010120:	e009      	b.n	8010136 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010122:	2301      	movs	r3, #1
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	e006      	b.n	8010136 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010128:	bf00      	nop
 801012a:	e004      	b.n	8010136 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801012c:	bf00      	nop
 801012e:	e002      	b.n	8010136 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010130:	bf00      	nop
 8010132:	e000      	b.n	8010136 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010134:	bf00      	nop
		}
	}

	return val;
 8010136:	697b      	ldr	r3, [r7, #20]
}
 8010138:	4618      	mov	r0, r3
 801013a:	3718      	adds	r7, #24
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010140:	b590      	push	{r4, r7, lr}
 8010142:	b089      	sub	sp, #36	@ 0x24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801014c:	2302      	movs	r3, #2
 801014e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	2b01      	cmp	r3, #1
 8010154:	f240 80d9 	bls.w	801030a <put_fat+0x1ca>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	699b      	ldr	r3, [r3, #24]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	429a      	cmp	r2, r3
 8010160:	f080 80d3 	bcs.w	801030a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2b03      	cmp	r3, #3
 801016a:	f000 8096 	beq.w	801029a <put_fat+0x15a>
 801016e:	2b03      	cmp	r3, #3
 8010170:	f300 80cb 	bgt.w	801030a <put_fat+0x1ca>
 8010174:	2b01      	cmp	r3, #1
 8010176:	d002      	beq.n	801017e <put_fat+0x3e>
 8010178:	2b02      	cmp	r3, #2
 801017a:	d06e      	beq.n	801025a <put_fat+0x11a>
 801017c:	e0c5      	b.n	801030a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	61bb      	str	r3, [r7, #24]
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	085b      	lsrs	r3, r3, #1
 8010186:	69ba      	ldr	r2, [r7, #24]
 8010188:	4413      	add	r3, r2
 801018a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	0a5b      	lsrs	r3, r3, #9
 8010194:	4413      	add	r3, r2
 8010196:	4619      	mov	r1, r3
 8010198:	68f8      	ldr	r0, [r7, #12]
 801019a:	f7ff fe6f 	bl	800fe7c <move_window>
 801019e:	4603      	mov	r3, r0
 80101a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101a2:	7ffb      	ldrb	r3, [r7, #31]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f040 80a9 	bne.w	80102fc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	1c59      	adds	r1, r3, #1
 80101b4:	61b9      	str	r1, [r7, #24]
 80101b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ba:	4413      	add	r3, r2
 80101bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00d      	beq.n	80101e4 <put_fat+0xa4>
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	b25b      	sxtb	r3, r3
 80101ce:	f003 030f 	and.w	r3, r3, #15
 80101d2:	b25a      	sxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	011b      	lsls	r3, r3, #4
 80101da:	b25b      	sxtb	r3, r3
 80101dc:	4313      	orrs	r3, r2
 80101de:	b25b      	sxtb	r3, r3
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	e001      	b.n	80101e8 <put_fat+0xa8>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2201      	movs	r2, #1
 80101f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	0a5b      	lsrs	r3, r3, #9
 80101fa:	4413      	add	r3, r2
 80101fc:	4619      	mov	r1, r3
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f7ff fe3c 	bl	800fe7c <move_window>
 8010204:	4603      	mov	r3, r0
 8010206:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010208:	7ffb      	ldrb	r3, [r7, #31]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d178      	bne.n	8010300 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801021a:	4413      	add	r3, r2
 801021c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	f003 0301 	and.w	r3, r3, #1
 8010224:	2b00      	cmp	r3, #0
 8010226:	d003      	beq.n	8010230 <put_fat+0xf0>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	091b      	lsrs	r3, r3, #4
 801022c:	b2db      	uxtb	r3, r3
 801022e:	e00e      	b.n	801024e <put_fat+0x10e>
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	b25b      	sxtb	r3, r3
 8010236:	f023 030f 	bic.w	r3, r3, #15
 801023a:	b25a      	sxtb	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	0a1b      	lsrs	r3, r3, #8
 8010240:	b25b      	sxtb	r3, r3
 8010242:	f003 030f 	and.w	r3, r3, #15
 8010246:	b25b      	sxtb	r3, r3
 8010248:	4313      	orrs	r3, r2
 801024a:	b25b      	sxtb	r3, r3
 801024c:	b2db      	uxtb	r3, r3
 801024e:	697a      	ldr	r2, [r7, #20]
 8010250:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	70da      	strb	r2, [r3, #3]
			break;
 8010258:	e057      	b.n	801030a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	0a1b      	lsrs	r3, r3, #8
 8010262:	4413      	add	r3, r2
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7ff fe08 	bl	800fe7c <move_window>
 801026c:	4603      	mov	r3, r0
 801026e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010270:	7ffb      	ldrb	r3, [r7, #31]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d146      	bne.n	8010304 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	005b      	lsls	r3, r3, #1
 8010280:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010284:	4413      	add	r3, r2
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	b292      	uxth	r2, r2
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fb80 	bl	800f992 <st_word>
			fs->wflag = 1;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2201      	movs	r2, #1
 8010296:	70da      	strb	r2, [r3, #3]
			break;
 8010298:	e037      	b.n	801030a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	09db      	lsrs	r3, r3, #7
 80102a2:	4413      	add	r3, r2
 80102a4:	4619      	mov	r1, r3
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fde8 	bl	800fe7c <move_window>
 80102ac:	4603      	mov	r3, r0
 80102ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102b0:	7ffb      	ldrb	r3, [r7, #31]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d128      	bne.n	8010308 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80102ca:	4413      	add	r3, r2
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff fb3d 	bl	800f94c <ld_dword>
 80102d2:	4603      	mov	r3, r0
 80102d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80102d8:	4323      	orrs	r3, r4
 80102da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80102ea:	4413      	add	r3, r2
 80102ec:	6879      	ldr	r1, [r7, #4]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7ff fb6a 	bl	800f9c8 <st_dword>
			fs->wflag = 1;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2201      	movs	r2, #1
 80102f8:	70da      	strb	r2, [r3, #3]
			break;
 80102fa:	e006      	b.n	801030a <put_fat+0x1ca>
			if (res != FR_OK) break;
 80102fc:	bf00      	nop
 80102fe:	e004      	b.n	801030a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010300:	bf00      	nop
 8010302:	e002      	b.n	801030a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010304:	bf00      	nop
 8010306:	e000      	b.n	801030a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010308:	bf00      	nop
		}
	}
	return res;
 801030a:	7ffb      	ldrb	r3, [r7, #31]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3724      	adds	r7, #36	@ 0x24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd90      	pop	{r4, r7, pc}

08010314 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010320:	2300      	movs	r3, #0
 8010322:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d904      	bls.n	801033a <remove_chain+0x26>
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	429a      	cmp	r2, r3
 8010338:	d301      	bcc.n	801033e <remove_chain+0x2a>
 801033a:	2302      	movs	r3, #2
 801033c:	e04b      	b.n	80103d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00c      	beq.n	801035e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010344:	f04f 32ff 	mov.w	r2, #4294967295
 8010348:	6879      	ldr	r1, [r7, #4]
 801034a:	69b8      	ldr	r0, [r7, #24]
 801034c:	f7ff fef8 	bl	8010140 <put_fat>
 8010350:	4603      	mov	r3, r0
 8010352:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010354:	7ffb      	ldrb	r3, [r7, #31]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <remove_chain+0x4a>
 801035a:	7ffb      	ldrb	r3, [r7, #31]
 801035c:	e03b      	b.n	80103d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801035e:	68b9      	ldr	r1, [r7, #8]
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f7ff fe46 	bl	800fff2 <get_fat>
 8010366:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d031      	beq.n	80103d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d101      	bne.n	8010378 <remove_chain+0x64>
 8010374:	2302      	movs	r3, #2
 8010376:	e02e      	b.n	80103d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037e:	d101      	bne.n	8010384 <remove_chain+0x70>
 8010380:	2301      	movs	r3, #1
 8010382:	e028      	b.n	80103d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010384:	2200      	movs	r2, #0
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	69b8      	ldr	r0, [r7, #24]
 801038a:	f7ff fed9 	bl	8010140 <put_fat>
 801038e:	4603      	mov	r3, r0
 8010390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010392:	7ffb      	ldrb	r3, [r7, #31]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <remove_chain+0x88>
 8010398:	7ffb      	ldrb	r3, [r7, #31]
 801039a:	e01c      	b.n	80103d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	695a      	ldr	r2, [r3, #20]
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	699b      	ldr	r3, [r3, #24]
 80103a4:	3b02      	subs	r3, #2
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d20b      	bcs.n	80103c2 <remove_chain+0xae>
			fs->free_clst++;
 80103aa:	69bb      	ldr	r3, [r7, #24]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	791b      	ldrb	r3, [r3, #4]
 80103b8:	f043 0301 	orr.w	r3, r3, #1
 80103bc:	b2da      	uxtb	r2, r3
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	699b      	ldr	r3, [r3, #24]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d3c6      	bcc.n	801035e <remove_chain+0x4a>
 80103d0:	e000      	b.n	80103d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80103d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3720      	adds	r7, #32
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b088      	sub	sp, #32
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10d      	bne.n	8010410 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d004      	beq.n	801040a <create_chain+0x2c>
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	699b      	ldr	r3, [r3, #24]
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	429a      	cmp	r2, r3
 8010408:	d31b      	bcc.n	8010442 <create_chain+0x64>
 801040a:	2301      	movs	r3, #1
 801040c:	61bb      	str	r3, [r7, #24]
 801040e:	e018      	b.n	8010442 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010410:	6839      	ldr	r1, [r7, #0]
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff fded 	bl	800fff2 <get_fat>
 8010418:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d801      	bhi.n	8010424 <create_chain+0x46>
 8010420:	2301      	movs	r3, #1
 8010422:	e070      	b.n	8010506 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042a:	d101      	bne.n	8010430 <create_chain+0x52>
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	e06a      	b.n	8010506 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	699b      	ldr	r3, [r3, #24]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	429a      	cmp	r2, r3
 8010438:	d201      	bcs.n	801043e <create_chain+0x60>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	e063      	b.n	8010506 <create_chain+0x128>
		scl = clst;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	3301      	adds	r3, #1
 801044a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	699b      	ldr	r3, [r3, #24]
 8010450:	69fa      	ldr	r2, [r7, #28]
 8010452:	429a      	cmp	r2, r3
 8010454:	d307      	bcc.n	8010466 <create_chain+0x88>
				ncl = 2;
 8010456:	2302      	movs	r3, #2
 8010458:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801045a:	69fa      	ldr	r2, [r7, #28]
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	429a      	cmp	r2, r3
 8010460:	d901      	bls.n	8010466 <create_chain+0x88>
 8010462:	2300      	movs	r3, #0
 8010464:	e04f      	b.n	8010506 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010466:	69f9      	ldr	r1, [r7, #28]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff fdc2 	bl	800fff2 <get_fat>
 801046e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00e      	beq.n	8010494 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d003      	beq.n	8010484 <create_chain+0xa6>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010482:	d101      	bne.n	8010488 <create_chain+0xaa>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	e03e      	b.n	8010506 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010488:	69fa      	ldr	r2, [r7, #28]
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	429a      	cmp	r2, r3
 801048e:	d1da      	bne.n	8010446 <create_chain+0x68>
 8010490:	2300      	movs	r3, #0
 8010492:	e038      	b.n	8010506 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010494:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010496:	f04f 32ff 	mov.w	r2, #4294967295
 801049a:	69f9      	ldr	r1, [r7, #28]
 801049c:	6938      	ldr	r0, [r7, #16]
 801049e:	f7ff fe4f 	bl	8010140 <put_fat>
 80104a2:	4603      	mov	r3, r0
 80104a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80104a6:	7dfb      	ldrb	r3, [r7, #23]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d109      	bne.n	80104c0 <create_chain+0xe2>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d006      	beq.n	80104c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80104b2:	69fa      	ldr	r2, [r7, #28]
 80104b4:	6839      	ldr	r1, [r7, #0]
 80104b6:	6938      	ldr	r0, [r7, #16]
 80104b8:	f7ff fe42 	bl	8010140 <put_fat>
 80104bc:	4603      	mov	r3, r0
 80104be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d116      	bne.n	80104f4 <create_chain+0x116>
		fs->last_clst = ncl;
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	695a      	ldr	r2, [r3, #20]
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	3b02      	subs	r3, #2
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d804      	bhi.n	80104e4 <create_chain+0x106>
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	1e5a      	subs	r2, r3, #1
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	791b      	ldrb	r3, [r3, #4]
 80104e8:	f043 0301 	orr.w	r3, r3, #1
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	711a      	strb	r2, [r3, #4]
 80104f2:	e007      	b.n	8010504 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80104f4:	7dfb      	ldrb	r3, [r7, #23]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d102      	bne.n	8010500 <create_chain+0x122>
 80104fa:	f04f 33ff 	mov.w	r3, #4294967295
 80104fe:	e000      	b.n	8010502 <create_chain+0x124>
 8010500:	2301      	movs	r3, #1
 8010502:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010504:	69fb      	ldr	r3, [r7, #28]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3720      	adds	r7, #32
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801050e:	b480      	push	{r7}
 8010510:	b087      	sub	sp, #28
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010522:	3304      	adds	r3, #4
 8010524:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	0a5b      	lsrs	r3, r3, #9
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	8952      	ldrh	r2, [r2, #10]
 801052e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010532:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	1d1a      	adds	r2, r3, #4
 8010538:	613a      	str	r2, [r7, #16]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <clmt_clust+0x3a>
 8010544:	2300      	movs	r3, #0
 8010546:	e010      	b.n	801056a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	429a      	cmp	r2, r3
 801054e:	d307      	bcc.n	8010560 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010550:	697a      	ldr	r2, [r7, #20]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	617b      	str	r3, [r7, #20]
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	3304      	adds	r3, #4
 801055c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801055e:	e7e9      	b.n	8010534 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010560:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	4413      	add	r3, r2
}
 801056a:	4618      	mov	r0, r3
 801056c:	371c      	adds	r7, #28
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b086      	sub	sp, #24
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801058c:	d204      	bcs.n	8010598 <dir_sdi+0x22>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	f003 031f 	and.w	r3, r3, #31
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010598:	2302      	movs	r3, #2
 801059a:	e063      	b.n	8010664 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	683a      	ldr	r2, [r7, #0]
 80105a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d106      	bne.n	80105bc <dir_sdi+0x46>
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	d902      	bls.n	80105bc <dir_sdi+0x46>
		clst = fs->dirbase;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10c      	bne.n	80105dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	095b      	lsrs	r3, r3, #5
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	8912      	ldrh	r2, [r2, #8]
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d301      	bcc.n	80105d2 <dir_sdi+0x5c>
 80105ce:	2302      	movs	r3, #2
 80105d0:	e048      	b.n	8010664 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	61da      	str	r2, [r3, #28]
 80105da:	e029      	b.n	8010630 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	895b      	ldrh	r3, [r3, #10]
 80105e0:	025b      	lsls	r3, r3, #9
 80105e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80105e4:	e019      	b.n	801061a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6979      	ldr	r1, [r7, #20]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7ff fd01 	bl	800fff2 <get_fat>
 80105f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f8:	d101      	bne.n	80105fe <dir_sdi+0x88>
 80105fa:	2301      	movs	r3, #1
 80105fc:	e032      	b.n	8010664 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	2b01      	cmp	r3, #1
 8010602:	d904      	bls.n	801060e <dir_sdi+0x98>
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	697a      	ldr	r2, [r7, #20]
 801060a:	429a      	cmp	r2, r3
 801060c:	d301      	bcc.n	8010612 <dir_sdi+0x9c>
 801060e:	2302      	movs	r3, #2
 8010610:	e028      	b.n	8010664 <dir_sdi+0xee>
			ofs -= csz;
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	1ad3      	subs	r3, r2, r3
 8010618:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801061a:	683a      	ldr	r2, [r7, #0]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	d2e1      	bcs.n	80105e6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010622:	6979      	ldr	r1, [r7, #20]
 8010624:	6938      	ldr	r0, [r7, #16]
 8010626:	f7ff fcc5 	bl	800ffb4 <clust2sect>
 801062a:	4602      	mov	r2, r0
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	69db      	ldr	r3, [r3, #28]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <dir_sdi+0xcc>
 801063e:	2302      	movs	r3, #2
 8010640:	e010      	b.n	8010664 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	69da      	ldr	r2, [r3, #28]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	0a5b      	lsrs	r3, r3, #9
 801064a:	441a      	add	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801065c:	441a      	add	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010662:	2300      	movs	r3, #0
}
 8010664:	4618      	mov	r0, r3
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b086      	sub	sp, #24
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	695b      	ldr	r3, [r3, #20]
 8010680:	3320      	adds	r3, #32
 8010682:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	69db      	ldr	r3, [r3, #28]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <dir_next+0x28>
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010692:	d301      	bcc.n	8010698 <dir_next+0x2c>
 8010694:	2304      	movs	r3, #4
 8010696:	e0aa      	b.n	80107ee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f040 8098 	bne.w	80107d4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	69db      	ldr	r3, [r3, #28]
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	699b      	ldr	r3, [r3, #24]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10b      	bne.n	80106ce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	095b      	lsrs	r3, r3, #5
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	8912      	ldrh	r2, [r2, #8]
 80106be:	4293      	cmp	r3, r2
 80106c0:	f0c0 8088 	bcc.w	80107d4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	61da      	str	r2, [r3, #28]
 80106ca:	2304      	movs	r3, #4
 80106cc:	e08f      	b.n	80107ee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	0a5b      	lsrs	r3, r3, #9
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	8952      	ldrh	r2, [r2, #10]
 80106d6:	3a01      	subs	r2, #1
 80106d8:	4013      	ands	r3, r2
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d17a      	bne.n	80107d4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	699b      	ldr	r3, [r3, #24]
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f7ff fc83 	bl	800fff2 <get_fat>
 80106ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d801      	bhi.n	80106f8 <dir_next+0x8c>
 80106f4:	2302      	movs	r3, #2
 80106f6:	e07a      	b.n	80107ee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106fe:	d101      	bne.n	8010704 <dir_next+0x98>
 8010700:	2301      	movs	r3, #1
 8010702:	e074      	b.n	80107ee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	699b      	ldr	r3, [r3, #24]
 8010708:	697a      	ldr	r2, [r7, #20]
 801070a:	429a      	cmp	r2, r3
 801070c:	d358      	bcc.n	80107c0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d104      	bne.n	801071e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	61da      	str	r2, [r3, #28]
 801071a:	2304      	movs	r3, #4
 801071c:	e067      	b.n	80107ee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	699b      	ldr	r3, [r3, #24]
 8010724:	4619      	mov	r1, r3
 8010726:	4610      	mov	r0, r2
 8010728:	f7ff fe59 	bl	80103de <create_chain>
 801072c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <dir_next+0xcc>
 8010734:	2307      	movs	r3, #7
 8010736:	e05a      	b.n	80107ee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d101      	bne.n	8010742 <dir_next+0xd6>
 801073e:	2302      	movs	r3, #2
 8010740:	e055      	b.n	80107ee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010748:	d101      	bne.n	801074e <dir_next+0xe2>
 801074a:	2301      	movs	r3, #1
 801074c:	e04f      	b.n	80107ee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f7ff fb50 	bl	800fdf4 <sync_window>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <dir_next+0xf2>
 801075a:	2301      	movs	r3, #1
 801075c:	e047      	b.n	80107ee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	3334      	adds	r3, #52	@ 0x34
 8010762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010766:	2100      	movs	r1, #0
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff f97a 	bl	800fa62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801076e:	2300      	movs	r3, #0
 8010770:	613b      	str	r3, [r7, #16]
 8010772:	6979      	ldr	r1, [r7, #20]
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7ff fc1d 	bl	800ffb4 <clust2sect>
 801077a:	4602      	mov	r2, r0
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010780:	e012      	b.n	80107a8 <dir_next+0x13c>
						fs->wflag = 1;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f7ff fb33 	bl	800fdf4 <sync_window>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d001      	beq.n	8010798 <dir_next+0x12c>
 8010794:	2301      	movs	r3, #1
 8010796:	e02a      	b.n	80107ee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	3301      	adds	r3, #1
 801079c:	613b      	str	r3, [r7, #16]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	895b      	ldrh	r3, [r3, #10]
 80107ac:	461a      	mov	r2, r3
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d3e6      	bcc.n	8010782 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	1ad2      	subs	r2, r2, r3
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80107c6:	6979      	ldr	r1, [r7, #20]
 80107c8:	68f8      	ldr	r0, [r7, #12]
 80107ca:	f7ff fbf3 	bl	800ffb4 <clust2sect>
 80107ce:	4602      	mov	r2, r0
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	68ba      	ldr	r2, [r7, #8]
 80107d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e6:	441a      	add	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3718      	adds	r7, #24
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b086      	sub	sp, #24
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010806:	2100      	movs	r1, #0
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff feb4 	bl	8010576 <dir_sdi>
 801080e:	4603      	mov	r3, r0
 8010810:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d12b      	bne.n	8010870 <dir_alloc+0x7a>
		n = 0;
 8010818:	2300      	movs	r3, #0
 801081a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	69db      	ldr	r3, [r3, #28]
 8010820:	4619      	mov	r1, r3
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff fb2a 	bl	800fe7c <move_window>
 8010828:	4603      	mov	r3, r0
 801082a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801082c:	7dfb      	ldrb	r3, [r7, #23]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d11d      	bne.n	801086e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2be5      	cmp	r3, #229	@ 0xe5
 801083a:	d004      	beq.n	8010846 <dir_alloc+0x50>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6a1b      	ldr	r3, [r3, #32]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d107      	bne.n	8010856 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	3301      	adds	r3, #1
 801084a:	613b      	str	r3, [r7, #16]
 801084c:	693a      	ldr	r2, [r7, #16]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	429a      	cmp	r2, r3
 8010852:	d102      	bne.n	801085a <dir_alloc+0x64>
 8010854:	e00c      	b.n	8010870 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010856:	2300      	movs	r3, #0
 8010858:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801085a:	2101      	movs	r1, #1
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7ff ff05 	bl	801066c <dir_next>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010866:	7dfb      	ldrb	r3, [r7, #23]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d0d7      	beq.n	801081c <dir_alloc+0x26>
 801086c:	e000      	b.n	8010870 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801086e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010870:	7dfb      	ldrb	r3, [r7, #23]
 8010872:	2b04      	cmp	r3, #4
 8010874:	d101      	bne.n	801087a <dir_alloc+0x84>
 8010876:	2307      	movs	r3, #7
 8010878:	75fb      	strb	r3, [r7, #23]
	return res;
 801087a:	7dfb      	ldrb	r3, [r7, #23]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3718      	adds	r7, #24
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	331a      	adds	r3, #26
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff f842 	bl	800f91c <ld_word>
 8010898:	4603      	mov	r3, r0
 801089a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	2b03      	cmp	r3, #3
 80108a2:	d109      	bne.n	80108b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	3314      	adds	r3, #20
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff f837 	bl	800f91c <ld_word>
 80108ae:	4603      	mov	r3, r0
 80108b0:	041b      	lsls	r3, r3, #16
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	4313      	orrs	r3, r2
 80108b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80108b8:	68fb      	ldr	r3, [r7, #12]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b084      	sub	sp, #16
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	60f8      	str	r0, [r7, #12]
 80108ca:	60b9      	str	r1, [r7, #8]
 80108cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	331a      	adds	r3, #26
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	b292      	uxth	r2, r2
 80108d6:	4611      	mov	r1, r2
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff f85a 	bl	800f992 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d109      	bne.n	80108fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	f103 0214 	add.w	r2, r3, #20
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	0c1b      	lsrs	r3, r3, #16
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	4619      	mov	r1, r3
 80108f4:	4610      	mov	r0, r2
 80108f6:	f7ff f84c 	bl	800f992 <st_word>
	}
}
 80108fa:	bf00      	nop
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
	...

08010904 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010904:	b590      	push	{r4, r7, lr}
 8010906:	b087      	sub	sp, #28
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	331a      	adds	r3, #26
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff f802 	bl	800f91c <ld_word>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d001      	beq.n	8010922 <cmp_lfn+0x1e>
 801091e:	2300      	movs	r3, #0
 8010920:	e059      	b.n	80109d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801092a:	1e5a      	subs	r2, r3, #1
 801092c:	4613      	mov	r3, r2
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	4413      	add	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010938:	2301      	movs	r3, #1
 801093a:	81fb      	strh	r3, [r7, #14]
 801093c:	2300      	movs	r3, #0
 801093e:	613b      	str	r3, [r7, #16]
 8010940:	e033      	b.n	80109aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010942:	4a27      	ldr	r2, [pc, #156]	@ (80109e0 <cmp_lfn+0xdc>)
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	4413      	add	r3, r2
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	461a      	mov	r2, r3
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	4413      	add	r3, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7fe ffe3 	bl	800f91c <ld_word>
 8010956:	4603      	mov	r3, r0
 8010958:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801095a:	89fb      	ldrh	r3, [r7, #14]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01a      	beq.n	8010996 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2bfe      	cmp	r3, #254	@ 0xfe
 8010964:	d812      	bhi.n	801098c <cmp_lfn+0x88>
 8010966:	89bb      	ldrh	r3, [r7, #12]
 8010968:	4618      	mov	r0, r3
 801096a:	f001 feff 	bl	801276c <ff_wtoupper>
 801096e:	4603      	mov	r3, r0
 8010970:	461c      	mov	r4, r3
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	617a      	str	r2, [r7, #20]
 8010978:	005b      	lsls	r3, r3, #1
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	4413      	add	r3, r2
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	4618      	mov	r0, r3
 8010982:	f001 fef3 	bl	801276c <ff_wtoupper>
 8010986:	4603      	mov	r3, r0
 8010988:	429c      	cmp	r4, r3
 801098a:	d001      	beq.n	8010990 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801098c:	2300      	movs	r3, #0
 801098e:	e022      	b.n	80109d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8010990:	89bb      	ldrh	r3, [r7, #12]
 8010992:	81fb      	strh	r3, [r7, #14]
 8010994:	e006      	b.n	80109a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010996:	89bb      	ldrh	r3, [r7, #12]
 8010998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801099c:	4293      	cmp	r3, r2
 801099e:	d001      	beq.n	80109a4 <cmp_lfn+0xa0>
 80109a0:	2300      	movs	r3, #0
 80109a2:	e018      	b.n	80109d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	3301      	adds	r3, #1
 80109a8:	613b      	str	r3, [r7, #16]
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	2b0c      	cmp	r3, #12
 80109ae:	d9c8      	bls.n	8010942 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00b      	beq.n	80109d4 <cmp_lfn+0xd0>
 80109bc:	89fb      	ldrh	r3, [r7, #14]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d008      	beq.n	80109d4 <cmp_lfn+0xd0>
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	005b      	lsls	r3, r3, #1
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	4413      	add	r3, r2
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <cmp_lfn+0xd0>
 80109d0:	2300      	movs	r3, #0
 80109d2:	e000      	b.n	80109d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80109d4:	2301      	movs	r3, #1
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	371c      	adds	r7, #28
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd90      	pop	{r4, r7, pc}
 80109de:	bf00      	nop
 80109e0:	0801410c 	.word	0x0801410c

080109e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b088      	sub	sp, #32
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	4611      	mov	r1, r2
 80109f0:	461a      	mov	r2, r3
 80109f2:	460b      	mov	r3, r1
 80109f4:	71fb      	strb	r3, [r7, #7]
 80109f6:	4613      	mov	r3, r2
 80109f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	330d      	adds	r3, #13
 80109fe:	79ba      	ldrb	r2, [r7, #6]
 8010a00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	330b      	adds	r3, #11
 8010a06:	220f      	movs	r2, #15
 8010a08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	330c      	adds	r3, #12
 8010a0e:	2200      	movs	r2, #0
 8010a10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	331a      	adds	r3, #26
 8010a16:	2100      	movs	r1, #0
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fe ffba 	bl	800f992 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010a1e:	79fb      	ldrb	r3, [r7, #7]
 8010a20:	1e5a      	subs	r2, r3, #1
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	82fb      	strh	r3, [r7, #22]
 8010a32:	2300      	movs	r3, #0
 8010a34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010a36:	8afb      	ldrh	r3, [r7, #22]
 8010a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d007      	beq.n	8010a50 <put_lfn+0x6c>
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	61fa      	str	r2, [r7, #28]
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010a50:	4a17      	ldr	r2, [pc, #92]	@ (8010ab0 <put_lfn+0xcc>)
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	4413      	add	r3, r2
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	8afa      	ldrh	r2, [r7, #22]
 8010a60:	4611      	mov	r1, r2
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fe ff95 	bl	800f992 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010a68:	8afb      	ldrh	r3, [r7, #22]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d102      	bne.n	8010a74 <put_lfn+0x90>
 8010a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	3301      	adds	r3, #1
 8010a78:	61bb      	str	r3, [r7, #24]
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	2b0c      	cmp	r3, #12
 8010a7e:	d9da      	bls.n	8010a36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010a80:	8afb      	ldrh	r3, [r7, #22]
 8010a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d006      	beq.n	8010a98 <put_lfn+0xb4>
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	4413      	add	r3, r2
 8010a92:	881b      	ldrh	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <put_lfn+0xbc>
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	79fa      	ldrb	r2, [r7, #7]
 8010aa4:	701a      	strb	r2, [r3, #0]
}
 8010aa6:	bf00      	nop
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	0801410c 	.word	0x0801410c

08010ab4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08c      	sub	sp, #48	@ 0x30
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
 8010ac0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010ac2:	220b      	movs	r2, #11
 8010ac4:	68b9      	ldr	r1, [r7, #8]
 8010ac6:	68f8      	ldr	r0, [r7, #12]
 8010ac8:	f7fe ffaa 	bl	800fa20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2b05      	cmp	r3, #5
 8010ad0:	d929      	bls.n	8010b26 <gen_numname+0x72>
		sr = seq;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010ad6:	e020      	b.n	8010b1a <gen_numname+0x66>
			wc = *lfn++;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	1c9a      	adds	r2, r3, #2
 8010adc:	607a      	str	r2, [r7, #4]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ae6:	e015      	b.n	8010b14 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	005a      	lsls	r2, r3, #1
 8010aec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	4413      	add	r3, r2
 8010af4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010af6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010af8:	085b      	lsrs	r3, r3, #1
 8010afa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d003      	beq.n	8010b0e <gen_numname+0x5a>
 8010b06:	69fa      	ldr	r2, [r7, #28]
 8010b08:	4b30      	ldr	r3, [pc, #192]	@ (8010bcc <gen_numname+0x118>)
 8010b0a:	4053      	eors	r3, r2
 8010b0c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b10:	3301      	adds	r3, #1
 8010b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b16:	2b0f      	cmp	r3, #15
 8010b18:	d9e6      	bls.n	8010ae8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1da      	bne.n	8010ad8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010b26:	2307      	movs	r3, #7
 8010b28:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	f003 030f 	and.w	r3, r3, #15
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	3330      	adds	r3, #48	@ 0x30
 8010b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b3e:	2b39      	cmp	r3, #57	@ 0x39
 8010b40:	d904      	bls.n	8010b4c <gen_numname+0x98>
 8010b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b46:	3307      	adds	r3, #7
 8010b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b4e:	1e5a      	subs	r2, r3, #1
 8010b50:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010b52:	3330      	adds	r3, #48	@ 0x30
 8010b54:	443b      	add	r3, r7
 8010b56:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010b5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	091b      	lsrs	r3, r3, #4
 8010b62:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d1df      	bne.n	8010b2a <gen_numname+0x76>
	ns[i] = '~';
 8010b6a:	f107 0214 	add.w	r2, r7, #20
 8010b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b70:	4413      	add	r3, r2
 8010b72:	227e      	movs	r2, #126	@ 0x7e
 8010b74:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010b76:	2300      	movs	r3, #0
 8010b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b7a:	e002      	b.n	8010b82 <gen_numname+0xce>
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7e:	3301      	adds	r3, #1
 8010b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d205      	bcs.n	8010b96 <gen_numname+0xe2>
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8e:	4413      	add	r3, r2
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b20      	cmp	r3, #32
 8010b94:	d1f2      	bne.n	8010b7c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b98:	2b07      	cmp	r3, #7
 8010b9a:	d807      	bhi.n	8010bac <gen_numname+0xf8>
 8010b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9e:	1c5a      	adds	r2, r3, #1
 8010ba0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010ba2:	3330      	adds	r3, #48	@ 0x30
 8010ba4:	443b      	add	r3, r7
 8010ba6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010baa:	e000      	b.n	8010bae <gen_numname+0xfa>
 8010bac:	2120      	movs	r1, #32
 8010bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb0:	1c5a      	adds	r2, r3, #1
 8010bb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	460a      	mov	r2, r1
 8010bba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bbe:	2b07      	cmp	r3, #7
 8010bc0:	d9e9      	bls.n	8010b96 <gen_numname+0xe2>
}
 8010bc2:	bf00      	nop
 8010bc4:	bf00      	nop
 8010bc6:	3730      	adds	r7, #48	@ 0x30
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	00011021 	.word	0x00011021

08010bd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010bdc:	230b      	movs	r3, #11
 8010bde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	b2da      	uxtb	r2, r3
 8010be4:	0852      	lsrs	r2, r2, #1
 8010be6:	01db      	lsls	r3, r3, #7
 8010be8:	4313      	orrs	r3, r2
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	1c59      	adds	r1, r3, #1
 8010bf0:	6079      	str	r1, [r7, #4]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	60bb      	str	r3, [r7, #8]
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1ed      	bne.n	8010be0 <sum_sfn+0x10>
	return sum;
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr

08010c12 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010c20:	2100      	movs	r1, #0
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff fca7 	bl	8010576 <dir_sdi>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d001      	beq.n	8010c36 <dir_find+0x24>
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	e0a9      	b.n	8010d8a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010c36:	23ff      	movs	r3, #255	@ 0xff
 8010c38:	753b      	strb	r3, [r7, #20]
 8010c3a:	7d3b      	ldrb	r3, [r7, #20]
 8010c3c:	757b      	strb	r3, [r7, #21]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f04f 32ff 	mov.w	r2, #4294967295
 8010c44:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	69db      	ldr	r3, [r3, #28]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	6938      	ldr	r0, [r7, #16]
 8010c4e:	f7ff f915 	bl	800fe7c <move_window>
 8010c52:	4603      	mov	r3, r0
 8010c54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f040 8090 	bne.w	8010d7e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010c66:	7dbb      	ldrb	r3, [r7, #22]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <dir_find+0x60>
 8010c6c:	2304      	movs	r3, #4
 8010c6e:	75fb      	strb	r3, [r7, #23]
 8010c70:	e08a      	b.n	8010d88 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a1b      	ldr	r3, [r3, #32]
 8010c76:	330b      	adds	r3, #11
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c7e:	73fb      	strb	r3, [r7, #15]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	7bfa      	ldrb	r2, [r7, #15]
 8010c84:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010c86:	7dbb      	ldrb	r3, [r7, #22]
 8010c88:	2be5      	cmp	r3, #229	@ 0xe5
 8010c8a:	d007      	beq.n	8010c9c <dir_find+0x8a>
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	f003 0308 	and.w	r3, r3, #8
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d009      	beq.n	8010caa <dir_find+0x98>
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	2b0f      	cmp	r3, #15
 8010c9a:	d006      	beq.n	8010caa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010c9c:	23ff      	movs	r3, #255	@ 0xff
 8010c9e:	757b      	strb	r3, [r7, #21]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca6:	631a      	str	r2, [r3, #48]	@ 0x30
 8010ca8:	e05e      	b.n	8010d68 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010caa:	7bfb      	ldrb	r3, [r7, #15]
 8010cac:	2b0f      	cmp	r3, #15
 8010cae:	d136      	bne.n	8010d1e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d154      	bne.n	8010d68 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010cbe:	7dbb      	ldrb	r3, [r7, #22]
 8010cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00d      	beq.n	8010ce4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6a1b      	ldr	r3, [r3, #32]
 8010ccc:	7b5b      	ldrb	r3, [r3, #13]
 8010cce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010cd0:	7dbb      	ldrb	r3, [r7, #22]
 8010cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cd6:	75bb      	strb	r3, [r7, #22]
 8010cd8:	7dbb      	ldrb	r3, [r7, #22]
 8010cda:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	695a      	ldr	r2, [r3, #20]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010ce4:	7dba      	ldrb	r2, [r7, #22]
 8010ce6:	7d7b      	ldrb	r3, [r7, #21]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d115      	bne.n	8010d18 <dir_find+0x106>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6a1b      	ldr	r3, [r3, #32]
 8010cf0:	330d      	adds	r3, #13
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	7d3a      	ldrb	r2, [r7, #20]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d10e      	bne.n	8010d18 <dir_find+0x106>
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	68da      	ldr	r2, [r3, #12]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a1b      	ldr	r3, [r3, #32]
 8010d02:	4619      	mov	r1, r3
 8010d04:	4610      	mov	r0, r2
 8010d06:	f7ff fdfd 	bl	8010904 <cmp_lfn>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d003      	beq.n	8010d18 <dir_find+0x106>
 8010d10:	7d7b      	ldrb	r3, [r7, #21]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	e000      	b.n	8010d1a <dir_find+0x108>
 8010d18:	23ff      	movs	r3, #255	@ 0xff
 8010d1a:	757b      	strb	r3, [r7, #21]
 8010d1c:	e024      	b.n	8010d68 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010d1e:	7d7b      	ldrb	r3, [r7, #21]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <dir_find+0x126>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a1b      	ldr	r3, [r3, #32]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7ff ff51 	bl	8010bd0 <sum_sfn>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	461a      	mov	r2, r3
 8010d32:	7d3b      	ldrb	r3, [r7, #20]
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d024      	beq.n	8010d82 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010d3e:	f003 0301 	and.w	r3, r3, #1
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d10a      	bne.n	8010d5c <dir_find+0x14a>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a18      	ldr	r0, [r3, #32]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	3324      	adds	r3, #36	@ 0x24
 8010d4e:	220b      	movs	r2, #11
 8010d50:	4619      	mov	r1, r3
 8010d52:	f7fe fea1 	bl	800fa98 <mem_cmp>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d014      	beq.n	8010d86 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010d5c:	23ff      	movs	r3, #255	@ 0xff
 8010d5e:	757b      	strb	r3, [r7, #21]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f04f 32ff 	mov.w	r2, #4294967295
 8010d66:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010d68:	2100      	movs	r1, #0
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7ff fc7e 	bl	801066c <dir_next>
 8010d70:	4603      	mov	r3, r0
 8010d72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f43f af65 	beq.w	8010c46 <dir_find+0x34>
 8010d7c:	e004      	b.n	8010d88 <dir_find+0x176>
		if (res != FR_OK) break;
 8010d7e:	bf00      	nop
 8010d80:	e002      	b.n	8010d88 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010d82:	bf00      	nop
 8010d84:	e000      	b.n	8010d88 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010d86:	bf00      	nop

	return res;
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3718      	adds	r7, #24
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
	...

08010d94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08c      	sub	sp, #48	@ 0x30
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010da8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <dir_register+0x20>
 8010db0:	2306      	movs	r3, #6
 8010db2:	e0e0      	b.n	8010f76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010db4:	2300      	movs	r3, #0
 8010db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010db8:	e002      	b.n	8010dc0 <dir_register+0x2c>
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	68da      	ldr	r2, [r3, #12]
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc6:	005b      	lsls	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
 8010dca:	881b      	ldrh	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1f4      	bne.n	8010dba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010dd6:	f107 030c 	add.w	r3, r7, #12
 8010dda:	220c      	movs	r2, #12
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe fe1f 	bl	800fa20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010de2:	7dfb      	ldrb	r3, [r7, #23]
 8010de4:	f003 0301 	and.w	r3, r3, #1
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d032      	beq.n	8010e52 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2240      	movs	r2, #64	@ 0x40
 8010df0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010df4:	2301      	movs	r3, #1
 8010df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010df8:	e016      	b.n	8010e28 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	68da      	ldr	r2, [r3, #12]
 8010e04:	f107 010c 	add.w	r1, r7, #12
 8010e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e0a:	f7ff fe53 	bl	8010ab4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff feff 	bl	8010c12 <dir_find>
 8010e14:	4603      	mov	r3, r0
 8010e16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e24:	3301      	adds	r3, #1
 8010e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2a:	2b63      	cmp	r3, #99	@ 0x63
 8010e2c:	d9e5      	bls.n	8010dfa <dir_register+0x66>
 8010e2e:	e000      	b.n	8010e32 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010e30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e34:	2b64      	cmp	r3, #100	@ 0x64
 8010e36:	d101      	bne.n	8010e3c <dir_register+0xa8>
 8010e38:	2307      	movs	r3, #7
 8010e3a:	e09c      	b.n	8010f76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d002      	beq.n	8010e4a <dir_register+0xb6>
 8010e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010e48:	e095      	b.n	8010f76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010e4a:	7dfa      	ldrb	r2, [r7, #23]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010e52:	7dfb      	ldrb	r3, [r7, #23]
 8010e54:	f003 0302 	and.w	r3, r3, #2
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d007      	beq.n	8010e6c <dir_register+0xd8>
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e5e:	330c      	adds	r3, #12
 8010e60:	4a47      	ldr	r2, [pc, #284]	@ (8010f80 <dir_register+0x1ec>)
 8010e62:	fba2 2303 	umull	r2, r3, r2, r3
 8010e66:	089b      	lsrs	r3, r3, #2
 8010e68:	3301      	adds	r3, #1
 8010e6a:	e000      	b.n	8010e6e <dir_register+0xda>
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010e70:	6a39      	ldr	r1, [r7, #32]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fcbf 	bl	80107f6 <dir_alloc>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d148      	bne.n	8010f18 <dir_register+0x184>
 8010e86:	6a3b      	ldr	r3, [r7, #32]
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	623b      	str	r3, [r7, #32]
 8010e8c:	6a3b      	ldr	r3, [r7, #32]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d042      	beq.n	8010f18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	695a      	ldr	r2, [r3, #20]
 8010e96:	6a3b      	ldr	r3, [r7, #32]
 8010e98:	015b      	lsls	r3, r3, #5
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f7ff fb69 	bl	8010576 <dir_sdi>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d132      	bne.n	8010f18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	3324      	adds	r3, #36	@ 0x24
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff fe8a 	bl	8010bd0 <sum_sfn>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	69db      	ldr	r3, [r3, #28]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	69f8      	ldr	r0, [r7, #28]
 8010ec8:	f7fe ffd8 	bl	800fe7c <move_window>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d11d      	bne.n	8010f16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	68d8      	ldr	r0, [r3, #12]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6a19      	ldr	r1, [r3, #32]
 8010ee2:	6a3b      	ldr	r3, [r7, #32]
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	7efb      	ldrb	r3, [r7, #27]
 8010ee8:	f7ff fd7c 	bl	80109e4 <put_lfn>
				fs->wflag = 1;
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff fbb9 	bl	801066c <dir_next>
 8010efa:	4603      	mov	r3, r0
 8010efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d107      	bne.n	8010f18 <dir_register+0x184>
 8010f08:	6a3b      	ldr	r3, [r7, #32]
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	623b      	str	r3, [r7, #32]
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1d5      	bne.n	8010ec0 <dir_register+0x12c>
 8010f14:	e000      	b.n	8010f18 <dir_register+0x184>
				if (res != FR_OK) break;
 8010f16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d128      	bne.n	8010f72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	69db      	ldr	r3, [r3, #28]
 8010f24:	4619      	mov	r1, r3
 8010f26:	69f8      	ldr	r0, [r7, #28]
 8010f28:	f7fe ffa8 	bl	800fe7c <move_window>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010f32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d11b      	bne.n	8010f72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6a1b      	ldr	r3, [r3, #32]
 8010f3e:	2220      	movs	r2, #32
 8010f40:	2100      	movs	r1, #0
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fe fd8d 	bl	800fa62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a18      	ldr	r0, [r3, #32]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	3324      	adds	r3, #36	@ 0x24
 8010f50:	220b      	movs	r2, #11
 8010f52:	4619      	mov	r1, r3
 8010f54:	f7fe fd64 	bl	800fa20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	330c      	adds	r3, #12
 8010f64:	f002 0218 	and.w	r2, r2, #24
 8010f68:	b2d2      	uxtb	r2, r2
 8010f6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3730      	adds	r7, #48	@ 0x30
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	4ec4ec4f 	.word	0x4ec4ec4f

08010f84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08a      	sub	sp, #40	@ 0x28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	613b      	str	r3, [r7, #16]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	60fb      	str	r3, [r7, #12]
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	617b      	str	r3, [r7, #20]
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010fa4:	69bb      	ldr	r3, [r7, #24]
 8010fa6:	1c5a      	adds	r2, r3, #1
 8010fa8:	61ba      	str	r2, [r7, #24]
 8010faa:	693a      	ldr	r2, [r7, #16]
 8010fac:	4413      	add	r3, r2
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb4:	2b1f      	cmp	r3, #31
 8010fb6:	d940      	bls.n	801103a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fba:	2b2f      	cmp	r3, #47	@ 0x2f
 8010fbc:	d006      	beq.n	8010fcc <create_name+0x48>
 8010fbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fc0:	2b5c      	cmp	r3, #92	@ 0x5c
 8010fc2:	d110      	bne.n	8010fe6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010fc4:	e002      	b.n	8010fcc <create_name+0x48>
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	3301      	adds	r3, #1
 8010fca:	61bb      	str	r3, [r7, #24]
 8010fcc:	693a      	ldr	r2, [r7, #16]
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8010fd6:	d0f6      	beq.n	8010fc6 <create_name+0x42>
 8010fd8:	693a      	ldr	r2, [r7, #16]
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	4413      	add	r3, r2
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	2b5c      	cmp	r3, #92	@ 0x5c
 8010fe2:	d0f0      	beq.n	8010fc6 <create_name+0x42>
			break;
 8010fe4:	e02a      	b.n	801103c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2bfe      	cmp	r3, #254	@ 0xfe
 8010fea:	d901      	bls.n	8010ff0 <create_name+0x6c>
 8010fec:	2306      	movs	r3, #6
 8010fee:	e17d      	b.n	80112ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f001 fb7a 	bl	80126f4 <ff_convert>
 8011000:	4603      	mov	r3, r0
 8011002:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011004:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011006:	2b00      	cmp	r3, #0
 8011008:	d101      	bne.n	801100e <create_name+0x8a>
 801100a:	2306      	movs	r3, #6
 801100c:	e16e      	b.n	80112ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801100e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011010:	2b7f      	cmp	r3, #127	@ 0x7f
 8011012:	d809      	bhi.n	8011028 <create_name+0xa4>
 8011014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011016:	4619      	mov	r1, r3
 8011018:	488d      	ldr	r0, [pc, #564]	@ (8011250 <create_name+0x2cc>)
 801101a:	f7fe fd64 	bl	800fae6 <chk_chr>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <create_name+0xa4>
 8011024:	2306      	movs	r3, #6
 8011026:	e161      	b.n	80112ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	617a      	str	r2, [r7, #20]
 801102e:	005b      	lsls	r3, r3, #1
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011036:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011038:	e7b4      	b.n	8010fa4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801103a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	441a      	add	r2, r3
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011048:	2b1f      	cmp	r3, #31
 801104a:	d801      	bhi.n	8011050 <create_name+0xcc>
 801104c:	2304      	movs	r3, #4
 801104e:	e000      	b.n	8011052 <create_name+0xce>
 8011050:	2300      	movs	r3, #0
 8011052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011056:	e011      	b.n	801107c <create_name+0xf8>
		w = lfn[di - 1];
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801105e:	4413      	add	r3, r2
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	4413      	add	r3, r2
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801106a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801106c:	2b20      	cmp	r3, #32
 801106e:	d002      	beq.n	8011076 <create_name+0xf2>
 8011070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011072:	2b2e      	cmp	r3, #46	@ 0x2e
 8011074:	d106      	bne.n	8011084 <create_name+0x100>
		di--;
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	3b01      	subs	r3, #1
 801107a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1ea      	bne.n	8011058 <create_name+0xd4>
 8011082:	e000      	b.n	8011086 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011084:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	005b      	lsls	r3, r3, #1
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	4413      	add	r3, r2
 801108e:	2200      	movs	r2, #0
 8011090:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <create_name+0x118>
 8011098:	2306      	movs	r3, #6
 801109a:	e127      	b.n	80112ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3324      	adds	r3, #36	@ 0x24
 80110a0:	220b      	movs	r2, #11
 80110a2:	2120      	movs	r1, #32
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe fcdc 	bl	800fa62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80110aa:	2300      	movs	r3, #0
 80110ac:	61bb      	str	r3, [r7, #24]
 80110ae:	e002      	b.n	80110b6 <create_name+0x132>
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	3301      	adds	r3, #1
 80110b4:	61bb      	str	r3, [r7, #24]
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	005b      	lsls	r3, r3, #1
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	4413      	add	r3, r2
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	2b20      	cmp	r3, #32
 80110c2:	d0f5      	beq.n	80110b0 <create_name+0x12c>
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	4413      	add	r3, r2
 80110cc:	881b      	ldrh	r3, [r3, #0]
 80110ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80110d0:	d0ee      	beq.n	80110b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d009      	beq.n	80110ec <create_name+0x168>
 80110d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110dc:	f043 0303 	orr.w	r3, r3, #3
 80110e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80110e4:	e002      	b.n	80110ec <create_name+0x168>
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	3b01      	subs	r3, #1
 80110ea:	617b      	str	r3, [r7, #20]
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d009      	beq.n	8011106 <create_name+0x182>
 80110f2:	697a      	ldr	r2, [r7, #20]
 80110f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80110f8:	4413      	add	r3, r2
 80110fa:	005b      	lsls	r3, r3, #1
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	4413      	add	r3, r2
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	2b2e      	cmp	r3, #46	@ 0x2e
 8011104:	d1ef      	bne.n	80110e6 <create_name+0x162>

	i = b = 0; ni = 8;
 8011106:	2300      	movs	r3, #0
 8011108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801110c:	2300      	movs	r3, #0
 801110e:	623b      	str	r3, [r7, #32]
 8011110:	2308      	movs	r3, #8
 8011112:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	61ba      	str	r2, [r7, #24]
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	68fa      	ldr	r2, [r7, #12]
 801111e:	4413      	add	r3, r2
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 8090 	beq.w	801124c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801112c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801112e:	2b20      	cmp	r3, #32
 8011130:	d006      	beq.n	8011140 <create_name+0x1bc>
 8011132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011134:	2b2e      	cmp	r3, #46	@ 0x2e
 8011136:	d10a      	bne.n	801114e <create_name+0x1ca>
 8011138:	69ba      	ldr	r2, [r7, #24]
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	429a      	cmp	r2, r3
 801113e:	d006      	beq.n	801114e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011144:	f043 0303 	orr.w	r3, r3, #3
 8011148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801114c:	e07d      	b.n	801124a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801114e:	6a3a      	ldr	r2, [r7, #32]
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	429a      	cmp	r2, r3
 8011154:	d203      	bcs.n	801115e <create_name+0x1da>
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	429a      	cmp	r2, r3
 801115c:	d123      	bne.n	80111a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	2b0b      	cmp	r3, #11
 8011162:	d106      	bne.n	8011172 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011168:	f043 0303 	orr.w	r3, r3, #3
 801116c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011170:	e075      	b.n	801125e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011172:	69ba      	ldr	r2, [r7, #24]
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	429a      	cmp	r2, r3
 8011178:	d005      	beq.n	8011186 <create_name+0x202>
 801117a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801117e:	f043 0303 	orr.w	r3, r3, #3
 8011182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8011186:	69ba      	ldr	r2, [r7, #24]
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	429a      	cmp	r2, r3
 801118c:	d866      	bhi.n	801125c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	61bb      	str	r3, [r7, #24]
 8011192:	2308      	movs	r3, #8
 8011194:	623b      	str	r3, [r7, #32]
 8011196:	230b      	movs	r3, #11
 8011198:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801119a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80111a4:	e051      	b.n	801124a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80111a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80111aa:	d914      	bls.n	80111d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80111ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111ae:	2100      	movs	r1, #0
 80111b0:	4618      	mov	r0, r3
 80111b2:	f001 fa9f 	bl	80126f4 <ff_convert>
 80111b6:	4603      	mov	r3, r0
 80111b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80111ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d004      	beq.n	80111ca <create_name+0x246>
 80111c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111c2:	3b80      	subs	r3, #128	@ 0x80
 80111c4:	4a23      	ldr	r2, [pc, #140]	@ (8011254 <create_name+0x2d0>)
 80111c6:	5cd3      	ldrb	r3, [r2, r3]
 80111c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80111ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111ce:	f043 0302 	orr.w	r3, r3, #2
 80111d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80111d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d007      	beq.n	80111ec <create_name+0x268>
 80111dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80111de:	4619      	mov	r1, r3
 80111e0:	481d      	ldr	r0, [pc, #116]	@ (8011258 <create_name+0x2d4>)
 80111e2:	f7fe fc80 	bl	800fae6 <chk_chr>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d008      	beq.n	80111fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80111ec:	235f      	movs	r3, #95	@ 0x5f
 80111ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80111f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111f4:	f043 0303 	orr.w	r3, r3, #3
 80111f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80111fc:	e01b      	b.n	8011236 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80111fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011200:	2b40      	cmp	r3, #64	@ 0x40
 8011202:	d909      	bls.n	8011218 <create_name+0x294>
 8011204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011206:	2b5a      	cmp	r3, #90	@ 0x5a
 8011208:	d806      	bhi.n	8011218 <create_name+0x294>
					b |= 2;
 801120a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801120e:	f043 0302 	orr.w	r3, r3, #2
 8011212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011216:	e00e      	b.n	8011236 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801121a:	2b60      	cmp	r3, #96	@ 0x60
 801121c:	d90b      	bls.n	8011236 <create_name+0x2b2>
 801121e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011220:	2b7a      	cmp	r3, #122	@ 0x7a
 8011222:	d808      	bhi.n	8011236 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011224:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011228:	f043 0301 	orr.w	r3, r3, #1
 801122c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011230:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011232:	3b20      	subs	r3, #32
 8011234:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	1c5a      	adds	r2, r3, #1
 801123a:	623a      	str	r2, [r7, #32]
 801123c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801123e:	b2d1      	uxtb	r1, r2
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	4413      	add	r3, r2
 8011244:	460a      	mov	r2, r1
 8011246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801124a:	e763      	b.n	8011114 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801124c:	bf00      	nop
 801124e:	e006      	b.n	801125e <create_name+0x2da>
 8011250:	08013b64 	.word	0x08013b64
 8011254:	0801408c 	.word	0x0801408c
 8011258:	08013b70 	.word	0x08013b70
			if (si > di) break;			/* No extension */
 801125c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011264:	2be5      	cmp	r3, #229	@ 0xe5
 8011266:	d103      	bne.n	8011270 <create_name+0x2ec>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2205      	movs	r2, #5
 801126c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	2b08      	cmp	r3, #8
 8011274:	d104      	bne.n	8011280 <create_name+0x2fc>
 8011276:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011284:	f003 030c 	and.w	r3, r3, #12
 8011288:	2b0c      	cmp	r3, #12
 801128a:	d005      	beq.n	8011298 <create_name+0x314>
 801128c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011290:	f003 0303 	and.w	r3, r3, #3
 8011294:	2b03      	cmp	r3, #3
 8011296:	d105      	bne.n	80112a4 <create_name+0x320>
 8011298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801129c:	f043 0302 	orr.w	r3, r3, #2
 80112a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80112a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112a8:	f003 0302 	and.w	r3, r3, #2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d117      	bne.n	80112e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80112b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112b4:	f003 0303 	and.w	r3, r3, #3
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d105      	bne.n	80112c8 <create_name+0x344>
 80112bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112c0:	f043 0310 	orr.w	r3, r3, #16
 80112c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80112c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112cc:	f003 030c 	and.w	r3, r3, #12
 80112d0:	2b04      	cmp	r3, #4
 80112d2:	d105      	bne.n	80112e0 <create_name+0x35c>
 80112d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112d8:	f043 0308 	orr.w	r3, r3, #8
 80112dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80112e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80112ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3728      	adds	r7, #40	@ 0x28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011308:	e002      	b.n	8011310 <follow_path+0x1c>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	3301      	adds	r3, #1
 801130e:	603b      	str	r3, [r7, #0]
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	2b2f      	cmp	r3, #47	@ 0x2f
 8011316:	d0f8      	beq.n	801130a <follow_path+0x16>
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b5c      	cmp	r3, #92	@ 0x5c
 801131e:	d0f4      	beq.n	801130a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	2200      	movs	r2, #0
 8011324:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	2b1f      	cmp	r3, #31
 801132c:	d80a      	bhi.n	8011344 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2280      	movs	r2, #128	@ 0x80
 8011332:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011336:	2100      	movs	r1, #0
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7ff f91c 	bl	8010576 <dir_sdi>
 801133e:	4603      	mov	r3, r0
 8011340:	75fb      	strb	r3, [r7, #23]
 8011342:	e043      	b.n	80113cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011344:	463b      	mov	r3, r7
 8011346:	4619      	mov	r1, r3
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7ff fe1b 	bl	8010f84 <create_name>
 801134e:	4603      	mov	r3, r0
 8011350:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011352:	7dfb      	ldrb	r3, [r7, #23]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d134      	bne.n	80113c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff fc5a 	bl	8010c12 <dir_find>
 801135e:	4603      	mov	r3, r0
 8011360:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011368:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00a      	beq.n	8011386 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	2b04      	cmp	r3, #4
 8011374:	d127      	bne.n	80113c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011376:	7afb      	ldrb	r3, [r7, #11]
 8011378:	f003 0304 	and.w	r3, r3, #4
 801137c:	2b00      	cmp	r3, #0
 801137e:	d122      	bne.n	80113c6 <follow_path+0xd2>
 8011380:	2305      	movs	r3, #5
 8011382:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011384:	e01f      	b.n	80113c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011386:	7afb      	ldrb	r3, [r7, #11]
 8011388:	f003 0304 	and.w	r3, r3, #4
 801138c:	2b00      	cmp	r3, #0
 801138e:	d11c      	bne.n	80113ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	799b      	ldrb	r3, [r3, #6]
 8011394:	f003 0310 	and.w	r3, r3, #16
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801139c:	2305      	movs	r3, #5
 801139e:	75fb      	strb	r3, [r7, #23]
 80113a0:	e014      	b.n	80113cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	695b      	ldr	r3, [r3, #20]
 80113ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113b0:	4413      	add	r3, r2
 80113b2:	4619      	mov	r1, r3
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f7ff fa65 	bl	8010884 <ld_clust>
 80113ba:	4602      	mov	r2, r0
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80113c0:	e7c0      	b.n	8011344 <follow_path+0x50>
			if (res != FR_OK) break;
 80113c2:	bf00      	nop
 80113c4:	e002      	b.n	80113cc <follow_path+0xd8>
				break;
 80113c6:	bf00      	nop
 80113c8:	e000      	b.n	80113cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80113ca:	bf00      	nop
			}
		}
	}

	return res;
 80113cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3718      	adds	r7, #24
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80113d6:	b480      	push	{r7}
 80113d8:	b087      	sub	sp, #28
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80113de:	f04f 33ff 	mov.w	r3, #4294967295
 80113e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d031      	beq.n	8011450 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	617b      	str	r3, [r7, #20]
 80113f2:	e002      	b.n	80113fa <get_ldnumber+0x24>
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	3301      	adds	r3, #1
 80113f8:	617b      	str	r3, [r7, #20]
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2b1f      	cmp	r3, #31
 8011400:	d903      	bls.n	801140a <get_ldnumber+0x34>
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	2b3a      	cmp	r3, #58	@ 0x3a
 8011408:	d1f4      	bne.n	80113f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011410:	d11c      	bne.n	801144c <get_ldnumber+0x76>
			tp = *path;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	1c5a      	adds	r2, r3, #1
 801141c:	60fa      	str	r2, [r7, #12]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	3b30      	subs	r3, #48	@ 0x30
 8011422:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b09      	cmp	r3, #9
 8011428:	d80e      	bhi.n	8011448 <get_ldnumber+0x72>
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	429a      	cmp	r2, r3
 8011430:	d10a      	bne.n	8011448 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d107      	bne.n	8011448 <get_ldnumber+0x72>
					vol = (int)i;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	3301      	adds	r3, #1
 8011440:	617b      	str	r3, [r7, #20]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	e002      	b.n	8011452 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801144c:	2300      	movs	r3, #0
 801144e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011450:	693b      	ldr	r3, [r7, #16]
}
 8011452:	4618      	mov	r0, r3
 8011454:	371c      	adds	r7, #28
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
	...

08011460 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	70da      	strb	r2, [r3, #3]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f04f 32ff 	mov.w	r2, #4294967295
 8011476:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011478:	6839      	ldr	r1, [r7, #0]
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fe fcfe 	bl	800fe7c <move_window>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <check_fs+0x2a>
 8011486:	2304      	movs	r3, #4
 8011488:	e038      	b.n	80114fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	3334      	adds	r3, #52	@ 0x34
 801148e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe fa42 	bl	800f91c <ld_word>
 8011498:	4603      	mov	r3, r0
 801149a:	461a      	mov	r2, r3
 801149c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d001      	beq.n	80114a8 <check_fs+0x48>
 80114a4:	2303      	movs	r3, #3
 80114a6:	e029      	b.n	80114fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80114ae:	2be9      	cmp	r3, #233	@ 0xe9
 80114b0:	d009      	beq.n	80114c6 <check_fs+0x66>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80114b8:	2beb      	cmp	r3, #235	@ 0xeb
 80114ba:	d11e      	bne.n	80114fa <check_fs+0x9a>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80114c2:	2b90      	cmp	r3, #144	@ 0x90
 80114c4:	d119      	bne.n	80114fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	3334      	adds	r3, #52	@ 0x34
 80114ca:	3336      	adds	r3, #54	@ 0x36
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe fa3d 	bl	800f94c <ld_dword>
 80114d2:	4603      	mov	r3, r0
 80114d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80114d8:	4a0a      	ldr	r2, [pc, #40]	@ (8011504 <check_fs+0xa4>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d101      	bne.n	80114e2 <check_fs+0x82>
 80114de:	2300      	movs	r3, #0
 80114e0:	e00c      	b.n	80114fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3334      	adds	r3, #52	@ 0x34
 80114e6:	3352      	adds	r3, #82	@ 0x52
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fe fa2f 	bl	800f94c <ld_dword>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4a05      	ldr	r2, [pc, #20]	@ (8011508 <check_fs+0xa8>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d101      	bne.n	80114fa <check_fs+0x9a>
 80114f6:	2300      	movs	r3, #0
 80114f8:	e000      	b.n	80114fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80114fa:	2302      	movs	r3, #2
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	00544146 	.word	0x00544146
 8011508:	33544146 	.word	0x33544146

0801150c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b096      	sub	sp, #88	@ 0x58
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	4613      	mov	r3, r2
 8011518:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7ff ff58 	bl	80113d6 <get_ldnumber>
 8011526:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801152a:	2b00      	cmp	r3, #0
 801152c:	da01      	bge.n	8011532 <find_volume+0x26>
 801152e:	230b      	movs	r3, #11
 8011530:	e22d      	b.n	801198e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011532:	4aa1      	ldr	r2, [pc, #644]	@ (80117b8 <find_volume+0x2ac>)
 8011534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801153a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <find_volume+0x3a>
 8011542:	230c      	movs	r3, #12
 8011544:	e223      	b.n	801198e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801154a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801154c:	79fb      	ldrb	r3, [r7, #7]
 801154e:	f023 0301 	bic.w	r3, r3, #1
 8011552:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01a      	beq.n	8011592 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155e:	785b      	ldrb	r3, [r3, #1]
 8011560:	4618      	mov	r0, r3
 8011562:	f7fe f933 	bl	800f7cc <disk_status>
 8011566:	4603      	mov	r3, r0
 8011568:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801156c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011570:	f003 0301 	and.w	r3, r3, #1
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10c      	bne.n	8011592 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011578:	79fb      	ldrb	r3, [r7, #7]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d007      	beq.n	801158e <find_volume+0x82>
 801157e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011582:	f003 0304 	and.w	r3, r3, #4
 8011586:	2b00      	cmp	r3, #0
 8011588:	d001      	beq.n	801158e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801158a:	230a      	movs	r3, #10
 801158c:	e1ff      	b.n	801198e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801158e:	2300      	movs	r3, #0
 8011590:	e1fd      	b.n	801198e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011594:	2200      	movs	r2, #0
 8011596:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801159a:	b2da      	uxtb	r2, r3
 801159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80115a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a2:	785b      	ldrb	r3, [r3, #1]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe f92b 	bl	800f800 <disk_initialize>
 80115aa:	4603      	mov	r3, r0
 80115ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80115b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115b4:	f003 0301 	and.w	r3, r3, #1
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80115bc:	2303      	movs	r3, #3
 80115be:	e1e6      	b.n	801198e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80115c0:	79fb      	ldrb	r3, [r7, #7]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <find_volume+0xca>
 80115c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ca:	f003 0304 	and.w	r3, r3, #4
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80115d2:	230a      	movs	r3, #10
 80115d4:	e1db      	b.n	801198e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80115da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80115dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80115de:	f7ff ff3f 	bl	8011460 <check_fs>
 80115e2:	4603      	mov	r3, r0
 80115e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80115e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115ec:	2b02      	cmp	r3, #2
 80115ee:	d149      	bne.n	8011684 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80115f0:	2300      	movs	r3, #0
 80115f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80115f4:	e01e      	b.n	8011634 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80115f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80115fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115fe:	011b      	lsls	r3, r3, #4
 8011600:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011604:	4413      	add	r3, r2
 8011606:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801160a:	3304      	adds	r3, #4
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d006      	beq.n	8011620 <find_volume+0x114>
 8011612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011614:	3308      	adds	r3, #8
 8011616:	4618      	mov	r0, r3
 8011618:	f7fe f998 	bl	800f94c <ld_dword>
 801161c:	4602      	mov	r2, r0
 801161e:	e000      	b.n	8011622 <find_volume+0x116>
 8011620:	2200      	movs	r2, #0
 8011622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	3358      	adds	r3, #88	@ 0x58
 8011628:	443b      	add	r3, r7
 801162a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801162e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011630:	3301      	adds	r3, #1
 8011632:	643b      	str	r3, [r7, #64]	@ 0x40
 8011634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011636:	2b03      	cmp	r3, #3
 8011638:	d9dd      	bls.n	80115f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801163a:	2300      	movs	r3, #0
 801163c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801163e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <find_volume+0x13e>
 8011644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011646:	3b01      	subs	r3, #1
 8011648:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801164a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801164c:	009b      	lsls	r3, r3, #2
 801164e:	3358      	adds	r3, #88	@ 0x58
 8011650:	443b      	add	r3, r7
 8011652:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011656:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801165a:	2b00      	cmp	r3, #0
 801165c:	d005      	beq.n	801166a <find_volume+0x15e>
 801165e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011660:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011662:	f7ff fefd 	bl	8011460 <check_fs>
 8011666:	4603      	mov	r3, r0
 8011668:	e000      	b.n	801166c <find_volume+0x160>
 801166a:	2303      	movs	r3, #3
 801166c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011670:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011674:	2b01      	cmp	r3, #1
 8011676:	d905      	bls.n	8011684 <find_volume+0x178>
 8011678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801167a:	3301      	adds	r3, #1
 801167c:	643b      	str	r3, [r7, #64]	@ 0x40
 801167e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011680:	2b03      	cmp	r3, #3
 8011682:	d9e2      	bls.n	801164a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011688:	2b04      	cmp	r3, #4
 801168a:	d101      	bne.n	8011690 <find_volume+0x184>
 801168c:	2301      	movs	r3, #1
 801168e:	e17e      	b.n	801198e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011690:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011694:	2b01      	cmp	r3, #1
 8011696:	d901      	bls.n	801169c <find_volume+0x190>
 8011698:	230d      	movs	r3, #13
 801169a:	e178      	b.n	801198e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169e:	3334      	adds	r3, #52	@ 0x34
 80116a0:	330b      	adds	r3, #11
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fe f93a 	bl	800f91c <ld_word>
 80116a8:	4603      	mov	r3, r0
 80116aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116ae:	d001      	beq.n	80116b4 <find_volume+0x1a8>
 80116b0:	230d      	movs	r3, #13
 80116b2:	e16c      	b.n	801198e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80116b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b6:	3334      	adds	r3, #52	@ 0x34
 80116b8:	3316      	adds	r3, #22
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fe f92e 	bl	800f91c <ld_word>
 80116c0:	4603      	mov	r3, r0
 80116c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80116c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d106      	bne.n	80116d8 <find_volume+0x1cc>
 80116ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116cc:	3334      	adds	r3, #52	@ 0x34
 80116ce:	3324      	adds	r3, #36	@ 0x24
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fe f93b 	bl	800f94c <ld_dword>
 80116d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80116d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80116de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80116e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80116e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ea:	789b      	ldrb	r3, [r3, #2]
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d005      	beq.n	80116fc <find_volume+0x1f0>
 80116f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f2:	789b      	ldrb	r3, [r3, #2]
 80116f4:	2b02      	cmp	r3, #2
 80116f6:	d001      	beq.n	80116fc <find_volume+0x1f0>
 80116f8:	230d      	movs	r3, #13
 80116fa:	e148      	b.n	801198e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80116fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fe:	789b      	ldrb	r3, [r3, #2]
 8011700:	461a      	mov	r2, r3
 8011702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011704:	fb02 f303 	mul.w	r3, r2, r3
 8011708:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801170a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011710:	461a      	mov	r2, r3
 8011712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011714:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011718:	895b      	ldrh	r3, [r3, #10]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d008      	beq.n	8011730 <find_volume+0x224>
 801171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011720:	895b      	ldrh	r3, [r3, #10]
 8011722:	461a      	mov	r2, r3
 8011724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011726:	895b      	ldrh	r3, [r3, #10]
 8011728:	3b01      	subs	r3, #1
 801172a:	4013      	ands	r3, r2
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <find_volume+0x228>
 8011730:	230d      	movs	r3, #13
 8011732:	e12c      	b.n	801198e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011736:	3334      	adds	r3, #52	@ 0x34
 8011738:	3311      	adds	r3, #17
 801173a:	4618      	mov	r0, r3
 801173c:	f7fe f8ee 	bl	800f91c <ld_word>
 8011740:	4603      	mov	r3, r0
 8011742:	461a      	mov	r2, r3
 8011744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011746:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174a:	891b      	ldrh	r3, [r3, #8]
 801174c:	f003 030f 	and.w	r3, r3, #15
 8011750:	b29b      	uxth	r3, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <find_volume+0x24e>
 8011756:	230d      	movs	r3, #13
 8011758:	e119      	b.n	801198e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175c:	3334      	adds	r3, #52	@ 0x34
 801175e:	3313      	adds	r3, #19
 8011760:	4618      	mov	r0, r3
 8011762:	f7fe f8db 	bl	800f91c <ld_word>
 8011766:	4603      	mov	r3, r0
 8011768:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801176a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801176c:	2b00      	cmp	r3, #0
 801176e:	d106      	bne.n	801177e <find_volume+0x272>
 8011770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011772:	3334      	adds	r3, #52	@ 0x34
 8011774:	3320      	adds	r3, #32
 8011776:	4618      	mov	r0, r3
 8011778:	f7fe f8e8 	bl	800f94c <ld_dword>
 801177c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011780:	3334      	adds	r3, #52	@ 0x34
 8011782:	330e      	adds	r3, #14
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe f8c9 	bl	800f91c <ld_word>
 801178a:	4603      	mov	r3, r0
 801178c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801178e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <find_volume+0x28c>
 8011794:	230d      	movs	r3, #13
 8011796:	e0fa      	b.n	801198e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011798:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801179a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801179c:	4413      	add	r3, r2
 801179e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117a0:	8912      	ldrh	r2, [r2, #8]
 80117a2:	0912      	lsrs	r2, r2, #4
 80117a4:	b292      	uxth	r2, r2
 80117a6:	4413      	add	r3, r2
 80117a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80117aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d204      	bcs.n	80117bc <find_volume+0x2b0>
 80117b2:	230d      	movs	r3, #13
 80117b4:	e0eb      	b.n	801198e <find_volume+0x482>
 80117b6:	bf00      	nop
 80117b8:	2001cab0 	.word	0x2001cab0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80117bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117c4:	8952      	ldrh	r2, [r2, #10]
 80117c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80117ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80117cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d101      	bne.n	80117d6 <find_volume+0x2ca>
 80117d2:	230d      	movs	r3, #13
 80117d4:	e0db      	b.n	801198e <find_volume+0x482>
		fmt = FS_FAT32;
 80117d6:	2303      	movs	r3, #3
 80117d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80117dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d802      	bhi.n	80117ec <find_volume+0x2e0>
 80117e6:	2302      	movs	r3, #2
 80117e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80117ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d802      	bhi.n	80117fc <find_volume+0x2f0>
 80117f6:	2301      	movs	r3, #1
 80117f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80117fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fe:	1c9a      	adds	r2, r3, #2
 8011800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011802:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011806:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011808:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801180a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801180c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801180e:	441a      	add	r2, r3
 8011810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011812:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011818:	441a      	add	r2, r3
 801181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801181c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801181e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011822:	2b03      	cmp	r3, #3
 8011824:	d11e      	bne.n	8011864 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	3334      	adds	r3, #52	@ 0x34
 801182a:	332a      	adds	r3, #42	@ 0x2a
 801182c:	4618      	mov	r0, r3
 801182e:	f7fe f875 	bl	800f91c <ld_word>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d001      	beq.n	801183c <find_volume+0x330>
 8011838:	230d      	movs	r3, #13
 801183a:	e0a8      	b.n	801198e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801183c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183e:	891b      	ldrh	r3, [r3, #8]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <find_volume+0x33c>
 8011844:	230d      	movs	r3, #13
 8011846:	e0a2      	b.n	801198e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801184a:	3334      	adds	r3, #52	@ 0x34
 801184c:	332c      	adds	r3, #44	@ 0x2c
 801184e:	4618      	mov	r0, r3
 8011850:	f7fe f87c 	bl	800f94c <ld_dword>
 8011854:	4602      	mov	r2, r0
 8011856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011858:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801185a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185c:	699b      	ldr	r3, [r3, #24]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	647b      	str	r3, [r7, #68]	@ 0x44
 8011862:	e01f      	b.n	80118a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	891b      	ldrh	r3, [r3, #8]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <find_volume+0x364>
 801186c:	230d      	movs	r3, #13
 801186e:	e08e      	b.n	801198e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011876:	441a      	add	r2, r3
 8011878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801187c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011880:	2b02      	cmp	r3, #2
 8011882:	d103      	bne.n	801188c <find_volume+0x380>
 8011884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	005b      	lsls	r3, r3, #1
 801188a:	e00a      	b.n	80118a2 <find_volume+0x396>
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	699a      	ldr	r2, [r3, #24]
 8011890:	4613      	mov	r3, r2
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	4413      	add	r3, r2
 8011896:	085a      	lsrs	r2, r3, #1
 8011898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189a:	699b      	ldr	r3, [r3, #24]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80118a2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80118a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a6:	69da      	ldr	r2, [r3, #28]
 80118a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80118ae:	0a5b      	lsrs	r3, r3, #9
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d201      	bcs.n	80118b8 <find_volume+0x3ac>
 80118b4:	230d      	movs	r3, #13
 80118b6:	e06a      	b.n	801198e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80118b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ba:	f04f 32ff 	mov.w	r2, #4294967295
 80118be:	615a      	str	r2, [r3, #20]
 80118c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c2:	695a      	ldr	r2, [r3, #20]
 80118c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80118c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ca:	2280      	movs	r2, #128	@ 0x80
 80118cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80118ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118d2:	2b03      	cmp	r3, #3
 80118d4:	d149      	bne.n	801196a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80118d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d8:	3334      	adds	r3, #52	@ 0x34
 80118da:	3330      	adds	r3, #48	@ 0x30
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fe f81d 	bl	800f91c <ld_word>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d140      	bne.n	801196a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80118e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118ea:	3301      	adds	r3, #1
 80118ec:	4619      	mov	r1, r3
 80118ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118f0:	f7fe fac4 	bl	800fe7c <move_window>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d137      	bne.n	801196a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80118fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118fc:	2200      	movs	r2, #0
 80118fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011902:	3334      	adds	r3, #52	@ 0x34
 8011904:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011908:	4618      	mov	r0, r3
 801190a:	f7fe f807 	bl	800f91c <ld_word>
 801190e:	4603      	mov	r3, r0
 8011910:	461a      	mov	r2, r3
 8011912:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011916:	429a      	cmp	r2, r3
 8011918:	d127      	bne.n	801196a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801191a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191c:	3334      	adds	r3, #52	@ 0x34
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe f814 	bl	800f94c <ld_dword>
 8011924:	4603      	mov	r3, r0
 8011926:	4a1c      	ldr	r2, [pc, #112]	@ (8011998 <find_volume+0x48c>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d11e      	bne.n	801196a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	3334      	adds	r3, #52	@ 0x34
 8011930:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011934:	4618      	mov	r0, r3
 8011936:	f7fe f809 	bl	800f94c <ld_dword>
 801193a:	4603      	mov	r3, r0
 801193c:	4a17      	ldr	r2, [pc, #92]	@ (801199c <find_volume+0x490>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d113      	bne.n	801196a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011944:	3334      	adds	r3, #52	@ 0x34
 8011946:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801194a:	4618      	mov	r0, r3
 801194c:	f7fd fffe 	bl	800f94c <ld_dword>
 8011950:	4602      	mov	r2, r0
 8011952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011954:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011958:	3334      	adds	r3, #52	@ 0x34
 801195a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801195e:	4618      	mov	r0, r3
 8011960:	f7fd fff4 	bl	800f94c <ld_dword>
 8011964:	4602      	mov	r2, r0
 8011966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011968:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011970:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011972:	4b0b      	ldr	r3, [pc, #44]	@ (80119a0 <find_volume+0x494>)
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	3301      	adds	r3, #1
 8011978:	b29a      	uxth	r2, r3
 801197a:	4b09      	ldr	r3, [pc, #36]	@ (80119a0 <find_volume+0x494>)
 801197c:	801a      	strh	r2, [r3, #0]
 801197e:	4b08      	ldr	r3, [pc, #32]	@ (80119a0 <find_volume+0x494>)
 8011980:	881a      	ldrh	r2, [r3, #0]
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011986:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011988:	f7fe fa10 	bl	800fdac <clear_lock>
#endif
	return FR_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3758      	adds	r7, #88	@ 0x58
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	41615252 	.word	0x41615252
 801199c:	61417272 	.word	0x61417272
 80119a0:	2001cab4 	.word	0x2001cab4

080119a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80119ae:	2309      	movs	r3, #9
 80119b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d01c      	beq.n	80119f2 <validate+0x4e>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d018      	beq.n	80119f2 <validate+0x4e>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d013      	beq.n	80119f2 <validate+0x4e>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	889a      	ldrh	r2, [r3, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	88db      	ldrh	r3, [r3, #6]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d10c      	bne.n	80119f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	785b      	ldrb	r3, [r3, #1]
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fd fef4 	bl	800f7cc <disk_status>
 80119e4:	4603      	mov	r3, r0
 80119e6:	f003 0301 	and.w	r3, r3, #1
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <validate+0x4e>
			res = FR_OK;
 80119ee:	2300      	movs	r3, #0
 80119f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80119f2:	7bfb      	ldrb	r3, [r7, #15]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d102      	bne.n	80119fe <validate+0x5a>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	e000      	b.n	8011a00 <validate+0x5c>
 80119fe:	2300      	movs	r3, #0
 8011a00:	683a      	ldr	r2, [r7, #0]
 8011a02:	6013      	str	r3, [r2, #0]
	return res;
 8011a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3710      	adds	r7, #16
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
	...

08011a10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b088      	sub	sp, #32
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	60f8      	str	r0, [r7, #12]
 8011a18:	60b9      	str	r1, [r7, #8]
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a22:	f107 0310 	add.w	r3, r7, #16
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7ff fcd5 	bl	80113d6 <get_ldnumber>
 8011a2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	da01      	bge.n	8011a38 <f_mount+0x28>
 8011a34:	230b      	movs	r3, #11
 8011a36:	e02b      	b.n	8011a90 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011a38:	4a17      	ldr	r2, [pc, #92]	@ (8011a98 <f_mount+0x88>)
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011a42:	69bb      	ldr	r3, [r7, #24]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d005      	beq.n	8011a54 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011a48:	69b8      	ldr	r0, [r7, #24]
 8011a4a:	f7fe f9af 	bl	800fdac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	2200      	movs	r2, #0
 8011a52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d002      	beq.n	8011a60 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	490d      	ldr	r1, [pc, #52]	@ (8011a98 <f_mount+0x88>)
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d002      	beq.n	8011a76 <f_mount+0x66>
 8011a70:	79fb      	ldrb	r3, [r7, #7]
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d001      	beq.n	8011a7a <f_mount+0x6a>
 8011a76:	2300      	movs	r3, #0
 8011a78:	e00a      	b.n	8011a90 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011a7a:	f107 010c 	add.w	r1, r7, #12
 8011a7e:	f107 0308 	add.w	r3, r7, #8
 8011a82:	2200      	movs	r2, #0
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7ff fd41 	bl	801150c <find_volume>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3720      	adds	r7, #32
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	2001cab0 	.word	0x2001cab0

08011a9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b09a      	sub	sp, #104	@ 0x68
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <f_open+0x18>
 8011ab0:	2309      	movs	r3, #9
 8011ab2:	e1b9      	b.n	8011e28 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011ab4:	79fb      	ldrb	r3, [r7, #7]
 8011ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011aba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011abc:	79fa      	ldrb	r2, [r7, #7]
 8011abe:	f107 0110 	add.w	r1, r7, #16
 8011ac2:	f107 0308 	add.w	r3, r7, #8
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff fd20 	bl	801150c <find_volume>
 8011acc:	4603      	mov	r3, r0
 8011ace:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f040 819d 	bne.w	8011e16 <f_open+0x37a>
		dj.obj.fs = fs;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8011ae0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011ae4:	f000 fdef 	bl	80126c6 <ff_memalloc>
 8011ae8:	65b8      	str	r0, [r7, #88]	@ 0x58
 8011aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d101      	bne.n	8011af4 <f_open+0x58>
 8011af0:	2311      	movs	r3, #17
 8011af2:	e199      	b.n	8011e28 <f_open+0x38c>
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011af8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	f107 0314 	add.w	r3, r7, #20
 8011b00:	4611      	mov	r1, r2
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7ff fbf6 	bl	80112f4 <follow_path>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d118      	bne.n	8011b48 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011b16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011b1a:	b25b      	sxtb	r3, r3
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	da03      	bge.n	8011b28 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8011b20:	2306      	movs	r3, #6
 8011b22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011b26:	e00f      	b.n	8011b48 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011b28:	79fb      	ldrb	r3, [r7, #7]
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	bf8c      	ite	hi
 8011b2e:	2301      	movhi	r3, #1
 8011b30:	2300      	movls	r3, #0
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	461a      	mov	r2, r3
 8011b36:	f107 0314 	add.w	r3, r7, #20
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7fd ffed 	bl	800fb1c <chk_lock>
 8011b42:	4603      	mov	r3, r0
 8011b44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011b48:	79fb      	ldrb	r3, [r7, #7]
 8011b4a:	f003 031c 	and.w	r3, r3, #28
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d07f      	beq.n	8011c52 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8011b52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d017      	beq.n	8011b8a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011b5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d10e      	bne.n	8011b80 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011b62:	f7fe f837 	bl	800fbd4 <enq_lock>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <f_open+0xde>
 8011b6c:	f107 0314 	add.w	r3, r7, #20
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff f90f 	bl	8010d94 <dir_register>
 8011b76:	4603      	mov	r3, r0
 8011b78:	e000      	b.n	8011b7c <f_open+0xe0>
 8011b7a:	2312      	movs	r3, #18
 8011b7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011b80:	79fb      	ldrb	r3, [r7, #7]
 8011b82:	f043 0308 	orr.w	r3, r3, #8
 8011b86:	71fb      	strb	r3, [r7, #7]
 8011b88:	e010      	b.n	8011bac <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011b8a:	7ebb      	ldrb	r3, [r7, #26]
 8011b8c:	f003 0311 	and.w	r3, r3, #17
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d003      	beq.n	8011b9c <f_open+0x100>
					res = FR_DENIED;
 8011b94:	2307      	movs	r3, #7
 8011b96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011b9a:	e007      	b.n	8011bac <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011b9c:	79fb      	ldrb	r3, [r7, #7]
 8011b9e:	f003 0304 	and.w	r3, r3, #4
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d002      	beq.n	8011bac <f_open+0x110>
 8011ba6:	2308      	movs	r3, #8
 8011ba8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011bac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d168      	bne.n	8011c86 <f_open+0x1ea>
 8011bb4:	79fb      	ldrb	r3, [r7, #7]
 8011bb6:	f003 0308 	and.w	r3, r3, #8
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d063      	beq.n	8011c86 <f_open+0x1ea>
				dw = GET_FATTIME();
 8011bbe:	f7fd fea5 	bl	800f90c <get_fattime>
 8011bc2:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bc6:	330e      	adds	r3, #14
 8011bc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fd fefc 	bl	800f9c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bd2:	3316      	adds	r3, #22
 8011bd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fd fef6 	bl	800f9c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bde:	330b      	adds	r3, #11
 8011be0:	2220      	movs	r2, #32
 8011be2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fe fe4a 	bl	8010884 <ld_clust>
 8011bf0:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7fe fe62 	bl	80108c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c00:	331c      	adds	r3, #28
 8011c02:	2100      	movs	r1, #0
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7fd fedf 	bl	800f9c8 <st_dword>
					fs->wflag = 1;
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d037      	beq.n	8011c86 <f_open+0x1ea>
						dw = fs->winsect;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c1a:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	2200      	movs	r2, #0
 8011c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fe fb75 	bl	8010314 <remove_chain>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011c30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d126      	bne.n	8011c86 <f_open+0x1ea>
							res = move_window(fs, dw);
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fe f91d 	bl	800fe7c <move_window>
 8011c42:	4603      	mov	r3, r0
 8011c44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c4c:	3a01      	subs	r2, #1
 8011c4e:	611a      	str	r2, [r3, #16]
 8011c50:	e019      	b.n	8011c86 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011c52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d115      	bne.n	8011c86 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011c5a:	7ebb      	ldrb	r3, [r7, #26]
 8011c5c:	f003 0310 	and.w	r3, r3, #16
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d003      	beq.n	8011c6c <f_open+0x1d0>
					res = FR_NO_FILE;
 8011c64:	2304      	movs	r3, #4
 8011c66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011c6a:	e00c      	b.n	8011c86 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011c6c:	79fb      	ldrb	r3, [r7, #7]
 8011c6e:	f003 0302 	and.w	r3, r3, #2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d007      	beq.n	8011c86 <f_open+0x1ea>
 8011c76:	7ebb      	ldrb	r3, [r7, #26]
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <f_open+0x1ea>
						res = FR_DENIED;
 8011c80:	2307      	movs	r3, #7
 8011c82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011c86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d126      	bne.n	8011cdc <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011c8e:	79fb      	ldrb	r3, [r7, #7]
 8011c90:	f003 0308 	and.w	r3, r3, #8
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <f_open+0x204>
				mode |= FA_MODIFIED;
 8011c98:	79fb      	ldrb	r3, [r7, #7]
 8011c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c9e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011ca8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011cae:	79fb      	ldrb	r3, [r7, #7]
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	bf8c      	ite	hi
 8011cb4:	2301      	movhi	r3, #1
 8011cb6:	2300      	movls	r3, #0
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	461a      	mov	r2, r3
 8011cbc:	f107 0314 	add.w	r3, r7, #20
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7fd ffa8 	bl	800fc18 <inc_lock>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	691b      	ldr	r3, [r3, #16]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d102      	bne.n	8011cdc <f_open+0x240>
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f040 8095 	bne.w	8011e10 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cea:	4611      	mov	r1, r2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fe fdc9 	bl	8010884 <ld_clust>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cfa:	331c      	adds	r3, #28
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fd fe25 	bl	800f94c <ld_dword>
 8011d02:	4602      	mov	r2, r0
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011d0e:	693a      	ldr	r2, [r7, #16]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	88da      	ldrh	r2, [r3, #6]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	79fa      	ldrb	r2, [r7, #7]
 8011d20:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2200      	movs	r2, #0
 8011d26:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2200      	movs	r2, #0
 8011d32:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	3330      	adds	r3, #48	@ 0x30
 8011d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fd fe8f 	bl	800fa62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011d44:	79fb      	ldrb	r3, [r7, #7]
 8011d46:	f003 0320 	and.w	r3, r3, #32
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d060      	beq.n	8011e10 <f_open+0x374>
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d05c      	beq.n	8011e10 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	68da      	ldr	r2, [r3, #12]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	895b      	ldrh	r3, [r3, #10]
 8011d62:	025b      	lsls	r3, r3, #9
 8011d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d72:	e016      	b.n	8011da2 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7fe f93a 	bl	800fff2 <get_fat>
 8011d7e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d802      	bhi.n	8011d8c <f_open+0x2f0>
 8011d86:	2302      	movs	r3, #2
 8011d88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011d8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d92:	d102      	bne.n	8011d9a <f_open+0x2fe>
 8011d94:	2301      	movs	r3, #1
 8011d96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011d9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011da2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d103      	bne.n	8011db2 <f_open+0x316>
 8011daa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d8e0      	bhi.n	8011d74 <f_open+0x2d8>
				}
				fp->clust = clst;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011db6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011db8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d127      	bne.n	8011e10 <f_open+0x374>
 8011dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d022      	beq.n	8011e10 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe f8f0 	bl	800ffb4 <clust2sect>
 8011dd4:	64b8      	str	r0, [r7, #72]	@ 0x48
 8011dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d103      	bne.n	8011de4 <f_open+0x348>
						res = FR_INT_ERR;
 8011ddc:	2302      	movs	r3, #2
 8011dde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011de2:	e015      	b.n	8011e10 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011de6:	0a5a      	lsrs	r2, r3, #9
 8011de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011dea:	441a      	add	r2, r3
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	7858      	ldrb	r0, [r3, #1]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	6a1a      	ldr	r2, [r3, #32]
 8011dfe:	2301      	movs	r3, #1
 8011e00:	f7fd fd26 	bl	800f850 <disk_read>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <f_open+0x374>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8011e10:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011e12:	f000 fc64 	bl	80126de <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011e16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d002      	beq.n	8011e24 <f_open+0x388>
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2200      	movs	r2, #0
 8011e22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011e24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3768      	adds	r7, #104	@ 0x68
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b08e      	sub	sp, #56	@ 0x38
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
 8011e3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	2200      	movs	r2, #0
 8011e46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f107 0214 	add.w	r2, r7, #20
 8011e4e:	4611      	mov	r1, r2
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7ff fda7 	bl	80119a4 <validate>
 8011e56:	4603      	mov	r3, r0
 8011e58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d107      	bne.n	8011e74 <f_read+0x44>
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	7d5b      	ldrb	r3, [r3, #21]
 8011e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <f_read+0x4a>
 8011e74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e78:	e115      	b.n	80120a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	7d1b      	ldrb	r3, [r3, #20]
 8011e7e:	f003 0301 	and.w	r3, r3, #1
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d101      	bne.n	8011e8a <f_read+0x5a>
 8011e86:	2307      	movs	r3, #7
 8011e88:	e10d      	b.n	80120a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	68da      	ldr	r2, [r3, #12]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	699b      	ldr	r3, [r3, #24]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	f240 80fe 	bls.w	801209c <f_read+0x26c>
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011ea4:	e0fa      	b.n	801209c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	699b      	ldr	r3, [r3, #24]
 8011eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f040 80c6 	bne.w	8012040 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	699b      	ldr	r3, [r3, #24]
 8011eb8:	0a5b      	lsrs	r3, r3, #9
 8011eba:	697a      	ldr	r2, [r7, #20]
 8011ebc:	8952      	ldrh	r2, [r2, #10]
 8011ebe:	3a01      	subs	r2, #1
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d12f      	bne.n	8011f2a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	699b      	ldr	r3, [r3, #24]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d103      	bne.n	8011eda <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ed8:	e013      	b.n	8011f02 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d007      	beq.n	8011ef2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	699b      	ldr	r3, [r3, #24]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f7fe fb10 	bl	801050e <clmt_clust>
 8011eee:	6338      	str	r0, [r7, #48]	@ 0x30
 8011ef0:	e007      	b.n	8011f02 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011ef2:	68fa      	ldr	r2, [r7, #12]
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	69db      	ldr	r3, [r3, #28]
 8011ef8:	4619      	mov	r1, r3
 8011efa:	4610      	mov	r0, r2
 8011efc:	f7fe f879 	bl	800fff2 <get_fat>
 8011f00:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d804      	bhi.n	8011f12 <f_read+0xe2>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2202      	movs	r2, #2
 8011f0c:	755a      	strb	r2, [r3, #21]
 8011f0e:	2302      	movs	r3, #2
 8011f10:	e0c9      	b.n	80120a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f18:	d104      	bne.n	8011f24 <f_read+0xf4>
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2201      	movs	r2, #1
 8011f1e:	755a      	strb	r2, [r3, #21]
 8011f20:	2301      	movs	r3, #1
 8011f22:	e0c0      	b.n	80120a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011f2a:	697a      	ldr	r2, [r7, #20]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	69db      	ldr	r3, [r3, #28]
 8011f30:	4619      	mov	r1, r3
 8011f32:	4610      	mov	r0, r2
 8011f34:	f7fe f83e 	bl	800ffb4 <clust2sect>
 8011f38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011f3a:	69bb      	ldr	r3, [r7, #24]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d104      	bne.n	8011f4a <f_read+0x11a>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2202      	movs	r2, #2
 8011f44:	755a      	strb	r2, [r3, #21]
 8011f46:	2302      	movs	r3, #2
 8011f48:	e0ad      	b.n	80120a6 <f_read+0x276>
			sect += csect;
 8011f4a:	69ba      	ldr	r2, [r7, #24]
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	4413      	add	r3, r2
 8011f50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	0a5b      	lsrs	r3, r3, #9
 8011f56:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d039      	beq.n	8011fd2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011f5e:	69fa      	ldr	r2, [r7, #28]
 8011f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f62:	4413      	add	r3, r2
 8011f64:	697a      	ldr	r2, [r7, #20]
 8011f66:	8952      	ldrh	r2, [r2, #10]
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d905      	bls.n	8011f78 <f_read+0x148>
					cc = fs->csize - csect;
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	895b      	ldrh	r3, [r3, #10]
 8011f70:	461a      	mov	r2, r3
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	1ad3      	subs	r3, r2, r3
 8011f76:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	7858      	ldrb	r0, [r3, #1]
 8011f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f7e:	69ba      	ldr	r2, [r7, #24]
 8011f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f82:	f7fd fc65 	bl	800f850 <disk_read>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d004      	beq.n	8011f96 <f_read+0x166>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	755a      	strb	r2, [r3, #21]
 8011f92:	2301      	movs	r3, #1
 8011f94:	e087      	b.n	80120a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	7d1b      	ldrb	r3, [r3, #20]
 8011f9a:	b25b      	sxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	da14      	bge.n	8011fca <f_read+0x19a>
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	6a1a      	ldr	r2, [r3, #32]
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	1ad3      	subs	r3, r2, r3
 8011fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d90d      	bls.n	8011fca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	6a1a      	ldr	r2, [r3, #32]
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	1ad3      	subs	r3, r2, r3
 8011fb6:	025b      	lsls	r3, r3, #9
 8011fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fba:	18d0      	adds	r0, r2, r3
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	3330      	adds	r3, #48	@ 0x30
 8011fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	f7fd fd2b 	bl	800fa20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fcc:	025b      	lsls	r3, r3, #9
 8011fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8011fd0:	e050      	b.n	8012074 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	69ba      	ldr	r2, [r7, #24]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d02e      	beq.n	801203a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	7d1b      	ldrb	r3, [r3, #20]
 8011fe0:	b25b      	sxtb	r3, r3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	da18      	bge.n	8012018 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	7858      	ldrb	r0, [r3, #1]
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6a1a      	ldr	r2, [r3, #32]
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	f7fd fc4b 	bl	800f890 <disk_write>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d004      	beq.n	801200a <f_read+0x1da>
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2201      	movs	r2, #1
 8012004:	755a      	strb	r2, [r3, #21]
 8012006:	2301      	movs	r3, #1
 8012008:	e04d      	b.n	80120a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	7d1b      	ldrb	r3, [r3, #20]
 801200e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012012:	b2da      	uxtb	r2, r3
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	7858      	ldrb	r0, [r3, #1]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012022:	2301      	movs	r3, #1
 8012024:	69ba      	ldr	r2, [r7, #24]
 8012026:	f7fd fc13 	bl	800f850 <disk_read>
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d004      	beq.n	801203a <f_read+0x20a>
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2201      	movs	r2, #1
 8012034:	755a      	strb	r2, [r3, #21]
 8012036:	2301      	movs	r3, #1
 8012038:	e035      	b.n	80120a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	69ba      	ldr	r2, [r7, #24]
 801203e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012048:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801204e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	429a      	cmp	r2, r3
 8012054:	d901      	bls.n	801205a <f_read+0x22a>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012068:	4413      	add	r3, r2
 801206a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801206c:	4619      	mov	r1, r3
 801206e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012070:	f7fd fcd6 	bl	800fa20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012078:	4413      	add	r3, r2
 801207a:	627b      	str	r3, [r7, #36]	@ 0x24
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	699a      	ldr	r2, [r3, #24]
 8012080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012082:	441a      	add	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	619a      	str	r2, [r3, #24]
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801208e:	441a      	add	r2, r3
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012098:	1ad3      	subs	r3, r2, r3
 801209a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f47f af01 	bne.w	8011ea6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3738      	adds	r7, #56	@ 0x38
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b086      	sub	sp, #24
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f107 0208 	add.w	r2, r7, #8
 80120bc:	4611      	mov	r1, r2
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff fc70 	bl	80119a4 <validate>
 80120c4:	4603      	mov	r3, r0
 80120c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80120c8:	7dfb      	ldrb	r3, [r7, #23]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d168      	bne.n	80121a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	7d1b      	ldrb	r3, [r3, #20]
 80120d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d062      	beq.n	80121a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	7d1b      	ldrb	r3, [r3, #20]
 80120de:	b25b      	sxtb	r3, r3
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	da15      	bge.n	8012110 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	7858      	ldrb	r0, [r3, #1]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a1a      	ldr	r2, [r3, #32]
 80120f2:	2301      	movs	r3, #1
 80120f4:	f7fd fbcc 	bl	800f890 <disk_write>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <f_sync+0x54>
 80120fe:	2301      	movs	r3, #1
 8012100:	e04f      	b.n	80121a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	7d1b      	ldrb	r3, [r3, #20]
 8012106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801210a:	b2da      	uxtb	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012110:	f7fd fbfc 	bl	800f90c <get_fattime>
 8012114:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801211c:	4619      	mov	r1, r3
 801211e:	4610      	mov	r0, r2
 8012120:	f7fd feac 	bl	800fe7c <move_window>
 8012124:	4603      	mov	r3, r0
 8012126:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012128:	7dfb      	ldrb	r3, [r7, #23]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d138      	bne.n	80121a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012132:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	330b      	adds	r3, #11
 8012138:	781a      	ldrb	r2, [r3, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	330b      	adds	r3, #11
 801213e:	f042 0220 	orr.w	r2, r2, #32
 8012142:	b2d2      	uxtb	r2, r2
 8012144:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	689b      	ldr	r3, [r3, #8]
 801214e:	461a      	mov	r2, r3
 8012150:	68f9      	ldr	r1, [r7, #12]
 8012152:	f7fe fbb6 	bl	80108c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f103 021c 	add.w	r2, r3, #28
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	4619      	mov	r1, r3
 8012162:	4610      	mov	r0, r2
 8012164:	f7fd fc30 	bl	800f9c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	3316      	adds	r3, #22
 801216c:	6939      	ldr	r1, [r7, #16]
 801216e:	4618      	mov	r0, r3
 8012170:	f7fd fc2a 	bl	800f9c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	3312      	adds	r3, #18
 8012178:	2100      	movs	r1, #0
 801217a:	4618      	mov	r0, r3
 801217c:	f7fd fc09 	bl	800f992 <st_word>
					fs->wflag = 1;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	2201      	movs	r2, #1
 8012184:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd fea5 	bl	800fed8 <sync_fs>
 801218e:	4603      	mov	r3, r0
 8012190:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	7d1b      	ldrb	r3, [r3, #20]
 8012196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801219a:	b2da      	uxtb	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3718      	adds	r7, #24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b084      	sub	sp, #16
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff ff7b 	bl	80120ae <f_sync>
 80121b8:	4603      	mov	r3, r0
 80121ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80121bc:	7bfb      	ldrb	r3, [r7, #15]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d118      	bne.n	80121f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f107 0208 	add.w	r2, r7, #8
 80121c8:	4611      	mov	r1, r2
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7ff fbea 	bl	80119a4 <validate>
 80121d0:	4603      	mov	r3, r0
 80121d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10c      	bne.n	80121f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fd fda8 	bl	800fd34 <dec_lock>
 80121e4:	4603      	mov	r3, r0
 80121e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d102      	bne.n	80121f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b090      	sub	sp, #64	@ 0x40
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f107 0208 	add.w	r2, r7, #8
 801220e:	4611      	mov	r1, r2
 8012210:	4618      	mov	r0, r3
 8012212:	f7ff fbc7 	bl	80119a4 <validate>
 8012216:	4603      	mov	r3, r0
 8012218:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801221c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012220:	2b00      	cmp	r3, #0
 8012222:	d103      	bne.n	801222c <f_lseek+0x2e>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	7d5b      	ldrb	r3, [r3, #21]
 8012228:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801222c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <f_lseek+0x3c>
 8012234:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012238:	e1e6      	b.n	8012608 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801223e:	2b00      	cmp	r3, #0
 8012240:	f000 80d1 	beq.w	80123e6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224a:	d15a      	bne.n	8012302 <f_lseek+0x104>
			tbl = fp->cltbl;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012250:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012254:	1d1a      	adds	r2, r3, #4
 8012256:	627a      	str	r2, [r7, #36]	@ 0x24
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	617b      	str	r3, [r7, #20]
 801225c:	2302      	movs	r3, #2
 801225e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012268:	2b00      	cmp	r3, #0
 801226a:	d03a      	beq.n	80122e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226e:	613b      	str	r3, [r7, #16]
 8012270:	2300      	movs	r3, #0
 8012272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012276:	3302      	adds	r3, #2
 8012278:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801227c:	60fb      	str	r3, [r7, #12]
 801227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012280:	3301      	adds	r3, #1
 8012282:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012288:	4618      	mov	r0, r3
 801228a:	f7fd feb2 	bl	800fff2 <get_fat>
 801228e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012292:	2b01      	cmp	r3, #1
 8012294:	d804      	bhi.n	80122a0 <f_lseek+0xa2>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2202      	movs	r2, #2
 801229a:	755a      	strb	r2, [r3, #21]
 801229c:	2302      	movs	r3, #2
 801229e:	e1b3      	b.n	8012608 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80122a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a6:	d104      	bne.n	80122b2 <f_lseek+0xb4>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	755a      	strb	r2, [r3, #21]
 80122ae:	2301      	movs	r3, #1
 80122b0:	e1aa      	b.n	8012608 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3301      	adds	r3, #1
 80122b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d0de      	beq.n	801227a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80122bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d809      	bhi.n	80122d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c6:	1d1a      	adds	r2, r3, #4
 80122c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80122ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122cc:	601a      	str	r2, [r3, #0]
 80122ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d0:	1d1a      	adds	r2, r3, #4
 80122d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80122d4:	693a      	ldr	r2, [r7, #16]
 80122d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	699b      	ldr	r3, [r3, #24]
 80122dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122de:	429a      	cmp	r2, r3
 80122e0:	d3c4      	bcc.n	801226c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80122ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d803      	bhi.n	80122fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80122f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f4:	2200      	movs	r2, #0
 80122f6:	601a      	str	r2, [r3, #0]
 80122f8:	e184      	b.n	8012604 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80122fa:	2311      	movs	r3, #17
 80122fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012300:	e180      	b.n	8012604 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	68db      	ldr	r3, [r3, #12]
 8012306:	683a      	ldr	r2, [r7, #0]
 8012308:	429a      	cmp	r2, r3
 801230a:	d902      	bls.n	8012312 <f_lseek+0x114>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	683a      	ldr	r2, [r7, #0]
 8012316:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	f000 8172 	beq.w	8012604 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	3b01      	subs	r3, #1
 8012324:	4619      	mov	r1, r3
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fe f8f1 	bl	801050e <clmt_clust>
 801232c:	4602      	mov	r2, r0
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012332:	68ba      	ldr	r2, [r7, #8]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	69db      	ldr	r3, [r3, #28]
 8012338:	4619      	mov	r1, r3
 801233a:	4610      	mov	r0, r2
 801233c:	f7fd fe3a 	bl	800ffb4 <clust2sect>
 8012340:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d104      	bne.n	8012352 <f_lseek+0x154>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2202      	movs	r2, #2
 801234c:	755a      	strb	r2, [r3, #21]
 801234e:	2302      	movs	r3, #2
 8012350:	e15a      	b.n	8012608 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	3b01      	subs	r3, #1
 8012356:	0a5b      	lsrs	r3, r3, #9
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	8952      	ldrh	r2, [r2, #10]
 801235c:	3a01      	subs	r2, #1
 801235e:	4013      	ands	r3, r2
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	4413      	add	r3, r2
 8012364:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	699b      	ldr	r3, [r3, #24]
 801236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801236e:	2b00      	cmp	r3, #0
 8012370:	f000 8148 	beq.w	8012604 <f_lseek+0x406>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	69ba      	ldr	r2, [r7, #24]
 801237a:	429a      	cmp	r2, r3
 801237c:	f000 8142 	beq.w	8012604 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7d1b      	ldrb	r3, [r3, #20]
 8012384:	b25b      	sxtb	r3, r3
 8012386:	2b00      	cmp	r3, #0
 8012388:	da18      	bge.n	80123bc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	7858      	ldrb	r0, [r3, #1]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6a1a      	ldr	r2, [r3, #32]
 8012398:	2301      	movs	r3, #1
 801239a:	f7fd fa79 	bl	800f890 <disk_write>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d004      	beq.n	80123ae <f_lseek+0x1b0>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	755a      	strb	r2, [r3, #21]
 80123aa:	2301      	movs	r3, #1
 80123ac:	e12c      	b.n	8012608 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7d1b      	ldrb	r3, [r3, #20]
 80123b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123b6:	b2da      	uxtb	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	7858      	ldrb	r0, [r3, #1]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80123c6:	2301      	movs	r3, #1
 80123c8:	69ba      	ldr	r2, [r7, #24]
 80123ca:	f7fd fa41 	bl	800f850 <disk_read>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d004      	beq.n	80123de <f_lseek+0x1e0>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2201      	movs	r2, #1
 80123d8:	755a      	strb	r2, [r3, #21]
 80123da:	2301      	movs	r3, #1
 80123dc:	e114      	b.n	8012608 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	69ba      	ldr	r2, [r7, #24]
 80123e2:	621a      	str	r2, [r3, #32]
 80123e4:	e10e      	b.n	8012604 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	683a      	ldr	r2, [r7, #0]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d908      	bls.n	8012402 <f_lseek+0x204>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	7d1b      	ldrb	r3, [r3, #20]
 80123f4:	f003 0302 	and.w	r3, r3, #2
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d102      	bne.n	8012402 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	699b      	ldr	r3, [r3, #24]
 8012406:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	637b      	str	r3, [r7, #52]	@ 0x34
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012410:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	f000 80a7 	beq.w	8012568 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	895b      	ldrh	r3, [r3, #10]
 801241e:	025b      	lsls	r3, r3, #9
 8012420:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012422:	6a3b      	ldr	r3, [r7, #32]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d01b      	beq.n	8012460 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	1e5a      	subs	r2, r3, #1
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	fbb2 f2f3 	udiv	r2, r2, r3
 8012432:	6a3b      	ldr	r3, [r7, #32]
 8012434:	1e59      	subs	r1, r3, #1
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801243c:	429a      	cmp	r2, r3
 801243e:	d30f      	bcc.n	8012460 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	1e5a      	subs	r2, r3, #1
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	425b      	negs	r3, r3
 8012448:	401a      	ands	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	699b      	ldr	r3, [r3, #24]
 8012452:	683a      	ldr	r2, [r7, #0]
 8012454:	1ad3      	subs	r3, r2, r3
 8012456:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801245e:	e022      	b.n	80124a6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	689b      	ldr	r3, [r3, #8]
 8012464:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012468:	2b00      	cmp	r3, #0
 801246a:	d119      	bne.n	80124a0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2100      	movs	r1, #0
 8012470:	4618      	mov	r0, r3
 8012472:	f7fd ffb4 	bl	80103de <create_chain>
 8012476:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801247a:	2b01      	cmp	r3, #1
 801247c:	d104      	bne.n	8012488 <f_lseek+0x28a>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2202      	movs	r2, #2
 8012482:	755a      	strb	r2, [r3, #21]
 8012484:	2302      	movs	r3, #2
 8012486:	e0bf      	b.n	8012608 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801248e:	d104      	bne.n	801249a <f_lseek+0x29c>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2201      	movs	r2, #1
 8012494:	755a      	strb	r2, [r3, #21]
 8012496:	2301      	movs	r3, #1
 8012498:	e0b6      	b.n	8012608 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801249e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80124a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d05d      	beq.n	8012568 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80124ac:	e03a      	b.n	8012524 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	1ad3      	subs	r3, r2, r3
 80124b4:	603b      	str	r3, [r7, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	699a      	ldr	r2, [r3, #24]
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	441a      	add	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	7d1b      	ldrb	r3, [r3, #20]
 80124c6:	f003 0302 	and.w	r3, r3, #2
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00b      	beq.n	80124e6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fd ff83 	bl	80103de <create_chain>
 80124d8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80124da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d108      	bne.n	80124f2 <f_lseek+0x2f4>
							ofs = 0; break;
 80124e0:	2300      	movs	r3, #0
 80124e2:	603b      	str	r3, [r7, #0]
 80124e4:	e022      	b.n	801252c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fd fd81 	bl	800fff2 <get_fat>
 80124f0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f8:	d104      	bne.n	8012504 <f_lseek+0x306>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	755a      	strb	r2, [r3, #21]
 8012500:	2301      	movs	r3, #1
 8012502:	e081      	b.n	8012608 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012506:	2b01      	cmp	r3, #1
 8012508:	d904      	bls.n	8012514 <f_lseek+0x316>
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	699b      	ldr	r3, [r3, #24]
 801250e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012510:	429a      	cmp	r2, r3
 8012512:	d304      	bcc.n	801251e <f_lseek+0x320>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2202      	movs	r2, #2
 8012518:	755a      	strb	r2, [r3, #21]
 801251a:	2302      	movs	r3, #2
 801251c:	e074      	b.n	8012608 <f_lseek+0x40a>
					fp->clust = clst;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012522:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012524:	683a      	ldr	r2, [r7, #0]
 8012526:	69fb      	ldr	r3, [r7, #28]
 8012528:	429a      	cmp	r2, r3
 801252a:	d8c0      	bhi.n	80124ae <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	699a      	ldr	r2, [r3, #24]
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	441a      	add	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801253e:	2b00      	cmp	r3, #0
 8012540:	d012      	beq.n	8012568 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012546:	4618      	mov	r0, r3
 8012548:	f7fd fd34 	bl	800ffb4 <clust2sect>
 801254c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012550:	2b00      	cmp	r3, #0
 8012552:	d104      	bne.n	801255e <f_lseek+0x360>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2202      	movs	r2, #2
 8012558:	755a      	strb	r2, [r3, #21]
 801255a:	2302      	movs	r3, #2
 801255c:	e054      	b.n	8012608 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	0a5b      	lsrs	r3, r3, #9
 8012562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012564:	4413      	add	r3, r2
 8012566:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	699a      	ldr	r2, [r3, #24]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	429a      	cmp	r2, r3
 8012572:	d90a      	bls.n	801258a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	699a      	ldr	r2, [r3, #24]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	7d1b      	ldrb	r3, [r3, #20]
 8012580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012584:	b2da      	uxtb	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	699b      	ldr	r3, [r3, #24]
 801258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012592:	2b00      	cmp	r3, #0
 8012594:	d036      	beq.n	8012604 <f_lseek+0x406>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a1b      	ldr	r3, [r3, #32]
 801259a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801259c:	429a      	cmp	r2, r3
 801259e:	d031      	beq.n	8012604 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	7d1b      	ldrb	r3, [r3, #20]
 80125a4:	b25b      	sxtb	r3, r3
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	da18      	bge.n	80125dc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	7858      	ldrb	r0, [r3, #1]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6a1a      	ldr	r2, [r3, #32]
 80125b8:	2301      	movs	r3, #1
 80125ba:	f7fd f969 	bl	800f890 <disk_write>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d004      	beq.n	80125ce <f_lseek+0x3d0>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2201      	movs	r2, #1
 80125c8:	755a      	strb	r2, [r3, #21]
 80125ca:	2301      	movs	r3, #1
 80125cc:	e01c      	b.n	8012608 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7d1b      	ldrb	r3, [r3, #20]
 80125d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	7858      	ldrb	r0, [r3, #1]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80125e6:	2301      	movs	r3, #1
 80125e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80125ea:	f7fd f931 	bl	800f850 <disk_read>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d004      	beq.n	80125fe <f_lseek+0x400>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2201      	movs	r2, #1
 80125f8:	755a      	strb	r2, [r3, #21]
 80125fa:	2301      	movs	r3, #1
 80125fc:	e004      	b.n	8012608 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012602:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012604:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012608:	4618      	mov	r0, r3
 801260a:	3740      	adds	r7, #64	@ 0x40
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012610:	b480      	push	{r7}
 8012612:	b087      	sub	sp, #28
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	4613      	mov	r3, r2
 801261c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801261e:	2301      	movs	r3, #1
 8012620:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012622:	2300      	movs	r3, #0
 8012624:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012626:	4b1f      	ldr	r3, [pc, #124]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012628:	7a5b      	ldrb	r3, [r3, #9]
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2b00      	cmp	r3, #0
 801262e:	d131      	bne.n	8012694 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012630:	4b1c      	ldr	r3, [pc, #112]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012632:	7a5b      	ldrb	r3, [r3, #9]
 8012634:	b2db      	uxtb	r3, r3
 8012636:	461a      	mov	r2, r3
 8012638:	4b1a      	ldr	r3, [pc, #104]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 801263a:	2100      	movs	r1, #0
 801263c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801263e:	4b19      	ldr	r3, [pc, #100]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012640:	7a5b      	ldrb	r3, [r3, #9]
 8012642:	b2db      	uxtb	r3, r3
 8012644:	4a17      	ldr	r2, [pc, #92]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801264e:	4b15      	ldr	r3, [pc, #84]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012650:	7a5b      	ldrb	r3, [r3, #9]
 8012652:	b2db      	uxtb	r3, r3
 8012654:	461a      	mov	r2, r3
 8012656:	4b13      	ldr	r3, [pc, #76]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012658:	4413      	add	r3, r2
 801265a:	79fa      	ldrb	r2, [r7, #7]
 801265c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801265e:	4b11      	ldr	r3, [pc, #68]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 8012660:	7a5b      	ldrb	r3, [r3, #9]
 8012662:	b2db      	uxtb	r3, r3
 8012664:	1c5a      	adds	r2, r3, #1
 8012666:	b2d1      	uxtb	r1, r2
 8012668:	4a0e      	ldr	r2, [pc, #56]	@ (80126a4 <FATFS_LinkDriverEx+0x94>)
 801266a:	7251      	strb	r1, [r2, #9]
 801266c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801266e:	7dbb      	ldrb	r3, [r7, #22]
 8012670:	3330      	adds	r3, #48	@ 0x30
 8012672:	b2da      	uxtb	r2, r3
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	3301      	adds	r3, #1
 801267c:	223a      	movs	r2, #58	@ 0x3a
 801267e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	3302      	adds	r3, #2
 8012684:	222f      	movs	r2, #47	@ 0x2f
 8012686:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	3303      	adds	r3, #3
 801268c:	2200      	movs	r2, #0
 801268e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012690:	2300      	movs	r3, #0
 8012692:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012694:	7dfb      	ldrb	r3, [r7, #23]
}
 8012696:	4618      	mov	r0, r3
 8012698:	371c      	adds	r7, #28
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	2001cad8 	.word	0x2001cad8

080126a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80126b2:	2200      	movs	r2, #0
 80126b4:	6839      	ldr	r1, [r7, #0]
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f7ff ffaa 	bl	8012610 <FATFS_LinkDriverEx>
 80126bc:	4603      	mov	r3, r0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b082      	sub	sp, #8
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 fc56 	bl	8012f80 <malloc>
 80126d4:	4603      	mov	r3, r0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f000 fc52 	bl	8012f90 <free>
}
 80126ec:	bf00      	nop
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b085      	sub	sp, #20
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	4603      	mov	r3, r0
 80126fc:	6039      	str	r1, [r7, #0]
 80126fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012700:	88fb      	ldrh	r3, [r7, #6]
 8012702:	2b7f      	cmp	r3, #127	@ 0x7f
 8012704:	d802      	bhi.n	801270c <ff_convert+0x18>
		c = chr;
 8012706:	88fb      	ldrh	r3, [r7, #6]
 8012708:	81fb      	strh	r3, [r7, #14]
 801270a:	e025      	b.n	8012758 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d00b      	beq.n	801272a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012712:	88fb      	ldrh	r3, [r7, #6]
 8012714:	2bff      	cmp	r3, #255	@ 0xff
 8012716:	d805      	bhi.n	8012724 <ff_convert+0x30>
 8012718:	88fb      	ldrh	r3, [r7, #6]
 801271a:	3b80      	subs	r3, #128	@ 0x80
 801271c:	4a12      	ldr	r2, [pc, #72]	@ (8012768 <ff_convert+0x74>)
 801271e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012722:	e000      	b.n	8012726 <ff_convert+0x32>
 8012724:	2300      	movs	r3, #0
 8012726:	81fb      	strh	r3, [r7, #14]
 8012728:	e016      	b.n	8012758 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801272a:	2300      	movs	r3, #0
 801272c:	81fb      	strh	r3, [r7, #14]
 801272e:	e009      	b.n	8012744 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012730:	89fb      	ldrh	r3, [r7, #14]
 8012732:	4a0d      	ldr	r2, [pc, #52]	@ (8012768 <ff_convert+0x74>)
 8012734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012738:	88fa      	ldrh	r2, [r7, #6]
 801273a:	429a      	cmp	r2, r3
 801273c:	d006      	beq.n	801274c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801273e:	89fb      	ldrh	r3, [r7, #14]
 8012740:	3301      	adds	r3, #1
 8012742:	81fb      	strh	r3, [r7, #14]
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	2b7f      	cmp	r3, #127	@ 0x7f
 8012748:	d9f2      	bls.n	8012730 <ff_convert+0x3c>
 801274a:	e000      	b.n	801274e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801274c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801274e:	89fb      	ldrh	r3, [r7, #14]
 8012750:	3380      	adds	r3, #128	@ 0x80
 8012752:	b29b      	uxth	r3, r3
 8012754:	b2db      	uxtb	r3, r3
 8012756:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012758:	89fb      	ldrh	r3, [r7, #14]
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	0801411c 	.word	0x0801411c

0801276c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801276c:	b480      	push	{r7}
 801276e:	b087      	sub	sp, #28
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012776:	88fb      	ldrh	r3, [r7, #6]
 8012778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801277c:	d201      	bcs.n	8012782 <ff_wtoupper+0x16>
 801277e:	4b3e      	ldr	r3, [pc, #248]	@ (8012878 <ff_wtoupper+0x10c>)
 8012780:	e000      	b.n	8012784 <ff_wtoupper+0x18>
 8012782:	4b3e      	ldr	r3, [pc, #248]	@ (801287c <ff_wtoupper+0x110>)
 8012784:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	1c9a      	adds	r2, r3, #2
 801278a:	617a      	str	r2, [r7, #20]
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012790:	8a7b      	ldrh	r3, [r7, #18]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d068      	beq.n	8012868 <ff_wtoupper+0xfc>
 8012796:	88fa      	ldrh	r2, [r7, #6]
 8012798:	8a7b      	ldrh	r3, [r7, #18]
 801279a:	429a      	cmp	r2, r3
 801279c:	d364      	bcc.n	8012868 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	1c9a      	adds	r2, r3, #2
 80127a2:	617a      	str	r2, [r7, #20]
 80127a4:	881b      	ldrh	r3, [r3, #0]
 80127a6:	823b      	strh	r3, [r7, #16]
 80127a8:	8a3b      	ldrh	r3, [r7, #16]
 80127aa:	0a1b      	lsrs	r3, r3, #8
 80127ac:	81fb      	strh	r3, [r7, #14]
 80127ae:	8a3b      	ldrh	r3, [r7, #16]
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80127b4:	88fa      	ldrh	r2, [r7, #6]
 80127b6:	8a79      	ldrh	r1, [r7, #18]
 80127b8:	8a3b      	ldrh	r3, [r7, #16]
 80127ba:	440b      	add	r3, r1
 80127bc:	429a      	cmp	r2, r3
 80127be:	da49      	bge.n	8012854 <ff_wtoupper+0xe8>
			switch (cmd) {
 80127c0:	89fb      	ldrh	r3, [r7, #14]
 80127c2:	2b08      	cmp	r3, #8
 80127c4:	d84f      	bhi.n	8012866 <ff_wtoupper+0xfa>
 80127c6:	a201      	add	r2, pc, #4	@ (adr r2, 80127cc <ff_wtoupper+0x60>)
 80127c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127cc:	080127f1 	.word	0x080127f1
 80127d0:	08012803 	.word	0x08012803
 80127d4:	08012819 	.word	0x08012819
 80127d8:	08012821 	.word	0x08012821
 80127dc:	08012829 	.word	0x08012829
 80127e0:	08012831 	.word	0x08012831
 80127e4:	08012839 	.word	0x08012839
 80127e8:	08012841 	.word	0x08012841
 80127ec:	08012849 	.word	0x08012849
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80127f0:	88fa      	ldrh	r2, [r7, #6]
 80127f2:	8a7b      	ldrh	r3, [r7, #18]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	005b      	lsls	r3, r3, #1
 80127f8:	697a      	ldr	r2, [r7, #20]
 80127fa:	4413      	add	r3, r2
 80127fc:	881b      	ldrh	r3, [r3, #0]
 80127fe:	80fb      	strh	r3, [r7, #6]
 8012800:	e027      	b.n	8012852 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012802:	88fa      	ldrh	r2, [r7, #6]
 8012804:	8a7b      	ldrh	r3, [r7, #18]
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	b29b      	uxth	r3, r3
 801280a:	f003 0301 	and.w	r3, r3, #1
 801280e:	b29b      	uxth	r3, r3
 8012810:	88fa      	ldrh	r2, [r7, #6]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	80fb      	strh	r3, [r7, #6]
 8012816:	e01c      	b.n	8012852 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012818:	88fb      	ldrh	r3, [r7, #6]
 801281a:	3b10      	subs	r3, #16
 801281c:	80fb      	strh	r3, [r7, #6]
 801281e:	e018      	b.n	8012852 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012820:	88fb      	ldrh	r3, [r7, #6]
 8012822:	3b20      	subs	r3, #32
 8012824:	80fb      	strh	r3, [r7, #6]
 8012826:	e014      	b.n	8012852 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012828:	88fb      	ldrh	r3, [r7, #6]
 801282a:	3b30      	subs	r3, #48	@ 0x30
 801282c:	80fb      	strh	r3, [r7, #6]
 801282e:	e010      	b.n	8012852 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012830:	88fb      	ldrh	r3, [r7, #6]
 8012832:	3b1a      	subs	r3, #26
 8012834:	80fb      	strh	r3, [r7, #6]
 8012836:	e00c      	b.n	8012852 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012838:	88fb      	ldrh	r3, [r7, #6]
 801283a:	3308      	adds	r3, #8
 801283c:	80fb      	strh	r3, [r7, #6]
 801283e:	e008      	b.n	8012852 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012840:	88fb      	ldrh	r3, [r7, #6]
 8012842:	3b50      	subs	r3, #80	@ 0x50
 8012844:	80fb      	strh	r3, [r7, #6]
 8012846:	e004      	b.n	8012852 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012848:	88fb      	ldrh	r3, [r7, #6]
 801284a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801284e:	80fb      	strh	r3, [r7, #6]
 8012850:	bf00      	nop
			}
			break;
 8012852:	e008      	b.n	8012866 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012854:	89fb      	ldrh	r3, [r7, #14]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d195      	bne.n	8012786 <ff_wtoupper+0x1a>
 801285a:	8a3b      	ldrh	r3, [r7, #16]
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	4413      	add	r3, r2
 8012862:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012864:	e78f      	b.n	8012786 <ff_wtoupper+0x1a>
			break;
 8012866:	bf00      	nop
	}

	return chr;
 8012868:	88fb      	ldrh	r3, [r7, #6]
}
 801286a:	4618      	mov	r0, r3
 801286c:	371c      	adds	r7, #28
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	0801421c 	.word	0x0801421c
 801287c:	08014410 	.word	0x08014410

08012880 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4a22      	ldr	r2, [pc, #136]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 801288e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	4a20      	ldr	r2, [pc, #128]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 8012896:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	689b      	ldr	r3, [r3, #8]
 801289c:	4a1e      	ldr	r2, [pc, #120]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 801289e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	4a1c      	ldr	r2, [pc, #112]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128a6:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	691b      	ldr	r3, [r3, #16]
 80128ac:	4a1a      	ldr	r2, [pc, #104]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128ae:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	4a18      	ldr	r2, [pc, #96]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128b6:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	699b      	ldr	r3, [r3, #24]
 80128bc:	4a16      	ldr	r2, [pc, #88]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128be:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	69db      	ldr	r3, [r3, #28]
 80128c4:	4a14      	ldr	r2, [pc, #80]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128c6:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a1b      	ldr	r3, [r3, #32]
 80128cc:	4a12      	ldr	r2, [pc, #72]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128ce:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128d4:	4a10      	ldr	r2, [pc, #64]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128d6:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128dc:	4a0e      	ldr	r2, [pc, #56]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128de:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 80128e0:	4b0e      	ldr	r3, [pc, #56]	@ (801291c <UTIL_LCD_SetFuncDriver+0x9c>)
 80128e2:	2200      	movs	r2, #0
 80128e4:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80128e6:	4b0d      	ldr	r3, [pc, #52]	@ (801291c <UTIL_LCD_SetFuncDriver+0x9c>)
 80128e8:	2200      	movs	r2, #0
 80128ea:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80128ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128ee:	69db      	ldr	r3, [r3, #28]
 80128f0:	4a0b      	ldr	r2, [pc, #44]	@ (8012920 <UTIL_LCD_SetFuncDriver+0xa0>)
 80128f2:	4611      	mov	r1, r2
 80128f4:	2000      	movs	r0, #0
 80128f6:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80128f8:	4b07      	ldr	r3, [pc, #28]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 80128fa:	6a1b      	ldr	r3, [r3, #32]
 80128fc:	4a09      	ldr	r2, [pc, #36]	@ (8012924 <UTIL_LCD_SetFuncDriver+0xa4>)
 80128fe:	4611      	mov	r1, r2
 8012900:	2000      	movs	r0, #0
 8012902:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8012904:	4b04      	ldr	r3, [pc, #16]	@ (8012918 <UTIL_LCD_SetFuncDriver+0x98>)
 8012906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012908:	4a07      	ldr	r2, [pc, #28]	@ (8012928 <UTIL_LCD_SetFuncDriver+0xa8>)
 801290a:	4611      	mov	r1, r2
 801290c:	2000      	movs	r0, #0
 801290e:	4798      	blx	r3
}
 8012910:	bf00      	nop
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	2001cb24 	.word	0x2001cb24
 801291c:	2001cae4 	.word	0x2001cae4
 8012920:	2001caf8 	.word	0x2001caf8
 8012924:	2001cafc 	.word	0x2001cafc
 8012928:	2001cb00 	.word	0x2001cb00

0801292c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8012934:	4b0a      	ldr	r3, [pc, #40]	@ (8012960 <UTIL_LCD_SetLayer+0x34>)
 8012936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00c      	beq.n	8012956 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801293c:	4b08      	ldr	r3, [pc, #32]	@ (8012960 <UTIL_LCD_SetLayer+0x34>)
 801293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012940:	4a08      	ldr	r2, [pc, #32]	@ (8012964 <UTIL_LCD_SetLayer+0x38>)
 8012942:	6912      	ldr	r2, [r2, #16]
 8012944:	6879      	ldr	r1, [r7, #4]
 8012946:	4610      	mov	r0, r2
 8012948:	4798      	blx	r3
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d102      	bne.n	8012956 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8012950:	4a04      	ldr	r2, [pc, #16]	@ (8012964 <UTIL_LCD_SetLayer+0x38>)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8012956:	bf00      	nop
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	2001cb24 	.word	0x2001cb24
 8012964:	2001cae4 	.word	0x2001cae4

08012968 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8012970:	4b06      	ldr	r3, [pc, #24]	@ (801298c <UTIL_LCD_SetTextColor+0x24>)
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	4a05      	ldr	r2, [pc, #20]	@ (801298c <UTIL_LCD_SetTextColor+0x24>)
 8012976:	015b      	lsls	r3, r3, #5
 8012978:	4413      	add	r3, r2
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	601a      	str	r2, [r3, #0]
}
 801297e:	bf00      	nop
 8012980:	370c      	adds	r7, #12
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	2001cae4 	.word	0x2001cae4

08012990 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8012998:	4b06      	ldr	r3, [pc, #24]	@ (80129b4 <UTIL_LCD_SetBackColor+0x24>)
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	4a05      	ldr	r2, [pc, #20]	@ (80129b4 <UTIL_LCD_SetBackColor+0x24>)
 801299e:	015b      	lsls	r3, r3, #5
 80129a0:	4413      	add	r3, r2
 80129a2:	3304      	adds	r3, #4
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	601a      	str	r2, [r3, #0]
}
 80129a8:	bf00      	nop
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr
 80129b4:	2001cae4 	.word	0x2001cae4

080129b8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80129c0:	4b06      	ldr	r3, [pc, #24]	@ (80129dc <UTIL_LCD_SetFont+0x24>)
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	4a05      	ldr	r2, [pc, #20]	@ (80129dc <UTIL_LCD_SetFont+0x24>)
 80129c6:	015b      	lsls	r3, r3, #5
 80129c8:	4413      	add	r3, r2
 80129ca:	3308      	adds	r3, #8
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	601a      	str	r2, [r3, #0]
}
 80129d0:	bf00      	nop
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	2001cae4 	.word	0x2001cae4

080129e0 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 80129e0:	b480      	push	{r7}
 80129e2:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 80129e4:	4b05      	ldr	r3, [pc, #20]	@ (80129fc <UTIL_LCD_GetFont+0x1c>)
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	4a04      	ldr	r2, [pc, #16]	@ (80129fc <UTIL_LCD_GetFont+0x1c>)
 80129ea:	015b      	lsls	r3, r3, #5
 80129ec:	4413      	add	r3, r2
 80129ee:	3308      	adds	r3, #8
 80129f0:	681b      	ldr	r3, [r3, #0]
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	2001cae4 	.word	0x2001cae4

08012a00 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8012a00:	b590      	push	{r4, r7, lr}
 8012a02:	b087      	sub	sp, #28
 8012a04:	af02      	add	r7, sp, #8
 8012a06:	60f8      	str	r0, [r7, #12]
 8012a08:	60b9      	str	r1, [r7, #8]
 8012a0a:	607a      	str	r2, [r7, #4]
 8012a0c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8012a0e:	4b08      	ldr	r3, [pc, #32]	@ (8012a30 <UTIL_LCD_FillRGBRect+0x30>)
 8012a10:	685c      	ldr	r4, [r3, #4]
 8012a12:	4b08      	ldr	r3, [pc, #32]	@ (8012a34 <UTIL_LCD_FillRGBRect+0x34>)
 8012a14:	6918      	ldr	r0, [r3, #16]
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	9301      	str	r3, [sp, #4]
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	9300      	str	r3, [sp, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	68f9      	ldr	r1, [r7, #12]
 8012a24:	47a0      	blx	r4
}
 8012a26:	bf00      	nop
 8012a28:	3714      	adds	r7, #20
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd90      	pop	{r4, r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	2001cb24 	.word	0x2001cb24
 8012a34:	2001cae4 	.word	0x2001cae4

08012a38 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af02      	add	r7, sp, #8
 8012a3e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8012a40:	4b07      	ldr	r3, [pc, #28]	@ (8012a60 <UTIL_LCD_Clear+0x28>)
 8012a42:	695a      	ldr	r2, [r3, #20]
 8012a44:	4b06      	ldr	r3, [pc, #24]	@ (8012a60 <UTIL_LCD_Clear+0x28>)
 8012a46:	6999      	ldr	r1, [r3, #24]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	2100      	movs	r1, #0
 8012a50:	2000      	movs	r0, #0
 8012a52:	f000 f901 	bl	8012c58 <UTIL_LCD_FillRect>
}
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	2001cae4 	.word	0x2001cae4

08012a64 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	4613      	mov	r3, r2
 8012a70:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8012a72:	4b16      	ldr	r3, [pc, #88]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	4a15      	ldr	r2, [pc, #84]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012a78:	015b      	lsls	r3, r3, #5
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3308      	adds	r3, #8
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	79fb      	ldrb	r3, [r7, #7]
 8012a84:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8012a86:	4911      	ldr	r1, [pc, #68]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012a88:	68c9      	ldr	r1, [r1, #12]
 8012a8a:	4810      	ldr	r0, [pc, #64]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012a8c:	0149      	lsls	r1, r1, #5
 8012a8e:	4401      	add	r1, r0
 8012a90:	3108      	adds	r1, #8
 8012a92:	6809      	ldr	r1, [r1, #0]
 8012a94:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8012a96:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8012a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	480b      	ldr	r0, [pc, #44]	@ (8012acc <UTIL_LCD_DisplayChar+0x68>)
 8012aa0:	015b      	lsls	r3, r3, #5
 8012aa2:	4403      	add	r3, r0
 8012aa4:	3308      	adds	r3, #8
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	889b      	ldrh	r3, [r3, #4]
 8012aaa:	3307      	adds	r3, #7
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	da00      	bge.n	8012ab2 <UTIL_LCD_DisplayChar+0x4e>
 8012ab0:	3307      	adds	r3, #7
 8012ab2:	10db      	asrs	r3, r3, #3
 8012ab4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8012ab8:	4413      	add	r3, r2
 8012aba:	461a      	mov	r2, r3
 8012abc:	68b9      	ldr	r1, [r7, #8]
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f000 f904 	bl	8012ccc <DrawChar>
}
 8012ac4:	bf00      	nop
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	2001cae4 	.word	0x2001cae4

08012ad0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08a      	sub	sp, #40	@ 0x28
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
 8012adc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	61fb      	str	r3, [r7, #28]
 8012aea:	2300      	movs	r3, #0
 8012aec:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8012af2:	e002      	b.n	8012afa <UTIL_LCD_DisplayStringAt+0x2a>
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	3301      	adds	r3, #1
 8012af8:	61fb      	str	r3, [r7, #28]
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	1c5a      	adds	r2, r3, #1
 8012afe:	61ba      	str	r2, [r7, #24]
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1f6      	bne.n	8012af4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8012b06:	4b48      	ldr	r3, [pc, #288]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b08:	695b      	ldr	r3, [r3, #20]
 8012b0a:	4a47      	ldr	r2, [pc, #284]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b0c:	68d2      	ldr	r2, [r2, #12]
 8012b0e:	4946      	ldr	r1, [pc, #280]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b10:	0152      	lsls	r2, r2, #5
 8012b12:	440a      	add	r2, r1
 8012b14:	3208      	adds	r2, #8
 8012b16:	6812      	ldr	r2, [r2, #0]
 8012b18:	8892      	ldrh	r2, [r2, #4]
 8012b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b1e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	2b03      	cmp	r3, #3
 8012b24:	d018      	beq.n	8012b58 <UTIL_LCD_DisplayStringAt+0x88>
 8012b26:	2b03      	cmp	r3, #3
 8012b28:	dc2a      	bgt.n	8012b80 <UTIL_LCD_DisplayStringAt+0xb0>
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d002      	beq.n	8012b34 <UTIL_LCD_DisplayStringAt+0x64>
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d015      	beq.n	8012b5e <UTIL_LCD_DisplayStringAt+0x8e>
 8012b32:	e025      	b.n	8012b80 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8012b34:	697a      	ldr	r2, [r7, #20]
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	1ad3      	subs	r3, r2, r3
 8012b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b3c:	68d2      	ldr	r2, [r2, #12]
 8012b3e:	493a      	ldr	r1, [pc, #232]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b40:	0152      	lsls	r2, r2, #5
 8012b42:	440a      	add	r2, r1
 8012b44:	3208      	adds	r2, #8
 8012b46:	6812      	ldr	r2, [r2, #0]
 8012b48:	8892      	ldrh	r2, [r2, #4]
 8012b4a:	fb02 f303 	mul.w	r3, r2, r3
 8012b4e:	085b      	lsrs	r3, r3, #1
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	4413      	add	r3, r2
 8012b54:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012b56:	e016      	b.n	8012b86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012b5c:	e013      	b.n	8012b86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8012b5e:	697a      	ldr	r2, [r7, #20]
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	1ad3      	subs	r3, r2, r3
 8012b64:	4a30      	ldr	r2, [pc, #192]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b66:	68d2      	ldr	r2, [r2, #12]
 8012b68:	492f      	ldr	r1, [pc, #188]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012b6a:	0152      	lsls	r2, r2, #5
 8012b6c:	440a      	add	r2, r1
 8012b6e:	3208      	adds	r2, #8
 8012b70:	6812      	ldr	r2, [r2, #0]
 8012b72:	8892      	ldrh	r2, [r2, #4]
 8012b74:	fb03 f202 	mul.w	r2, r3, r2
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012b7e:	e002      	b.n	8012b86 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012b84:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8012b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d003      	beq.n	8012b94 <UTIL_LCD_DisplayStringAt+0xc4>
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012b92:	d31b      	bcc.n	8012bcc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8012b94:	2301      	movs	r3, #1
 8012b96:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8012b98:	e018      	b.n	8012bcc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	68b9      	ldr	r1, [r7, #8]
 8012ba2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ba4:	f7ff ff5e 	bl	8012a64 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8012ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	4a1e      	ldr	r2, [pc, #120]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012bae:	015b      	lsls	r3, r3, #5
 8012bb0:	4413      	add	r3, r2
 8012bb2:	3308      	adds	r3, #8
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	889b      	ldrh	r3, [r3, #4]
 8012bb8:	461a      	mov	r2, r3
 8012bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bbc:	4413      	add	r3, r2
 8012bbe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	607b      	str	r3, [r7, #4]
    i++;
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	bf14      	ite	ne
 8012bd4:	2301      	movne	r3, #1
 8012bd6:	2300      	moveq	r3, #0
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	4b13      	ldr	r3, [pc, #76]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012bdc:	6959      	ldr	r1, [r3, #20]
 8012bde:	4b12      	ldr	r3, [pc, #72]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	4811      	ldr	r0, [pc, #68]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012be4:	015b      	lsls	r3, r3, #5
 8012be6:	4403      	add	r3, r0
 8012be8:	3308      	adds	r3, #8
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	889b      	ldrh	r3, [r3, #4]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	6a3b      	ldr	r3, [r7, #32]
 8012bf2:	fb00 f303 	mul.w	r3, r0, r3
 8012bf6:	1acb      	subs	r3, r1, r3
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	490b      	ldr	r1, [pc, #44]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012bfc:	68c9      	ldr	r1, [r1, #12]
 8012bfe:	480a      	ldr	r0, [pc, #40]	@ (8012c28 <UTIL_LCD_DisplayStringAt+0x158>)
 8012c00:	0149      	lsls	r1, r1, #5
 8012c02:	4401      	add	r1, r0
 8012c04:	3108      	adds	r1, #8
 8012c06:	6809      	ldr	r1, [r1, #0]
 8012c08:	8889      	ldrh	r1, [r1, #4]
 8012c0a:	428b      	cmp	r3, r1
 8012c0c:	bf2c      	ite	cs
 8012c0e:	2301      	movcs	r3, #1
 8012c10:	2300      	movcc	r3, #0
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	4013      	ands	r3, r2
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1be      	bne.n	8012b9a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8012c1c:	bf00      	nop
 8012c1e:	bf00      	nop
 8012c20:	3728      	adds	r7, #40	@ 0x28
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	2001cae4 	.word	0x2001cae4

08012c2c <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8012c36:	f7ff fed3 	bl	80129e0 <UTIL_LCD_GetFont>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	88db      	ldrh	r3, [r3, #6]
 8012c3e:	461a      	mov	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	fb03 f102 	mul.w	r1, r3, r2
 8012c46:	2303      	movs	r3, #3
 8012c48:	683a      	ldr	r2, [r7, #0]
 8012c4a:	2000      	movs	r0, #0
 8012c4c:	f7ff ff40 	bl	8012ad0 <UTIL_LCD_DisplayStringAt>
}
 8012c50:	bf00      	nop
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8012c58:	b590      	push	{r4, r7, lr}
 8012c5a:	b087      	sub	sp, #28
 8012c5c:	af02      	add	r7, sp, #8
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8012c66:	4b17      	ldr	r3, [pc, #92]	@ (8012cc4 <UTIL_LCD_FillRect+0x6c>)
 8012c68:	69db      	ldr	r3, [r3, #28]
 8012c6a:	2b02      	cmp	r3, #2
 8012c6c:	d11a      	bne.n	8012ca4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8012c6e:	4b16      	ldr	r3, [pc, #88]	@ (8012cc8 <UTIL_LCD_FillRect+0x70>)
 8012c70:	691c      	ldr	r4, [r3, #16]
 8012c72:	4b14      	ldr	r3, [pc, #80]	@ (8012cc4 <UTIL_LCD_FillRect+0x6c>)
 8012c74:	6918      	ldr	r0, [r3, #16]
 8012c76:	6a3b      	ldr	r3, [r7, #32]
 8012c78:	08db      	lsrs	r3, r3, #3
 8012c7a:	f003 021f 	and.w	r2, r3, #31
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	0a9b      	lsrs	r3, r3, #10
 8012c82:	015b      	lsls	r3, r3, #5
 8012c84:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012c88:	431a      	orrs	r2, r3
 8012c8a:	6a3b      	ldr	r3, [r7, #32]
 8012c8c:	0cdb      	lsrs	r3, r3, #19
 8012c8e:	02db      	lsls	r3, r3, #11
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	4313      	orrs	r3, r2
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	68f9      	ldr	r1, [r7, #12]
 8012ca0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8012ca2:	e00b      	b.n	8012cbc <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8012ca4:	4b08      	ldr	r3, [pc, #32]	@ (8012cc8 <UTIL_LCD_FillRect+0x70>)
 8012ca6:	691c      	ldr	r4, [r3, #16]
 8012ca8:	4b06      	ldr	r3, [pc, #24]	@ (8012cc4 <UTIL_LCD_FillRect+0x6c>)
 8012caa:	6918      	ldr	r0, [r3, #16]
 8012cac:	6a3b      	ldr	r3, [r7, #32]
 8012cae:	9301      	str	r3, [sp, #4]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	68ba      	ldr	r2, [r7, #8]
 8012cb8:	68f9      	ldr	r1, [r7, #12]
 8012cba:	47a0      	blx	r4
}
 8012cbc:	bf00      	nop
 8012cbe:	3714      	adds	r7, #20
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd90      	pop	{r4, r7, pc}
 8012cc4:	2001cae4 	.word	0x2001cae4
 8012cc8:	2001cb24 	.word	0x2001cb24

08012ccc <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b0b2      	sub	sp, #200	@ 0xc8
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012cde:	2300      	movs	r3, #0
 8012ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8012ce4:	4ba5      	ldr	r3, [pc, #660]	@ (8012f7c <DrawChar+0x2b0>)
 8012ce6:	68db      	ldr	r3, [r3, #12]
 8012ce8:	4aa4      	ldr	r2, [pc, #656]	@ (8012f7c <DrawChar+0x2b0>)
 8012cea:	015b      	lsls	r3, r3, #5
 8012cec:	4413      	add	r3, r2
 8012cee:	3308      	adds	r3, #8
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	88db      	ldrh	r3, [r3, #6]
 8012cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8012cf8:	4ba0      	ldr	r3, [pc, #640]	@ (8012f7c <DrawChar+0x2b0>)
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	4a9f      	ldr	r2, [pc, #636]	@ (8012f7c <DrawChar+0x2b0>)
 8012cfe:	015b      	lsls	r3, r3, #5
 8012d00:	4413      	add	r3, r2
 8012d02:	3308      	adds	r3, #8
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	889b      	ldrh	r3, [r3, #4]
 8012d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8012d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012d10:	3307      	adds	r3, #7
 8012d12:	f023 0207 	bic.w	r2, r3, #7
 8012d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8012d20:	2300      	movs	r3, #0
 8012d22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d26:	e11c      	b.n	8012f62 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8012d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012d2c:	3307      	adds	r3, #7
 8012d2e:	08db      	lsrs	r3, r3, #3
 8012d30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012d34:	fb02 f303 	mul.w	r3, r2, r3
 8012d38:	687a      	ldr	r2, [r7, #4]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8012d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012d44:	3307      	adds	r3, #7
 8012d46:	08db      	lsrs	r3, r3, #3
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d002      	beq.n	8012d52 <DrawChar+0x86>
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d006      	beq.n	8012d5e <DrawChar+0x92>
 8012d50:	e011      	b.n	8012d76 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8012d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012d5c:	e01d      	b.n	8012d9a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8012d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	021b      	lsls	r3, r3, #8
 8012d66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012d6a:	3201      	adds	r2, #1
 8012d6c:	7812      	ldrb	r2, [r2, #0]
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012d74:	e011      	b.n	8012d9a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8012d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	041a      	lsls	r2, r3, #16
 8012d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d82:	3301      	adds	r3, #1
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	021b      	lsls	r3, r3, #8
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012d8e:	3202      	adds	r2, #2
 8012d90:	7812      	ldrb	r2, [r2, #0]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012d98:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8012d9a:	4b78      	ldr	r3, [pc, #480]	@ (8012f7c <DrawChar+0x2b0>)
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	4a77      	ldr	r2, [pc, #476]	@ (8012f7c <DrawChar+0x2b0>)
 8012da0:	015b      	lsls	r3, r3, #5
 8012da2:	4413      	add	r3, r2
 8012da4:	331c      	adds	r3, #28
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b02      	cmp	r3, #2
 8012daa:	f040 808c 	bne.w	8012ec6 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8012dae:	2300      	movs	r3, #0
 8012db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012db4:	e074      	b.n	8012ea0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8012db6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012dc4:	4413      	add	r3, r2
 8012dc6:	3b01      	subs	r3, #1
 8012dc8:	2201      	movs	r2, #1
 8012dca:	fa02 f303 	lsl.w	r3, r2, r3
 8012dce:	461a      	mov	r2, r3
 8012dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012dd4:	4013      	ands	r3, r2
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d02d      	beq.n	8012e36 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8012dda:	4b68      	ldr	r3, [pc, #416]	@ (8012f7c <DrawChar+0x2b0>)
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	4a67      	ldr	r2, [pc, #412]	@ (8012f7c <DrawChar+0x2b0>)
 8012de0:	015b      	lsls	r3, r3, #5
 8012de2:	4413      	add	r3, r2
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	08db      	lsrs	r3, r3, #3
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	f003 031f 	and.w	r3, r3, #31
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	4b62      	ldr	r3, [pc, #392]	@ (8012f7c <DrawChar+0x2b0>)
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	4961      	ldr	r1, [pc, #388]	@ (8012f7c <DrawChar+0x2b0>)
 8012df6:	015b      	lsls	r3, r3, #5
 8012df8:	440b      	add	r3, r1
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	0a9b      	lsrs	r3, r3, #10
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	015b      	lsls	r3, r3, #5
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012e08:	b29b      	uxth	r3, r3
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8012f7c <DrawChar+0x2b0>)
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	495a      	ldr	r1, [pc, #360]	@ (8012f7c <DrawChar+0x2b0>)
 8012e14:	015b      	lsls	r3, r3, #5
 8012e16:	440b      	add	r3, r1
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	0cdb      	lsrs	r3, r3, #19
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	02db      	lsls	r3, r3, #11
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4313      	orrs	r3, r2
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e2a:	005b      	lsls	r3, r3, #1
 8012e2c:	33c0      	adds	r3, #192	@ 0xc0
 8012e2e:	443b      	add	r3, r7
 8012e30:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8012e34:	e02f      	b.n	8012e96 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8012e36:	4b51      	ldr	r3, [pc, #324]	@ (8012f7c <DrawChar+0x2b0>)
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	4a50      	ldr	r2, [pc, #320]	@ (8012f7c <DrawChar+0x2b0>)
 8012e3c:	015b      	lsls	r3, r3, #5
 8012e3e:	4413      	add	r3, r2
 8012e40:	3304      	adds	r3, #4
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	08db      	lsrs	r3, r3, #3
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	f003 031f 	and.w	r3, r3, #31
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8012f7c <DrawChar+0x2b0>)
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	494a      	ldr	r1, [pc, #296]	@ (8012f7c <DrawChar+0x2b0>)
 8012e54:	015b      	lsls	r3, r3, #5
 8012e56:	440b      	add	r3, r1
 8012e58:	3304      	adds	r3, #4
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	0a9b      	lsrs	r3, r3, #10
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	015b      	lsls	r3, r3, #5
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	4b43      	ldr	r3, [pc, #268]	@ (8012f7c <DrawChar+0x2b0>)
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	4942      	ldr	r1, [pc, #264]	@ (8012f7c <DrawChar+0x2b0>)
 8012e74:	015b      	lsls	r3, r3, #5
 8012e76:	440b      	add	r3, r1
 8012e78:	3304      	adds	r3, #4
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	0cdb      	lsrs	r3, r3, #19
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	02db      	lsls	r3, r3, #11
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4313      	orrs	r3, r2
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e8c:	005b      	lsls	r3, r3, #1
 8012e8e:	33c0      	adds	r3, #192	@ 0xc0
 8012e90:	443b      	add	r3, r7
 8012e92:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8012e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012ea0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d384      	bcc.n	8012db6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8012eac:	68b9      	ldr	r1, [r7, #8]
 8012eae:	1c4b      	adds	r3, r1, #1
 8012eb0:	60bb      	str	r3, [r7, #8]
 8012eb2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7ff fd9e 	bl	8012a00 <UTIL_LCD_FillRGBRect>
 8012ec4:	e048      	b.n	8012f58 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012ecc:	e032      	b.n	8012f34 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8012ece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012ed6:	1ad2      	subs	r2, r2, r3
 8012ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012edc:	4413      	add	r3, r2
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012eec:	4013      	ands	r3, r2
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00d      	beq.n	8012f0e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8012ef2:	4b22      	ldr	r3, [pc, #136]	@ (8012f7c <DrawChar+0x2b0>)
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	4a21      	ldr	r2, [pc, #132]	@ (8012f7c <DrawChar+0x2b0>)
 8012ef8:	015b      	lsls	r3, r3, #5
 8012efa:	4413      	add	r3, r2
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	33c0      	adds	r3, #192	@ 0xc0
 8012f06:	443b      	add	r3, r7
 8012f08:	f843 2cac 	str.w	r2, [r3, #-172]
 8012f0c:	e00d      	b.n	8012f2a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8012f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8012f7c <DrawChar+0x2b0>)
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	4a1a      	ldr	r2, [pc, #104]	@ (8012f7c <DrawChar+0x2b0>)
 8012f14:	015b      	lsls	r3, r3, #5
 8012f16:	4413      	add	r3, r2
 8012f18:	3304      	adds	r3, #4
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012f20:	009b      	lsls	r3, r3, #2
 8012f22:	33c0      	adds	r3, #192	@ 0xc0
 8012f24:	443b      	add	r3, r7
 8012f26:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8012f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012f2e:	3301      	adds	r3, #1
 8012f30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012f34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d3c6      	bcc.n	8012ece <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8012f40:	68b9      	ldr	r1, [r7, #8]
 8012f42:	1c4b      	adds	r3, r1, #1
 8012f44:	60bb      	str	r3, [r7, #8]
 8012f46:	f107 0214 	add.w	r2, r7, #20
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	9300      	str	r3, [sp, #0]
 8012f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	f7ff fd54 	bl	8012a00 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8012f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	f4ff aedc 	bcc.w	8012d28 <DrawChar+0x5c>
    }
  }
}
 8012f70:	bf00      	nop
 8012f72:	bf00      	nop
 8012f74:	37c0      	adds	r7, #192	@ 0xc0
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	2001cae4 	.word	0x2001cae4

08012f80 <malloc>:
 8012f80:	4b02      	ldr	r3, [pc, #8]	@ (8012f8c <malloc+0xc>)
 8012f82:	4601      	mov	r1, r0
 8012f84:	6818      	ldr	r0, [r3, #0]
 8012f86:	f000 b82d 	b.w	8012fe4 <_malloc_r>
 8012f8a:	bf00      	nop
 8012f8c:	200000c8 	.word	0x200000c8

08012f90 <free>:
 8012f90:	4b02      	ldr	r3, [pc, #8]	@ (8012f9c <free+0xc>)
 8012f92:	4601      	mov	r1, r0
 8012f94:	6818      	ldr	r0, [r3, #0]
 8012f96:	f000 b915 	b.w	80131c4 <_free_r>
 8012f9a:	bf00      	nop
 8012f9c:	200000c8 	.word	0x200000c8

08012fa0 <sbrk_aligned>:
 8012fa0:	b570      	push	{r4, r5, r6, lr}
 8012fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8012fe0 <sbrk_aligned+0x40>)
 8012fa4:	460c      	mov	r4, r1
 8012fa6:	6831      	ldr	r1, [r6, #0]
 8012fa8:	4605      	mov	r5, r0
 8012faa:	b911      	cbnz	r1, 8012fb2 <sbrk_aligned+0x12>
 8012fac:	f000 f8ce 	bl	801314c <_sbrk_r>
 8012fb0:	6030      	str	r0, [r6, #0]
 8012fb2:	4621      	mov	r1, r4
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	f000 f8c9 	bl	801314c <_sbrk_r>
 8012fba:	1c43      	adds	r3, r0, #1
 8012fbc:	d103      	bne.n	8012fc6 <sbrk_aligned+0x26>
 8012fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	bd70      	pop	{r4, r5, r6, pc}
 8012fc6:	1cc4      	adds	r4, r0, #3
 8012fc8:	f024 0403 	bic.w	r4, r4, #3
 8012fcc:	42a0      	cmp	r0, r4
 8012fce:	d0f8      	beq.n	8012fc2 <sbrk_aligned+0x22>
 8012fd0:	1a21      	subs	r1, r4, r0
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	f000 f8ba 	bl	801314c <_sbrk_r>
 8012fd8:	3001      	adds	r0, #1
 8012fda:	d1f2      	bne.n	8012fc2 <sbrk_aligned+0x22>
 8012fdc:	e7ef      	b.n	8012fbe <sbrk_aligned+0x1e>
 8012fde:	bf00      	nop
 8012fe0:	2001cb50 	.word	0x2001cb50

08012fe4 <_malloc_r>:
 8012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	1ccd      	adds	r5, r1, #3
 8012fea:	f025 0503 	bic.w	r5, r5, #3
 8012fee:	3508      	adds	r5, #8
 8012ff0:	2d0c      	cmp	r5, #12
 8012ff2:	bf38      	it	cc
 8012ff4:	250c      	movcc	r5, #12
 8012ff6:	2d00      	cmp	r5, #0
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	db01      	blt.n	8013000 <_malloc_r+0x1c>
 8012ffc:	42a9      	cmp	r1, r5
 8012ffe:	d904      	bls.n	801300a <_malloc_r+0x26>
 8013000:	230c      	movs	r3, #12
 8013002:	6033      	str	r3, [r6, #0]
 8013004:	2000      	movs	r0, #0
 8013006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801300a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130e0 <_malloc_r+0xfc>
 801300e:	f000 f869 	bl	80130e4 <__malloc_lock>
 8013012:	f8d8 3000 	ldr.w	r3, [r8]
 8013016:	461c      	mov	r4, r3
 8013018:	bb44      	cbnz	r4, 801306c <_malloc_r+0x88>
 801301a:	4629      	mov	r1, r5
 801301c:	4630      	mov	r0, r6
 801301e:	f7ff ffbf 	bl	8012fa0 <sbrk_aligned>
 8013022:	1c43      	adds	r3, r0, #1
 8013024:	4604      	mov	r4, r0
 8013026:	d158      	bne.n	80130da <_malloc_r+0xf6>
 8013028:	f8d8 4000 	ldr.w	r4, [r8]
 801302c:	4627      	mov	r7, r4
 801302e:	2f00      	cmp	r7, #0
 8013030:	d143      	bne.n	80130ba <_malloc_r+0xd6>
 8013032:	2c00      	cmp	r4, #0
 8013034:	d04b      	beq.n	80130ce <_malloc_r+0xea>
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	4639      	mov	r1, r7
 801303a:	4630      	mov	r0, r6
 801303c:	eb04 0903 	add.w	r9, r4, r3
 8013040:	f000 f884 	bl	801314c <_sbrk_r>
 8013044:	4581      	cmp	r9, r0
 8013046:	d142      	bne.n	80130ce <_malloc_r+0xea>
 8013048:	6821      	ldr	r1, [r4, #0]
 801304a:	1a6d      	subs	r5, r5, r1
 801304c:	4629      	mov	r1, r5
 801304e:	4630      	mov	r0, r6
 8013050:	f7ff ffa6 	bl	8012fa0 <sbrk_aligned>
 8013054:	3001      	adds	r0, #1
 8013056:	d03a      	beq.n	80130ce <_malloc_r+0xea>
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	442b      	add	r3, r5
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	f8d8 3000 	ldr.w	r3, [r8]
 8013062:	685a      	ldr	r2, [r3, #4]
 8013064:	bb62      	cbnz	r2, 80130c0 <_malloc_r+0xdc>
 8013066:	f8c8 7000 	str.w	r7, [r8]
 801306a:	e00f      	b.n	801308c <_malloc_r+0xa8>
 801306c:	6822      	ldr	r2, [r4, #0]
 801306e:	1b52      	subs	r2, r2, r5
 8013070:	d420      	bmi.n	80130b4 <_malloc_r+0xd0>
 8013072:	2a0b      	cmp	r2, #11
 8013074:	d917      	bls.n	80130a6 <_malloc_r+0xc2>
 8013076:	1961      	adds	r1, r4, r5
 8013078:	42a3      	cmp	r3, r4
 801307a:	6025      	str	r5, [r4, #0]
 801307c:	bf18      	it	ne
 801307e:	6059      	strne	r1, [r3, #4]
 8013080:	6863      	ldr	r3, [r4, #4]
 8013082:	bf08      	it	eq
 8013084:	f8c8 1000 	streq.w	r1, [r8]
 8013088:	5162      	str	r2, [r4, r5]
 801308a:	604b      	str	r3, [r1, #4]
 801308c:	4630      	mov	r0, r6
 801308e:	f000 f82f 	bl	80130f0 <__malloc_unlock>
 8013092:	f104 000b 	add.w	r0, r4, #11
 8013096:	1d23      	adds	r3, r4, #4
 8013098:	f020 0007 	bic.w	r0, r0, #7
 801309c:	1ac2      	subs	r2, r0, r3
 801309e:	bf1c      	itt	ne
 80130a0:	1a1b      	subne	r3, r3, r0
 80130a2:	50a3      	strne	r3, [r4, r2]
 80130a4:	e7af      	b.n	8013006 <_malloc_r+0x22>
 80130a6:	6862      	ldr	r2, [r4, #4]
 80130a8:	42a3      	cmp	r3, r4
 80130aa:	bf0c      	ite	eq
 80130ac:	f8c8 2000 	streq.w	r2, [r8]
 80130b0:	605a      	strne	r2, [r3, #4]
 80130b2:	e7eb      	b.n	801308c <_malloc_r+0xa8>
 80130b4:	4623      	mov	r3, r4
 80130b6:	6864      	ldr	r4, [r4, #4]
 80130b8:	e7ae      	b.n	8013018 <_malloc_r+0x34>
 80130ba:	463c      	mov	r4, r7
 80130bc:	687f      	ldr	r7, [r7, #4]
 80130be:	e7b6      	b.n	801302e <_malloc_r+0x4a>
 80130c0:	461a      	mov	r2, r3
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	42a3      	cmp	r3, r4
 80130c6:	d1fb      	bne.n	80130c0 <_malloc_r+0xdc>
 80130c8:	2300      	movs	r3, #0
 80130ca:	6053      	str	r3, [r2, #4]
 80130cc:	e7de      	b.n	801308c <_malloc_r+0xa8>
 80130ce:	230c      	movs	r3, #12
 80130d0:	6033      	str	r3, [r6, #0]
 80130d2:	4630      	mov	r0, r6
 80130d4:	f000 f80c 	bl	80130f0 <__malloc_unlock>
 80130d8:	e794      	b.n	8013004 <_malloc_r+0x20>
 80130da:	6005      	str	r5, [r0, #0]
 80130dc:	e7d6      	b.n	801308c <_malloc_r+0xa8>
 80130de:	bf00      	nop
 80130e0:	2001cb54 	.word	0x2001cb54

080130e4 <__malloc_lock>:
 80130e4:	4801      	ldr	r0, [pc, #4]	@ (80130ec <__malloc_lock+0x8>)
 80130e6:	f000 b86b 	b.w	80131c0 <__retarget_lock_acquire_recursive>
 80130ea:	bf00      	nop
 80130ec:	2001cc94 	.word	0x2001cc94

080130f0 <__malloc_unlock>:
 80130f0:	4801      	ldr	r0, [pc, #4]	@ (80130f8 <__malloc_unlock+0x8>)
 80130f2:	f000 b866 	b.w	80131c2 <__retarget_lock_release_recursive>
 80130f6:	bf00      	nop
 80130f8:	2001cc94 	.word	0x2001cc94

080130fc <siprintf>:
 80130fc:	b40e      	push	{r1, r2, r3}
 80130fe:	b500      	push	{lr}
 8013100:	b09c      	sub	sp, #112	@ 0x70
 8013102:	ab1d      	add	r3, sp, #116	@ 0x74
 8013104:	9002      	str	r0, [sp, #8]
 8013106:	9006      	str	r0, [sp, #24]
 8013108:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801310c:	4809      	ldr	r0, [pc, #36]	@ (8013134 <siprintf+0x38>)
 801310e:	9107      	str	r1, [sp, #28]
 8013110:	9104      	str	r1, [sp, #16]
 8013112:	4909      	ldr	r1, [pc, #36]	@ (8013138 <siprintf+0x3c>)
 8013114:	f853 2b04 	ldr.w	r2, [r3], #4
 8013118:	9105      	str	r1, [sp, #20]
 801311a:	6800      	ldr	r0, [r0, #0]
 801311c:	9301      	str	r3, [sp, #4]
 801311e:	a902      	add	r1, sp, #8
 8013120:	f000 f8f6 	bl	8013310 <_svfiprintf_r>
 8013124:	9b02      	ldr	r3, [sp, #8]
 8013126:	2200      	movs	r2, #0
 8013128:	701a      	strb	r2, [r3, #0]
 801312a:	b01c      	add	sp, #112	@ 0x70
 801312c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013130:	b003      	add	sp, #12
 8013132:	4770      	bx	lr
 8013134:	200000c8 	.word	0x200000c8
 8013138:	ffff0208 	.word	0xffff0208

0801313c <memset>:
 801313c:	4402      	add	r2, r0
 801313e:	4603      	mov	r3, r0
 8013140:	4293      	cmp	r3, r2
 8013142:	d100      	bne.n	8013146 <memset+0xa>
 8013144:	4770      	bx	lr
 8013146:	f803 1b01 	strb.w	r1, [r3], #1
 801314a:	e7f9      	b.n	8013140 <memset+0x4>

0801314c <_sbrk_r>:
 801314c:	b538      	push	{r3, r4, r5, lr}
 801314e:	4d06      	ldr	r5, [pc, #24]	@ (8013168 <_sbrk_r+0x1c>)
 8013150:	2300      	movs	r3, #0
 8013152:	4604      	mov	r4, r0
 8013154:	4608      	mov	r0, r1
 8013156:	602b      	str	r3, [r5, #0]
 8013158:	f7fc fad8 	bl	800f70c <_sbrk>
 801315c:	1c43      	adds	r3, r0, #1
 801315e:	d102      	bne.n	8013166 <_sbrk_r+0x1a>
 8013160:	682b      	ldr	r3, [r5, #0]
 8013162:	b103      	cbz	r3, 8013166 <_sbrk_r+0x1a>
 8013164:	6023      	str	r3, [r4, #0]
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	2001cc90 	.word	0x2001cc90

0801316c <__errno>:
 801316c:	4b01      	ldr	r3, [pc, #4]	@ (8013174 <__errno+0x8>)
 801316e:	6818      	ldr	r0, [r3, #0]
 8013170:	4770      	bx	lr
 8013172:	bf00      	nop
 8013174:	200000c8 	.word	0x200000c8

08013178 <__libc_init_array>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	4d0d      	ldr	r5, [pc, #52]	@ (80131b0 <__libc_init_array+0x38>)
 801317c:	4c0d      	ldr	r4, [pc, #52]	@ (80131b4 <__libc_init_array+0x3c>)
 801317e:	1b64      	subs	r4, r4, r5
 8013180:	10a4      	asrs	r4, r4, #2
 8013182:	2600      	movs	r6, #0
 8013184:	42a6      	cmp	r6, r4
 8013186:	d109      	bne.n	801319c <__libc_init_array+0x24>
 8013188:	4d0b      	ldr	r5, [pc, #44]	@ (80131b8 <__libc_init_array+0x40>)
 801318a:	4c0c      	ldr	r4, [pc, #48]	@ (80131bc <__libc_init_array+0x44>)
 801318c:	f000 fba8 	bl	80138e0 <_init>
 8013190:	1b64      	subs	r4, r4, r5
 8013192:	10a4      	asrs	r4, r4, #2
 8013194:	2600      	movs	r6, #0
 8013196:	42a6      	cmp	r6, r4
 8013198:	d105      	bne.n	80131a6 <__libc_init_array+0x2e>
 801319a:	bd70      	pop	{r4, r5, r6, pc}
 801319c:	f855 3b04 	ldr.w	r3, [r5], #4
 80131a0:	4798      	blx	r3
 80131a2:	3601      	adds	r6, #1
 80131a4:	e7ee      	b.n	8013184 <__libc_init_array+0xc>
 80131a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80131aa:	4798      	blx	r3
 80131ac:	3601      	adds	r6, #1
 80131ae:	e7f2      	b.n	8013196 <__libc_init_array+0x1e>
 80131b0:	08016ba0 	.word	0x08016ba0
 80131b4:	08016ba0 	.word	0x08016ba0
 80131b8:	08016ba0 	.word	0x08016ba0
 80131bc:	08016ba4 	.word	0x08016ba4

080131c0 <__retarget_lock_acquire_recursive>:
 80131c0:	4770      	bx	lr

080131c2 <__retarget_lock_release_recursive>:
 80131c2:	4770      	bx	lr

080131c4 <_free_r>:
 80131c4:	b538      	push	{r3, r4, r5, lr}
 80131c6:	4605      	mov	r5, r0
 80131c8:	2900      	cmp	r1, #0
 80131ca:	d041      	beq.n	8013250 <_free_r+0x8c>
 80131cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131d0:	1f0c      	subs	r4, r1, #4
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	bfb8      	it	lt
 80131d6:	18e4      	addlt	r4, r4, r3
 80131d8:	f7ff ff84 	bl	80130e4 <__malloc_lock>
 80131dc:	4a1d      	ldr	r2, [pc, #116]	@ (8013254 <_free_r+0x90>)
 80131de:	6813      	ldr	r3, [r2, #0]
 80131e0:	b933      	cbnz	r3, 80131f0 <_free_r+0x2c>
 80131e2:	6063      	str	r3, [r4, #4]
 80131e4:	6014      	str	r4, [r2, #0]
 80131e6:	4628      	mov	r0, r5
 80131e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ec:	f7ff bf80 	b.w	80130f0 <__malloc_unlock>
 80131f0:	42a3      	cmp	r3, r4
 80131f2:	d908      	bls.n	8013206 <_free_r+0x42>
 80131f4:	6820      	ldr	r0, [r4, #0]
 80131f6:	1821      	adds	r1, r4, r0
 80131f8:	428b      	cmp	r3, r1
 80131fa:	bf01      	itttt	eq
 80131fc:	6819      	ldreq	r1, [r3, #0]
 80131fe:	685b      	ldreq	r3, [r3, #4]
 8013200:	1809      	addeq	r1, r1, r0
 8013202:	6021      	streq	r1, [r4, #0]
 8013204:	e7ed      	b.n	80131e2 <_free_r+0x1e>
 8013206:	461a      	mov	r2, r3
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	b10b      	cbz	r3, 8013210 <_free_r+0x4c>
 801320c:	42a3      	cmp	r3, r4
 801320e:	d9fa      	bls.n	8013206 <_free_r+0x42>
 8013210:	6811      	ldr	r1, [r2, #0]
 8013212:	1850      	adds	r0, r2, r1
 8013214:	42a0      	cmp	r0, r4
 8013216:	d10b      	bne.n	8013230 <_free_r+0x6c>
 8013218:	6820      	ldr	r0, [r4, #0]
 801321a:	4401      	add	r1, r0
 801321c:	1850      	adds	r0, r2, r1
 801321e:	4283      	cmp	r3, r0
 8013220:	6011      	str	r1, [r2, #0]
 8013222:	d1e0      	bne.n	80131e6 <_free_r+0x22>
 8013224:	6818      	ldr	r0, [r3, #0]
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	6053      	str	r3, [r2, #4]
 801322a:	4408      	add	r0, r1
 801322c:	6010      	str	r0, [r2, #0]
 801322e:	e7da      	b.n	80131e6 <_free_r+0x22>
 8013230:	d902      	bls.n	8013238 <_free_r+0x74>
 8013232:	230c      	movs	r3, #12
 8013234:	602b      	str	r3, [r5, #0]
 8013236:	e7d6      	b.n	80131e6 <_free_r+0x22>
 8013238:	6820      	ldr	r0, [r4, #0]
 801323a:	1821      	adds	r1, r4, r0
 801323c:	428b      	cmp	r3, r1
 801323e:	bf04      	itt	eq
 8013240:	6819      	ldreq	r1, [r3, #0]
 8013242:	685b      	ldreq	r3, [r3, #4]
 8013244:	6063      	str	r3, [r4, #4]
 8013246:	bf04      	itt	eq
 8013248:	1809      	addeq	r1, r1, r0
 801324a:	6021      	streq	r1, [r4, #0]
 801324c:	6054      	str	r4, [r2, #4]
 801324e:	e7ca      	b.n	80131e6 <_free_r+0x22>
 8013250:	bd38      	pop	{r3, r4, r5, pc}
 8013252:	bf00      	nop
 8013254:	2001cb54 	.word	0x2001cb54

08013258 <__ssputs_r>:
 8013258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801325c:	688e      	ldr	r6, [r1, #8]
 801325e:	461f      	mov	r7, r3
 8013260:	42be      	cmp	r6, r7
 8013262:	680b      	ldr	r3, [r1, #0]
 8013264:	4682      	mov	sl, r0
 8013266:	460c      	mov	r4, r1
 8013268:	4690      	mov	r8, r2
 801326a:	d82d      	bhi.n	80132c8 <__ssputs_r+0x70>
 801326c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013274:	d026      	beq.n	80132c4 <__ssputs_r+0x6c>
 8013276:	6965      	ldr	r5, [r4, #20]
 8013278:	6909      	ldr	r1, [r1, #16]
 801327a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801327e:	eba3 0901 	sub.w	r9, r3, r1
 8013282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013286:	1c7b      	adds	r3, r7, #1
 8013288:	444b      	add	r3, r9
 801328a:	106d      	asrs	r5, r5, #1
 801328c:	429d      	cmp	r5, r3
 801328e:	bf38      	it	cc
 8013290:	461d      	movcc	r5, r3
 8013292:	0553      	lsls	r3, r2, #21
 8013294:	d527      	bpl.n	80132e6 <__ssputs_r+0x8e>
 8013296:	4629      	mov	r1, r5
 8013298:	f7ff fea4 	bl	8012fe4 <_malloc_r>
 801329c:	4606      	mov	r6, r0
 801329e:	b360      	cbz	r0, 80132fa <__ssputs_r+0xa2>
 80132a0:	6921      	ldr	r1, [r4, #16]
 80132a2:	464a      	mov	r2, r9
 80132a4:	f000 fad8 	bl	8013858 <memcpy>
 80132a8:	89a3      	ldrh	r3, [r4, #12]
 80132aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80132ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132b2:	81a3      	strh	r3, [r4, #12]
 80132b4:	6126      	str	r6, [r4, #16]
 80132b6:	6165      	str	r5, [r4, #20]
 80132b8:	444e      	add	r6, r9
 80132ba:	eba5 0509 	sub.w	r5, r5, r9
 80132be:	6026      	str	r6, [r4, #0]
 80132c0:	60a5      	str	r5, [r4, #8]
 80132c2:	463e      	mov	r6, r7
 80132c4:	42be      	cmp	r6, r7
 80132c6:	d900      	bls.n	80132ca <__ssputs_r+0x72>
 80132c8:	463e      	mov	r6, r7
 80132ca:	6820      	ldr	r0, [r4, #0]
 80132cc:	4632      	mov	r2, r6
 80132ce:	4641      	mov	r1, r8
 80132d0:	f000 faa8 	bl	8013824 <memmove>
 80132d4:	68a3      	ldr	r3, [r4, #8]
 80132d6:	1b9b      	subs	r3, r3, r6
 80132d8:	60a3      	str	r3, [r4, #8]
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	4433      	add	r3, r6
 80132de:	6023      	str	r3, [r4, #0]
 80132e0:	2000      	movs	r0, #0
 80132e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132e6:	462a      	mov	r2, r5
 80132e8:	f000 fac4 	bl	8013874 <_realloc_r>
 80132ec:	4606      	mov	r6, r0
 80132ee:	2800      	cmp	r0, #0
 80132f0:	d1e0      	bne.n	80132b4 <__ssputs_r+0x5c>
 80132f2:	6921      	ldr	r1, [r4, #16]
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ff ff65 	bl	80131c4 <_free_r>
 80132fa:	230c      	movs	r3, #12
 80132fc:	f8ca 3000 	str.w	r3, [sl]
 8013300:	89a3      	ldrh	r3, [r4, #12]
 8013302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013306:	81a3      	strh	r3, [r4, #12]
 8013308:	f04f 30ff 	mov.w	r0, #4294967295
 801330c:	e7e9      	b.n	80132e2 <__ssputs_r+0x8a>
	...

08013310 <_svfiprintf_r>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	4698      	mov	r8, r3
 8013316:	898b      	ldrh	r3, [r1, #12]
 8013318:	061b      	lsls	r3, r3, #24
 801331a:	b09d      	sub	sp, #116	@ 0x74
 801331c:	4607      	mov	r7, r0
 801331e:	460d      	mov	r5, r1
 8013320:	4614      	mov	r4, r2
 8013322:	d510      	bpl.n	8013346 <_svfiprintf_r+0x36>
 8013324:	690b      	ldr	r3, [r1, #16]
 8013326:	b973      	cbnz	r3, 8013346 <_svfiprintf_r+0x36>
 8013328:	2140      	movs	r1, #64	@ 0x40
 801332a:	f7ff fe5b 	bl	8012fe4 <_malloc_r>
 801332e:	6028      	str	r0, [r5, #0]
 8013330:	6128      	str	r0, [r5, #16]
 8013332:	b930      	cbnz	r0, 8013342 <_svfiprintf_r+0x32>
 8013334:	230c      	movs	r3, #12
 8013336:	603b      	str	r3, [r7, #0]
 8013338:	f04f 30ff 	mov.w	r0, #4294967295
 801333c:	b01d      	add	sp, #116	@ 0x74
 801333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013342:	2340      	movs	r3, #64	@ 0x40
 8013344:	616b      	str	r3, [r5, #20]
 8013346:	2300      	movs	r3, #0
 8013348:	9309      	str	r3, [sp, #36]	@ 0x24
 801334a:	2320      	movs	r3, #32
 801334c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013350:	f8cd 800c 	str.w	r8, [sp, #12]
 8013354:	2330      	movs	r3, #48	@ 0x30
 8013356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80134f4 <_svfiprintf_r+0x1e4>
 801335a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801335e:	f04f 0901 	mov.w	r9, #1
 8013362:	4623      	mov	r3, r4
 8013364:	469a      	mov	sl, r3
 8013366:	f813 2b01 	ldrb.w	r2, [r3], #1
 801336a:	b10a      	cbz	r2, 8013370 <_svfiprintf_r+0x60>
 801336c:	2a25      	cmp	r2, #37	@ 0x25
 801336e:	d1f9      	bne.n	8013364 <_svfiprintf_r+0x54>
 8013370:	ebba 0b04 	subs.w	fp, sl, r4
 8013374:	d00b      	beq.n	801338e <_svfiprintf_r+0x7e>
 8013376:	465b      	mov	r3, fp
 8013378:	4622      	mov	r2, r4
 801337a:	4629      	mov	r1, r5
 801337c:	4638      	mov	r0, r7
 801337e:	f7ff ff6b 	bl	8013258 <__ssputs_r>
 8013382:	3001      	adds	r0, #1
 8013384:	f000 80a7 	beq.w	80134d6 <_svfiprintf_r+0x1c6>
 8013388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801338a:	445a      	add	r2, fp
 801338c:	9209      	str	r2, [sp, #36]	@ 0x24
 801338e:	f89a 3000 	ldrb.w	r3, [sl]
 8013392:	2b00      	cmp	r3, #0
 8013394:	f000 809f 	beq.w	80134d6 <_svfiprintf_r+0x1c6>
 8013398:	2300      	movs	r3, #0
 801339a:	f04f 32ff 	mov.w	r2, #4294967295
 801339e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133a2:	f10a 0a01 	add.w	sl, sl, #1
 80133a6:	9304      	str	r3, [sp, #16]
 80133a8:	9307      	str	r3, [sp, #28]
 80133aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80133ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80133b0:	4654      	mov	r4, sl
 80133b2:	2205      	movs	r2, #5
 80133b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133b8:	484e      	ldr	r0, [pc, #312]	@ (80134f4 <_svfiprintf_r+0x1e4>)
 80133ba:	f7ec ff91 	bl	80002e0 <memchr>
 80133be:	9a04      	ldr	r2, [sp, #16]
 80133c0:	b9d8      	cbnz	r0, 80133fa <_svfiprintf_r+0xea>
 80133c2:	06d0      	lsls	r0, r2, #27
 80133c4:	bf44      	itt	mi
 80133c6:	2320      	movmi	r3, #32
 80133c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133cc:	0711      	lsls	r1, r2, #28
 80133ce:	bf44      	itt	mi
 80133d0:	232b      	movmi	r3, #43	@ 0x2b
 80133d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133d6:	f89a 3000 	ldrb.w	r3, [sl]
 80133da:	2b2a      	cmp	r3, #42	@ 0x2a
 80133dc:	d015      	beq.n	801340a <_svfiprintf_r+0xfa>
 80133de:	9a07      	ldr	r2, [sp, #28]
 80133e0:	4654      	mov	r4, sl
 80133e2:	2000      	movs	r0, #0
 80133e4:	f04f 0c0a 	mov.w	ip, #10
 80133e8:	4621      	mov	r1, r4
 80133ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ee:	3b30      	subs	r3, #48	@ 0x30
 80133f0:	2b09      	cmp	r3, #9
 80133f2:	d94b      	bls.n	801348c <_svfiprintf_r+0x17c>
 80133f4:	b1b0      	cbz	r0, 8013424 <_svfiprintf_r+0x114>
 80133f6:	9207      	str	r2, [sp, #28]
 80133f8:	e014      	b.n	8013424 <_svfiprintf_r+0x114>
 80133fa:	eba0 0308 	sub.w	r3, r0, r8
 80133fe:	fa09 f303 	lsl.w	r3, r9, r3
 8013402:	4313      	orrs	r3, r2
 8013404:	9304      	str	r3, [sp, #16]
 8013406:	46a2      	mov	sl, r4
 8013408:	e7d2      	b.n	80133b0 <_svfiprintf_r+0xa0>
 801340a:	9b03      	ldr	r3, [sp, #12]
 801340c:	1d19      	adds	r1, r3, #4
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	9103      	str	r1, [sp, #12]
 8013412:	2b00      	cmp	r3, #0
 8013414:	bfbb      	ittet	lt
 8013416:	425b      	neglt	r3, r3
 8013418:	f042 0202 	orrlt.w	r2, r2, #2
 801341c:	9307      	strge	r3, [sp, #28]
 801341e:	9307      	strlt	r3, [sp, #28]
 8013420:	bfb8      	it	lt
 8013422:	9204      	strlt	r2, [sp, #16]
 8013424:	7823      	ldrb	r3, [r4, #0]
 8013426:	2b2e      	cmp	r3, #46	@ 0x2e
 8013428:	d10a      	bne.n	8013440 <_svfiprintf_r+0x130>
 801342a:	7863      	ldrb	r3, [r4, #1]
 801342c:	2b2a      	cmp	r3, #42	@ 0x2a
 801342e:	d132      	bne.n	8013496 <_svfiprintf_r+0x186>
 8013430:	9b03      	ldr	r3, [sp, #12]
 8013432:	1d1a      	adds	r2, r3, #4
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	9203      	str	r2, [sp, #12]
 8013438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801343c:	3402      	adds	r4, #2
 801343e:	9305      	str	r3, [sp, #20]
 8013440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013504 <_svfiprintf_r+0x1f4>
 8013444:	7821      	ldrb	r1, [r4, #0]
 8013446:	2203      	movs	r2, #3
 8013448:	4650      	mov	r0, sl
 801344a:	f7ec ff49 	bl	80002e0 <memchr>
 801344e:	b138      	cbz	r0, 8013460 <_svfiprintf_r+0x150>
 8013450:	9b04      	ldr	r3, [sp, #16]
 8013452:	eba0 000a 	sub.w	r0, r0, sl
 8013456:	2240      	movs	r2, #64	@ 0x40
 8013458:	4082      	lsls	r2, r0
 801345a:	4313      	orrs	r3, r2
 801345c:	3401      	adds	r4, #1
 801345e:	9304      	str	r3, [sp, #16]
 8013460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013464:	4824      	ldr	r0, [pc, #144]	@ (80134f8 <_svfiprintf_r+0x1e8>)
 8013466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801346a:	2206      	movs	r2, #6
 801346c:	f7ec ff38 	bl	80002e0 <memchr>
 8013470:	2800      	cmp	r0, #0
 8013472:	d036      	beq.n	80134e2 <_svfiprintf_r+0x1d2>
 8013474:	4b21      	ldr	r3, [pc, #132]	@ (80134fc <_svfiprintf_r+0x1ec>)
 8013476:	bb1b      	cbnz	r3, 80134c0 <_svfiprintf_r+0x1b0>
 8013478:	9b03      	ldr	r3, [sp, #12]
 801347a:	3307      	adds	r3, #7
 801347c:	f023 0307 	bic.w	r3, r3, #7
 8013480:	3308      	adds	r3, #8
 8013482:	9303      	str	r3, [sp, #12]
 8013484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013486:	4433      	add	r3, r6
 8013488:	9309      	str	r3, [sp, #36]	@ 0x24
 801348a:	e76a      	b.n	8013362 <_svfiprintf_r+0x52>
 801348c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013490:	460c      	mov	r4, r1
 8013492:	2001      	movs	r0, #1
 8013494:	e7a8      	b.n	80133e8 <_svfiprintf_r+0xd8>
 8013496:	2300      	movs	r3, #0
 8013498:	3401      	adds	r4, #1
 801349a:	9305      	str	r3, [sp, #20]
 801349c:	4619      	mov	r1, r3
 801349e:	f04f 0c0a 	mov.w	ip, #10
 80134a2:	4620      	mov	r0, r4
 80134a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134a8:	3a30      	subs	r2, #48	@ 0x30
 80134aa:	2a09      	cmp	r2, #9
 80134ac:	d903      	bls.n	80134b6 <_svfiprintf_r+0x1a6>
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d0c6      	beq.n	8013440 <_svfiprintf_r+0x130>
 80134b2:	9105      	str	r1, [sp, #20]
 80134b4:	e7c4      	b.n	8013440 <_svfiprintf_r+0x130>
 80134b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80134ba:	4604      	mov	r4, r0
 80134bc:	2301      	movs	r3, #1
 80134be:	e7f0      	b.n	80134a2 <_svfiprintf_r+0x192>
 80134c0:	ab03      	add	r3, sp, #12
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	462a      	mov	r2, r5
 80134c6:	4b0e      	ldr	r3, [pc, #56]	@ (8013500 <_svfiprintf_r+0x1f0>)
 80134c8:	a904      	add	r1, sp, #16
 80134ca:	4638      	mov	r0, r7
 80134cc:	f3af 8000 	nop.w
 80134d0:	1c42      	adds	r2, r0, #1
 80134d2:	4606      	mov	r6, r0
 80134d4:	d1d6      	bne.n	8013484 <_svfiprintf_r+0x174>
 80134d6:	89ab      	ldrh	r3, [r5, #12]
 80134d8:	065b      	lsls	r3, r3, #25
 80134da:	f53f af2d 	bmi.w	8013338 <_svfiprintf_r+0x28>
 80134de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80134e0:	e72c      	b.n	801333c <_svfiprintf_r+0x2c>
 80134e2:	ab03      	add	r3, sp, #12
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	462a      	mov	r2, r5
 80134e8:	4b05      	ldr	r3, [pc, #20]	@ (8013500 <_svfiprintf_r+0x1f0>)
 80134ea:	a904      	add	r1, sp, #16
 80134ec:	4638      	mov	r0, r7
 80134ee:	f000 f879 	bl	80135e4 <_printf_i>
 80134f2:	e7ed      	b.n	80134d0 <_svfiprintf_r+0x1c0>
 80134f4:	08016b64 	.word	0x08016b64
 80134f8:	08016b6e 	.word	0x08016b6e
 80134fc:	00000000 	.word	0x00000000
 8013500:	08013259 	.word	0x08013259
 8013504:	08016b6a 	.word	0x08016b6a

08013508 <_printf_common>:
 8013508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801350c:	4616      	mov	r6, r2
 801350e:	4698      	mov	r8, r3
 8013510:	688a      	ldr	r2, [r1, #8]
 8013512:	690b      	ldr	r3, [r1, #16]
 8013514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013518:	4293      	cmp	r3, r2
 801351a:	bfb8      	it	lt
 801351c:	4613      	movlt	r3, r2
 801351e:	6033      	str	r3, [r6, #0]
 8013520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013524:	4607      	mov	r7, r0
 8013526:	460c      	mov	r4, r1
 8013528:	b10a      	cbz	r2, 801352e <_printf_common+0x26>
 801352a:	3301      	adds	r3, #1
 801352c:	6033      	str	r3, [r6, #0]
 801352e:	6823      	ldr	r3, [r4, #0]
 8013530:	0699      	lsls	r1, r3, #26
 8013532:	bf42      	ittt	mi
 8013534:	6833      	ldrmi	r3, [r6, #0]
 8013536:	3302      	addmi	r3, #2
 8013538:	6033      	strmi	r3, [r6, #0]
 801353a:	6825      	ldr	r5, [r4, #0]
 801353c:	f015 0506 	ands.w	r5, r5, #6
 8013540:	d106      	bne.n	8013550 <_printf_common+0x48>
 8013542:	f104 0a19 	add.w	sl, r4, #25
 8013546:	68e3      	ldr	r3, [r4, #12]
 8013548:	6832      	ldr	r2, [r6, #0]
 801354a:	1a9b      	subs	r3, r3, r2
 801354c:	42ab      	cmp	r3, r5
 801354e:	dc26      	bgt.n	801359e <_printf_common+0x96>
 8013550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013554:	6822      	ldr	r2, [r4, #0]
 8013556:	3b00      	subs	r3, #0
 8013558:	bf18      	it	ne
 801355a:	2301      	movne	r3, #1
 801355c:	0692      	lsls	r2, r2, #26
 801355e:	d42b      	bmi.n	80135b8 <_printf_common+0xb0>
 8013560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013564:	4641      	mov	r1, r8
 8013566:	4638      	mov	r0, r7
 8013568:	47c8      	blx	r9
 801356a:	3001      	adds	r0, #1
 801356c:	d01e      	beq.n	80135ac <_printf_common+0xa4>
 801356e:	6823      	ldr	r3, [r4, #0]
 8013570:	6922      	ldr	r2, [r4, #16]
 8013572:	f003 0306 	and.w	r3, r3, #6
 8013576:	2b04      	cmp	r3, #4
 8013578:	bf02      	ittt	eq
 801357a:	68e5      	ldreq	r5, [r4, #12]
 801357c:	6833      	ldreq	r3, [r6, #0]
 801357e:	1aed      	subeq	r5, r5, r3
 8013580:	68a3      	ldr	r3, [r4, #8]
 8013582:	bf0c      	ite	eq
 8013584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013588:	2500      	movne	r5, #0
 801358a:	4293      	cmp	r3, r2
 801358c:	bfc4      	itt	gt
 801358e:	1a9b      	subgt	r3, r3, r2
 8013590:	18ed      	addgt	r5, r5, r3
 8013592:	2600      	movs	r6, #0
 8013594:	341a      	adds	r4, #26
 8013596:	42b5      	cmp	r5, r6
 8013598:	d11a      	bne.n	80135d0 <_printf_common+0xc8>
 801359a:	2000      	movs	r0, #0
 801359c:	e008      	b.n	80135b0 <_printf_common+0xa8>
 801359e:	2301      	movs	r3, #1
 80135a0:	4652      	mov	r2, sl
 80135a2:	4641      	mov	r1, r8
 80135a4:	4638      	mov	r0, r7
 80135a6:	47c8      	blx	r9
 80135a8:	3001      	adds	r0, #1
 80135aa:	d103      	bne.n	80135b4 <_printf_common+0xac>
 80135ac:	f04f 30ff 	mov.w	r0, #4294967295
 80135b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135b4:	3501      	adds	r5, #1
 80135b6:	e7c6      	b.n	8013546 <_printf_common+0x3e>
 80135b8:	18e1      	adds	r1, r4, r3
 80135ba:	1c5a      	adds	r2, r3, #1
 80135bc:	2030      	movs	r0, #48	@ 0x30
 80135be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80135c2:	4422      	add	r2, r4
 80135c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80135c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80135cc:	3302      	adds	r3, #2
 80135ce:	e7c7      	b.n	8013560 <_printf_common+0x58>
 80135d0:	2301      	movs	r3, #1
 80135d2:	4622      	mov	r2, r4
 80135d4:	4641      	mov	r1, r8
 80135d6:	4638      	mov	r0, r7
 80135d8:	47c8      	blx	r9
 80135da:	3001      	adds	r0, #1
 80135dc:	d0e6      	beq.n	80135ac <_printf_common+0xa4>
 80135de:	3601      	adds	r6, #1
 80135e0:	e7d9      	b.n	8013596 <_printf_common+0x8e>
	...

080135e4 <_printf_i>:
 80135e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135e8:	7e0f      	ldrb	r7, [r1, #24]
 80135ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80135ec:	2f78      	cmp	r7, #120	@ 0x78
 80135ee:	4691      	mov	r9, r2
 80135f0:	4680      	mov	r8, r0
 80135f2:	460c      	mov	r4, r1
 80135f4:	469a      	mov	sl, r3
 80135f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80135fa:	d807      	bhi.n	801360c <_printf_i+0x28>
 80135fc:	2f62      	cmp	r7, #98	@ 0x62
 80135fe:	d80a      	bhi.n	8013616 <_printf_i+0x32>
 8013600:	2f00      	cmp	r7, #0
 8013602:	f000 80d2 	beq.w	80137aa <_printf_i+0x1c6>
 8013606:	2f58      	cmp	r7, #88	@ 0x58
 8013608:	f000 80b9 	beq.w	801377e <_printf_i+0x19a>
 801360c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013614:	e03a      	b.n	801368c <_printf_i+0xa8>
 8013616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801361a:	2b15      	cmp	r3, #21
 801361c:	d8f6      	bhi.n	801360c <_printf_i+0x28>
 801361e:	a101      	add	r1, pc, #4	@ (adr r1, 8013624 <_printf_i+0x40>)
 8013620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013624:	0801367d 	.word	0x0801367d
 8013628:	08013691 	.word	0x08013691
 801362c:	0801360d 	.word	0x0801360d
 8013630:	0801360d 	.word	0x0801360d
 8013634:	0801360d 	.word	0x0801360d
 8013638:	0801360d 	.word	0x0801360d
 801363c:	08013691 	.word	0x08013691
 8013640:	0801360d 	.word	0x0801360d
 8013644:	0801360d 	.word	0x0801360d
 8013648:	0801360d 	.word	0x0801360d
 801364c:	0801360d 	.word	0x0801360d
 8013650:	08013791 	.word	0x08013791
 8013654:	080136bb 	.word	0x080136bb
 8013658:	0801374b 	.word	0x0801374b
 801365c:	0801360d 	.word	0x0801360d
 8013660:	0801360d 	.word	0x0801360d
 8013664:	080137b3 	.word	0x080137b3
 8013668:	0801360d 	.word	0x0801360d
 801366c:	080136bb 	.word	0x080136bb
 8013670:	0801360d 	.word	0x0801360d
 8013674:	0801360d 	.word	0x0801360d
 8013678:	08013753 	.word	0x08013753
 801367c:	6833      	ldr	r3, [r6, #0]
 801367e:	1d1a      	adds	r2, r3, #4
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	6032      	str	r2, [r6, #0]
 8013684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801368c:	2301      	movs	r3, #1
 801368e:	e09d      	b.n	80137cc <_printf_i+0x1e8>
 8013690:	6833      	ldr	r3, [r6, #0]
 8013692:	6820      	ldr	r0, [r4, #0]
 8013694:	1d19      	adds	r1, r3, #4
 8013696:	6031      	str	r1, [r6, #0]
 8013698:	0606      	lsls	r6, r0, #24
 801369a:	d501      	bpl.n	80136a0 <_printf_i+0xbc>
 801369c:	681d      	ldr	r5, [r3, #0]
 801369e:	e003      	b.n	80136a8 <_printf_i+0xc4>
 80136a0:	0645      	lsls	r5, r0, #25
 80136a2:	d5fb      	bpl.n	801369c <_printf_i+0xb8>
 80136a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80136a8:	2d00      	cmp	r5, #0
 80136aa:	da03      	bge.n	80136b4 <_printf_i+0xd0>
 80136ac:	232d      	movs	r3, #45	@ 0x2d
 80136ae:	426d      	negs	r5, r5
 80136b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136b4:	4859      	ldr	r0, [pc, #356]	@ (801381c <_printf_i+0x238>)
 80136b6:	230a      	movs	r3, #10
 80136b8:	e011      	b.n	80136de <_printf_i+0xfa>
 80136ba:	6821      	ldr	r1, [r4, #0]
 80136bc:	6833      	ldr	r3, [r6, #0]
 80136be:	0608      	lsls	r0, r1, #24
 80136c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80136c4:	d402      	bmi.n	80136cc <_printf_i+0xe8>
 80136c6:	0649      	lsls	r1, r1, #25
 80136c8:	bf48      	it	mi
 80136ca:	b2ad      	uxthmi	r5, r5
 80136cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80136ce:	4853      	ldr	r0, [pc, #332]	@ (801381c <_printf_i+0x238>)
 80136d0:	6033      	str	r3, [r6, #0]
 80136d2:	bf14      	ite	ne
 80136d4:	230a      	movne	r3, #10
 80136d6:	2308      	moveq	r3, #8
 80136d8:	2100      	movs	r1, #0
 80136da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80136de:	6866      	ldr	r6, [r4, #4]
 80136e0:	60a6      	str	r6, [r4, #8]
 80136e2:	2e00      	cmp	r6, #0
 80136e4:	bfa2      	ittt	ge
 80136e6:	6821      	ldrge	r1, [r4, #0]
 80136e8:	f021 0104 	bicge.w	r1, r1, #4
 80136ec:	6021      	strge	r1, [r4, #0]
 80136ee:	b90d      	cbnz	r5, 80136f4 <_printf_i+0x110>
 80136f0:	2e00      	cmp	r6, #0
 80136f2:	d04b      	beq.n	801378c <_printf_i+0x1a8>
 80136f4:	4616      	mov	r6, r2
 80136f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80136fa:	fb03 5711 	mls	r7, r3, r1, r5
 80136fe:	5dc7      	ldrb	r7, [r0, r7]
 8013700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013704:	462f      	mov	r7, r5
 8013706:	42bb      	cmp	r3, r7
 8013708:	460d      	mov	r5, r1
 801370a:	d9f4      	bls.n	80136f6 <_printf_i+0x112>
 801370c:	2b08      	cmp	r3, #8
 801370e:	d10b      	bne.n	8013728 <_printf_i+0x144>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	07df      	lsls	r7, r3, #31
 8013714:	d508      	bpl.n	8013728 <_printf_i+0x144>
 8013716:	6923      	ldr	r3, [r4, #16]
 8013718:	6861      	ldr	r1, [r4, #4]
 801371a:	4299      	cmp	r1, r3
 801371c:	bfde      	ittt	le
 801371e:	2330      	movle	r3, #48	@ 0x30
 8013720:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013724:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013728:	1b92      	subs	r2, r2, r6
 801372a:	6122      	str	r2, [r4, #16]
 801372c:	f8cd a000 	str.w	sl, [sp]
 8013730:	464b      	mov	r3, r9
 8013732:	aa03      	add	r2, sp, #12
 8013734:	4621      	mov	r1, r4
 8013736:	4640      	mov	r0, r8
 8013738:	f7ff fee6 	bl	8013508 <_printf_common>
 801373c:	3001      	adds	r0, #1
 801373e:	d14a      	bne.n	80137d6 <_printf_i+0x1f2>
 8013740:	f04f 30ff 	mov.w	r0, #4294967295
 8013744:	b004      	add	sp, #16
 8013746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	f043 0320 	orr.w	r3, r3, #32
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	4833      	ldr	r0, [pc, #204]	@ (8013820 <_printf_i+0x23c>)
 8013754:	2778      	movs	r7, #120	@ 0x78
 8013756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	6831      	ldr	r1, [r6, #0]
 801375e:	061f      	lsls	r7, r3, #24
 8013760:	f851 5b04 	ldr.w	r5, [r1], #4
 8013764:	d402      	bmi.n	801376c <_printf_i+0x188>
 8013766:	065f      	lsls	r7, r3, #25
 8013768:	bf48      	it	mi
 801376a:	b2ad      	uxthmi	r5, r5
 801376c:	6031      	str	r1, [r6, #0]
 801376e:	07d9      	lsls	r1, r3, #31
 8013770:	bf44      	itt	mi
 8013772:	f043 0320 	orrmi.w	r3, r3, #32
 8013776:	6023      	strmi	r3, [r4, #0]
 8013778:	b11d      	cbz	r5, 8013782 <_printf_i+0x19e>
 801377a:	2310      	movs	r3, #16
 801377c:	e7ac      	b.n	80136d8 <_printf_i+0xf4>
 801377e:	4827      	ldr	r0, [pc, #156]	@ (801381c <_printf_i+0x238>)
 8013780:	e7e9      	b.n	8013756 <_printf_i+0x172>
 8013782:	6823      	ldr	r3, [r4, #0]
 8013784:	f023 0320 	bic.w	r3, r3, #32
 8013788:	6023      	str	r3, [r4, #0]
 801378a:	e7f6      	b.n	801377a <_printf_i+0x196>
 801378c:	4616      	mov	r6, r2
 801378e:	e7bd      	b.n	801370c <_printf_i+0x128>
 8013790:	6833      	ldr	r3, [r6, #0]
 8013792:	6825      	ldr	r5, [r4, #0]
 8013794:	6961      	ldr	r1, [r4, #20]
 8013796:	1d18      	adds	r0, r3, #4
 8013798:	6030      	str	r0, [r6, #0]
 801379a:	062e      	lsls	r6, r5, #24
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	d501      	bpl.n	80137a4 <_printf_i+0x1c0>
 80137a0:	6019      	str	r1, [r3, #0]
 80137a2:	e002      	b.n	80137aa <_printf_i+0x1c6>
 80137a4:	0668      	lsls	r0, r5, #25
 80137a6:	d5fb      	bpl.n	80137a0 <_printf_i+0x1bc>
 80137a8:	8019      	strh	r1, [r3, #0]
 80137aa:	2300      	movs	r3, #0
 80137ac:	6123      	str	r3, [r4, #16]
 80137ae:	4616      	mov	r6, r2
 80137b0:	e7bc      	b.n	801372c <_printf_i+0x148>
 80137b2:	6833      	ldr	r3, [r6, #0]
 80137b4:	1d1a      	adds	r2, r3, #4
 80137b6:	6032      	str	r2, [r6, #0]
 80137b8:	681e      	ldr	r6, [r3, #0]
 80137ba:	6862      	ldr	r2, [r4, #4]
 80137bc:	2100      	movs	r1, #0
 80137be:	4630      	mov	r0, r6
 80137c0:	f7ec fd8e 	bl	80002e0 <memchr>
 80137c4:	b108      	cbz	r0, 80137ca <_printf_i+0x1e6>
 80137c6:	1b80      	subs	r0, r0, r6
 80137c8:	6060      	str	r0, [r4, #4]
 80137ca:	6863      	ldr	r3, [r4, #4]
 80137cc:	6123      	str	r3, [r4, #16]
 80137ce:	2300      	movs	r3, #0
 80137d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80137d4:	e7aa      	b.n	801372c <_printf_i+0x148>
 80137d6:	6923      	ldr	r3, [r4, #16]
 80137d8:	4632      	mov	r2, r6
 80137da:	4649      	mov	r1, r9
 80137dc:	4640      	mov	r0, r8
 80137de:	47d0      	blx	sl
 80137e0:	3001      	adds	r0, #1
 80137e2:	d0ad      	beq.n	8013740 <_printf_i+0x15c>
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	079b      	lsls	r3, r3, #30
 80137e8:	d413      	bmi.n	8013812 <_printf_i+0x22e>
 80137ea:	68e0      	ldr	r0, [r4, #12]
 80137ec:	9b03      	ldr	r3, [sp, #12]
 80137ee:	4298      	cmp	r0, r3
 80137f0:	bfb8      	it	lt
 80137f2:	4618      	movlt	r0, r3
 80137f4:	e7a6      	b.n	8013744 <_printf_i+0x160>
 80137f6:	2301      	movs	r3, #1
 80137f8:	4632      	mov	r2, r6
 80137fa:	4649      	mov	r1, r9
 80137fc:	4640      	mov	r0, r8
 80137fe:	47d0      	blx	sl
 8013800:	3001      	adds	r0, #1
 8013802:	d09d      	beq.n	8013740 <_printf_i+0x15c>
 8013804:	3501      	adds	r5, #1
 8013806:	68e3      	ldr	r3, [r4, #12]
 8013808:	9903      	ldr	r1, [sp, #12]
 801380a:	1a5b      	subs	r3, r3, r1
 801380c:	42ab      	cmp	r3, r5
 801380e:	dcf2      	bgt.n	80137f6 <_printf_i+0x212>
 8013810:	e7eb      	b.n	80137ea <_printf_i+0x206>
 8013812:	2500      	movs	r5, #0
 8013814:	f104 0619 	add.w	r6, r4, #25
 8013818:	e7f5      	b.n	8013806 <_printf_i+0x222>
 801381a:	bf00      	nop
 801381c:	08016b75 	.word	0x08016b75
 8013820:	08016b86 	.word	0x08016b86

08013824 <memmove>:
 8013824:	4288      	cmp	r0, r1
 8013826:	b510      	push	{r4, lr}
 8013828:	eb01 0402 	add.w	r4, r1, r2
 801382c:	d902      	bls.n	8013834 <memmove+0x10>
 801382e:	4284      	cmp	r4, r0
 8013830:	4623      	mov	r3, r4
 8013832:	d807      	bhi.n	8013844 <memmove+0x20>
 8013834:	1e43      	subs	r3, r0, #1
 8013836:	42a1      	cmp	r1, r4
 8013838:	d008      	beq.n	801384c <memmove+0x28>
 801383a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801383e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013842:	e7f8      	b.n	8013836 <memmove+0x12>
 8013844:	4402      	add	r2, r0
 8013846:	4601      	mov	r1, r0
 8013848:	428a      	cmp	r2, r1
 801384a:	d100      	bne.n	801384e <memmove+0x2a>
 801384c:	bd10      	pop	{r4, pc}
 801384e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013856:	e7f7      	b.n	8013848 <memmove+0x24>

08013858 <memcpy>:
 8013858:	440a      	add	r2, r1
 801385a:	4291      	cmp	r1, r2
 801385c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013860:	d100      	bne.n	8013864 <memcpy+0xc>
 8013862:	4770      	bx	lr
 8013864:	b510      	push	{r4, lr}
 8013866:	f811 4b01 	ldrb.w	r4, [r1], #1
 801386a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801386e:	4291      	cmp	r1, r2
 8013870:	d1f9      	bne.n	8013866 <memcpy+0xe>
 8013872:	bd10      	pop	{r4, pc}

08013874 <_realloc_r>:
 8013874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013878:	4680      	mov	r8, r0
 801387a:	4615      	mov	r5, r2
 801387c:	460c      	mov	r4, r1
 801387e:	b921      	cbnz	r1, 801388a <_realloc_r+0x16>
 8013880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013884:	4611      	mov	r1, r2
 8013886:	f7ff bbad 	b.w	8012fe4 <_malloc_r>
 801388a:	b92a      	cbnz	r2, 8013898 <_realloc_r+0x24>
 801388c:	f7ff fc9a 	bl	80131c4 <_free_r>
 8013890:	2400      	movs	r4, #0
 8013892:	4620      	mov	r0, r4
 8013894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013898:	f000 f81a 	bl	80138d0 <_malloc_usable_size_r>
 801389c:	4285      	cmp	r5, r0
 801389e:	4606      	mov	r6, r0
 80138a0:	d802      	bhi.n	80138a8 <_realloc_r+0x34>
 80138a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80138a6:	d8f4      	bhi.n	8013892 <_realloc_r+0x1e>
 80138a8:	4629      	mov	r1, r5
 80138aa:	4640      	mov	r0, r8
 80138ac:	f7ff fb9a 	bl	8012fe4 <_malloc_r>
 80138b0:	4607      	mov	r7, r0
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d0ec      	beq.n	8013890 <_realloc_r+0x1c>
 80138b6:	42b5      	cmp	r5, r6
 80138b8:	462a      	mov	r2, r5
 80138ba:	4621      	mov	r1, r4
 80138bc:	bf28      	it	cs
 80138be:	4632      	movcs	r2, r6
 80138c0:	f7ff ffca 	bl	8013858 <memcpy>
 80138c4:	4621      	mov	r1, r4
 80138c6:	4640      	mov	r0, r8
 80138c8:	f7ff fc7c 	bl	80131c4 <_free_r>
 80138cc:	463c      	mov	r4, r7
 80138ce:	e7e0      	b.n	8013892 <_realloc_r+0x1e>

080138d0 <_malloc_usable_size_r>:
 80138d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138d4:	1f18      	subs	r0, r3, #4
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	bfbc      	itt	lt
 80138da:	580b      	ldrlt	r3, [r1, r0]
 80138dc:	18c0      	addlt	r0, r0, r3
 80138de:	4770      	bx	lr

080138e0 <_init>:
 80138e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138e2:	bf00      	nop
 80138e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138e6:	bc08      	pop	{r3}
 80138e8:	469e      	mov	lr, r3
 80138ea:	4770      	bx	lr

080138ec <_fini>:
 80138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ee:	bf00      	nop
 80138f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138f2:	bc08      	pop	{r3}
 80138f4:	469e      	mov	lr, r3
 80138f6:	4770      	bx	lr
