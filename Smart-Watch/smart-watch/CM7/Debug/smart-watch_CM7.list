
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f28  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080091c0  080091c0  0000a1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c0  080093c0  0000b010  2**0
                  CONTENTS
  4 .ARM          00000000  080093c0  080093c0  0000b010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093c0  080093c0  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080093c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  24000010  080093d8  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000150  080093d8  0000b150  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010df6  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b40  00000000  00000000  0001be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b35  00000000  00000000  0001f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040b35  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c30  00000000  00000000  00060eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019820a  00000000  00000000  00075b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020dd24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  0020dd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00211ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080091a8 	.word	0x080091a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080091a8 	.word	0x080091a8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fba9 	bl	8001b70 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fba3 	bl	8001b70 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fb8f 	bl	8001b70 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fb89 	bl	8001b70 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 fb75 	bl	8001b70 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fb6f 	bl	8001b70 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f001 f827 	bl	80015b8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f001 f821 	bl	80015b8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f001 f81b 	bl	80015b8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000654:	2048      	movs	r0, #72	@ 0x48
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__18_BIT);
 8000660:	2006      	movs	r0, #6
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 fdf3 	bl	80015b8 <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f000 fded 	bl	80015b8 <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_spi_tx+0x30>)
 80009fa:	f006 fb3f 	bl	800707c <HAL_SPI_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a04:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
		return;

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b0 	.word	0x240000b0
 8000a18:	2400002c 	.word	0x2400002c

08000a1c <lcd_init>:

uint8_t color[3];


void lcd_init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000a20:	f7ff fd9b 	bl	800055a <GC9A01_init>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <lcd_process>:


void lcd_process(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

	lcd_demo();
 8000a2c:	f000 f802 	bl	8000a34 <lcd_demo>

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <lcd_demo>:


void lcd_demo(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

    // Triangle //

	triangle_ex();
 8000a38:	f000 f81c 	bl	8000a74 <triangle_ex>

    //setPWM(1);

    HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a40:	f000 fdba 	bl	80015b8 <HAL_Delay>

    // setPWM(0);

    // Rainbow //

    rainbow_ex();
 8000a44:	f000 f854 	bl	8000af0 <rainbow_ex>

    // setPWM(1);

    HAL_Delay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f000 fdb4 	bl	80015b8 <HAL_Delay>

    // setPWM(0);

    // Checkerboard //

    checkboard_ex();
 8000a50:	f000 f8f8 	bl	8000c44 <checkboard_ex>

    // setPWM(1);

    HAL_Delay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a58:	f000 fdae 	bl	80015b8 <HAL_Delay>

    // setPWM(0);

    // Swiss flag //

    swissFlag_ex();
 8000a5c:	f000 f94e 	bl	8000cfc <swissFlag_ex>

    // setPWM(1);

    GC9A01_write_command(0x20);
 8000a60:	2020      	movs	r0, #32
 8000a62:	f7ff fd1d 	bl	80004a0 <GC9A01_write_command>

    HAL_Delay(1000);
 8000a66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a6a:	f000 fda5 	bl	80015b8 <HAL_Delay>

    // setPWM(0);

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <triangle_ex>:




static void triangle_ex(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

	color[0] = 0xFF;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <triangle_ex+0x74>)
 8000a7c:	22ff      	movs	r2, #255	@ 0xff
 8000a7e:	701a      	strb	r2, [r3, #0]
	color[1] = 0xFF;
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <triangle_ex+0x74>)
 8000a82:	22ff      	movs	r2, #255	@ 0xff
 8000a84:	705a      	strb	r2, [r3, #1]

	for(int x = 0; x < 240; x++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	e025      	b.n	8000ad8 <triangle_ex+0x64>
	{

		for(int y = 0; y < 240; y++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	e01c      	b.n	8000acc <triangle_ex+0x58>
		{

			if(x < y)
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <triangle_ex+0x2e>
			{

				color[2] = 0xFF;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <triangle_ex+0x74>)
 8000a9c:	22ff      	movs	r2, #255	@ 0xff
 8000a9e:	709a      	strb	r2, [r3, #2]
 8000aa0:	e002      	b.n	8000aa8 <triangle_ex+0x34>

			}
			else
			{

				color[2] = 0x00;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <triangle_ex+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	709a      	strb	r2, [r3, #2]

			}

			if(x == 0 && y == 0)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <triangle_ex+0x4a>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <triangle_ex+0x4a>
			{

				GC9A01_write(color, sizeof(color));
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <triangle_ex+0x74>)
 8000ab8:	f7ff fd2f 	bl	800051a <GC9A01_write>
 8000abc:	e003      	b.n	8000ac6 <triangle_ex+0x52>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000abe:	2103      	movs	r1, #3
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <triangle_ex+0x74>)
 8000ac2:	f7ff fd3a 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2bef      	cmp	r3, #239	@ 0xef
 8000ad0:	dddf      	ble.n	8000a92 <triangle_ex+0x1e>
	for(int x = 0; x < 240; x++)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2bef      	cmp	r3, #239	@ 0xef
 8000adc:	ddd6      	ble.n	8000a8c <triangle_ex+0x18>

		}

	}

}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000030 	.word	0x24000030
 8000aec:	00000000 	.word	0x00000000

08000af0 <rainbow_ex>:


static void rainbow_ex(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0

	float frequency = 0.026;
 8000af6:	4b50      	ldr	r3, [pc, #320]	@ (8000c38 <rainbow_ex+0x148>)
 8000af8:	60fb      	str	r3, [r7, #12]

	for(int x = 0; x < 240; x++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e089      	b.n	8000c14 <rainbow_ex+0x124>
	{

		color[0] = sin(frequency*x + 0) * 127 + 128;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b12:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000c3c <rainbow_ex+0x14c>
 8000b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b22:	f007 fd75 	bl	8008610 <sin>
 8000b26:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8000c28 <rainbow_ex+0x138>
 8000b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b32:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8000c30 <rainbow_ex+0x140>
 8000b36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b3e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b42:	793b      	ldrb	r3, [r7, #4]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <rainbow_ex+0x150>)
 8000b48:	701a      	strb	r2, [r3, #0]
		color[1] = sin(frequency*x + 2) * 127 + 128;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	eeb0 0b47 	vmov.f64	d0, d7
 8000b6c:	f007 fd50 	bl	8008610 <sin>
 8000b70:	eeb0 7b40 	vmov.f64	d7, d0
 8000b74:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8000c28 <rainbow_ex+0x138>
 8000b78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b7c:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8000c30 <rainbow_ex+0x140>
 8000b80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b88:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b8c:	793b      	ldrb	r3, [r7, #4]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <rainbow_ex+0x150>)
 8000b92:	705a      	strb	r2, [r3, #1]
		color[2] = sin(frequency*x + 4) * 127 + 128;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ba6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb2:	eeb0 0b47 	vmov.f64	d0, d7
 8000bb6:	f007 fd2b 	bl	8008610 <sin>
 8000bba:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbe:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000c28 <rainbow_ex+0x138>
 8000bc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bc6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000c30 <rainbow_ex+0x140>
 8000bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bd6:	793b      	ldrb	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <rainbow_ex+0x150>)
 8000bdc:	709a      	strb	r2, [r3, #2]
		for(int y = 0; y < 240; y++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e011      	b.n	8000c08 <rainbow_ex+0x118>
		{

			if (x == 0 && y == 0)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d107      	bne.n	8000bfa <rainbow_ex+0x10a>
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d104      	bne.n	8000bfa <rainbow_ex+0x10a>
			{

				GC9A01_write(color, sizeof(color));
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4813      	ldr	r0, [pc, #76]	@ (8000c40 <rainbow_ex+0x150>)
 8000bf4:	f7ff fc91 	bl	800051a <GC9A01_write>
 8000bf8:	e003      	b.n	8000c02 <rainbow_ex+0x112>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <rainbow_ex+0x150>)
 8000bfe:	f7ff fc9c 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	3301      	adds	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2bef      	cmp	r3, #239	@ 0xef
 8000c0c:	ddea      	ble.n	8000be4 <rainbow_ex+0xf4>
	for(int x = 0; x < 240; x++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2bef      	cmp	r3, #239	@ 0xef
 8000c18:	f77f af72 	ble.w	8000b00 <rainbow_ex+0x10>

		}

	}

}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	405fc000 	.word	0x405fc000
 8000c30:	00000000 	.word	0x00000000
 8000c34:	40600000 	.word	0x40600000
 8000c38:	3cd4fdf4 	.word	0x3cd4fdf4
 8000c3c:	00000000 	.word	0x00000000
 8000c40:	24000030 	.word	0x24000030

08000c44 <checkboard_ex>:


static void checkboard_ex(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

	for(int x = 0; x < 240; x++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	e048      	b.n	8000ce2 <checkboard_ex+0x9e>
	{

		for(int y = 0; y < 240; y++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	e03f      	b.n	8000cd6 <checkboard_ex+0x92>
		{

			if((x / 10) % 2 ==  (y / 10) % 2)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a26      	ldr	r2, [pc, #152]	@ (8000cf4 <checkboard_ex+0xb0>)
 8000c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5e:	1092      	asrs	r2, r2, #2
 8000c60:	17db      	asrs	r3, r3, #31
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	bfb8      	it	lt
 8000c6c:	425b      	neglt	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	4920      	ldr	r1, [pc, #128]	@ (8000cf4 <checkboard_ex+0xb0>)
 8000c74:	fb81 0103 	smull	r0, r1, r1, r3
 8000c78:	1089      	asrs	r1, r1, #2
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1acb      	subs	r3, r1, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	bfb8      	it	lt
 8000c86:	425b      	neglt	r3, r3
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d109      	bne.n	8000ca0 <checkboard_ex+0x5c>
			{

				color[0] = 0xFF;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000c8e:	22ff      	movs	r2, #255	@ 0xff
 8000c90:	701a      	strb	r2, [r3, #0]
				color[1] = 0xFF;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000c94:	22ff      	movs	r2, #255	@ 0xff
 8000c96:	705a      	strb	r2, [r3, #1]
				color[2] = 0xFF;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000c9a:	22ff      	movs	r2, #255	@ 0xff
 8000c9c:	709a      	strb	r2, [r3, #2]
 8000c9e:	e008      	b.n	8000cb2 <checkboard_ex+0x6e>

			}
			else
			{

				color[0] = 0x00;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
				color[1] = 0x00;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	705a      	strb	r2, [r3, #1]
				color[2] = 0x00;
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	709a      	strb	r2, [r3, #2]

			}
			if(x == 0 && y == 0)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <checkboard_ex+0x84>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <checkboard_ex+0x84>
			{

				GC9A01_write(color, sizeof(color));
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000cc2:	f7ff fc2a 	bl	800051a <GC9A01_write>
 8000cc6:	e003      	b.n	8000cd0 <checkboard_ex+0x8c>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000cc8:	2103      	movs	r1, #3
 8000cca:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <checkboard_ex+0xb4>)
 8000ccc:	f7ff fc35 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2bef      	cmp	r3, #239	@ 0xef
 8000cda:	ddbc      	ble.n	8000c56 <checkboard_ex+0x12>
	for(int x = 0; x < 240; x++)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2bef      	cmp	r3, #239	@ 0xef
 8000ce6:	ddb3      	ble.n	8000c50 <checkboard_ex+0xc>

		}

	}

}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	66666667 	.word	0x66666667
 8000cf8:	24000030 	.word	0x24000030

08000cfc <swissFlag_ex>:


static void swissFlag_ex(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	color[0] = 0xFF;
 8000d02:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d04:	22ff      	movs	r2, #255	@ 0xff
 8000d06:	701a      	strb	r2, [r3, #0]

	for(int x = 0; x < 240; x++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	e03f      	b.n	8000d8e <swissFlag_ex+0x92>
	{

		for(int y = 0; y < 240; y++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	e036      	b.n	8000d82 <swissFlag_ex+0x86>
		{

			if((x >= 1*48 && x < 4*48 && y >= 2*48 && y < 3*48) ||
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d18:	dd08      	ble.n	8000d2c <swissFlag_ex+0x30>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2bbf      	cmp	r3, #191	@ 0xbf
 8000d1e:	dc05      	bgt.n	8000d2c <swissFlag_ex+0x30>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d24:	dd02      	ble.n	8000d2c <swissFlag_ex+0x30>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b8f      	cmp	r3, #143	@ 0x8f
 8000d2a:	dd0b      	ble.n	8000d44 <swissFlag_ex+0x48>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d30:	dd0f      	ble.n	8000d52 <swissFlag_ex+0x56>
				(x >= 2*48 && x < 3*48 && y >= 1*48 && y < 4*48))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b8f      	cmp	r3, #143	@ 0x8f
 8000d36:	dc0c      	bgt.n	8000d52 <swissFlag_ex+0x56>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d3c:	dd09      	ble.n	8000d52 <swissFlag_ex+0x56>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2bbf      	cmp	r3, #191	@ 0xbf
 8000d42:	dc06      	bgt.n	8000d52 <swissFlag_ex+0x56>
			{

				color[1] = 0xFF;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	705a      	strb	r2, [r3, #1]
				color[2] = 0xFF;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d4c:	22ff      	movs	r2, #255	@ 0xff
 8000d4e:	709a      	strb	r2, [r3, #2]
 8000d50:	e005      	b.n	8000d5e <swissFlag_ex+0x62>

			}
			else
			{

				color[1] = 0x00;
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	705a      	strb	r2, [r3, #1]
				color[2] = 0x00;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	709a      	strb	r2, [r3, #2]

			}
			if(x == 0 && y == 0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d107      	bne.n	8000d74 <swissFlag_ex+0x78>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d104      	bne.n	8000d74 <swissFlag_ex+0x78>
			{

				GC9A01_write(color, sizeof(color));
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d6e:	f7ff fbd4 	bl	800051a <GC9A01_write>
 8000d72:	e003      	b.n	8000d7c <swissFlag_ex+0x80>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000d74:	2103      	movs	r1, #3
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <swissFlag_ex+0xa4>)
 8000d78:	f7ff fbdf 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2bef      	cmp	r3, #239	@ 0xef
 8000d86:	ddc5      	ble.n	8000d14 <swissFlag_ex+0x18>
	for(int x = 0; x < 240; x++)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2bef      	cmp	r3, #239	@ 0xef
 8000d92:	ddbc      	ble.n	8000d0e <swissFlag_ex+0x12>

		}

	}

}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	24000030 	.word	0x24000030

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000db0:	bf00      	nop
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <main+0xa4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <main+0x24>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dcf4      	bgt.n	8000db2 <main+0xe>
  if ( timeout < 0 )
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da01      	bge.n	8000dd2 <main+0x2e>
  {
  Error_Handler();
 8000dce:	f000 f9c9 	bl	8001164 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fb5f 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f839 	bl	8000e4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <main+0xa4>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <main+0xa4>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <main+0xa4>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 fed3 	bl	8001ba4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 fee9 	bl	8001bd8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e0c:	bf00      	nop
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <main+0xa4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <main+0x80>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dcf4      	bgt.n	8000e0e <main+0x6a>
if ( timeout < 0 )
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da01      	bge.n	8000e2e <main+0x8a>
{
Error_Handler();
 8000e2a:	f000 f99b 	bl	8001164 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f903 	bl	8001038 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000e32:	f000 f8ad 	bl	8000f90 <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8000e36:	f000 f887 	bl	8000f48 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000e3a:	f007 f9c1 	bl	80081c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e3e:	f7ff fded 	bl	8000a1c <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000e42:	f7ff fdf1 	bl	8000a28 <lcd_process>
 8000e46:	e7fc      	b.n	8000e42 <main+0x9e>
 8000e48:	58024400 	.word	0x58024400

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09c      	sub	sp, #112	@ 0x70
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	224c      	movs	r2, #76	@ 0x4c
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 fba9 	bl	80085b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2220      	movs	r2, #32
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 fba3 	bl	80085b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f000 fec7 	bl	8001c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <SystemClock_Config+0xf4>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	4a31      	ldr	r2, [pc, #196]	@ (8000f40 <SystemClock_Config+0xf4>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <SystemClock_Config+0xf4>)
 8000e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <SystemClock_Config+0xf8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e94:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <SystemClock_Config+0xf8>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <SystemClock_Config+0xf8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea8:	bf00      	nop
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <SystemClock_Config+0xf8>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb6:	d1f8      	bne.n	8000eaa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2340      	movs	r3, #64	@ 0x40
 8000ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000ed8:	230d      	movs	r3, #13
 8000eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fede 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000efe:	f000 f931 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	233f      	movs	r3, #63	@ 0x3f
 8000f04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2303      	movs	r3, #3
 8000f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f12:	2340      	movs	r3, #64	@ 0x40
 8000f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f16:	2340      	movs	r3, #64	@ 0x40
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f20:	2340      	movs	r3, #64	@ 0x40
 8000f22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fb1d 	bl	8002568 <HAL_RCC_ClockConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000f34:	f000 f916 	bl	8001164 <Error_Handler>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3770      	adds	r7, #112	@ 0x70
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58000400 	.word	0x58000400
 8000f44:	58024800 	.word	0x58024800

08000f48 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <MX_SDMMC1_SD_Init+0x44>)
 8000f50:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f64:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_SDMMC1_SD_Init+0x40>)
 8000f74:	f004 fbac 	bl	80056d0 <HAL_SD_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000f7e:	f000 f8f1 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000034 	.word	0x24000034
 8000f8c:	52007000 	.word	0x52007000

08000f90 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000f96:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <MX_SPI5_Init+0xa4>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000f9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8001006:	2200      	movs	r2, #0
 8001008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_SPI5_Init+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8001012:	2200      	movs	r2, #0
 8001014:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_SPI5_Init+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_SPI5_Init+0xa0>)
 800101e:	f005 ff09 	bl	8006e34 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001028:	f000 f89c 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	240000b0 	.word	0x240000b0
 8001034:	40015000 	.word	0x40015000

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <MX_GPIO_Init+0x11c>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a3f      	ldr	r2, [pc, #252]	@ (8001154 <MX_GPIO_Init+0x11c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <MX_GPIO_Init+0x11c>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <MX_GPIO_Init+0x11c>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <MX_GPIO_Init+0x11c>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <MX_GPIO_Init+0x11c>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <MX_GPIO_Init+0x11c>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a30      	ldr	r2, [pc, #192]	@ (8001154 <MX_GPIO_Init+0x11c>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <MX_GPIO_Init+0x11c>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	4a21      	ldr	r2, [pc, #132]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_GPIO_Init+0x11c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2102      	movs	r1, #2
 80010e8:	481b      	ldr	r0, [pc, #108]	@ (8001158 <MX_GPIO_Init+0x120>)
 80010ea:	f000 fd41 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2161      	movs	r1, #97	@ 0x61
 80010f2:	481a      	ldr	r0, [pc, #104]	@ (800115c <MX_GPIO_Init+0x124>)
 80010f4:	f000 fd3c 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4814      	ldr	r0, [pc, #80]	@ (8001160 <MX_GPIO_Init+0x128>)
 800110e:	f000 fb67 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <MX_GPIO_Init+0x120>)
 800112a:	f000 fb59 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800112e:	2361      	movs	r3, #97	@ 0x61
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_GPIO_Init+0x124>)
 8001146:	f000 fb4b 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	@ 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	58024400 	.word	0x58024400
 8001158:	58022800 	.word	0x58022800
 800115c:	58022400 	.word	0x58022400
 8001160:	58022000 	.word	0x58022000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_MspInit+0x30>)
 8001178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800117c:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <HAL_MspInit+0x30>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_MspInit+0x30>)
 8001188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	58024400 	.word	0x58024400

080011a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0be      	sub	sp, #248	@ 0xf8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	22c8      	movs	r2, #200	@ 0xc8
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f9f4 	bl	80085b2 <memset>
  if(hsd->Instance==SDMMC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a38      	ldr	r2, [pc, #224]	@ (80012b0 <HAL_SD_MspInit+0x10c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d169      	bne.n	80012a8 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80011d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fd33 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80011f4:	f7ff ffb6 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 80011fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011fe:	4a2d      	ldr	r2, [pc, #180]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001204:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 800120a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800120e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	4a25      	ldr	r2, [pc, #148]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_SD_MspInit+0x110>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001252:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800126c:	230c      	movs	r3, #12
 800126e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <HAL_SD_MspInit+0x114>)
 800127a:	f000 fab1 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127e:	2304      	movs	r3, #4
 8001280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001296:	230c      	movs	r3, #12
 8001298:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	@ (80012bc <HAL_SD_MspInit+0x118>)
 80012a4:	f000 fa9c 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	37f8      	adds	r7, #248	@ 0xf8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	52007000 	.word	0x52007000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58020800 	.word	0x58020800
 80012bc:	58020c00 	.word	0x58020c00

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0be      	sub	sp, #248	@ 0xf8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	22c8      	movs	r2, #200	@ 0xc8
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f007 f966 	bl	80085b2 <memset>
  if(hspi->Instance==SPI5)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a39      	ldr	r2, [pc, #228]	@ (80013d0 <HAL_SPI_MspInit+0x110>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d16a      	bne.n	80013c6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80012f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fca4 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001312:	f7ff ff27 	bl	8001164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001316:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800131c:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 800131e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001326:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800132c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a26      	ldr	r2, [pc, #152]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 800133c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <HAL_SPI_MspInit+0x114>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 8001370:	2301      	movs	r3, #1
 8001372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001388:	2305      	movs	r3, #5
 800138a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001392:	4619      	mov	r1, r3
 8001394:	4810      	ldr	r0, [pc, #64]	@ (80013d8 <HAL_SPI_MspInit+0x118>)
 8001396:	f000 fa23 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 800139a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800139e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013b4:	2305      	movs	r3, #5
 80013b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <HAL_SPI_MspInit+0x11c>)
 80013c2:	f000 fa0d 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	37f8      	adds	r7, #248	@ 0xf8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40015000 	.word	0x40015000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58022800 	.word	0x58022800
 80013dc:	58022400 	.word	0x58022400

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001436:	f000 f89f 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7fe ff48 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f007 f8a9 	bl	80085c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fc97 	bl	8000da4 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001484:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 8001488:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800148c:	24000150 	.word	0x24000150

08001490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC3_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f96e 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a0:	f001 fa18 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	@ (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f814 	bl	800150c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fe3f 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	080091c0 	.word	0x080091c0
 8001504:	24000004 	.word	0x24000004
 8001508:	24000000 	.word	0x24000000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_InitTick+0x64>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f945 	bl	80017c6 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f91d 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x68>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000000 	.word	0x24000000
 8001574:	24000008 	.word	0x24000008

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	24000138 	.word	0x24000138

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000138 	.word	0x24000138

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c

08001600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <HAL_GetREVID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	5c001000 	.word	0x5c001000

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff47 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff5e 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff90 	bl	80016d0 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5f 	bl	800167c <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffb2 	bl	8001738 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ee:	4b89      	ldr	r3, [pc, #548]	@ (8001a14 <HAL_GPIO_Init+0x234>)
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017f2:	e194      	b.n	8001b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8186 	beq.w	8001b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d005      	beq.n	8001824 <HAL_GPIO_Init+0x44>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d130      	bne.n	8001886 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185a:	2201      	movs	r2, #1
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f003 0201 	and.w	r2, r3, #1
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d017      	beq.n	80018c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80e0 	beq.w	8001b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <HAL_GPIO_Init+0x238>)
 800195a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800195e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a18 <HAL_GPIO_Init+0x238>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <HAL_GPIO_Init+0x238>)
 800196a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <HAL_GPIO_Init+0x23c>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a20      	ldr	r2, [pc, #128]	@ (8001a20 <HAL_GPIO_Init+0x240>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d052      	beq.n	8001a48 <HAL_GPIO_Init+0x268>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_GPIO_Init+0x244>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_GPIO_Init+0x22e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_GPIO_Init+0x248>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d02b      	beq.n	8001a0a <HAL_GPIO_Init+0x22a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_GPIO_Init+0x24c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d025      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_GPIO_Init+0x250>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01f      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <HAL_GPIO_Init+0x254>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_GPIO_Init+0x258>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x21a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a19      	ldr	r2, [pc, #100]	@ (8001a3c <HAL_GPIO_Init+0x25c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x216>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a18      	ldr	r2, [pc, #96]	@ (8001a40 <HAL_GPIO_Init+0x260>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x212>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_GPIO_Init+0x264>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x20e>
 80019ea:	2309      	movs	r3, #9
 80019ec:	e02d      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019ee:	230a      	movs	r3, #10
 80019f0:	e02b      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e029      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e027      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e025      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019fe:	2305      	movs	r3, #5
 8001a00:	e023      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e021      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e01f      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e01d      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01b      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a12:	bf00      	nop
 8001a14:	58000080 	.word	0x58000080
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58000400 	.word	0x58000400
 8001a20:	58020000 	.word	0x58020000
 8001a24:	58020400 	.word	0x58020400
 8001a28:	58020800 	.word	0x58020800
 8001a2c:	58020c00 	.word	0x58020c00
 8001a30:	58021000 	.word	0x58021000
 8001a34:	58021400 	.word	0x58021400
 8001a38:	58021800 	.word	0x58021800
 8001a3c:	58021c00 	.word	0x58021c00
 8001a40:	58022000 	.word	0x58022000
 8001a44:	58022400 	.word	0x58022400
 8001a48:	2300      	movs	r3, #0
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5a:	4938      	ldr	r1, [pc, #224]	@ (8001b3c <HAL_GPIO_Init+0x35c>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001abc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f ae63 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3724      	adds	r7, #36	@ 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	58000400 	.word	0x58000400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001bac:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_HSEM_FastTake+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3320      	adds	r3, #32
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_HSEM_FastTake+0x30>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e000      	b.n	8001bc2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	58026400 	.word	0x58026400
 8001bd4:	80000300 	.word	0x80000300

08001bd8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001be2:	4906      	ldr	r1, [pc, #24]	@ (8001bfc <HAL_HSEM_Release+0x24>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	58026400 	.word	0x58026400

08001c00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c08:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d00a      	beq.n	8001c2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e040      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e03e      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c32:	491f      	ldr	r1, [pc, #124]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c3a:	f7ff fcb1 	bl	80015a0 <HAL_GetTick>
 8001c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c40:	e009      	b.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c42:	f7ff fcad 	bl	80015a0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c50:	d901      	bls.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e028      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c62:	d1ee      	bne.n	8001c42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b1e      	cmp	r3, #30
 8001c68:	d008      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c6e:	d005      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b1d      	cmp	r3, #29
 8001c74:	d002      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c7a:	d114      	bne.n	8001ca6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c7c:	f7ff fc90 	bl	80015a0 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c82:	e009      	b.n	8001c98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c84:	f7ff fc8c 	bl	80015a0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c92:	d901      	bls.n	8001c98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58024800 	.word	0x58024800

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f000 bc48 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8088 	beq.w	8001de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b99      	ldr	r3, [pc, #612]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce0:	4b96      	ldr	r3, [pc, #600]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d007      	beq.n	8001cfc <HAL_RCC_OscConfig+0x48>
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d111      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d06d      	beq.n	8001de4 <HAL_RCC_OscConfig+0x130>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d169      	bne.n	8001de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f000 bc21 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x7a>
 8001d20:	4b86      	ldr	r3, [pc, #536]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a85      	ldr	r2, [pc, #532]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x9c>
 8001d36:	4b81      	ldr	r3, [pc, #516]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b7e      	ldr	r3, [pc, #504]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d5a:	4b78      	ldr	r3, [pc, #480]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b75      	ldr	r3, [pc, #468]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a74      	ldr	r2, [pc, #464]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d74:	4b71      	ldr	r3, [pc, #452]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a70      	ldr	r2, [pc, #448]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b6e      	ldr	r3, [pc, #440]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6d      	ldr	r2, [pc, #436]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc04 	bl	80015a0 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fc00 	bl	80015a0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e3d4      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fbf0 	bl	80015a0 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fbec 	bl	80015a0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd6:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x110>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80ca 	beq.w	8001f88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	4b51      	ldr	r3, [pc, #324]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_RCC_OscConfig+0x166>
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2b18      	cmp	r3, #24
 8001e0e:	d156      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d151      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1a:	4b48      	ldr	r3, [pc, #288]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x17e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e392      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e32:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0219 	bic.w	r2, r3, #25
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	493f      	ldr	r1, [pc, #252]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fbac 	bl	80015a0 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fba8 	bl	80015a0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e37c      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b37      	ldr	r3, [pc, #220]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	f7ff fbc9 	bl	8001600 <HAL_GetREVID>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d817      	bhi.n	8001ea8 <HAL_RCC_OscConfig+0x1f4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d108      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1de>
 8001e80:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	e07a      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	031b      	lsls	r3, r3, #12
 8001ea0:	4926      	ldr	r1, [pc, #152]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea6:	e06f      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	e064      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d047      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0219 	bic.w	r2, r3, #25
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	491a      	ldr	r1, [pc, #104]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb62 	bl	80015a0 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fb5e 	bl	80015a0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e332      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	f7ff fb7f 	bl	8001600 <HAL_GetREVID>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d819      	bhi.n	8001f40 <HAL_RCC_OscConfig+0x28c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b40      	cmp	r3, #64	@ 0x40
 8001f12:	d108      	bne.n	8001f26 <HAL_RCC_OscConfig+0x272>
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f22:	6053      	str	r3, [r2, #4]
 8001f24:	e030      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	031b      	lsls	r3, r3, #12
 8001f34:	4901      	ldr	r1, [pc, #4]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	4b9a      	ldr	r3, [pc, #616]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	4997      	ldr	r1, [pc, #604]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b95      	ldr	r3, [pc, #596]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff fb1d 	bl	80015a0 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fb19 	bl	80015a0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2ed      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7c:	4b8b      	ldr	r3, [pc, #556]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a9 	beq.w	80020e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa0:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d007      	beq.n	8001fbc <HAL_RCC_OscConfig+0x308>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d13a      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d135      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e2c1      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fd4:	f7ff fb14 	bl	8001600 <HAL_GetREVID>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d817      	bhi.n	8002012 <HAL_RCC_OscConfig+0x35e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x348>
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ff8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ffa:	e075      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	4968      	ldr	r1, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002010:	e06a      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4962      	ldr	r1, [pc, #392]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002026:	e05f      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d042      	beq.n	80020b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002030:	4b5e      	ldr	r3, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fab0 	bl	80015a0 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002044:	f7ff faac 	bl	80015a0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e280      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002056:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002062:	f7ff facd 	bl	8001600 <HAL_GetREVID>
 8002066:	4603      	mov	r3, r0
 8002068:	f241 0203 	movw	r2, #4099	@ 0x1003
 800206c:	4293      	cmp	r3, r2
 800206e:	d817      	bhi.n	80020a0 <HAL_RCC_OscConfig+0x3ec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	2b20      	cmp	r3, #32
 8002076:	d108      	bne.n	800208a <HAL_RCC_OscConfig+0x3d6>
 8002078:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002080:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002086:	6053      	str	r3, [r2, #4]
 8002088:	e02e      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 800208a:	4b48      	ldr	r3, [pc, #288]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	4944      	ldr	r1, [pc, #272]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e023      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 80020a0:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	493f      	ldr	r1, [pc, #252]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa6d 	bl	80015a0 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020ca:	f7ff fa69 	bl	80015a0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e23d      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d036      	beq.n	8002162 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa4a 	bl	80015a0 <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa46 	bl	80015a0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e21a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x45c>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fa30 	bl	80015a0 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff fa2c 	bl	80015a0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e200      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d039      	beq.n	80021e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800217c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002182:	f7ff fa0d 	bl	80015a0 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218a:	f7ff fa09 	bl	80015a0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1dd      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x4d6>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x52e>
 80021aa:	bf00      	nop
 80021ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9f0 	bl	80015a0 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7ff f9ec 	bl	80015a0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021d6:	4b92      	ldr	r3, [pc, #584]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8081 	beq.w	80022f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a8b      	ldr	r2, [pc, #556]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f9d0 	bl	80015a0 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002204:	f7ff f9cc 	bl	80015a0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1a0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	4b83      	ldr	r3, [pc, #524]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x584>
 800222a:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a7c      	ldr	r2, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e02d      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x5a6>
 8002240:	4b77      	ldr	r3, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a76      	ldr	r2, [pc, #472]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
 800224c:	4b74      	ldr	r3, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a73      	ldr	r2, [pc, #460]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x5c8>
 8002262:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002266:	4a6e      	ldr	r2, [pc, #440]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	@ 0x70
 800226e:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	4a6b      	ldr	r2, [pc, #428]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	@ 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800227c:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002280:	4a67      	ldr	r2, [pc, #412]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	@ 0x70
 8002288:	4b65      	ldr	r3, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a64      	ldr	r2, [pc, #400]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f980 	bl	80015a0 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff f97c 	bl	80015a0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e14e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5f0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff f96a 	bl	80015a0 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff f966 	bl	80015a0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e138      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 812d 	beq.w	8002556 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022fc:	4b48      	ldr	r3, [pc, #288]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002304:	2b18      	cmp	r3, #24
 8002306:	f000 80bd 	beq.w	8002484 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 809e 	bne.w	8002450 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b42      	ldr	r3, [pc, #264]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a41      	ldr	r2, [pc, #260]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f93e 	bl	80015a0 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f93a 	bl	80015a0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e10e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x774>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	430a      	orrs	r2, r1
 800235a:	4931      	ldr	r1, [pc, #196]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	3b01      	subs	r3, #1
 8002366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	3b01      	subs	r3, #1
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	b29b      	uxth	r3, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	3b01      	subs	r3, #1
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002390:	4923      	ldr	r1, [pc, #140]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x778>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ae:	00d2      	lsls	r2, r2, #3
 80023b0:	491b      	ldr	r1, [pc, #108]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f023 020c 	bic.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4917      	ldr	r1, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f023 0202 	bic.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	4912      	ldr	r1, [pc, #72]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff f8c3 	bl	80015a0 <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241c:	e011      	b.n	8002442 <HAL_RCC_OscConfig+0x78e>
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	58024800 	.word	0x58024800
 8002428:	fffffc0c 	.word	0xfffffc0c
 800242c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f8b6 	bl	80015a0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e08a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x77c>
 800244e:	e082      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b43      	ldr	r3, [pc, #268]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a42      	ldr	r2, [pc, #264]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f8a0 	bl	80015a0 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff f89c 	bl	80015a0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e070      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	4b3a      	ldr	r3, [pc, #232]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x7b0>
 8002482:	e068      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800248a:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d031      	beq.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d12a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d122      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0e1b      	lsrs	r3, r3, #24
 80024ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e02b      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800250a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d01f      	beq.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002522:	f7ff f83d 	bl	80015a0 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002528:	bf00      	nop
 800252a:	f7ff f839 	bl	80015a0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	4293      	cmp	r3, r2
 8002534:	d0f9      	beq.n	800252a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_RCC_OscConfig+0x8b0>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	4906      	ldr	r1, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002546:	4313      	orrs	r3, r2
 8002548:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3730      	adds	r7, #48	@ 0x30
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	ffff0007 	.word	0xffff0007

08002568 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e19c      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b8a      	ldr	r3, [pc, #552]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	4985      	ldr	r1, [pc, #532]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b83      	ldr	r3, [pc, #524]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e184      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d908      	bls.n	80025da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4975      	ldr	r1, [pc, #468]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b6d      	ldr	r3, [pc, #436]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	496a      	ldr	r1, [pc, #424]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b64      	ldr	r3, [pc, #400]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	495e      	ldr	r1, [pc, #376]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002652:	4b56      	ldr	r3, [pc, #344]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4953      	ldr	r1, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b4a      	ldr	r3, [pc, #296]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f023 020f 	bic.w	r2, r3, #15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4947      	ldr	r1, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800268e:	4313      	orrs	r3, r2
 8002690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d055      	beq.n	800274a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4940      	ldr	r1, [pc, #256]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d121      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0f6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d115      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0ea      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e8:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0de      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4925      	ldr	r1, [pc, #148]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271a:	f7fe ff41 	bl	80015a0 <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e00a      	b.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe ff3d 	bl	80015a0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0be      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	429a      	cmp	r2, r3
 8002748:	d1eb      	bne.n	8002722 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	429a      	cmp	r2, r3
 8002764:	d208      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002774:	4313      	orrs	r3, r2
 8002776:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d214      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	4906      	ldr	r1, [pc, #24]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e086      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
 80027a8:	52002000 	.word	0x52002000
 80027ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027cc:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	492e      	ldr	r1, [pc, #184]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4922      	ldr	r1, [pc, #136]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002852:	429a      	cmp	r2, r3
 8002854:	d208      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4917      	ldr	r1, [pc, #92]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002864:	4313      	orrs	r3, r2
 8002866:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002868:	f000 f834 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	4912      	ldr	r1, [pc, #72]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x360>)
 800289e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x364>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x368>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fe2e 	bl	800150c <HAL_InitTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	080091c0 	.word	0x080091c0
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000
 80028d0:	24000008 	.word	0x24000008

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4bb3      	ldr	r3, [pc, #716]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e2:	2b18      	cmp	r3, #24
 80028e4:	f200 8155 	bhi.w	8002b92 <HAL_RCC_GetSysClockFreq+0x2be>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002b93 	.word	0x08002b93
 80028f8:	08002b93 	.word	0x08002b93
 80028fc:	08002b93 	.word	0x08002b93
 8002900:	08002b93 	.word	0x08002b93
 8002904:	08002b93 	.word	0x08002b93
 8002908:	08002b93 	.word	0x08002b93
 800290c:	08002b93 	.word	0x08002b93
 8002910:	0800297b 	.word	0x0800297b
 8002914:	08002b93 	.word	0x08002b93
 8002918:	08002b93 	.word	0x08002b93
 800291c:	08002b93 	.word	0x08002b93
 8002920:	08002b93 	.word	0x08002b93
 8002924:	08002b93 	.word	0x08002b93
 8002928:	08002b93 	.word	0x08002b93
 800292c:	08002b93 	.word	0x08002b93
 8002930:	08002981 	.word	0x08002981
 8002934:	08002b93 	.word	0x08002b93
 8002938:	08002b93 	.word	0x08002b93
 800293c:	08002b93 	.word	0x08002b93
 8002940:	08002b93 	.word	0x08002b93
 8002944:	08002b93 	.word	0x08002b93
 8002948:	08002b93 	.word	0x08002b93
 800294c:	08002b93 	.word	0x08002b93
 8002950:	08002987 	.word	0x08002987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002954:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002960:	4b91      	ldr	r3, [pc, #580]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4a90      	ldr	r2, [pc, #576]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002972:	e111      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002976:	61bb      	str	r3, [r7, #24]
      break;
 8002978:	e10e      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800297a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800297c:	61bb      	str	r3, [r7, #24]
      break;
 800297e:	e10b      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002980:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002982:	61bb      	str	r3, [r7, #24]
      break;
 8002984:	e108      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002990:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800299c:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029a6:	4b80      	ldr	r3, [pc, #512]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80e1 	beq.w	8002b8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f000 8083 	beq.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x204>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f200 80a1 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x114>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d056      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029e6:	e099      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a4e:	e087      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a92:	e065      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad6:	e043      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1a:	e021      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	0a5b      	lsrs	r3, r3, #9
 8002b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b94:	61bb      	str	r3, [r7, #24]
      break;
 8002b96:	bf00      	nop
  }

  return sysclockfreq;
 8002b98:	69bb      	ldr	r3, [r7, #24]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	03d09000 	.word	0x03d09000
 8002bb0:	003d0900 	.word	0x003d0900
 8002bb4:	017d7840 	.word	0x017d7840
 8002bb8:	46000000 	.word	0x46000000
 8002bbc:	4c742400 	.word	0x4c742400
 8002bc0:	4a742400 	.word	0x4a742400
 8002bc4:	4bbebc20 	.word	0x4bbebc20

08002bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bce:	f7ff fe81 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490f      	ldr	r1, [pc, #60]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	080091c0 	.word	0x080091c0
 8002c20:	24000004 	.word	0x24000004
 8002c24:	24000000 	.word	0x24000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c2c:	f7ff ffcc 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	080091c0 	.word	0x080091c0

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b0cc      	sub	sp, #304	@ 0x130
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002c78:	2500      	movs	r5, #0
 8002c7a:	ea54 0305 	orrs.w	r3, r4, r5
 8002c7e:	d049      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c8a:	d02f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c90:	d828      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c96:	d01a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c9c:	d822      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ca6:	d007      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002caa:	4bb8      	ldr	r3, [pc, #736]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	4ab7      	ldr	r2, [pc, #732]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cb6:	e01a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fba1 	bl	8005408 <RCCEx_PLL2_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ccc:	e00f      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd2:	3328      	adds	r3, #40	@ 0x28
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fc48 	bl	800556c <RCCEx_PLL3_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cf6:	4ba5      	ldr	r3, [pc, #660]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d04:	4aa1      	ldr	r2, [pc, #644]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d06:	430b      	orrs	r3, r1
 8002d08:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d20:	f04f 0900 	mov.w	r9, #0
 8002d24:	ea58 0309 	orrs.w	r3, r8, r9
 8002d28:	d047      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d82a      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d34:	a201      	add	r2, pc, #4	@ (adr r2, 8002d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d51 	.word	0x08002d51
 8002d40:	08002d5f 	.word	0x08002d5f
 8002d44:	08002d75 	.word	0x08002d75
 8002d48:	08002d93 	.word	0x08002d93
 8002d4c:	08002d93 	.word	0x08002d93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b8e      	ldr	r3, [pc, #568]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4a8d      	ldr	r2, [pc, #564]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d62:	3308      	adds	r3, #8
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fb4e 	bl	8005408 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d72:	e00f      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d78:	3328      	adds	r3, #40	@ 0x28
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fbf5 	bl	800556c <RCCEx_PLL3_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d88:	e004      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da0:	f023 0107 	bic.w	r1, r3, #7
 8002da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	4a78      	ldr	r2, [pc, #480]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002db0:	e003      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002db6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002dc6:	f04f 0b00 	mov.w	fp, #0
 8002dca:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dce:	d04c      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dda:	d030      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de0:	d829      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de4:	d02d      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de8:	d825      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002dea:	2b80      	cmp	r3, #128	@ 0x80
 8002dec:	d018      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002dee:	2b80      	cmp	r3, #128	@ 0x80
 8002df0:	d821      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002df6:	2b40      	cmp	r3, #64	@ 0x40
 8002df8:	d007      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002dfa:	e01c      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfc:	4b63      	ldr	r3, [pc, #396]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	4a62      	ldr	r2, [pc, #392]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e08:	e01c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e0e:	3308      	adds	r3, #8
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 faf8 	bl	8005408 <RCCEx_PLL2_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e1e:	e011      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	3328      	adds	r3, #40	@ 0x28
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fb9f 	bl	800556c <RCCEx_PLL3_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e34:	e006      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e3c:	e002      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e60:	e003      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002e76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002e80:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002e84:	460b      	mov	r3, r1
 8002e86:	4313      	orrs	r3, r2
 8002e88:	d053      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e96:	d035      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e9c:	d82e      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ea2:	d031      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ea4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ea8:	d828      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eae:	d01a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb4:	d822      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ebe:	d007      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ec0:	e01c      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec2:	4b32      	ldr	r3, [pc, #200]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a31      	ldr	r2, [pc, #196]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ece:	e01c      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fa95 	bl	8005408 <RCCEx_PLL2_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ee4:	e011      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eea:	3328      	adds	r3, #40	@ 0x28
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fb3c 	bl	800556c <RCCEx_PLL3_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002efa:	e006      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f12:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f22:	4a1a      	ldr	r2, [pc, #104]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f28:	e003      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002f3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	d056      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f5e:	d038      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f64:	d831      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f6a:	d034      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f70:	d82b      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f76:	d01d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f7c:	d825      	bhi.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f88:	e01f      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f8a:	bf00      	nop
 8002f8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f90:	4ba2      	ldr	r3, [pc, #648]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	4aa1      	ldr	r2, [pc, #644]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fa2e 	bl	8005408 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fb2:	e011      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb8:	3328      	adds	r3, #40	@ 0x28
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 fad5 	bl	800556c <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fc8:	e006      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fd2:	bf00      	nop
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ff0:	4a8a      	ldr	r2, [pc, #552]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ffc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800300c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003016:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d03a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	2b30      	cmp	r3, #48	@ 0x30
 8003028:	d01f      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800302a:	2b30      	cmp	r3, #48	@ 0x30
 800302c:	d819      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800302e:	2b20      	cmp	r3, #32
 8003030:	d00c      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003032:	2b20      	cmp	r3, #32
 8003034:	d815      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800303a:	2b10      	cmp	r3, #16
 800303c:	d111      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303e:	4b77      	ldr	r3, [pc, #476]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	4a76      	ldr	r2, [pc, #472]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800304a:	e011      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800304c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003050:	3308      	adds	r3, #8
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f002 f9d7 	bl	8005408 <RCCEx_PLL2_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003060:	e006      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003068:	e002      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800306e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003070:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003078:	4b68      	ldr	r3, [pc, #416]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	4a65      	ldr	r2, [pc, #404]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003088:	430b      	orrs	r3, r1
 800308a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800308c:	e003      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003092:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80030a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030a6:	2300      	movs	r3, #0
 80030a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030ac:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030b0:	460b      	mov	r3, r1
 80030b2:	4313      	orrs	r3, r2
 80030b4:	d051      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c0:	d035      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80030c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c6:	d82e      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030cc:	d031      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80030ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030d2:	d828      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d8:	d01a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030de:	d822      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e8:	d007      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80030ea:	e01c      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ec:	4b4b      	ldr	r3, [pc, #300]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	4a4a      	ldr	r2, [pc, #296]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030f8:	e01c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030fe:	3308      	adds	r3, #8
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f002 f980 	bl	8005408 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800310e:	e011      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003114:	3328      	adds	r3, #40	@ 0x28
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fa27 	bl	800556c <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800312c:	e002      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003134:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800313c:	4b37      	ldr	r3, [pc, #220]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800314a:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314c:	430b      	orrs	r3, r1
 800314e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003156:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800315a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003166:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003170:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003174:	460b      	mov	r3, r1
 8003176:	4313      	orrs	r3, r2
 8003178:	d056      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800317a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800317e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003184:	d033      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003186:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800318a:	d82c      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800318c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003190:	d02f      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003192:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003196:	d826      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003198:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800319c:	d02b      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800319e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031a2:	d820      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031a8:	d012      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80031aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031ae:	d81a      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d022      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b8:	d115      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031be:	3308      	adds	r3, #8
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f002 f920 	bl	8005408 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031ce:	e015      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d4:	3328      	adds	r3, #40	@ 0x28
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 f9c7 	bl	800556c <RCCEx_PLL3_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800320c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003212:	4a02      	ldr	r2, [pc, #8]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003214:	430b      	orrs	r3, r1
 8003216:	6513      	str	r3, [r2, #80]	@ 0x50
 8003218:	e006      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003224:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003234:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800323e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d055      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003254:	d033      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800325a:	d82c      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003260:	d02f      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003266:	d826      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800326c:	d02b      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800326e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003272:	d820      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003278:	d012      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800327a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800327e:	d81a      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003288:	d115      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800328a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328e:	3308      	adds	r3, #8
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f002 f8b8 	bl	8005408 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800329e:	e015      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032a4:	3328      	adds	r3, #40	@ 0x28
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f95f 	bl	800556c <RCCEx_PLL3_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032b4:	e00a      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032bc:	e006      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032be:	bf00      	nop
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032d4:	4bb6      	ldr	r3, [pc, #728]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80032dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032e4:	4ab2      	ldr	r2, [pc, #712]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032e6:	430b      	orrs	r3, r1
 80032e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ea:	e003      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80032f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800330a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800330e:	460b      	mov	r3, r1
 8003310:	4313      	orrs	r3, r2
 8003312:	d02a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d011      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800331e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003322:	d10a      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003328:	3308      	adds	r3, #8
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f002 f86b 	bl	8005408 <RCCEx_PLL2_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003338:	e004      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003344:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800334c:	4b98      	ldr	r3, [pc, #608]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800334e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003350:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800335a:	4a95      	ldr	r2, [pc, #596]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800335c:	430b      	orrs	r3, r1
 800335e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003366:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800336a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003380:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003384:	460b      	mov	r3, r1
 8003386:	4313      	orrs	r3, r2
 8003388:	d037      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800338a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003394:	d00e      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339a:	d816      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x776>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d018      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80033a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a4:	d111      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a6:	4b82      	ldr	r3, [pc, #520]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	4a81      	ldr	r2, [pc, #516]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033b2:	e00f      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b8:	3308      	adds	r3, #8
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 f823 	bl	8005408 <RCCEx_PLL2_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033dc:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ea:	4a71      	ldr	r2, [pc, #452]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80033f0:	e003      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003406:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003410:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	d03a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800341a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800341e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003420:	2b03      	cmp	r3, #3
 8003422:	d81d      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003424:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	08003469 	.word	0x08003469
 8003430:	0800343d 	.word	0x0800343d
 8003434:	0800344b 	.word	0x0800344b
 8003438:	08003469 	.word	0x08003469
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343c:	4b5c      	ldr	r3, [pc, #368]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	4a5b      	ldr	r2, [pc, #364]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003448:	e00f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800344a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344e:	3308      	adds	r3, #8
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f001 ffd8 	bl	8005408 <RCCEx_PLL2_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003472:	4b4f      	ldr	r3, [pc, #316]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	f023 0103 	bic.w	r1, r3, #3
 800347a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800347e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003480:	4a4b      	ldr	r2, [pc, #300]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003482:	430b      	orrs	r3, r1
 8003484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800348c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800349c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f000 80a0 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b2:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3f      	ldr	r2, [pc, #252]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034be:	f7fe f86f 	bl	80015a0 <HAL_GetTick>
 80034c2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c6:	e00b      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c8:	f7fe f86a 	bl	80015a0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	@ 0x64
 80034d6:	d903      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034de:	e005      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e0:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ed      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80034ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d17a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034f4:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003500:	4053      	eors	r3, r2
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d015      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350a:	4b29      	ldr	r3, [pc, #164]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003512:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003516:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	4a25      	ldr	r2, [pc, #148]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003522:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	4a22      	ldr	r2, [pc, #136]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800352e:	4a20      	ldr	r2, [pc, #128]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003530:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003534:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800353a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800353e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003542:	d118      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f82c 	bl	80015a0 <HAL_GetTick>
 8003548:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800354c:	e00d      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe f827 	bl	80015a0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003558:	1ad2      	subs	r2, r2, r3
 800355a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800355e:	429a      	cmp	r2, r3
 8003560:	d903      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003568:	e005      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800356a:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0eb      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003576:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800357a:	2b00      	cmp	r3, #0
 800357c:	d130      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003582:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358e:	d115      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003590:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035a0:	091a      	lsrs	r2, r3, #4
 80035a2:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	4a02      	ldr	r2, [pc, #8]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6113      	str	r3, [r2, #16]
 80035ac:	e00c      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80035ae:	bf00      	nop
 80035b0:	58024400 	.word	0x58024400
 80035b4:	58024800 	.word	0x58024800
 80035b8:	00ffffcf 	.word	0x00ffffcf
 80035bc:	4bd4      	ldr	r3, [pc, #848]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4ad3      	ldr	r2, [pc, #844]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035c6:	6113      	str	r3, [r2, #16]
 80035c8:	4bd1      	ldr	r3, [pc, #836]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	4acd      	ldr	r2, [pc, #820]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035de:	e008      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f002 0301 	and.w	r3, r2, #1
 80035fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	f000 808b 	beq.w	800372a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800361c:	2b28      	cmp	r3, #40	@ 0x28
 800361e:	d86b      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003620:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003701 	.word	0x08003701
 800362c:	080036f9 	.word	0x080036f9
 8003630:	080036f9 	.word	0x080036f9
 8003634:	080036f9 	.word	0x080036f9
 8003638:	080036f9 	.word	0x080036f9
 800363c:	080036f9 	.word	0x080036f9
 8003640:	080036f9 	.word	0x080036f9
 8003644:	080036f9 	.word	0x080036f9
 8003648:	080036cd 	.word	0x080036cd
 800364c:	080036f9 	.word	0x080036f9
 8003650:	080036f9 	.word	0x080036f9
 8003654:	080036f9 	.word	0x080036f9
 8003658:	080036f9 	.word	0x080036f9
 800365c:	080036f9 	.word	0x080036f9
 8003660:	080036f9 	.word	0x080036f9
 8003664:	080036f9 	.word	0x080036f9
 8003668:	080036e3 	.word	0x080036e3
 800366c:	080036f9 	.word	0x080036f9
 8003670:	080036f9 	.word	0x080036f9
 8003674:	080036f9 	.word	0x080036f9
 8003678:	080036f9 	.word	0x080036f9
 800367c:	080036f9 	.word	0x080036f9
 8003680:	080036f9 	.word	0x080036f9
 8003684:	080036f9 	.word	0x080036f9
 8003688:	08003701 	.word	0x08003701
 800368c:	080036f9 	.word	0x080036f9
 8003690:	080036f9 	.word	0x080036f9
 8003694:	080036f9 	.word	0x080036f9
 8003698:	080036f9 	.word	0x080036f9
 800369c:	080036f9 	.word	0x080036f9
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	08003701 	.word	0x08003701
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	080036f9 	.word	0x080036f9
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003701 	.word	0x08003701
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d0:	3308      	adds	r3, #8
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 fe97 	bl	8005408 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 ff3e 	bl	800556c <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800370a:	4b81      	ldr	r3, [pc, #516]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800371a:	4a7d      	ldr	r2, [pc, #500]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003726:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f002 0302 	and.w	r3, r2, #2
 8003736:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003740:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d042      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800374e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003750:	2b05      	cmp	r3, #5
 8003752:	d825      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	080037a9 	.word	0x080037a9
 8003760:	08003775 	.word	0x08003775
 8003764:	0800378b 	.word	0x0800378b
 8003768:	080037a9 	.word	0x080037a9
 800376c:	080037a9 	.word	0x080037a9
 8003770:	080037a9 	.word	0x080037a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003774:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003778:	3308      	adds	r3, #8
 800377a:	2101      	movs	r1, #1
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fe43 	bl	8005408 <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003788:	e00f      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800378a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378e:	3328      	adds	r3, #40	@ 0x28
 8003790:	2101      	movs	r1, #1
 8003792:	4618      	mov	r0, r3
 8003794:	f001 feea 	bl	800556c <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800379e:	e004      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037b2:	4b57      	ldr	r3, [pc, #348]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	f023 0107 	bic.w	r1, r3, #7
 80037ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c0:	4a53      	ldr	r2, [pc, #332]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 0304 	and.w	r3, r2, #4
 80037dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d044      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d825      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80037fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003851 	.word	0x08003851
 8003808:	0800381d 	.word	0x0800381d
 800380c:	08003833 	.word	0x08003833
 8003810:	08003851 	.word	0x08003851
 8003814:	08003851 	.word	0x08003851
 8003818:	08003851 	.word	0x08003851
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003820:	3308      	adds	r3, #8
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fdef 	bl	8005408 <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003836:	3328      	adds	r3, #40	@ 0x28
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fe96 	bl	800556c <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800385a:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	f023 0107 	bic.w	r1, r3, #7
 8003862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386a:	4a29      	ldr	r2, [pc, #164]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003876:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800387a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f002 0320 	and.w	r3, r2, #32
 8003886:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d057      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800389a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a6:	d035      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ac:	d82c      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b2:	d031      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b8:	d826      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80038ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038be:	d02d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80038c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038c4:	d820      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80038c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ca:	d012      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d0:	d81a      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d024      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80038d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038da:	d115      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e0:	3308      	adds	r3, #8
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fd8f 	bl	8005408 <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038f0:	e017      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fe36 	bl	800556c <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003906:	e00c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003910:	58024400 	.word	0x58024400
        break;
 8003914:	bf00      	nop
 8003916:	e004      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003918:	bf00      	nop
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392a:	4bc2      	ldr	r3, [pc, #776]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393a:	4abe      	ldr	r2, [pc, #760]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003946:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800394a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003960:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d055      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800396a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800396e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003972:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003976:	d033      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003978:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800397c:	d82c      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003982:	d02f      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003988:	d826      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800398a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800398e:	d02b      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003990:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003994:	d820      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399a:	d012      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a0:	d81a      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d022      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039aa:	d115      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b0:	3308      	adds	r3, #8
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fd27 	bl	8005408 <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c6:	3328      	adds	r3, #40	@ 0x28
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fdce 	bl	800556c <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039d6:	e00a      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039de:	e006      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80039e0:	bf00      	nop
 80039e2:	e004      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80039ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80039fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a06:	4a8b      	ldr	r2, [pc, #556]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a2c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d055      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a42:	d033      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003a44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a48:	d82c      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4e:	d02f      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	d826      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003a56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003a5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a60:	d820      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a66:	d012      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a6c:	d81a      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d022      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fcc1 	bl	8005408 <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e015      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a92:	3328      	adds	r3, #40	@ 0x28
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fd68 	bl	800556c <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e00a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aaa:	e006      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ad2:	4a58      	ldr	r2, [pc, #352]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad8:	e003      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ade:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f002 0308 	and.w	r3, r2, #8
 8003aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003af8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003afc:	460b      	mov	r3, r1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	d01e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b14:	3328      	adds	r3, #40	@ 0x28
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fd27 	bl	800556c <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b2a:	4b42      	ldr	r3, [pc, #264]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f002 0310 	and.w	r3, r2, #16
 8003b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d01e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b72:	3328      	adds	r3, #40	@ 0x28
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fcf8 	bl	800556c <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b98:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003baa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bb4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bd0:	d81b      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bda:	d00b      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003bdc:	e015      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be2:	3308      	adds	r3, #8
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fc0e 	bl	8005408 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bf2:	e00f      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf8:	3328      	adds	r3, #40	@ 0x28
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 fcb5 	bl	800556c <RCCEx_PLL3_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c2c:	4a01      	ldr	r2, [pc, #4]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c32:	e005      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c4e:	2300      	movs	r3, #0
 8003c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c52:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d03b      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c68:	d01f      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c6e:	d818      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c7a:	d007      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003c7c:	e011      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7e:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c8a:	e00f      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c90:	3328      	adds	r3, #40	@ 0x28
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fc69 	bl	800556c <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb4:	4b56      	ldr	r3, [pc, #344]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cd0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ce0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ce6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d031      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfe:	d007      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003d00:	e011      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d02:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d0e:	e00e      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d14:	3308      	adds	r3, #8
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fb75 	bl	8005408 <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d36:	4b36      	ldr	r3, [pc, #216]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d44:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4a:	e003      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d62:	2300      	movs	r3, #0
 8003d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d00c      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d74:	3328      	adds	r3, #40	@ 0x28
 8003d76:	2102      	movs	r1, #2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 fbf7 	bl	800556c <RCCEx_PLL3_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d98:	2300      	movs	r3, #0
 8003d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d03a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003db2:	d018      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003db8:	d811      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dbe:	d014      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc4:	d80b      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dce:	d106      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ddc:	e008      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003de4:	e004      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e08:	4a01      	ldr	r2, [pc, #4]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e0e:	e005      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e38:	4baa      	ldr	r3, [pc, #680]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e46:	4aa7      	ldr	r2, [pc, #668]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e68:	4b9e      	ldr	r3, [pc, #632]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e78:	4a9a      	ldr	r2, [pc, #616]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e9a:	4b92      	ldr	r3, [pc, #584]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eca:	4b86      	ldr	r3, [pc, #536]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	4a85      	ldr	r2, [pc, #532]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ed0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ed4:	6113      	str	r3, [r2, #16]
 8003ed6:	4b83      	ldr	r3, [pc, #524]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ed8:	6919      	ldr	r1, [r3, #16]
 8003eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ede:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ee2:	4a80      	ldr	r2, [pc, #512]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003efa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f04:	4b77      	ldr	r3, [pc, #476]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	4a74      	ldr	r2, [pc, #464]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f14:	430b      	orrs	r3, r1
 8003f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f26:	2300      	movs	r3, #0
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f34:	4b6b      	ldr	r3, [pc, #428]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	4a67      	ldr	r2, [pc, #412]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	2100      	movs	r1, #0
 8003f54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d011      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fa4a 	bl	8005408 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003f7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	2100      	movs	r1, #0
 8003f94:	6239      	str	r1, [r7, #32]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d011      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003faa:	3308      	adds	r3, #8
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fa2a 	bl	8005408 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003fba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	61b9      	str	r1, [r7, #24]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	d011      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fea:	3308      	adds	r3, #8
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 fa0a 	bl	8005408 <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003ffa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004006:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800400a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	2100      	movs	r1, #0
 8004014:	6139      	str	r1, [r7, #16]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d011      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800402a:	3328      	adds	r3, #40	@ 0x28
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fa9c 	bl	800556c <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800403a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004046:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800404a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	2100      	movs	r1, #0
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d011      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800406a:	3328      	adds	r3, #40	@ 0x28
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fa7c 	bl	800556c <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800407a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004086:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	2100      	movs	r1, #0
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d011      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fa5c 	bl	800556c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80040ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80040ca:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80040de:	46bd      	mov	sp, r7
 80040e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e4:	58024400 	.word	0x58024400

080040e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b090      	sub	sp, #64	@ 0x40
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80040f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80040fa:	430b      	orrs	r3, r1
 80040fc:	f040 8094 	bne.w	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004100:	4b9e      	ldr	r3, [pc, #632]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	2b04      	cmp	r3, #4
 800410e:	f200 8087 	bhi.w	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004112:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	0800412d 	.word	0x0800412d
 800411c:	08004155 	.word	0x08004155
 8004120:	0800417d 	.word	0x0800417d
 8004124:	08004219 	.word	0x08004219
 8004128:	080041a5 	.word	0x080041a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800412c:	4b93      	ldr	r3, [pc, #588]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004138:	d108      	bne.n	800414c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800413a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800413e:	4618      	mov	r0, r3
 8004140:	f001 f810 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004148:	f000 bd45 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004150:	f000 bd41 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004154:	4b89      	ldr	r3, [pc, #548]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800415c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004160:	d108      	bne.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fd54 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004170:	f000 bd31 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004178:	f000 bd2d 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800417c:	4b7f      	ldr	r3, [pc, #508]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004188:	d108      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fe94 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004198:	f000 bd1d 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041a0:	f000 bd19 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80041a4:	4b75      	ldr	r3, [pc, #468]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041ae:	4b73      	ldr	r3, [pc, #460]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041c0:	4b6e      	ldr	r3, [pc, #440]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	08db      	lsrs	r3, r3, #3
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d2:	e01f      	b.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041d4:	4b69      	ldr	r3, [pc, #420]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e0:	d106      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e8:	d102      	bne.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80041ea:	4b66      	ldr	r3, [pc, #408]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80041ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ee:	e011      	b.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80041f0:	4b62      	ldr	r3, [pc, #392]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041fc:	d106      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004204:	d102      	bne.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004206:	4b60      	ldr	r3, [pc, #384]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800420a:	e003      	b.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004210:	f000 bce1 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004214:	f000 bcdf 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004218:	4b5c      	ldr	r3, [pc, #368]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800421c:	f000 bcdb 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004224:	f000 bcd7 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004230:	430b      	orrs	r3, r1
 8004232:	f040 80ad 	bne.w	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004236:	4b51      	ldr	r3, [pc, #324]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004246:	d056      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424e:	f200 8090 	bhi.w	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	2bc0      	cmp	r3, #192	@ 0xc0
 8004256:	f000 8088 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	2bc0      	cmp	r3, #192	@ 0xc0
 800425e:	f200 8088 	bhi.w	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	2b80      	cmp	r3, #128	@ 0x80
 8004266:	d032      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	f200 8081 	bhi.w	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	d014      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800427c:	e079      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800427e:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428a:	d108      	bne.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800428c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004290:	4618      	mov	r0, r3
 8004292:	f000 ff67 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800429a:	f000 bc9c 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042a2:	f000 bc98 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042a6:	4b35      	ldr	r3, [pc, #212]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b2:	d108      	bne.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042b4:	f107 0318 	add.w	r3, r7, #24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fcab 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042c2:	f000 bc88 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042ca:	f000 bc84 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042ce:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042da:	d108      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fdeb 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042ea:	f000 bc74 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042f2:	f000 bc70 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80042f6:	4b21      	ldr	r3, [pc, #132]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004300:	4b1e      	ldr	r3, [pc, #120]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d10c      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	08db      	lsrs	r3, r3, #3
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	4a18      	ldr	r2, [pc, #96]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004324:	e01f      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800433a:	d102      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800433e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004340:	e011      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800434e:	d106      	bne.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004356:	d102      	bne.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004362:	f000 bc38 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004366:	f000 bc36 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800436c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800436e:	f000 bc32 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004376:	f000 bc2e 	b.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800437a:	bf00      	nop
 800437c:	58024400 	.word	0x58024400
 8004380:	03d09000 	.word	0x03d09000
 8004384:	003d0900 	.word	0x003d0900
 8004388:	017d7840 	.word	0x017d7840
 800438c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004394:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004398:	430b      	orrs	r3, r1
 800439a:	f040 809c 	bne.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800439e:	4b9e      	ldr	r3, [pc, #632]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ae:	d054      	beq.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043b6:	f200 808b 	bhi.w	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80043c0:	f000 8083 	beq.w	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80043ca:	f200 8081 	bhi.w	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d4:	d02f      	beq.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043dc:	d878      	bhi.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ea:	d012      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80043ec:	e070      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fa:	d107      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004400:	4618      	mov	r0, r3
 8004402:	f000 feaf 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800440a:	e3e4      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004410:	e3e1      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004412:	4b81      	ldr	r3, [pc, #516]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800441a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441e:	d107      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fbf5 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800442e:	e3d2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004434:	e3cf      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004436:	4b78      	ldr	r3, [pc, #480]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800443e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004442:	d107      	bne.n	8004454 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd37 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004452:	e3c0      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004458:	e3bd      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800445a:	4b6f      	ldr	r3, [pc, #444]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004464:	4b6c      	ldr	r3, [pc, #432]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d10c      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004476:	4b68      	ldr	r3, [pc, #416]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	08db      	lsrs	r3, r3, #3
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	4a66      	ldr	r2, [pc, #408]	@ (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004488:	e01e      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800448a:	4b63      	ldr	r3, [pc, #396]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004496:	d106      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800449e:	d102      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80044a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a4:	e010      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80044a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80044b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ba:	d102      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044c0:	e002      	b.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80044c6:	e386      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80044c8:	e385      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80044ca:	4b57      	ldr	r3, [pc, #348]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80044cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044ce:	e382      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044d4:	e37f      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80044d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80044de:	430b      	orrs	r3, r1
 80044e0:	f040 80a7 	bne.w	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80044e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80044ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044f4:	d055      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044fc:	f200 8096 	bhi.w	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004506:	f000 8084 	beq.w	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004510:	f200 808c 	bhi.w	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800451a:	d030      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004522:	f200 8083 	bhi.w	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004532:	d012      	beq.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004534:	e07a      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004536:	4b38      	ldr	r3, [pc, #224]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004542:	d107      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fe0b 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004552:	e340      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004558:	e33d      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800455a:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004566:	d107      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004568:	f107 0318 	add.w	r3, r7, #24
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fb51 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004576:	e32e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800457c:	e32b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800457e:	4b26      	ldr	r3, [pc, #152]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800458a:	d107      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fc93 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800459a:	e31c      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045a0:	e319      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80045a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80045ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045be:	4b16      	ldr	r3, [pc, #88]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	4a14      	ldr	r2, [pc, #80]	@ (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d0:	e01e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045d2:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d106      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80045e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045e6:	d102      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80045ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ec:	e010      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045fa:	d106      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004602:	d102      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004604:	4b07      	ldr	r3, [pc, #28]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004608:	e002      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800460e:	e2e2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004610:	e2e1      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004612:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004616:	e2de      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004618:	58024400 	.word	0x58024400
 800461c:	03d09000 	.word	0x03d09000
 8004620:	003d0900 	.word	0x003d0900
 8004624:	017d7840 	.word	0x017d7840
 8004628:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004630:	e2d1      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004636:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800463a:	430b      	orrs	r3, r1
 800463c:	f040 809c 	bne.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004640:	4b93      	ldr	r3, [pc, #588]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004650:	d054      	beq.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004658:	f200 808b 	bhi.w	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800465c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004662:	f000 8083 	beq.w	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800466c:	f200 8081 	bhi.w	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004676:	d02f      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467e:	d878      	bhi.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d012      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800468e:	e070      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004690:	4b7f      	ldr	r3, [pc, #508]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800469c:	d107      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800469e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fd5e 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046ac:	e293      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046b2:	e290      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046b4:	4b76      	ldr	r3, [pc, #472]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c0:	d107      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046c2:	f107 0318 	add.w	r3, r7, #24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 faa4 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046d0:	e281      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046d6:	e27e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046e4:	d107      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046e6:	f107 030c 	add.w	r3, r7, #12
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fbe6 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046f4:	e26f      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046fa:	e26c      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046fc:	4b64      	ldr	r3, [pc, #400]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80046fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004700:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004704:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004706:	4b62      	ldr	r3, [pc, #392]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d10c      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004718:	4b5d      	ldr	r3, [pc, #372]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	4a5c      	ldr	r2, [pc, #368]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800472a:	e01e      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800472c:	4b58      	ldr	r3, [pc, #352]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004738:	d106      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800473a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004740:	d102      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004742:	4b55      	ldr	r3, [pc, #340]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004746:	e010      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004748:	4b51      	ldr	r3, [pc, #324]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004754:	d106      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800475c:	d102      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800475e:	4b4f      	ldr	r3, [pc, #316]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004762:	e002      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004768:	e235      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800476a:	e234      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800476c:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004770:	e231      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004776:	e22e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004780:	430b      	orrs	r3, r1
 8004782:	f040 808f 	bne.w	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004786:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004796:	d06b      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800479e:	d874      	bhi.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047a6:	d056      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ae:	d86c      	bhi.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047b6:	d03b      	beq.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047be:	d864      	bhi.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047c6:	d021      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047ce:	d85c      	bhi.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80047d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047dc:	d004      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80047de:	e054      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fa22 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 80047e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047e6:	e1f6      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047e8:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f4:	d107      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f6:	f107 0318 	add.w	r3, r7, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa0a 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004804:	e1e7      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800480a:	e1e4      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800480c:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004818:	d107      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fb4c 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004828:	e1d5      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800482e:	e1d2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004830:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d109      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800483c:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	4a13      	ldr	r2, [pc, #76]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800484e:	e1c2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004854:	e1bf      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004856:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004862:	d102      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004864:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004868:	e1b5      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800486e:	e1b2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800487c:	d102      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004882:	e1a8      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004888:	e1a5      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800488e:	e1a2      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004890:	58024400 	.word	0x58024400
 8004894:	03d09000 	.word	0x03d09000
 8004898:	003d0900 	.word	0x003d0900
 800489c:	017d7840 	.word	0x017d7840
 80048a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80048a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80048ac:	430b      	orrs	r3, r1
 80048ae:	d173      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80048b0:	4b9c      	ldr	r3, [pc, #624]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048c0:	d02f      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048c8:	d863      	bhi.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d6:	d012      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80048d8:	e05b      	b.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048da:	4b92      	ldr	r3, [pc, #584]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048e6:	d107      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e8:	f107 0318 	add.w	r3, r7, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f991 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048f6:	e16e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048fc:	e16b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048fe:	4b89      	ldr	r3, [pc, #548]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490a:	d107      	bne.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fad3 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800491a:	e15c      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004920:	e159      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004922:	4b80      	ldr	r3, [pc, #512]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800492a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800492c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d10c      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800493e:	4b79      	ldr	r3, [pc, #484]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	4a77      	ldr	r2, [pc, #476]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004950:	e01e      	b.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004952:	4b74      	ldr	r3, [pc, #464]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495e:	d106      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004966:	d102      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004968:	4b70      	ldr	r3, [pc, #448]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496c:	e010      	b.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800496e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800497a:	d106      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004982:	d102      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004984:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800498e:	e122      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004990:	e121      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004996:	e11e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80049a0:	430b      	orrs	r3, r1
 80049a2:	d133      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80049a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80049ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d012      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80049bc:	e023      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049be:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ca:	d107      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fbc7 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049da:	e0fc      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049e0:	e0f9      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049e2:	4b50      	ldr	r3, [pc, #320]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ee:	d107      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049f0:	f107 0318 	add.w	r3, r7, #24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f90d 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049fe:	e0ea      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a04:	e0e7      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a0a:	e0e4      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a10:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004a14:	430b      	orrs	r3, r1
 8004a16:	f040 808d 	bne.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004a1a:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a2a:	d06b      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a32:	d874      	bhi.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3a:	d056      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a42:	d86c      	bhi.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a4a:	d03b      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a52:	d864      	bhi.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a5a:	d021      	beq.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a62:	d85c      	bhi.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a70:	d004      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004a72:	e054      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004a74:	f000 f8b8 	bl	8004be8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a78:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a7a:	e0ac      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a7c:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a88:	d107      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a8a:	f107 0318 	add.w	r3, r7, #24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f8c0 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a98:	e09d      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a9e:	e09a      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aa0:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aac:	d107      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fa02 	bl	8004ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004abc:	e08b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ac2:	e088      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d109      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad0:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ae2:	e078      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ae8:	e075      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af6:	d102      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004afc:	e06b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b02:	e068      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b04:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b10:	d102      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004b12:	4b07      	ldr	r3, [pc, #28]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b16:	e05e      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b1c:	e05b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b22:	e058      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b24:	58024400 	.word	0x58024400
 8004b28:	03d09000 	.word	0x03d09000
 8004b2c:	003d0900 	.word	0x003d0900
 8004b30:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	d148      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b50:	d02a      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b58:	d838      	bhi.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b66:	d00d      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004b68:	e030      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b76:	d102      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004b78:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b7c:	e02b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b82:	e028      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b84:	4b16      	ldr	r3, [pc, #88]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fae4 	bl	8005164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ba0:	e019      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ba6:	e016      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb6:	f107 0318 	add.w	r3, r7, #24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f82a 	bl	8004c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bc4:	e007      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bca:	e004      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd0:	e001      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3740      	adds	r7, #64	@ 0x40
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	58024400 	.word	0x58024400
 8004be4:	017d7840 	.word	0x017d7840

08004be8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bec:	f7fd ffec 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4904      	ldr	r1, [pc, #16]	@ (8004c10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	080091c0 	.word	0x080091c0

08004c14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	@ 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c26:	4b9f      	ldr	r3, [pc, #636]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	0b1b      	lsrs	r3, r3, #12
 8004c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c32:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c3e:	4b99      	ldr	r3, [pc, #612]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	08db      	lsrs	r3, r3, #3
 8004c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8111 	beq.w	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f000 8083 	beq.w	8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	f200 80a1 	bhi.w	8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d056      	beq.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c7e:	e099      	b.n	8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c80:	4b88      	ldr	r3, [pc, #544]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02d      	beq.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c8c:	4b85      	ldr	r3, [pc, #532]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	4a84      	ldr	r2, [pc, #528]	@ (8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ce6:	e087      	b.n	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2a:	e065      	b.n	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d6e:	e043      	b.n	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b48      	ldr	r3, [pc, #288]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db2:	e021      	b.n	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b37      	ldr	r3, [pc, #220]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004df8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	0a5b      	lsrs	r3, r3, #9
 8004dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1e:	ee17 2a90 	vmov	r2, s15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4c:	ee17 2a90 	vmov	r2, s15
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e54:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	ee17 2a90 	vmov	r2, s15
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e82:	e008      	b.n	8004e96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
}
 8004e96:	bf00      	nop
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	03d09000 	.word	0x03d09000
 8004eac:	46000000 	.word	0x46000000
 8004eb0:	4c742400 	.word	0x4c742400
 8004eb4:	4a742400 	.word	0x4a742400
 8004eb8:	4bbebc20 	.word	0x4bbebc20

08004ebc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ec4:	4ba1      	ldr	r3, [pc, #644]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ece:	4b9f      	ldr	r3, [pc, #636]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	0d1b      	lsrs	r3, r3, #20
 8004ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eda:	4b9c      	ldr	r3, [pc, #624]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ee6:	4b99      	ldr	r3, [pc, #612]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	08db      	lsrs	r3, r3, #3
 8004eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8111 	beq.w	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	f000 8083 	beq.w	8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f200 80a1 	bhi.w	800505c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d056      	beq.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f26:	e099      	b.n	800505c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f28:	4b88      	ldr	r3, [pc, #544]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02d      	beq.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f34:	4b85      	ldr	r3, [pc, #532]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	08db      	lsrs	r3, r3, #3
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	4a84      	ldr	r2, [pc, #528]	@ (8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f8e:	e087      	b.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005158 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd2:	e065      	b.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe6:	4b59      	ldr	r3, [pc, #356]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ffa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800500a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005016:	e043      	b.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502a:	4b48      	ldr	r3, [pc, #288]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503a:	ed97 6a03 	vldr	s12, [r7, #12]
 800503e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800505a:	e021      	b.n	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800515c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b37      	ldr	r3, [pc, #220]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005082:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800509e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80050a0:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	0a5b      	lsrs	r3, r3, #9
 80050a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80050be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c6:	ee17 2a90 	vmov	r2, s15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050ce:	4b1f      	ldr	r3, [pc, #124]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f4:	ee17 2a90 	vmov	r2, s15
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050fc:	4b13      	ldr	r3, [pc, #76]	@ (800514c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	0e1b      	lsrs	r3, r3, #24
 8005102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005116:	edd7 6a07 	vldr	s13, [r7, #28]
 800511a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005122:	ee17 2a90 	vmov	r2, s15
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800512a:	e008      	b.n	800513e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	609a      	str	r2, [r3, #8]
}
 800513e:	bf00      	nop
 8005140:	3724      	adds	r7, #36	@ 0x24
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	03d09000 	.word	0x03d09000
 8005154:	46000000 	.word	0x46000000
 8005158:	4c742400 	.word	0x4c742400
 800515c:	4a742400 	.word	0x4a742400
 8005160:	4bbebc20 	.word	0x4bbebc20

08005164 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	@ 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800516c:	4ba0      	ldr	r3, [pc, #640]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005176:	4b9e      	ldr	r3, [pc, #632]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005180:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005182:	4b9b      	ldr	r3, [pc, #620]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8111 	beq.w	80053d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	f000 8083 	beq.w	80052be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	f200 80a1 	bhi.w	8005302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d056      	beq.n	800527a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80051cc:	e099      	b.n	8005302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ce:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d02d      	beq.n	8005236 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051da:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	08db      	lsrs	r3, r3, #3
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	4a83      	ldr	r2, [pc, #524]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005204:	4b7a      	ldr	r3, [pc, #488]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005214:	ed97 6a03 	vldr	s12, [r7, #12]
 8005218:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800521c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005230:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005234:	e087      	b.n	8005346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005240:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005248:	4b69      	ldr	r3, [pc, #420]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005258:	ed97 6a03 	vldr	s12, [r7, #12]
 800525c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005278:	e065      	b.n	8005346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005284:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528c:	4b58      	ldr	r3, [pc, #352]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529c:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052bc:	e043      	b.n	8005346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80052cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d0:	4b47      	ldr	r3, [pc, #284]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005300:	e021      	b.n	8005346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005314:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005324:	ed97 6a03 	vldr	s12, [r7, #12]
 8005328:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800532c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005344:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005346:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800535c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005360:	edd7 6a07 	vldr	s13, [r7, #28]
 8005364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536c:	ee17 2a90 	vmov	r2, s15
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005374:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800538a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539a:	ee17 2a90 	vmov	r2, s15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80053a2:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	0e1b      	lsrs	r3, r3, #24
 80053a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	ee17 2a90 	vmov	r2, s15
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053d0:	e008      	b.n	80053e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3724      	adds	r7, #36	@ 0x24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4bbebc20 	.word	0x4bbebc20

08005408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005416:	4b53      	ldr	r3, [pc, #332]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d101      	bne.n	8005426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e099      	b.n	800555a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005426:	4b4f      	ldr	r3, [pc, #316]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4e      	ldr	r2, [pc, #312]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fc f8b5 	bl	80015a0 <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005438:	e008      	b.n	800544c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800543a:	f7fc f8b1 	bl	80015a0 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e086      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544c:	4b45      	ldr	r3, [pc, #276]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005458:	4b42      	ldr	r3, [pc, #264]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	493f      	ldr	r1, [pc, #252]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	628b      	str	r3, [r1, #40]	@ 0x28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	3b01      	subs	r3, #1
 8005472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	b29b      	uxth	r3, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	3b01      	subs	r3, #1
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800549c:	4931      	ldr	r1, [pc, #196]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054a2:	4b30      	ldr	r3, [pc, #192]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	492d      	ldr	r1, [pc, #180]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f023 0220 	bic.w	r2, r3, #32
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4928      	ldr	r1, [pc, #160]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054c6:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <RCCEx_PLL2_Config+0x160>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69d2      	ldr	r2, [r2, #28]
 80054de:	00d2      	lsls	r2, r2, #3
 80054e0:	4920      	ldr	r1, [pc, #128]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054ec:	f043 0310 	orr.w	r3, r3, #16
 80054f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005504:	e00f      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005518:	e005      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800551a:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005526:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800552c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005532:	f7fc f835 	bl	80015a0 <HAL_GetTick>
 8005536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005538:	e008      	b.n	800554c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800553a:	f7fc f831 	bl	80015a0 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e006      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	ffff0007 	.word	0xffff0007

0800556c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557a:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d101      	bne.n	800558a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e099      	b.n	80056be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800558a:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4e      	ldr	r2, [pc, #312]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005596:	f7fc f803 	bl	80015a0 <HAL_GetTick>
 800559a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800559c:	e008      	b.n	80055b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800559e:	f7fb ffff 	bl	80015a0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e086      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b0:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055bc:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	051b      	lsls	r3, r3, #20
 80055ca:	493f      	ldr	r1, [pc, #252]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	025b      	lsls	r3, r3, #9
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005600:	4931      	ldr	r1, [pc, #196]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005606:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	492d      	ldr	r1, [pc, #180]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005618:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	4928      	ldr	r1, [pc, #160]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800562a:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	4a26      	ldr	r2, [pc, #152]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563a:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <RCCEx_PLL3_Config+0x160>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	69d2      	ldr	r2, [r2, #28]
 8005642:	00d2      	lsls	r2, r2, #3
 8005644:	4920      	ldr	r1, [pc, #128]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4a19      	ldr	r2, [pc, #100]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005662:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005668:	e00f      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800567a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800567c:	e005      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005688:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0e      	ldr	r2, [pc, #56]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fb ff83 	bl	80015a0 <HAL_GetTick>
 800569a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800569c:	e008      	b.n	80056b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800569e:	f7fb ff7f 	bl	80015a0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	ffff0007 	.word	0xffff0007

080056d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	@ 0x28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e075      	b.n	80057ce <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb fd55 	bl	80011a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f868 	bl	80057d8 <HAL_SD_InitCard>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e05d      	b.n	80057ce <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fdb5 	bl	8006288 <HAL_SD_GetCardStatus>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e052      	b.n	80057ce <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005728:	7e3b      	ldrb	r3, [r7, #24]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800572e:	7e7b      	ldrb	r3, [r7, #25]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10a      	bne.n	8005752 <HAL_SD_Init+0x82>
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_SD_Init+0x78>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005750:	e00b      	b.n	800576a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	2b01      	cmp	r3, #1
 8005758:	d104      	bne.n	8005764 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58
 8005762:	e002      	b.n	800576a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fe73 	bl	800645c <HAL_SD_ConfigWideBusOperation>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e026      	b.n	80057ce <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005780:	f7fb ff0e 	bl	80015a0 <HAL_GetTick>
 8005784:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005786:	e011      	b.n	80057ac <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005788:	f7fb ff0a 	bl	80015a0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d109      	bne.n	80057ac <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800579e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e010      	b.n	80057ce <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 ff67 	bl	8006680 <HAL_SD_GetCardState>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d1e7      	bne.n	8005788 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3728      	adds	r7, #40	@ 0x28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b08d      	sub	sp, #52	@ 0x34
 80057dc:	af02      	add	r7, sp, #8
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80057f0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	f7fe fc76 	bl	80040e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80057fc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005812:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e070      	b.n	80058fa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	4a39      	ldr	r2, [pc, #228]	@ (8005904 <HAL_SD_InitCard+0x12c>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681c      	ldr	r4, [r3, #0]
 800582a:	466a      	mov	r2, sp
 800582c:	f107 0318 	add.w	r3, r7, #24
 8005830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005834:	e882 0003 	stmia.w	r2, {r0, r1}
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800583e:	4620      	mov	r0, r4
 8005840:	f001 fef4 	bl	800762c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f001 ff37 	bl	80076bc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005866:	4a28      	ldr	r2, [pc, #160]	@ (8005908 <HAL_SD_InitCard+0x130>)
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	3301      	adds	r3, #1
 8005870:	4618      	mov	r0, r3
 8005872:	f7fb fea1 	bl	80015b8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fff0 	bl	800685c <SD_PowerON>
 800587c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e02e      	b.n	80058fa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 ff0f 	bl	80066c0 <SD_InitCard>
 80058a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e01b      	b.n	80058fa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058ca:	4618      	mov	r0, r3
 80058cc:	f001 ff8c 	bl	80077e8 <SDMMC_CmdBlockLength>
 80058d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a0b      	ldr	r2, [pc, #44]	@ (800590c <HAL_SD_InitCard+0x134>)
 80058de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	372c      	adds	r7, #44	@ 0x2c
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}
 8005902:	bf00      	nop
 8005904:	014f8b59 	.word	0x014f8b59
 8005908:	00012110 	.word	0x00012110
 800590c:	1fe00fff 	.word	0x1fe00fff

08005910 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b092      	sub	sp, #72	@ 0x48
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800591e:	f7fb fe3f 	bl	80015a0 <HAL_GetTick>
 8005922:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005936:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e167      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	f040 815a 	bne.w	8005c04 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005956:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	429a      	cmp	r2, r3
 8005962:	d907      	bls.n	8005974 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005968:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e14e      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2200      	movs	r2, #0
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	2b01      	cmp	r3, #1
 800598a:	d002      	beq.n	8005992 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	025b      	lsls	r3, r3, #9
 8005990:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	025b      	lsls	r3, r3, #9
 800599c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800599e:	2390      	movs	r3, #144	@ 0x90
 80059a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80059a2:	2302      	movs	r3, #2
 80059a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f107 0214 	add.w	r2, r7, #20
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fee9 	bl	8007790 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059cc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d90a      	bls.n	80059ea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2202      	movs	r2, #2
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 ff47 	bl	8007874 <SDMMC_CmdReadMultiBlock>
 80059e6:	6478      	str	r0, [r7, #68]	@ 0x44
 80059e8:	e009      	b.n	80059fe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 ff19 	bl	800782e <SDMMC_CmdReadSingleBlock>
 80059fc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80059fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a84      	ldr	r2, [pc, #528]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a12:	431a      	orrs	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0f3      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005a2e:	e058      	b.n	8005ae2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d033      	beq.n	8005aa6 <HAL_SD_ReadBlocks+0x196>
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a40:	2b1f      	cmp	r3, #31
 8005a42:	d930      	bls.n	8005aa6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a48:	e027      	b.n	8005a9a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fe16 	bl	8007680 <SDMMC_ReadFIFO>
 8005a54:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	3301      	adds	r3, #1
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a70:	3301      	adds	r3, #1
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	0c1b      	lsrs	r3, r3, #16
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a80:	3301      	adds	r3, #1
 8005a82:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	0e1b      	lsrs	r3, r3, #24
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	3301      	adds	r3, #1
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8005a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a96:	3301      	adds	r3, #1
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9c:	2b07      	cmp	r3, #7
 8005a9e:	d9d4      	bls.n	8005a4a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa2:	3b20      	subs	r3, #32
 8005aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005aa6:	f7fb fd7b 	bl	80015a0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d902      	bls.n	8005abc <HAL_SD_ReadBlocks+0x1ac>
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d112      	bne.n	8005ae2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a56      	ldr	r2, [pc, #344]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e097      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae8:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d09f      	beq.n	8005a30 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005afe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d022      	beq.n	8005b54 <HAL_SD_ReadBlocks+0x244>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d91f      	bls.n	8005b54 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d01b      	beq.n	8005b54 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 ff11 	bl	8007948 <SDMMC_CmdStopTransfer>
 8005b26:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d012      	beq.n	8005b54 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3a      	ldr	r2, [pc, #232]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e05e      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d012      	beq.n	8005b88 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2d      	ldr	r2, [pc, #180]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6e:	f043 0208 	orr.w	r2, r3, #8
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e044      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d012      	beq.n	8005bbc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	f043 0202 	orr.w	r2, r3, #2
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e02a      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d012      	beq.n	8005bf0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <HAL_SD_ReadBlocks+0x30c>)
 8005bd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e010      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c20 <HAL_SD_ReadBlocks+0x310>)
 8005bf6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e006      	b.n	8005c12 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3748      	adds	r7, #72	@ 0x48
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	1fe00fff 	.word	0x1fe00fff
 8005c20:	18000f3a 	.word	0x18000f3a

08005c24 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b092      	sub	sp, #72	@ 0x48
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c32:	f7fb fcb5 	bl	80015a0 <HAL_GetTick>
 8005c36:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e16b      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 815e 	bne.w	8005f20 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	441a      	add	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d907      	bls.n	8005c88 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e152      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	025b      	lsls	r3, r3, #9
 8005ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	025b      	lsls	r3, r3, #9
 8005cb0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005cb2:	2390      	movs	r3, #144	@ 0x90
 8005cb4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f107 0218 	add.w	r2, r7, #24
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fd5f 	bl	8007790 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ce0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d90a      	bls.n	8005cfe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fe03 	bl	8007900 <SDMMC_CmdWriteMultiBlock>
 8005cfa:	6478      	str	r0, [r7, #68]	@ 0x44
 8005cfc:	e009      	b.n	8005d12 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2210      	movs	r2, #16
 8005d02:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 fdd5 	bl	80078ba <SDMMC_CmdWriteSingleBlock>
 8005d10:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d012      	beq.n	8005d3e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a86      	ldr	r2, [pc, #536]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005d1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0f7      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005d42:	e05c      	b.n	8005dfe <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d037      	beq.n	8005dc2 <HAL_SD_WriteBlocks+0x19e>
 8005d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d54:	2b1f      	cmp	r3, #31
 8005d56:	d934      	bls.n	8005dc2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d5c:	e02b      	b.n	8005db6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d66:	3301      	adds	r3, #1
 8005d68:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d78:	3301      	adds	r3, #1
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	041a      	lsls	r2, r3, #16
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	061a      	lsls	r2, r3, #24
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f107 0214 	add.w	r2, r7, #20
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fc75 	bl	800769a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8005db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db2:	3301      	adds	r3, #1
 8005db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d9d0      	bls.n	8005d5e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbe:	3b20      	subs	r3, #32
 8005dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005dc2:	f7fb fbed 	bl	80015a0 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d902      	bls.n	8005dd8 <HAL_SD_WriteBlocks+0x1b4>
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d112      	bne.n	8005dfe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a56      	ldr	r2, [pc, #344]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005dde:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e097      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d09b      	beq.n	8005d44 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d022      	beq.n	8005e70 <HAL_SD_WriteBlocks+0x24c>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d91f      	bls.n	8005e70 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d01b      	beq.n	8005e70 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fd83 	bl	8007948 <SDMMC_CmdStopTransfer>
 8005e42:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005e50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e05e      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e044      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d012      	beq.n	8005ed8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005eb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebe:	f043 0202 	orr.w	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e02a      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a13      	ldr	r2, [pc, #76]	@ (8005f38 <HAL_SD_WriteBlocks+0x314>)
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef2:	f043 0210 	orr.w	r2, r3, #16
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e010      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	@ (8005f3c <HAL_SD_WriteBlocks+0x318>)
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e006      	b.n	8005f2e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3748      	adds	r7, #72	@ 0x48
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	1fe00fff 	.word	0x1fe00fff
 8005f3c:	18000f3a 	.word	0x18000f3a

08005f40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4e:	0f9b      	lsrs	r3, r3, #30
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5a:	0e9b      	lsrs	r3, r3, #26
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	0d1b      	lsrs	r3, r3, #20
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fbe:	0bdb      	lsrs	r3, r3, #15
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd0:	0b9b      	lsrs	r3, r3, #14
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	0b5b      	lsrs	r3, r3, #13
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff4:	0b1b      	lsrs	r3, r3, #12
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d163      	bne.n	80060d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006014:	009a      	lsls	r2, r3, #2
 8006016:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800601a:	4013      	ands	r3, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006020:	0f92      	lsrs	r2, r2, #30
 8006022:	431a      	orrs	r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800602c:	0edb      	lsrs	r3, r3, #27
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	b2da      	uxtb	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800603e:	0e1b      	lsrs	r3, r3, #24
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	b2da      	uxtb	r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006050:	0d5b      	lsrs	r3, r3, #21
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	b2da      	uxtb	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006062:	0c9b      	lsrs	r3, r3, #18
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	b2da      	uxtb	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006074:	0bdb      	lsrs	r3, r3, #15
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	b2da      	uxtb	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	7e1b      	ldrb	r3, [r3, #24]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	3302      	adds	r3, #2
 8006098:	2201      	movs	r2, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060a2:	fb03 f202 	mul.w	r2, r3, r2
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	7a1b      	ldrb	r3, [r3, #8]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2201      	movs	r2, #1
 80060b6:	409a      	lsls	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80060c4:	0a52      	lsrs	r2, r2, #9
 80060c6:	fb03 f202 	mul.w	r2, r3, r2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80060d6:	e031      	b.n	800613c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d11d      	bne.n	800611c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ee:	0c1b      	lsrs	r3, r3, #16
 80060f0:	431a      	orrs	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	3301      	adds	r3, #1
 80060fc:	029a      	lsls	r2, r3, #10
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006110:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	655a      	str	r2, [r3, #84]	@ 0x54
 800611a:	e00f      	b.n	800613c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a58      	ldr	r2, [pc, #352]	@ (8006284 <HAL_SD_GetCardCSD+0x344>)
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006128:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e09d      	b.n	8006278 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	0b9b      	lsrs	r3, r3, #14
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006152:	09db      	lsrs	r3, r3, #7
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800615a:	b2da      	uxtb	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800616a:	b2da      	uxtb	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006174:	0fdb      	lsrs	r3, r3, #31
 8006176:	b2da      	uxtb	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006180:	0f5b      	lsrs	r3, r3, #29
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	b2da      	uxtb	r2, r3
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006192:	0e9b      	lsrs	r3, r3, #26
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	b2da      	uxtb	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a4:	0d9b      	lsrs	r3, r3, #22
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061b6:	0d5b      	lsrs	r3, r3, #21
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061e6:	0bdb      	lsrs	r3, r3, #15
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061fa:	0b9b      	lsrs	r3, r3, #14
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800620e:	0b5b      	lsrs	r3, r3, #13
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006222:	0b1b      	lsrs	r3, r3, #12
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006236:	0a9b      	lsrs	r3, r3, #10
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	b2da      	uxtb	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	b2da      	uxtb	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006266:	b2da      	uxtb	r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	1fe00fff 	.word	0x1fe00fff

08006288 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b094      	sub	sp, #80	@ 0x50
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d101      	bne.n	80062a8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0a7      	b.n	80063f8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb62 	bl	8006978 <SD_SendSDStatus>
 80062b4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80062b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d011      	beq.n	80062e0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a4f      	ldr	r2, [pc, #316]	@ (8006400 <HAL_SD_GetCardStatus+0x178>)
 80062c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80062de:	e070      	b.n	80063c2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	099b      	lsrs	r3, r3, #6
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800630a:	b29a      	uxth	r2, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	0e1b      	lsrs	r3, r3, #24
 8006310:	b29b      	uxth	r3, r3
 8006312:	4313      	orrs	r3, r2
 8006314:	b29a      	uxth	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	061a      	lsls	r2, r3, #24
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006326:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006330:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	0e1b      	lsrs	r3, r3, #24
 8006336:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	b2da      	uxtb	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	0d1b      	lsrs	r3, r3, #20
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	b29b      	uxth	r3, r3
 8006364:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006368:	b29a      	uxth	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	b29b      	uxth	r3, r3
 800636e:	b2db      	uxtb	r3, r3
 8006370:	b29b      	uxth	r3, r3
 8006372:	4313      	orrs	r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	0a9b      	lsrs	r3, r3, #10
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006384:	b2da      	uxtb	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	0a1b      	lsrs	r3, r3, #8
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	b2da      	uxtb	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	0e1b      	lsrs	r3, r3, #24
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fa0c 	bl	80077e8 <SDMMC_CmdBlockLength>
 80063d0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80063d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a08      	ldr	r2, [pc, #32]	@ (8006400 <HAL_SD_GetCardStatus+0x178>)
 80063de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80063f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3750      	adds	r7, #80	@ 0x50
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	1fe00fff 	.word	0x1fe00fff

08006404 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b08d      	sub	sp, #52	@ 0x34
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2203      	movs	r2, #3
 8006470:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	2b03      	cmp	r3, #3
 800647a:	d02e      	beq.n	80064da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006482:	d106      	bne.n	8006492 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006488:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006490:	e029      	b.n	80064e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006498:	d10a      	bne.n	80064b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb64 	bl	8006b68 <SD_WideBus_Enable>
 80064a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80064ae:	e01a      	b.n	80064e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fba1 	bl	8006bfe <SD_WideBus_Disable>
 80064bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80064ca:	e00c      	b.n	80064e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80064d8:	e005      	b.n	80064e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006670 <HAL_SD_ConfigWideBusOperation+0x214>)
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064fc:	e096      	b.n	800662c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064fe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006502:	f04f 0100 	mov.w	r1, #0
 8006506:	f7fd fdef 	bl	80040e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800650a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8083 	beq.w	800661a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4950      	ldr	r1, [pc, #320]	@ (8006674 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006532:	fba1 1303 	umull	r1, r3, r1, r3
 8006536:	0e1b      	lsrs	r3, r3, #24
 8006538:	429a      	cmp	r2, r3
 800653a:	d303      	bcc.n	8006544 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e05a      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800654c:	d103      	bne.n	8006556 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	e051      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800655e:	d126      	bne.n	80065ae <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10e      	bne.n	8006586 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4a43      	ldr	r2, [pc, #268]	@ (8006678 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d906      	bls.n	800657e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4a40      	ldr	r2, [pc, #256]	@ (8006674 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	0e5b      	lsrs	r3, r3, #25
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e03d      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e039      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	4a39      	ldr	r2, [pc, #228]	@ (8006678 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d906      	bls.n	80065a6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4a36      	ldr	r2, [pc, #216]	@ (8006674 <HAL_SD_ConfigWideBusOperation+0x218>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	0e5b      	lsrs	r3, r3, #25
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e029      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e025      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10e      	bne.n	80065d4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4a30      	ldr	r2, [pc, #192]	@ (800667c <HAL_SD_ConfigWideBusOperation+0x220>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d906      	bls.n	80065cc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <HAL_SD_ConfigWideBusOperation+0x218>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0e1b      	lsrs	r3, r3, #24
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e016      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e012      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	4a26      	ldr	r2, [pc, #152]	@ (800667c <HAL_SD_ConfigWideBusOperation+0x220>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d906      	bls.n	80065f4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4a22      	ldr	r2, [pc, #136]	@ (8006674 <HAL_SD_ConfigWideBusOperation+0x218>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	0e1b      	lsrs	r3, r3, #24
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e002      	b.n	80065fa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681c      	ldr	r4, [r3, #0]
 80065fe:	466a      	mov	r2, sp
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006608:	e882 0003 	stmia.w	r2, {r0, r1}
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006612:	4620      	mov	r0, r4
 8006614:	f001 f80a 	bl	800762c <SDMMC_Init>
 8006618:	e008      	b.n	800662c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006634:	4618      	mov	r0, r3
 8006636:	f001 f8d7 	bl	80077e8 <SDMMC_CmdBlockLength>
 800663a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a0a      	ldr	r2, [pc, #40]	@ (8006670 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006648:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006668:	4618      	mov	r0, r3
 800666a:	372c      	adds	r7, #44	@ 0x2c
 800666c:	46bd      	mov	sp, r7
 800666e:	bd90      	pop	{r4, r7, pc}
 8006670:	1fe00fff 	.word	0x1fe00fff
 8006674:	55e63b89 	.word	0x55e63b89
 8006678:	02faf080 	.word	0x02faf080
 800667c:	017d7840 	.word	0x017d7840

08006680 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa40 	bl	8006b18 <SD_SendStatus>
 8006698:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	0a5b      	lsrs	r3, r3, #9
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80066b6:	693b      	ldr	r3, [r7, #16]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b090      	sub	sp, #64	@ 0x40
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80066cc:	f7fa ff68 	bl	80015a0 <HAL_GetTick>
 80066d0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f801 	bl	80076de <SDMMC_GetPowerState>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80066e6:	e0b5      	b.n	8006854 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d02e      	beq.n	800674e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fa4c 	bl	8007b92 <SDMMC_CmdSendCID>
 80066fa:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <SD_InitCard+0x46>
    {
      return errorstate;
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	e0a6      	b.n	8006854 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f001 f82c 	bl	800776a <SDMMC_GetResponse>
 8006712:	4602      	mov	r2, r0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2104      	movs	r1, #4
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f823 	bl	800776a <SDMMC_GetResponse>
 8006724:	4602      	mov	r2, r0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2108      	movs	r1, #8
 8006730:	4618      	mov	r0, r3
 8006732:	f001 f81a 	bl	800776a <SDMMC_GetResponse>
 8006736:	4602      	mov	r2, r0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	210c      	movs	r1, #12
 8006742:	4618      	mov	r0, r3
 8006744:	f001 f811 	bl	800776a <SDMMC_GetResponse>
 8006748:	4602      	mov	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	2b03      	cmp	r3, #3
 8006754:	d01d      	beq.n	8006792 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006756:	e019      	b.n	800678c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f107 020a 	add.w	r2, r7, #10
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fa54 	bl	8007c10 <SDMMC_CmdSetRelAdd>
 8006768:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006772:	e06f      	b.n	8006854 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006774:	f7fa ff14 	bl	80015a0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006782:	4293      	cmp	r3, r2
 8006784:	d902      	bls.n	800678c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006786:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800678a:	e063      	b.n	8006854 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800678c:	897b      	ldrh	r3, [r7, #10]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0e2      	beq.n	8006758 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	2b03      	cmp	r3, #3
 8006798:	d036      	beq.n	8006808 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	461a      	mov	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f001 fa0e 	bl	8007bd0 <SDMMC_CmdSendCSD>
 80067b4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <SD_InitCard+0x100>
    {
      return errorstate;
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	e049      	b.n	8006854 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 ffcf 	bl	800776a <SDMMC_GetResponse>
 80067cc:	4602      	mov	r2, r0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2104      	movs	r1, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 ffc6 	bl	800776a <SDMMC_GetResponse>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2108      	movs	r1, #8
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 ffbd 	bl	800776a <SDMMC_GetResponse>
 80067f0:	4602      	mov	r2, r0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	210c      	movs	r1, #12
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 ffb4 	bl	800776a <SDMMC_GetResponse>
 8006802:	4602      	mov	r2, r0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2104      	movs	r1, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ffab 	bl	800776a <SDMMC_GetResponse>
 8006814:	4603      	mov	r3, r0
 8006816:	0d1a      	lsrs	r2, r3, #20
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fb8c 	bl	8005f40 <HAL_SD_GetCardCSD>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800682e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006832:	e00f      	b.n	8006854 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f001 f8bd 	bl	80079c0 <SDMMC_CmdSelDesel>
 8006846:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <SD_InitCard+0x192>
  {
    return errorstate;
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	e000      	b.n	8006854 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3740      	adds	r7, #64	@ 0x40
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f001 f8c6 	bl	8007a06 <SDMMC_CmdGoIdleState>
 800687a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	e072      	b.n	800696c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f8d9 	bl	8007a42 <SDMMC_CmdOperCond>
 8006890:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006898:	d10d      	bne.n	80068b6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f8ae 	bl	8007a06 <SDMMC_CmdGoIdleState>
 80068aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <SD_PowerON+0x60>
    {
      return errorstate;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	e05a      	b.n	800696c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d137      	bne.n	8006934 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f8d9 	bl	8007a82 <SDMMC_CmdAppCommand>
 80068d0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d02d      	beq.n	8006934 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80068dc:	e046      	b.n	800696c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f8cc 	bl	8007a82 <SDMMC_CmdAppCommand>
 80068ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	e03a      	b.n	800696c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	491e      	ldr	r1, [pc, #120]	@ (8006974 <SD_PowerON+0x118>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 f8e3 	bl	8007ac8 <SDMMC_CmdAppOperCommand>
 8006902:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800690a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800690e:	e02d      	b.n	800696c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff27 	bl	800776a <SDMMC_GetResponse>
 800691c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	0fdb      	lsrs	r3, r3, #31
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <SD_PowerON+0xce>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <SD_PowerON+0xd0>
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]

    count++;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3301      	adds	r3, #1
 8006932:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800693a:	4293      	cmp	r3, r2
 800693c:	d802      	bhi.n	8006944 <SD_PowerON+0xe8>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0cc      	beq.n	80068de <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800694a:	4293      	cmp	r3, r2
 800694c:	d902      	bls.n	8006954 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800694e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006952:	e00b      	b.n	800696c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	c1100000 	.word	0xc1100000

08006978 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08c      	sub	sp, #48	@ 0x30
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006982:	f7fa fe0d 	bl	80015a0 <HAL_GetTick>
 8006986:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fee9 	bl	800776a <SDMMC_GetResponse>
 8006998:	4603      	mov	r3, r0
 800699a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069a2:	d102      	bne.n	80069aa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069a8:	e0b0      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2140      	movs	r1, #64	@ 0x40
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 ff19 	bl	80077e8 <SDMMC_CmdBlockLength>
 80069b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	e0a0      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f001 f853 	bl	8007a82 <SDMMC_CmdAppCommand>
 80069dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	e08d      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80069f6:	2340      	movs	r3, #64	@ 0x40
 80069f8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80069fa:	2360      	movs	r3, #96	@ 0x60
 80069fc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80069fe:	2302      	movs	r3, #2
 8006a00:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f107 0208 	add.w	r2, r7, #8
 8006a12:	4611      	mov	r1, r2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 febb 	bl	8007790 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f93b 	bl	8007c9a <SDMMC_CmdStatusRegister>
 8006a24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02b      	beq.n	8006a84 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	e069      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a4a:	e00d      	b.n	8006a68 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fe15 	bl	8007680 <SDMMC_ReadFIFO>
 8006a56:	4602      	mov	r2, r0
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	601a      	str	r2, [r3, #0]
        pData++;
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	3304      	adds	r3, #4
 8006a60:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	3301      	adds	r3, #1
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d9ee      	bls.n	8006a4c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a6e:	f7fa fd97 	bl	80015a0 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d102      	bne.n	8006a84 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006a7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a82:	e043      	b.n	8006b0c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0d2      	beq.n	8006a38 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	e033      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e02a      	b.n	8006b0c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d017      	beq.n	8006af4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	e021      	b.n	8006b0c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fdd7 	bl	8007680 <SDMMC_ReadFIFO>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	601a      	str	r2, [r3, #0]
    pData++;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	3304      	adds	r3, #4
 8006adc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ade:	f7fa fd5f 	bl	80015a0 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d102      	bne.n	8006af4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006aee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006af2:	e00b      	b.n	8006b0c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e2      	bne.n	8006ac8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a03      	ldr	r2, [pc, #12]	@ (8006b14 <SD_SendSDStatus+0x19c>)
 8006b08:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3730      	adds	r7, #48	@ 0x30
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	18000f3a 	.word	0x18000f3a

08006b18 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006b28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b2c:	e018      	b.n	8006b60 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f001 f88a 	bl	8007c54 <SDMMC_CmdSendStatus>
 8006b40:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e009      	b.n	8006b60 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fe09 	bl	800776a <SDMMC_GetResponse>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fdf3 	bl	800776a <SDMMC_GetResponse>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b8e:	d102      	bne.n	8006b96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b94:	e02f      	b.n	8006bf6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b96:	f107 030c 	add.w	r3, r7, #12
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f879 	bl	8006c94 <SD_FindSCR>
 8006ba2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	e023      	b.n	8006bf6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01c      	beq.n	8006bf2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f000 ff5c 	bl	8007a82 <SDMMC_CmdAppCommand>
 8006bca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	e00f      	b.n	8006bf6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 ff93 	bl	8007b08 <SDMMC_CmdBusWidth>
 8006be2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e003      	b.n	8006bf6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e001      	b.n	8006bf6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006bf2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fda8 	bl	800776a <SDMMC_GetResponse>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c24:	d102      	bne.n	8006c2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c2a:	e02f      	b.n	8006c8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c2c:	f107 030c 	add.w	r3, r7, #12
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f82e 	bl	8006c94 <SD_FindSCR>
 8006c38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	e023      	b.n	8006c8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01c      	beq.n	8006c88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	041b      	lsls	r3, r3, #16
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 ff11 	bl	8007a82 <SDMMC_CmdAppCommand>
 8006c60:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	e00f      	b.n	8006c8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2100      	movs	r1, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 ff48 	bl	8007b08 <SDMMC_CmdBusWidth>
 8006c78:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	e003      	b.n	8006c8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e001      	b.n	8006c8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c88:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08e      	sub	sp, #56	@ 0x38
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c9e:	f7fa fc7f 	bl	80015a0 <HAL_GetTick>
 8006ca2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60bb      	str	r3, [r7, #8]
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2108      	movs	r1, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fd94 	bl	80077e8 <SDMMC_CmdBlockLength>
 8006cc0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <SD_FindSCR+0x38>
  {
    return errorstate;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	e0ad      	b.n	8006e28 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 fed2 	bl	8007a82 <SDMMC_CmdAppCommand>
 8006cde:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <SD_FindSCR+0x56>
  {
    return errorstate;
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	e09e      	b.n	8006e28 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006cf4:	2330      	movs	r3, #48	@ 0x30
 8006cf6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f107 0210 	add.w	r2, r7, #16
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fd3e 	bl	8007790 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 ff18 	bl	8007b4e <SDMMC_CmdSendSCR>
 8006d1e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d027      	beq.n	8006d76 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	e07e      	b.n	8006e28 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d113      	bne.n	8006d60 <SD_FindSCR+0xcc>
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d110      	bne.n	8006d60 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fc9c 	bl	8007680 <SDMMC_ReadFIFO>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fc95 	bl	8007680 <SDMMC_ReadFIFO>
 8006d56:	4603      	mov	r3, r0
 8006d58:	60fb      	str	r3, [r7, #12]
      index++;
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d60:	f7fa fc1e 	bl	80015a0 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d102      	bne.n	8006d76 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d74:	e058      	b.n	8006e28 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d7c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0d1      	beq.n	8006d2a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2208      	movs	r2, #8
 8006d9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	e043      	b.n	8006e28 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2202      	movs	r2, #2
 8006db4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	e036      	b.n	8006e28 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e029      	b.n	8006e28 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	@ (8006e30 <SD_FindSCR+0x19c>)
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	061a      	lsls	r2, r3, #24
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006de8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006df2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	601a      	str	r2, [r3, #0]
    scr++;
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	3304      	adds	r3, #4
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	061a      	lsls	r2, r3, #24
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e10:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e1a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e24:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3738      	adds	r7, #56	@ 0x38
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	18000f3a 	.word	0x18000f3a

08006e34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e10f      	b.n	8007066 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a87      	ldr	r2, [pc, #540]	@ (8007070 <HAL_SPI_Init+0x23c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00f      	beq.n	8006e76 <HAL_SPI_Init+0x42>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a86      	ldr	r2, [pc, #536]	@ (8007074 <HAL_SPI_Init+0x240>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00a      	beq.n	8006e76 <HAL_SPI_Init+0x42>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a84      	ldr	r2, [pc, #528]	@ (8007078 <HAL_SPI_Init+0x244>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d005      	beq.n	8006e76 <HAL_SPI_Init+0x42>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d901      	bls.n	8006e76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e0f7      	b.n	8007066 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fbbc 	bl	80075f4 <SPI_GetPacketSize>
 8006e7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a7b      	ldr	r2, [pc, #492]	@ (8007070 <HAL_SPI_Init+0x23c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00c      	beq.n	8006ea2 <HAL_SPI_Init+0x6e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a79      	ldr	r2, [pc, #484]	@ (8007074 <HAL_SPI_Init+0x240>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <HAL_SPI_Init+0x6e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a78      	ldr	r2, [pc, #480]	@ (8007078 <HAL_SPI_Init+0x244>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Init+0x6e>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d811      	bhi.n	8006ec6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ea6:	4a72      	ldr	r2, [pc, #456]	@ (8007070 <HAL_SPI_Init+0x23c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a70      	ldr	r2, [pc, #448]	@ (8007074 <HAL_SPI_Init+0x240>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_SPI_Init+0x8c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6f      	ldr	r2, [pc, #444]	@ (8007078 <HAL_SPI_Init+0x244>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d104      	bne.n	8006eca <HAL_SPI_Init+0x96>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d901      	bls.n	8006eca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e0cd      	b.n	8007066 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa f9ee 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006f06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f10:	d119      	bne.n	8006f46 <HAL_SPI_Init+0x112>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f1a:	d103      	bne.n	8006f24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10c      	bne.n	8006f46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f34:	d107      	bne.n	8006f46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00f      	beq.n	8006f72 <HAL_SPI_Init+0x13e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	2b06      	cmp	r3, #6
 8006f58:	d90b      	bls.n	8006f72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e007      	b.n	8006f82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69da      	ldr	r2, [r3, #28]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	ea42 0103 	orr.w	r1, r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fe2:	ea42 0103 	orr.w	r1, r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d113      	bne.n	8007022 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800700c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007020:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40013000 	.word	0x40013000
 8007074:	40003800 	.word	0x40003800
 8007078:	40003c00 	.word	0x40003c00

0800707c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3320      	adds	r3, #32
 8007092:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007094:	f7fa fa84 	bl	80015a0 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
 80070a8:	e1d1      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_SPI_Transmit+0x3a>
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e1c9      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_SPI_Transmit+0x4c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e1c2      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2203      	movs	r2, #3
 80070d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	88fa      	ldrh	r2, [r7, #6]
 80070ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007120:	d108      	bne.n	8007134 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e009      	b.n	8007148 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007146:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	4b96      	ldr	r3, [pc, #600]	@ (80073a8 <HAL_SPI_Transmit+0x32c>)
 8007150:	4013      	ands	r3, r2
 8007152:	88f9      	ldrh	r1, [r7, #6]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	430b      	orrs	r3, r1
 800715a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007174:	d107      	bne.n	8007186 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	2b0f      	cmp	r3, #15
 800718c:	d947      	bls.n	800721e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800718e:	e03f      	b.n	8007210 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d114      	bne.n	80071c8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80071c6:	e023      	b.n	8007210 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c8:	f7fa f9ea 	bl	80015a0 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d803      	bhi.n	80071e0 <HAL_SPI_Transmit+0x164>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d102      	bne.n	80071e6 <HAL_SPI_Transmit+0x16a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d114      	bne.n	8007210 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f936 	bl	8007458 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e11e      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1b9      	bne.n	8007190 <HAL_SPI_Transmit+0x114>
 800721c:	e0f1      	b.n	8007402 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b07      	cmp	r3, #7
 8007224:	f240 80e6 	bls.w	80073f4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007228:	e05d      	b.n	80072e6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d132      	bne.n	800729e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d918      	bls.n	8007276 <HAL_SPI_Transmit+0x1fa>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d014      	beq.n	8007276 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725c:	1d1a      	adds	r2, r3, #4
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b02      	subs	r3, #2
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007274:	e037      	b.n	80072e6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727a:	881a      	ldrh	r2, [r3, #0]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800729c:	e023      	b.n	80072e6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729e:	f7fa f97f 	bl	80015a0 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d803      	bhi.n	80072b6 <HAL_SPI_Transmit+0x23a>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d102      	bne.n	80072bc <HAL_SPI_Transmit+0x240>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d114      	bne.n	80072e6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f8cb 	bl	8007458 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e0b3      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d19b      	bne.n	800722a <HAL_SPI_Transmit+0x1ae>
 80072f2:	e086      	b.n	8007402 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d154      	bne.n	80073ac <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d918      	bls.n	8007340 <HAL_SPI_Transmit+0x2c4>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007312:	2b40      	cmp	r3, #64	@ 0x40
 8007314:	d914      	bls.n	8007340 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b04      	subs	r3, #4
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800733e:	e059      	b.n	80073f4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	d917      	bls.n	800737c <HAL_SPI_Transmit+0x300>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d013      	beq.n	800737c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	881a      	ldrh	r2, [r3, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	1c9a      	adds	r2, r3, #2
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b02      	subs	r3, #2
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800737a:	e03b      	b.n	80073f4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3320      	adds	r3, #32
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073a6:	e025      	b.n	80073f4 <HAL_SPI_Transmit+0x378>
 80073a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ac:	f7fa f8f8 	bl	80015a0 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d803      	bhi.n	80073c4 <HAL_SPI_Transmit+0x348>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d102      	bne.n	80073ca <HAL_SPI_Transmit+0x34e>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d114      	bne.n	80073f4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f844 	bl	8007458 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e02c      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f47f af79 	bne.w	80072f4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2200      	movs	r2, #0
 800740a:	2108      	movs	r1, #8
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f8c3 	bl	8007598 <SPI_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741e:	f043 0220 	orr.w	r2, r3, #32
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f815 	bl	8007458 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800744c:	2300      	movs	r3, #0
  }
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop

08007458 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0208 	orr.w	r2, r2, #8
 8007476:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0210 	orr.w	r2, r2, #16
 8007486:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b3c      	ldr	r3, [pc, #240]	@ (8007594 <SPI_CloseTransfer+0x13c>)
 80074a4:	400b      	ands	r3, r1
 80074a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80074b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d014      	beq.n	80074ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00f      	beq.n	80074ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f042 0220 	orr.w	r2, r2, #32
 80074ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d014      	beq.n	8007524 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007522:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00f      	beq.n	800754e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007534:	f043 0201 	orr.w	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800754c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00f      	beq.n	8007578 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755e:	f043 0208 	orr.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007576:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	fffffc90 	.word	0xfffffc90

08007598 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80075a8:	e010      	b.n	80075cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075aa:	f7f9 fff9 	bl	80015a0 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d803      	bhi.n	80075c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d102      	bne.n	80075c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e00f      	b.n	80075ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	429a      	cmp	r2, r3
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d0df      	beq.n	80075aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	3301      	adds	r3, #1
 8007604:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3307      	adds	r3, #7
 8007612:	08db      	lsrs	r3, r3, #3
 8007614:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	fb02 f303 	mul.w	r3, r2, r3
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800762c:	b084      	sub	sp, #16
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	f107 001c 	add.w	r0, r7, #28
 800763a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007642:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007644:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007646:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800764a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800764e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8007652:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	4b07      	ldr	r3, [pc, #28]	@ (800767c <SDMMC_Init+0x50>)
 8007660:	4013      	ands	r3, r2
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	b004      	add	sp, #16
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	ffc02c00 	.word	0xffc02c00

08007680 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f043 0203 	orr.w	r2, r3, #3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0303 	and.w	r3, r3, #3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
	...

080076fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800771a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007720:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007726:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	4b06      	ldr	r3, [pc, #24]	@ (800774c <SDMMC_SendCommand+0x50>)
 8007734:	4013      	ands	r3, r2
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	fffee0c0 	.word	0xfffee0c0

08007750 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	b2db      	uxtb	r3, r3
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3314      	adds	r3, #20
 8007778:	461a      	mov	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80077b6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80077bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80077c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80077da:	2300      	movs	r3, #0

}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80077f6:	2310      	movs	r3, #16
 80077f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ff73 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800781a:	2110      	movs	r1, #16
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa5f 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007824:	69fb      	ldr	r3, [r7, #28]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b088      	sub	sp, #32
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800783c:	2311      	movs	r3, #17
 800783e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800784a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800784e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007850:	f107 0308 	add.w	r3, r7, #8
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff50 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800785c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007860:	2111      	movs	r1, #17
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa3c 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800786a:	69fb      	ldr	r3, [r7, #28]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007882:	2312      	movs	r3, #18
 8007884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800788a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ff2d 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80078a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a6:	2112      	movs	r1, #18
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa19 	bl	8007ce0 <SDMMC_GetCmdResp1>
 80078ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b0:	69fb      	ldr	r3, [r7, #28]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b088      	sub	sp, #32
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80078c8:	2318      	movs	r3, #24
 80078ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff ff0a 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80078e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ec:	2118      	movs	r1, #24
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9f6 	bl	8007ce0 <SDMMC_GetCmdResp1>
 80078f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f6:	69fb      	ldr	r3, [r7, #28]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800790e:	2319      	movs	r3, #25
 8007910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800791c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fee7 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800792e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007932:	2119      	movs	r1, #25
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f9d3 	bl	8007ce0 <SDMMC_GetCmdResp1>
 800793a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800793c:	69fb      	ldr	r3, [r7, #28]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007954:	230c      	movs	r3, #12
 8007956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800795c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007966:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007980:	f107 0308 	add.w	r3, r7, #8
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff feb8 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800798c:	4a0b      	ldr	r2, [pc, #44]	@ (80079bc <SDMMC_CmdStopTransfer+0x74>)
 800798e:	210c      	movs	r1, #12
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9a5 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007996:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079aa:	d101      	bne.n	80079b0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80079b0:	69fb      	ldr	r3, [r7, #28]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	05f5e100 	.word	0x05f5e100

080079c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80079ce:	2307      	movs	r3, #7
 80079d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fe87 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80079ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f2:	2107      	movs	r1, #7
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f973 	bl	8007ce0 <SDMMC_GetCmdResp1>
 80079fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b088      	sub	sp, #32
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fe66 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fb97 	bl	8008164 <SDMMC_GetCmdError>
 8007a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a38:	69fb      	ldr	r3, [r7, #28]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3720      	adds	r7, #32
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a4a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a50:	2308      	movs	r3, #8
 8007a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fe46 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fb29 	bl	80080c8 <SDMMC_GetCmdResp7>
 8007a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b088      	sub	sp, #32
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007a90:	2337      	movs	r3, #55	@ 0x37
 8007a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007aa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aa4:	f107 0308 	add.w	r3, r7, #8
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fe26 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab4:	2137      	movs	r1, #55	@ 0x37
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f912 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007abe:	69fb      	ldr	r3, [r7, #28]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ad6:	2329      	movs	r3, #41	@ 0x29
 8007ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff fe03 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa2e 	bl	8007f58 <SDMMC_GetCmdResp3>
 8007afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007afe:	69fb      	ldr	r3, [r7, #28]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007b16:	2306      	movs	r3, #6
 8007b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fde3 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b3a:	2106      	movs	r1, #6
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f8cf 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b44:	69fb      	ldr	r3, [r7, #28]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b088      	sub	sp, #32
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007b5a:	2333      	movs	r3, #51	@ 0x33
 8007b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b6e:	f107 0308 	add.w	r3, r7, #8
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fdc1 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	2133      	movs	r1, #51	@ 0x33
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f8ad 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b88:	69fb      	ldr	r3, [r7, #28]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b088      	sub	sp, #32
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ba2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bb2:	f107 0308 	add.w	r3, r7, #8
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fd9f 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f980 	bl	8007ec4 <SDMMC_GetCmdResp2>
 8007bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007bde:	2309      	movs	r3, #9
 8007be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007be2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fd7f 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f960 	bl	8007ec4 <SDMMC_GetCmdResp2>
 8007c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c06:	69fb      	ldr	r3, [r7, #28]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff fd5f 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	2103      	movs	r1, #3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9c8 	bl	8007fd8 <SDMMC_GetCmdResp6>
 8007c48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c4a:	69fb      	ldr	r3, [r7, #28]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c62:	230d      	movs	r3, #13
 8007c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c76:	f107 0308 	add.w	r3, r7, #8
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fd3d 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c86:	210d      	movs	r1, #13
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f829 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c90:	69fb      	ldr	r3, [r7, #28]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007ca6:	230d      	movs	r3, #13
 8007ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007cb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fd1b 	bl	80076fc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cca:	210d      	movs	r1, #13
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f807 	bl	8007ce0 <SDMMC_GetCmdResp1>
 8007cd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007cee:	4b70      	ldr	r3, [pc, #448]	@ (8007eb0 <SDMMC_GetCmdResp1+0x1d0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a70      	ldr	r2, [pc, #448]	@ (8007eb4 <SDMMC_GetCmdResp1+0x1d4>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	0a5a      	lsrs	r2, r3, #9
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	1e5a      	subs	r2, r3, #1
 8007d06:	61fa      	str	r2, [r7, #28]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007d10:	e0c9      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d16:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	4b67      	ldr	r3, [pc, #412]	@ (8007eb8 <SDMMC_GetCmdResp1+0x1d8>)
 8007d1c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0ef      	beq.n	8007d02 <SDMMC_GetCmdResp1+0x22>
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1ea      	bne.n	8007d02 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d3e:	2304      	movs	r3, #4
 8007d40:	e0b1      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0a6      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a58      	ldr	r2, [pc, #352]	@ (8007ebc <SDMMC_GetCmdResp1+0x1dc>)
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff fcf6 	bl	8007750 <SDMMC_GetCommandResponse>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d001      	beq.n	8007d72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e099      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007d72:	2100      	movs	r1, #0
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff fcf8 	bl	800776a <SDMMC_GetResponse>
 8007d7a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4b50      	ldr	r3, [pc, #320]	@ (8007ec0 <SDMMC_GetCmdResp1+0x1e0>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e08d      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da02      	bge.n	8007d96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d94:	e087      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007da0:	2340      	movs	r3, #64	@ 0x40
 8007da2:	e080      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007dae:	2380      	movs	r3, #128	@ 0x80
 8007db0:	e079      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007dc0:	e071      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dd0:	e069      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007de0:	e061      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007dec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007df0:	e059      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e00:	e051      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007e10:	e049      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e20:	e041      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e30:	e039      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007e40:	e031      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007e50:	e029      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e60:	e021      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007e70:	e019      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007e80:	e011      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007e90:	e009      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007ea0:	e001      	b.n	8007ea6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ea2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	24000000 	.word	0x24000000
 8007eb4:	10624dd3 	.word	0x10624dd3
 8007eb8:	00200045 	.word	0x00200045
 8007ebc:	002000c5 	.word	0x002000c5
 8007ec0:	fdffe008 	.word	0xfdffe008

08007ec4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8007f4c <SDMMC_GetCmdResp2+0x88>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <SDMMC_GetCmdResp2+0x8c>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	0a5b      	lsrs	r3, r3, #9
 8007ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1e5a      	subs	r2, r3, #1
 8007ee6:	60fa      	str	r2, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ef0:	e026      	b.n	8007f40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0ef      	beq.n	8007ee2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1ea      	bne.n	8007ee2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f1e:	2304      	movs	r3, #4
 8007f20:	e00e      	b.n	8007f40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d004      	beq.n	8007f38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e003      	b.n	8007f40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a06      	ldr	r2, [pc, #24]	@ (8007f54 <SDMMC_GetCmdResp2+0x90>)
 8007f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	24000000 	.word	0x24000000
 8007f50:	10624dd3 	.word	0x10624dd3
 8007f54:	002000c5 	.word	0x002000c5

08007f58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007f60:	4b1a      	ldr	r3, [pc, #104]	@ (8007fcc <SDMMC_GetCmdResp3+0x74>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd0 <SDMMC_GetCmdResp3+0x78>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	0a5b      	lsrs	r3, r3, #9
 8007f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
 8007f74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1e5a      	subs	r2, r3, #1
 8007f7a:	60fa      	str	r2, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f84:	e01b      	b.n	8007fbe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0ef      	beq.n	8007f76 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ea      	bne.n	8007f76 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	e003      	b.n	8007fbe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a06      	ldr	r2, [pc, #24]	@ (8007fd4 <SDMMC_GetCmdResp3+0x7c>)
 8007fba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	24000000 	.word	0x24000000
 8007fd0:	10624dd3 	.word	0x10624dd3
 8007fd4:	002000c5 	.word	0x002000c5

08007fd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007fe6:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <SDMMC_GetCmdResp6+0xe4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a35      	ldr	r2, [pc, #212]	@ (80080c0 <SDMMC_GetCmdResp6+0xe8>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	0a5b      	lsrs	r3, r3, #9
 8007ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	1e5a      	subs	r2, r3, #1
 8008000:	61fa      	str	r2, [r7, #28]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008006:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800800a:	e052      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008010:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0ef      	beq.n	8007ffc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1ea      	bne.n	8007ffc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2204      	movs	r2, #4
 8008036:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008038:	2304      	movs	r3, #4
 800803a:	e03a      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800804e:	2301      	movs	r3, #1
 8008050:	e02f      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff fb7c 	bl	8007750 <SDMMC_GetCommandResponse>
 8008058:	4603      	mov	r3, r0
 800805a:	461a      	mov	r2, r3
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	4293      	cmp	r3, r2
 8008060:	d001      	beq.n	8008066 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008062:	2301      	movs	r3, #1
 8008064:	e025      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <SDMMC_GetCmdResp6+0xec>)
 800806a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fb7b 	bl	800776a <SDMMC_GetResponse>
 8008074:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d106      	bne.n	800808e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800808a:	2300      	movs	r3, #0
 800808c:	e011      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800809c:	e009      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080ac:	e001      	b.n	80080b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80080ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	24000000 	.word	0x24000000
 80080c0:	10624dd3 	.word	0x10624dd3
 80080c4:	002000c5 	.word	0x002000c5

080080c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80080d0:	4b22      	ldr	r3, [pc, #136]	@ (800815c <SDMMC_GetCmdResp7+0x94>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a22      	ldr	r2, [pc, #136]	@ (8008160 <SDMMC_GetCmdResp7+0x98>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	0a5b      	lsrs	r3, r3, #9
 80080dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1e5a      	subs	r2, r3, #1
 80080ea:	60fa      	str	r2, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80080f4:	e02c      	b.n	8008150 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ef      	beq.n	80080e6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1ea      	bne.n	80080e6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2204      	movs	r2, #4
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008122:	2304      	movs	r3, #4
 8008124:	e014      	b.n	8008150 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d004      	beq.n	800813c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008138:	2301      	movs	r3, #1
 800813a:	e009      	b.n	8008150 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2240      	movs	r2, #64	@ 0x40
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800814e:	2300      	movs	r3, #0

}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	24000000 	.word	0x24000000
 8008160:	10624dd3 	.word	0x10624dd3

08008164 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800816c:	4b11      	ldr	r3, [pc, #68]	@ (80081b4 <SDMMC_GetCmdError+0x50>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a11      	ldr	r2, [pc, #68]	@ (80081b8 <SDMMC_GetCmdError+0x54>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	0a5b      	lsrs	r3, r3, #9
 8008178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1e5a      	subs	r2, r3, #1
 8008186:	60fa      	str	r2, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d102      	bne.n	8008192 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800818c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008190:	e009      	b.n	80081a6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f1      	beq.n	8008182 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a06      	ldr	r2, [pc, #24]	@ (80081bc <SDMMC_GetCmdError+0x58>)
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	24000000 	.word	0x24000000
 80081b8:	10624dd3 	.word	0x10624dd3
 80081bc:	002000c5 	.word	0x002000c5

080081c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80081c4:	4904      	ldr	r1, [pc, #16]	@ (80081d8 <MX_FATFS_Init+0x18>)
 80081c6:	4805      	ldr	r0, [pc, #20]	@ (80081dc <MX_FATFS_Init+0x1c>)
 80081c8:	f000 f9e4 	bl	8008594 <FATFS_LinkDriver>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	4b03      	ldr	r3, [pc, #12]	@ (80081e0 <MX_FATFS_Init+0x20>)
 80081d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081d4:	bf00      	nop
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	24000140 	.word	0x24000140
 80081dc:	080091d0 	.word	0x080091d0
 80081e0:	2400013c 	.word	0x2400013c

080081e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80081ee:	f000 f879 	bl	80082e4 <BSP_SD_IsDetected>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d001      	beq.n	80081fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80081f8:	2302      	movs	r3, #2
 80081fa:	e012      	b.n	8008222 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80081fc:	480b      	ldr	r0, [pc, #44]	@ (800822c <BSP_SD_Init+0x48>)
 80081fe:	f7fd fa67 	bl	80056d0 <HAL_SD_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800820c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008210:	4806      	ldr	r0, [pc, #24]	@ (800822c <BSP_SD_Init+0x48>)
 8008212:	f7fe f923 	bl	800645c <HAL_SD_ConfigWideBusOperation>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008220:	79fb      	ldrb	r3, [r7, #7]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	24000034 	.word	0x24000034

08008230 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	4806      	ldr	r0, [pc, #24]	@ (8008268 <BSP_SD_ReadBlocks+0x38>)
 800824e:	f7fd fb5f 	bl	8005910 <HAL_SD_ReadBlocks>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	24000034 	.word	0x24000034

0800826c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	68f9      	ldr	r1, [r7, #12]
 8008288:	4806      	ldr	r0, [pc, #24]	@ (80082a4 <BSP_SD_WriteBlocks+0x38>)
 800828a:	f7fd fccb 	bl	8005c24 <HAL_SD_WriteBlocks>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	24000034 	.word	0x24000034

080082a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80082ac:	4805      	ldr	r0, [pc, #20]	@ (80082c4 <BSP_SD_GetCardState+0x1c>)
 80082ae:	f7fe f9e7 	bl	8006680 <HAL_SD_GetCardState>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	bf14      	ite	ne
 80082b8:	2301      	movne	r3, #1
 80082ba:	2300      	moveq	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
}
 80082be:	4618      	mov	r0, r3
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	24000034 	.word	0x24000034

080082c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	4803      	ldr	r0, [pc, #12]	@ (80082e0 <BSP_SD_GetCardInfo+0x18>)
 80082d4:	f7fe f896 	bl	8006404 <HAL_SD_GetCardInfo>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	24000034 	.word	0x24000034

080082e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80082ea:	2301      	movs	r3, #1
 80082ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80082ee:	f000 f80b 	bl	8008308 <BSP_PlatformIsDetected>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80082f8:	2300      	movs	r3, #0
 80082fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	b2db      	uxtb	r3, r3
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800830e:	2301      	movs	r3, #1
 8008310:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008316:	4806      	ldr	r0, [pc, #24]	@ (8008330 <BSP_PlatformIsDetected+0x28>)
 8008318:	f7f9 fc12 	bl	8001b40 <HAL_GPIO_ReadPin>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008322:	2300      	movs	r3, #0
 8008324:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008326:	79fb      	ldrb	r3, [r7, #7]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	58022000 	.word	0x58022000

08008334 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800833e:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <SD_CheckStatus+0x38>)
 8008340:	2201      	movs	r2, #1
 8008342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008344:	f7ff ffb0 	bl	80082a8 <BSP_SD_GetCardState>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d107      	bne.n	800835e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800834e:	4b07      	ldr	r3, [pc, #28]	@ (800836c <SD_CheckStatus+0x38>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b04      	ldr	r3, [pc, #16]	@ (800836c <SD_CheckStatus+0x38>)
 800835c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <SD_CheckStatus+0x38>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b2db      	uxtb	r3, r3
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	2400000d 	.word	0x2400000d

08008370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800837a:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <SD_initialize+0x38>)
 800837c:	2201      	movs	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008380:	f7ff ff30 	bl	80081e4 <BSP_SD_Init>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d107      	bne.n	800839a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ffd1 	bl	8008334 <SD_CheckStatus>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	4b04      	ldr	r3, [pc, #16]	@ (80083a8 <SD_initialize+0x38>)
 8008398:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800839a:	4b03      	ldr	r3, [pc, #12]	@ (80083a8 <SD_initialize+0x38>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b2db      	uxtb	r3, r3
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	2400000d 	.word	0x2400000d

080083ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ffbb 	bl	8008334 <SD_CheckStatus>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	68b8      	ldr	r0, [r7, #8]
 80083e6:	f7ff ff23 	bl	8008230 <BSP_SD_ReadBlocks>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80083f0:	bf00      	nop
 80083f2:	f7ff ff59 	bl	80082a8 <BSP_SD_GetCardState>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1fa      	bne.n	80083f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	68b8      	ldr	r0, [r7, #8]
 8008428:	f7ff ff20 	bl	800826c <BSP_SD_WriteBlocks>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d107      	bne.n	8008442 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008432:	bf00      	nop
 8008434:	f7ff ff38 	bl	80082a8 <BSP_SD_GetCardState>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1fa      	bne.n	8008434 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	@ 0x30
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	603a      	str	r2, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
 8008458:	460b      	mov	r3, r1
 800845a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008462:	4b25      	ldr	r3, [pc, #148]	@ (80084f8 <SD_ioctl+0xac>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <SD_ioctl+0x28>
 8008470:	2303      	movs	r3, #3
 8008472:	e03c      	b.n	80084ee <SD_ioctl+0xa2>

  switch (cmd)
 8008474:	79bb      	ldrb	r3, [r7, #6]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d834      	bhi.n	80084e4 <SD_ioctl+0x98>
 800847a:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <SD_ioctl+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	08008499 	.word	0x08008499
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084cb 	.word	0x080084cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008496:	e028      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008498:	f107 0308 	add.w	r3, r7, #8
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff ff13 	bl	80082c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084ae:	e01c      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff ff07 	bl	80082c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	b29a      	uxth	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084c8:	e00f      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084ca:	f107 0308 	add.w	r3, r7, #8
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fefa 	bl	80082c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	0a5a      	lsrs	r2, r3, #9
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084e2:	e002      	b.n	80084ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80084ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3730      	adds	r7, #48	@ 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2400000d 	.word	0x2400000d

080084fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008512:	4b1f      	ldr	r3, [pc, #124]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 8008514:	7a5b      	ldrb	r3, [r3, #9]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d131      	bne.n	8008580 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800851c:	4b1c      	ldr	r3, [pc, #112]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 800851e:	7a5b      	ldrb	r3, [r3, #9]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	461a      	mov	r2, r3
 8008524:	4b1a      	ldr	r3, [pc, #104]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 8008526:	2100      	movs	r1, #0
 8008528:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800852a:	4b19      	ldr	r3, [pc, #100]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 800852c:	7a5b      	ldrb	r3, [r3, #9]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	4a17      	ldr	r2, [pc, #92]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800853a:	4b15      	ldr	r3, [pc, #84]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 800853c:	7a5b      	ldrb	r3, [r3, #9]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	4b13      	ldr	r3, [pc, #76]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 8008544:	4413      	add	r3, r2
 8008546:	79fa      	ldrb	r2, [r7, #7]
 8008548:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800854a:	4b11      	ldr	r3, [pc, #68]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 800854c:	7a5b      	ldrb	r3, [r3, #9]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	b2d1      	uxtb	r1, r2
 8008554:	4a0e      	ldr	r2, [pc, #56]	@ (8008590 <FATFS_LinkDriverEx+0x94>)
 8008556:	7251      	strb	r1, [r2, #9]
 8008558:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800855a:	7dbb      	ldrb	r3, [r7, #22]
 800855c:	3330      	adds	r3, #48	@ 0x30
 800855e:	b2da      	uxtb	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3301      	adds	r3, #1
 8008568:	223a      	movs	r2, #58	@ 0x3a
 800856a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	3302      	adds	r3, #2
 8008570:	222f      	movs	r2, #47	@ 0x2f
 8008572:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	3303      	adds	r3, #3
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
}
 8008582:	4618      	mov	r0, r3
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	24000144 	.word	0x24000144

08008594 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ffaa 	bl	80084fc <FATFS_LinkDriverEx>
 80085a8:	4603      	mov	r3, r0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <memset>:
 80085b2:	4402      	add	r2, r0
 80085b4:	4603      	mov	r3, r0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d100      	bne.n	80085bc <memset+0xa>
 80085ba:	4770      	bx	lr
 80085bc:	f803 1b01 	strb.w	r1, [r3], #1
 80085c0:	e7f9      	b.n	80085b6 <memset+0x4>
	...

080085c4 <__libc_init_array>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	4d0d      	ldr	r5, [pc, #52]	@ (80085fc <__libc_init_array+0x38>)
 80085c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008600 <__libc_init_array+0x3c>)
 80085ca:	1b64      	subs	r4, r4, r5
 80085cc:	10a4      	asrs	r4, r4, #2
 80085ce:	2600      	movs	r6, #0
 80085d0:	42a6      	cmp	r6, r4
 80085d2:	d109      	bne.n	80085e8 <__libc_init_array+0x24>
 80085d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008604 <__libc_init_array+0x40>)
 80085d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008608 <__libc_init_array+0x44>)
 80085d8:	f000 fde6 	bl	80091a8 <_init>
 80085dc:	1b64      	subs	r4, r4, r5
 80085de:	10a4      	asrs	r4, r4, #2
 80085e0:	2600      	movs	r6, #0
 80085e2:	42a6      	cmp	r6, r4
 80085e4:	d105      	bne.n	80085f2 <__libc_init_array+0x2e>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ec:	4798      	blx	r3
 80085ee:	3601      	adds	r6, #1
 80085f0:	e7ee      	b.n	80085d0 <__libc_init_array+0xc>
 80085f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f6:	4798      	blx	r3
 80085f8:	3601      	adds	r6, #1
 80085fa:	e7f2      	b.n	80085e2 <__libc_init_array+0x1e>
 80085fc:	080093c0 	.word	0x080093c0
 8008600:	080093c0 	.word	0x080093c0
 8008604:	080093c0 	.word	0x080093c0
 8008608:	080093c4 	.word	0x080093c4
 800860c:	00000000 	.word	0x00000000

08008610 <sin>:
 8008610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008612:	eeb0 7b40 	vmov.f64	d7, d0
 8008616:	ee17 3a90 	vmov	r3, s15
 800861a:	4a21      	ldr	r2, [pc, #132]	@ (80086a0 <sin+0x90>)
 800861c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008620:	4293      	cmp	r3, r2
 8008622:	d807      	bhi.n	8008634 <sin+0x24>
 8008624:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8008698 <sin+0x88>
 8008628:	2000      	movs	r0, #0
 800862a:	b005      	add	sp, #20
 800862c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008630:	f000 b8a2 	b.w	8008778 <__kernel_sin>
 8008634:	4a1b      	ldr	r2, [pc, #108]	@ (80086a4 <sin+0x94>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d904      	bls.n	8008644 <sin+0x34>
 800863a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800863e:	b005      	add	sp, #20
 8008640:	f85d fb04 	ldr.w	pc, [sp], #4
 8008644:	4668      	mov	r0, sp
 8008646:	f000 f8ef 	bl	8008828 <__ieee754_rem_pio2>
 800864a:	f000 0003 	and.w	r0, r0, #3
 800864e:	2801      	cmp	r0, #1
 8008650:	d00a      	beq.n	8008668 <sin+0x58>
 8008652:	2802      	cmp	r0, #2
 8008654:	d00f      	beq.n	8008676 <sin+0x66>
 8008656:	b9c0      	cbnz	r0, 800868a <sin+0x7a>
 8008658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800865c:	ed9d 0b00 	vldr	d0, [sp]
 8008660:	2001      	movs	r0, #1
 8008662:	f000 f889 	bl	8008778 <__kernel_sin>
 8008666:	e7ea      	b.n	800863e <sin+0x2e>
 8008668:	ed9d 1b02 	vldr	d1, [sp, #8]
 800866c:	ed9d 0b00 	vldr	d0, [sp]
 8008670:	f000 f81a 	bl	80086a8 <__kernel_cos>
 8008674:	e7e3      	b.n	800863e <sin+0x2e>
 8008676:	ed9d 1b02 	vldr	d1, [sp, #8]
 800867a:	ed9d 0b00 	vldr	d0, [sp]
 800867e:	2001      	movs	r0, #1
 8008680:	f000 f87a 	bl	8008778 <__kernel_sin>
 8008684:	eeb1 0b40 	vneg.f64	d0, d0
 8008688:	e7d9      	b.n	800863e <sin+0x2e>
 800868a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800868e:	ed9d 0b00 	vldr	d0, [sp]
 8008692:	f000 f809 	bl	80086a8 <__kernel_cos>
 8008696:	e7f5      	b.n	8008684 <sin+0x74>
	...
 80086a0:	3fe921fb 	.word	0x3fe921fb
 80086a4:	7fefffff 	.word	0x7fefffff

080086a8 <__kernel_cos>:
 80086a8:	eeb0 5b40 	vmov.f64	d5, d0
 80086ac:	ee15 1a90 	vmov	r1, s11
 80086b0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80086b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80086b8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80086bc:	d204      	bcs.n	80086c8 <__kernel_cos+0x20>
 80086be:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80086c2:	ee17 3a90 	vmov	r3, s15
 80086c6:	b343      	cbz	r3, 800871a <__kernel_cos+0x72>
 80086c8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80086cc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80086d0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8008740 <__kernel_cos+0x98>
 80086d4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008748 <__kernel_cos+0xa0>
 80086d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80086dc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008750 <__kernel_cos+0xa8>
 80086e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80086e4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008758 <__kernel_cos+0xb0>
 80086e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80086ec:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8008760 <__kernel_cos+0xb8>
 80086f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008770 <__kernel_cos+0xc8>)
 80086f2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80086f6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8008768 <__kernel_cos+0xc0>
 80086fa:	4299      	cmp	r1, r3
 80086fc:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008700:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8008704:	ee24 4b06 	vmul.f64	d4, d4, d6
 8008708:	ee26 7b07 	vmul.f64	d7, d6, d7
 800870c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8008710:	d804      	bhi.n	800871c <__kernel_cos+0x74>
 8008712:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008716:	ee30 0b47 	vsub.f64	d0, d0, d7
 800871a:	4770      	bx	lr
 800871c:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <__kernel_cos+0xcc>)
 800871e:	4299      	cmp	r1, r3
 8008720:	d809      	bhi.n	8008736 <__kernel_cos+0x8e>
 8008722:	2200      	movs	r2, #0
 8008724:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8008728:	ec43 2b16 	vmov	d6, r2, r3
 800872c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008730:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008734:	e7ed      	b.n	8008712 <__kernel_cos+0x6a>
 8008736:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800873a:	e7f7      	b.n	800872c <__kernel_cos+0x84>
 800873c:	f3af 8000 	nop.w
 8008740:	be8838d4 	.word	0xbe8838d4
 8008744:	bda8fae9 	.word	0xbda8fae9
 8008748:	bdb4b1c4 	.word	0xbdb4b1c4
 800874c:	3e21ee9e 	.word	0x3e21ee9e
 8008750:	809c52ad 	.word	0x809c52ad
 8008754:	be927e4f 	.word	0xbe927e4f
 8008758:	19cb1590 	.word	0x19cb1590
 800875c:	3efa01a0 	.word	0x3efa01a0
 8008760:	16c15177 	.word	0x16c15177
 8008764:	bf56c16c 	.word	0xbf56c16c
 8008768:	5555554c 	.word	0x5555554c
 800876c:	3fa55555 	.word	0x3fa55555
 8008770:	3fd33332 	.word	0x3fd33332
 8008774:	3fe90000 	.word	0x3fe90000

08008778 <__kernel_sin>:
 8008778:	ee10 3a90 	vmov	r3, s1
 800877c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008780:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008784:	d204      	bcs.n	8008790 <__kernel_sin+0x18>
 8008786:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800878a:	ee17 3a90 	vmov	r3, s15
 800878e:	b35b      	cbz	r3, 80087e8 <__kernel_sin+0x70>
 8008790:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008794:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008798:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80087f0 <__kernel_sin+0x78>
 800879c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80087f8 <__kernel_sin+0x80>
 80087a0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80087a4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8008800 <__kernel_sin+0x88>
 80087a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80087ac:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8008808 <__kernel_sin+0x90>
 80087b0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80087b4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8008810 <__kernel_sin+0x98>
 80087b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80087bc:	b930      	cbnz	r0, 80087cc <__kernel_sin+0x54>
 80087be:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8008818 <__kernel_sin+0xa0>
 80087c2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80087c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80087ca:	4770      	bx	lr
 80087cc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80087d0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80087d4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80087d8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80087dc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8008820 <__kernel_sin+0xa8>
 80087e0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80087e4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w
 80087f0:	5acfd57c 	.word	0x5acfd57c
 80087f4:	3de5d93a 	.word	0x3de5d93a
 80087f8:	8a2b9ceb 	.word	0x8a2b9ceb
 80087fc:	be5ae5e6 	.word	0xbe5ae5e6
 8008800:	57b1fe7d 	.word	0x57b1fe7d
 8008804:	3ec71de3 	.word	0x3ec71de3
 8008808:	19c161d5 	.word	0x19c161d5
 800880c:	bf2a01a0 	.word	0xbf2a01a0
 8008810:	1110f8a6 	.word	0x1110f8a6
 8008814:	3f811111 	.word	0x3f811111
 8008818:	55555549 	.word	0x55555549
 800881c:	bfc55555 	.word	0xbfc55555
 8008820:	55555549 	.word	0x55555549
 8008824:	3fc55555 	.word	0x3fc55555

08008828 <__ieee754_rem_pio2>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	eeb0 7b40 	vmov.f64	d7, d0
 800882e:	ee17 5a90 	vmov	r5, s15
 8008832:	4b99      	ldr	r3, [pc, #612]	@ (8008a98 <__ieee754_rem_pio2+0x270>)
 8008834:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008838:	429e      	cmp	r6, r3
 800883a:	b088      	sub	sp, #32
 800883c:	4604      	mov	r4, r0
 800883e:	d807      	bhi.n	8008850 <__ieee754_rem_pio2+0x28>
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	ed84 0b00 	vstr	d0, [r4]
 8008848:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800884c:	2000      	movs	r0, #0
 800884e:	e01b      	b.n	8008888 <__ieee754_rem_pio2+0x60>
 8008850:	4b92      	ldr	r3, [pc, #584]	@ (8008a9c <__ieee754_rem_pio2+0x274>)
 8008852:	429e      	cmp	r6, r3
 8008854:	d83b      	bhi.n	80088ce <__ieee754_rem_pio2+0xa6>
 8008856:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800885a:	2d00      	cmp	r5, #0
 800885c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8008a58 <__ieee754_rem_pio2+0x230>
 8008860:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8008864:	dd19      	ble.n	800889a <__ieee754_rem_pio2+0x72>
 8008866:	ee30 7b46 	vsub.f64	d7, d0, d6
 800886a:	429e      	cmp	r6, r3
 800886c:	d00e      	beq.n	800888c <__ieee754_rem_pio2+0x64>
 800886e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8008a60 <__ieee754_rem_pio2+0x238>
 8008872:	ee37 6b45 	vsub.f64	d6, d7, d5
 8008876:	ee37 7b46 	vsub.f64	d7, d7, d6
 800887a:	ed84 6b00 	vstr	d6, [r4]
 800887e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008882:	ed84 7b02 	vstr	d7, [r4, #8]
 8008886:	2001      	movs	r0, #1
 8008888:	b008      	add	sp, #32
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8008a68 <__ieee754_rem_pio2+0x240>
 8008890:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8008a70 <__ieee754_rem_pio2+0x248>
 8008894:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008898:	e7eb      	b.n	8008872 <__ieee754_rem_pio2+0x4a>
 800889a:	429e      	cmp	r6, r3
 800889c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80088a0:	d00e      	beq.n	80088c0 <__ieee754_rem_pio2+0x98>
 80088a2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8008a60 <__ieee754_rem_pio2+0x238>
 80088a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80088aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80088ae:	ed84 6b00 	vstr	d6, [r4]
 80088b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80088be:	e7e3      	b.n	8008888 <__ieee754_rem_pio2+0x60>
 80088c0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8008a68 <__ieee754_rem_pio2+0x240>
 80088c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8008a70 <__ieee754_rem_pio2+0x248>
 80088c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80088cc:	e7eb      	b.n	80088a6 <__ieee754_rem_pio2+0x7e>
 80088ce:	4b74      	ldr	r3, [pc, #464]	@ (8008aa0 <__ieee754_rem_pio2+0x278>)
 80088d0:	429e      	cmp	r6, r3
 80088d2:	d870      	bhi.n	80089b6 <__ieee754_rem_pio2+0x18e>
 80088d4:	f000 f8ec 	bl	8008ab0 <fabs>
 80088d8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80088dc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008a78 <__ieee754_rem_pio2+0x250>
 80088e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80088e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80088e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80088ec:	ee17 0a90 	vmov	r0, s15
 80088f0:	eeb1 4b45 	vneg.f64	d4, d5
 80088f4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008a58 <__ieee754_rem_pio2+0x230>
 80088f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80088fc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8008a60 <__ieee754_rem_pio2+0x238>
 8008900:	281f      	cmp	r0, #31
 8008902:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008906:	ee30 6b47 	vsub.f64	d6, d0, d7
 800890a:	dc05      	bgt.n	8008918 <__ieee754_rem_pio2+0xf0>
 800890c:	4b65      	ldr	r3, [pc, #404]	@ (8008aa4 <__ieee754_rem_pio2+0x27c>)
 800890e:	1e42      	subs	r2, r0, #1
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	42b3      	cmp	r3, r6
 8008916:	d109      	bne.n	800892c <__ieee754_rem_pio2+0x104>
 8008918:	ee16 3a90 	vmov	r3, s13
 800891c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008920:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008924:	2b10      	cmp	r3, #16
 8008926:	ea4f 5226 	mov.w	r2, r6, asr #20
 800892a:	dc02      	bgt.n	8008932 <__ieee754_rem_pio2+0x10a>
 800892c:	ed84 6b00 	vstr	d6, [r4]
 8008930:	e01a      	b.n	8008968 <__ieee754_rem_pio2+0x140>
 8008932:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8008a68 <__ieee754_rem_pio2+0x240>
 8008936:	eeb0 6b40 	vmov.f64	d6, d0
 800893a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800893e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008942:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008946:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8008a70 <__ieee754_rem_pio2+0x248>
 800894a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800894e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008952:	ee13 3a90 	vmov	r3, s7
 8008956:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b31      	cmp	r3, #49	@ 0x31
 800895e:	dc17      	bgt.n	8008990 <__ieee754_rem_pio2+0x168>
 8008960:	eeb0 0b46 	vmov.f64	d0, d6
 8008964:	ed84 3b00 	vstr	d3, [r4]
 8008968:	ed94 6b00 	vldr	d6, [r4]
 800896c:	2d00      	cmp	r5, #0
 800896e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008972:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008976:	ed84 0b02 	vstr	d0, [r4, #8]
 800897a:	da85      	bge.n	8008888 <__ieee754_rem_pio2+0x60>
 800897c:	eeb1 6b46 	vneg.f64	d6, d6
 8008980:	eeb1 0b40 	vneg.f64	d0, d0
 8008984:	ed84 6b00 	vstr	d6, [r4]
 8008988:	ed84 0b02 	vstr	d0, [r4, #8]
 800898c:	4240      	negs	r0, r0
 800898e:	e77b      	b.n	8008888 <__ieee754_rem_pio2+0x60>
 8008990:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8008a80 <__ieee754_rem_pio2+0x258>
 8008994:	eeb0 0b46 	vmov.f64	d0, d6
 8008998:	eea4 0b07 	vfma.f64	d0, d4, d7
 800899c:	ee36 6b40 	vsub.f64	d6, d6, d0
 80089a0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80089a4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8008a88 <__ieee754_rem_pio2+0x260>
 80089a8:	eeb0 7b46 	vmov.f64	d7, d6
 80089ac:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80089b0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80089b4:	e7ba      	b.n	800892c <__ieee754_rem_pio2+0x104>
 80089b6:	4b3c      	ldr	r3, [pc, #240]	@ (8008aa8 <__ieee754_rem_pio2+0x280>)
 80089b8:	429e      	cmp	r6, r3
 80089ba:	d906      	bls.n	80089ca <__ieee754_rem_pio2+0x1a2>
 80089bc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80089c0:	ed80 7b02 	vstr	d7, [r0, #8]
 80089c4:	ed80 7b00 	vstr	d7, [r0]
 80089c8:	e740      	b.n	800884c <__ieee754_rem_pio2+0x24>
 80089ca:	ee10 3a10 	vmov	r3, s0
 80089ce:	1532      	asrs	r2, r6, #20
 80089d0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80089d4:	4618      	mov	r0, r3
 80089d6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80089da:	ec41 0b17 	vmov	d7, r0, r1
 80089de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80089e2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8008a90 <__ieee754_rem_pio2+0x268>
 80089e6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80089ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80089ee:	ed8d 6b02 	vstr	d6, [sp, #8]
 80089f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089f6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80089fa:	a808      	add	r0, sp, #32
 80089fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008a00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a04:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008a08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a10:	2103      	movs	r1, #3
 8008a12:	ed30 7b02 	vldmdb	r0!, {d7}
 8008a16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1e:	460b      	mov	r3, r1
 8008a20:	f101 31ff 	add.w	r1, r1, #4294967295
 8008a24:	d0f5      	beq.n	8008a12 <__ieee754_rem_pio2+0x1ea>
 8008a26:	4921      	ldr	r1, [pc, #132]	@ (8008aac <__ieee754_rem_pio2+0x284>)
 8008a28:	9101      	str	r1, [sp, #4]
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	9100      	str	r1, [sp, #0]
 8008a2e:	a802      	add	r0, sp, #8
 8008a30:	4621      	mov	r1, r4
 8008a32:	f000 f845 	bl	8008ac0 <__kernel_rem_pio2>
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	f6bf af26 	bge.w	8008888 <__ieee754_rem_pio2+0x60>
 8008a3c:	ed94 7b00 	vldr	d7, [r4]
 8008a40:	eeb1 7b47 	vneg.f64	d7, d7
 8008a44:	ed84 7b00 	vstr	d7, [r4]
 8008a48:	ed94 7b02 	vldr	d7, [r4, #8]
 8008a4c:	eeb1 7b47 	vneg.f64	d7, d7
 8008a50:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a54:	e79a      	b.n	800898c <__ieee754_rem_pio2+0x164>
 8008a56:	bf00      	nop
 8008a58:	54400000 	.word	0x54400000
 8008a5c:	3ff921fb 	.word	0x3ff921fb
 8008a60:	1a626331 	.word	0x1a626331
 8008a64:	3dd0b461 	.word	0x3dd0b461
 8008a68:	1a600000 	.word	0x1a600000
 8008a6c:	3dd0b461 	.word	0x3dd0b461
 8008a70:	2e037073 	.word	0x2e037073
 8008a74:	3ba3198a 	.word	0x3ba3198a
 8008a78:	6dc9c883 	.word	0x6dc9c883
 8008a7c:	3fe45f30 	.word	0x3fe45f30
 8008a80:	2e000000 	.word	0x2e000000
 8008a84:	3ba3198a 	.word	0x3ba3198a
 8008a88:	252049c1 	.word	0x252049c1
 8008a8c:	397b839a 	.word	0x397b839a
 8008a90:	00000000 	.word	0x00000000
 8008a94:	41700000 	.word	0x41700000
 8008a98:	3fe921fb 	.word	0x3fe921fb
 8008a9c:	4002d97b 	.word	0x4002d97b
 8008aa0:	413921fb 	.word	0x413921fb
 8008aa4:	080091e4 	.word	0x080091e4
 8008aa8:	7fefffff 	.word	0x7fefffff
 8008aac:	08009264 	.word	0x08009264

08008ab0 <fabs>:
 8008ab0:	ec51 0b10 	vmov	r0, r1, d0
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008aba:	ec43 2b10 	vmov	d0, r2, r3
 8008abe:	4770      	bx	lr

08008ac0 <__kernel_rem_pio2>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b06 	vpush	{d8-d10}
 8008ac8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8008acc:	469b      	mov	fp, r3
 8008ace:	9001      	str	r0, [sp, #4]
 8008ad0:	4bbb      	ldr	r3, [pc, #748]	@ (8008dc0 <__kernel_rem_pio2+0x300>)
 8008ad2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8008ad4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8008ad8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8008adc:	f112 0f14 	cmn.w	r2, #20
 8008ae0:	bfa8      	it	ge
 8008ae2:	1ed3      	subge	r3, r2, #3
 8008ae4:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008ae8:	bfb8      	it	lt
 8008aea:	2300      	movlt	r3, #0
 8008aec:	f06f 0517 	mvn.w	r5, #23
 8008af0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8008da8 <__kernel_rem_pio2+0x2e8>
 8008af4:	bfa4      	itt	ge
 8008af6:	2018      	movge	r0, #24
 8008af8:	fb93 f3f0 	sdivge	r3, r3, r0
 8008afc:	fb03 5505 	mla	r5, r3, r5, r5
 8008b00:	eba3 040a 	sub.w	r4, r3, sl
 8008b04:	4415      	add	r5, r2
 8008b06:	460f      	mov	r7, r1
 8008b08:	eb09 060a 	add.w	r6, r9, sl
 8008b0c:	a81a      	add	r0, sp, #104	@ 0x68
 8008b0e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8008b12:	2200      	movs	r2, #0
 8008b14:	42b2      	cmp	r2, r6
 8008b16:	dd0e      	ble.n	8008b36 <__kernel_rem_pio2+0x76>
 8008b18:	aa1a      	add	r2, sp, #104	@ 0x68
 8008b1a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8008b1e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8008b22:	2600      	movs	r6, #0
 8008b24:	454e      	cmp	r6, r9
 8008b26:	dc25      	bgt.n	8008b74 <__kernel_rem_pio2+0xb4>
 8008b28:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8008da8 <__kernel_rem_pio2+0x2e8>
 8008b2c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008b30:	4614      	mov	r4, r2
 8008b32:	2000      	movs	r0, #0
 8008b34:	e015      	b.n	8008b62 <__kernel_rem_pio2+0xa2>
 8008b36:	42d4      	cmn	r4, r2
 8008b38:	d409      	bmi.n	8008b4e <__kernel_rem_pio2+0x8e>
 8008b3a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8008b3e:	ee07 1a90 	vmov	s15, r1
 8008b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b46:	eca0 7b02 	vstmia	r0!, {d7}
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	e7e2      	b.n	8008b14 <__kernel_rem_pio2+0x54>
 8008b4e:	eeb0 7b46 	vmov.f64	d7, d6
 8008b52:	e7f8      	b.n	8008b46 <__kernel_rem_pio2+0x86>
 8008b54:	ecbc 5b02 	vldmia	ip!, {d5}
 8008b58:	ed94 6b00 	vldr	d6, [r4]
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008b62:	4550      	cmp	r0, sl
 8008b64:	f1a4 0408 	sub.w	r4, r4, #8
 8008b68:	ddf4      	ble.n	8008b54 <__kernel_rem_pio2+0x94>
 8008b6a:	ecae 7b02 	vstmia	lr!, {d7}
 8008b6e:	3601      	adds	r6, #1
 8008b70:	3208      	adds	r2, #8
 8008b72:	e7d7      	b.n	8008b24 <__kernel_rem_pio2+0x64>
 8008b74:	aa06      	add	r2, sp, #24
 8008b76:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8008db0 <__kernel_rem_pio2+0x2f0>
 8008b7a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8008db8 <__kernel_rem_pio2+0x2f8>
 8008b7e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008b82:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8008b86:	9203      	str	r2, [sp, #12]
 8008b88:	9302      	str	r3, [sp, #8]
 8008b8a:	464c      	mov	r4, r9
 8008b8c:	00e3      	lsls	r3, r4, #3
 8008b8e:	9304      	str	r3, [sp, #16]
 8008b90:	ab92      	add	r3, sp, #584	@ 0x248
 8008b92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b96:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8008b9a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8008b9c:	ab06      	add	r3, sp, #24
 8008b9e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008ba2:	461e      	mov	r6, r3
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f1a2 0208 	sub.w	r2, r2, #8
 8008bac:	dc4a      	bgt.n	8008c44 <__kernel_rem_pio2+0x184>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f000 fa01 	bl	8008fb8 <scalbn>
 8008bb6:	eeb0 8b40 	vmov.f64	d8, d0
 8008bba:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8008bbe:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008bc2:	f000 fa79 	bl	80090b8 <floor>
 8008bc6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8008bca:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008bce:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	ee17 8a90 	vmov	r8, s15
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008bde:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008be2:	dd41      	ble.n	8008c68 <__kernel_rem_pio2+0x1a8>
 8008be4:	1e60      	subs	r0, r4, #1
 8008be6:	aa06      	add	r2, sp, #24
 8008be8:	f1c5 0c18 	rsb	ip, r5, #24
 8008bec:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008bf0:	fa46 f20c 	asr.w	r2, r6, ip
 8008bf4:	4490      	add	r8, r2
 8008bf6:	fa02 f20c 	lsl.w	r2, r2, ip
 8008bfa:	1ab6      	subs	r6, r6, r2
 8008bfc:	aa06      	add	r2, sp, #24
 8008bfe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8008c02:	f1c5 0217 	rsb	r2, r5, #23
 8008c06:	4116      	asrs	r6, r2
 8008c08:	2e00      	cmp	r6, #0
 8008c0a:	dd3c      	ble.n	8008c86 <__kernel_rem_pio2+0x1c6>
 8008c0c:	f04f 0c00 	mov.w	ip, #0
 8008c10:	f108 0801 	add.w	r8, r8, #1
 8008c14:	4660      	mov	r0, ip
 8008c16:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8008c1a:	4564      	cmp	r4, ip
 8008c1c:	dc66      	bgt.n	8008cec <__kernel_rem_pio2+0x22c>
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	dd03      	ble.n	8008c2a <__kernel_rem_pio2+0x16a>
 8008c22:	2d01      	cmp	r5, #1
 8008c24:	d072      	beq.n	8008d0c <__kernel_rem_pio2+0x24c>
 8008c26:	2d02      	cmp	r5, #2
 8008c28:	d07a      	beq.n	8008d20 <__kernel_rem_pio2+0x260>
 8008c2a:	2e02      	cmp	r6, #2
 8008c2c:	d12b      	bne.n	8008c86 <__kernel_rem_pio2+0x1c6>
 8008c2e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008c32:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008c36:	b330      	cbz	r0, 8008c86 <__kernel_rem_pio2+0x1c6>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 f9bd 	bl	8008fb8 <scalbn>
 8008c3e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008c42:	e020      	b.n	8008c86 <__kernel_rem_pio2+0x1c6>
 8008c44:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008c48:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008c4c:	3801      	subs	r0, #1
 8008c4e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008c52:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008c56:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008c5a:	eca6 0a01 	vstmia	r6!, {s0}
 8008c5e:	ed92 0b00 	vldr	d0, [r2]
 8008c62:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008c66:	e79e      	b.n	8008ba6 <__kernel_rem_pio2+0xe6>
 8008c68:	d105      	bne.n	8008c76 <__kernel_rem_pio2+0x1b6>
 8008c6a:	1e62      	subs	r2, r4, #1
 8008c6c:	a906      	add	r1, sp, #24
 8008c6e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008c72:	15f6      	asrs	r6, r6, #23
 8008c74:	e7c8      	b.n	8008c08 <__kernel_rem_pio2+0x148>
 8008c76:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8008c7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c82:	da31      	bge.n	8008ce8 <__kernel_rem_pio2+0x228>
 8008c84:	2600      	movs	r6, #0
 8008c86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8e:	f040 809b 	bne.w	8008dc8 <__kernel_rem_pio2+0x308>
 8008c92:	1e62      	subs	r2, r4, #1
 8008c94:	2000      	movs	r0, #0
 8008c96:	454a      	cmp	r2, r9
 8008c98:	da49      	bge.n	8008d2e <__kernel_rem_pio2+0x26e>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d062      	beq.n	8008d64 <__kernel_rem_pio2+0x2a4>
 8008c9e:	3c01      	subs	r4, #1
 8008ca0:	ab06      	add	r3, sp, #24
 8008ca2:	3d18      	subs	r5, #24
 8008ca4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0f8      	beq.n	8008c9e <__kernel_rem_pio2+0x1de>
 8008cac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 f981 	bl	8008fb8 <scalbn>
 8008cb6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8008db0 <__kernel_rem_pio2+0x2f0>
 8008cba:	1c62      	adds	r2, r4, #1
 8008cbc:	a96a      	add	r1, sp, #424	@ 0x1a8
 8008cbe:	00d3      	lsls	r3, r2, #3
 8008cc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	f280 80a8 	bge.w	8008e1c <__kernel_rem_pio2+0x35c>
 8008ccc:	4622      	mov	r2, r4
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	f2c0 80c6 	blt.w	8008e60 <__kernel_rem_pio2+0x3a0>
 8008cd4:	a96a      	add	r1, sp, #424	@ 0x1a8
 8008cd6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008cda:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8008da8 <__kernel_rem_pio2+0x2e8>
 8008cde:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8008dc4 <__kernel_rem_pio2+0x304>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	1aa1      	subs	r1, r4, r2
 8008ce6:	e0b0      	b.n	8008e4a <__kernel_rem_pio2+0x38a>
 8008ce8:	2602      	movs	r6, #2
 8008cea:	e78f      	b.n	8008c0c <__kernel_rem_pio2+0x14c>
 8008cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf0:	b948      	cbnz	r0, 8008d06 <__kernel_rem_pio2+0x246>
 8008cf2:	b122      	cbz	r2, 8008cfe <__kernel_rem_pio2+0x23e>
 8008cf4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8008cf8:	f843 2c04 	str.w	r2, [r3, #-4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f10c 0c01 	add.w	ip, ip, #1
 8008d02:	4610      	mov	r0, r2
 8008d04:	e789      	b.n	8008c1a <__kernel_rem_pio2+0x15a>
 8008d06:	ebae 0202 	sub.w	r2, lr, r2
 8008d0a:	e7f5      	b.n	8008cf8 <__kernel_rem_pio2+0x238>
 8008d0c:	1e62      	subs	r2, r4, #1
 8008d0e:	ab06      	add	r3, sp, #24
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d18:	a906      	add	r1, sp, #24
 8008d1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d1e:	e784      	b.n	8008c2a <__kernel_rem_pio2+0x16a>
 8008d20:	1e62      	subs	r2, r4, #1
 8008d22:	ab06      	add	r3, sp, #24
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d2c:	e7f4      	b.n	8008d18 <__kernel_rem_pio2+0x258>
 8008d2e:	ab06      	add	r3, sp, #24
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	3a01      	subs	r2, #1
 8008d36:	4318      	orrs	r0, r3
 8008d38:	e7ad      	b.n	8008c96 <__kernel_rem_pio2+0x1d6>
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d0fa      	beq.n	8008d3a <__kernel_rem_pio2+0x27a>
 8008d44:	9a04      	ldr	r2, [sp, #16]
 8008d46:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8008d4a:	446a      	add	r2, sp
 8008d4c:	eb04 000b 	add.w	r0, r4, fp
 8008d50:	a91a      	add	r1, sp, #104	@ 0x68
 8008d52:	1c66      	adds	r6, r4, #1
 8008d54:	3a98      	subs	r2, #152	@ 0x98
 8008d56:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8008d5a:	4423      	add	r3, r4
 8008d5c:	42b3      	cmp	r3, r6
 8008d5e:	da04      	bge.n	8008d6a <__kernel_rem_pio2+0x2aa>
 8008d60:	461c      	mov	r4, r3
 8008d62:	e713      	b.n	8008b8c <__kernel_rem_pio2+0xcc>
 8008d64:	9a03      	ldr	r2, [sp, #12]
 8008d66:	2301      	movs	r3, #1
 8008d68:	e7e8      	b.n	8008d3c <__kernel_rem_pio2+0x27c>
 8008d6a:	9902      	ldr	r1, [sp, #8]
 8008d6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008d70:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	ee07 1a90 	vmov	s15, r1
 8008d7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d7e:	2400      	movs	r4, #0
 8008d80:	eca0 7b02 	vstmia	r0!, {d7}
 8008d84:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8008da8 <__kernel_rem_pio2+0x2e8>
 8008d88:	4686      	mov	lr, r0
 8008d8a:	4554      	cmp	r4, sl
 8008d8c:	dd03      	ble.n	8008d96 <__kernel_rem_pio2+0x2d6>
 8008d8e:	eca2 7b02 	vstmia	r2!, {d7}
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7e2      	b.n	8008d5c <__kernel_rem_pio2+0x29c>
 8008d96:	ecbc 5b02 	vldmia	ip!, {d5}
 8008d9a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8008d9e:	3401      	adds	r4, #1
 8008da0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008da4:	e7f1      	b.n	8008d8a <__kernel_rem_pio2+0x2ca>
 8008da6:	bf00      	nop
	...
 8008db4:	3e700000 	.word	0x3e700000
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	41700000 	.word	0x41700000
 8008dc0:	080093b0 	.word	0x080093b0
 8008dc4:	08009370 	.word	0x08009370
 8008dc8:	4268      	negs	r0, r5
 8008dca:	eeb0 0b48 	vmov.f64	d0, d8
 8008dce:	f000 f8f3 	bl	8008fb8 <scalbn>
 8008dd2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8008fa0 <__kernel_rem_pio2+0x4e0>
 8008dd6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dde:	db17      	blt.n	8008e10 <__kernel_rem_pio2+0x350>
 8008de0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8008fa8 <__kernel_rem_pio2+0x4e8>
 8008de4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008de8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008dec:	aa06      	add	r2, sp, #24
 8008dee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008df2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008df6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008dfa:	3518      	adds	r5, #24
 8008dfc:	ee10 3a10 	vmov	r3, s0
 8008e00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008e04:	ee17 3a10 	vmov	r3, s14
 8008e08:	3401      	adds	r4, #1
 8008e0a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008e0e:	e74d      	b.n	8008cac <__kernel_rem_pio2+0x1ec>
 8008e10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008e14:	aa06      	add	r2, sp, #24
 8008e16:	ee10 3a10 	vmov	r3, s0
 8008e1a:	e7f6      	b.n	8008e0a <__kernel_rem_pio2+0x34a>
 8008e1c:	a806      	add	r0, sp, #24
 8008e1e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008e22:	9001      	str	r0, [sp, #4]
 8008e24:	ee07 0a90 	vmov	s15, r0
 8008e28:	3a01      	subs	r2, #1
 8008e2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e2e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008e32:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008e36:	ed21 7b02 	vstmdb	r1!, {d7}
 8008e3a:	e744      	b.n	8008cc6 <__kernel_rem_pio2+0x206>
 8008e3c:	ecbc 5b02 	vldmia	ip!, {d5}
 8008e40:	ecb5 6b02 	vldmia	r5!, {d6}
 8008e44:	3001      	adds	r0, #1
 8008e46:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008e4a:	4548      	cmp	r0, r9
 8008e4c:	dc01      	bgt.n	8008e52 <__kernel_rem_pio2+0x392>
 8008e4e:	4281      	cmp	r1, r0
 8008e50:	daf4      	bge.n	8008e3c <__kernel_rem_pio2+0x37c>
 8008e52:	a842      	add	r0, sp, #264	@ 0x108
 8008e54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008e58:	ed81 7b00 	vstr	d7, [r1]
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	e736      	b.n	8008cce <__kernel_rem_pio2+0x20e>
 8008e60:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008e62:	2a02      	cmp	r2, #2
 8008e64:	dc0a      	bgt.n	8008e7c <__kernel_rem_pio2+0x3bc>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	dc2d      	bgt.n	8008ec6 <__kernel_rem_pio2+0x406>
 8008e6a:	d046      	beq.n	8008efa <__kernel_rem_pio2+0x43a>
 8008e6c:	f008 0007 	and.w	r0, r8, #7
 8008e70:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8008e74:	ecbd 8b06 	vpop	{d8-d10}
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8008e7e:	2a03      	cmp	r2, #3
 8008e80:	d1f4      	bne.n	8008e6c <__kernel_rem_pio2+0x3ac>
 8008e82:	a942      	add	r1, sp, #264	@ 0x108
 8008e84:	f1a3 0208 	sub.w	r2, r3, #8
 8008e88:	440a      	add	r2, r1
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f1a1 0108 	sub.w	r1, r1, #8
 8008e94:	dc52      	bgt.n	8008f3c <__kernel_rem_pio2+0x47c>
 8008e96:	4621      	mov	r1, r4
 8008e98:	2901      	cmp	r1, #1
 8008e9a:	f1a2 0208 	sub.w	r2, r2, #8
 8008e9e:	dc5d      	bgt.n	8008f5c <__kernel_rem_pio2+0x49c>
 8008ea0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8008fb0 <__kernel_rem_pio2+0x4f0>
 8008ea4:	aa42      	add	r2, sp, #264	@ 0x108
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2c01      	cmp	r4, #1
 8008eaa:	dc67      	bgt.n	8008f7c <__kernel_rem_pio2+0x4bc>
 8008eac:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8008eb0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	d167      	bne.n	8008f88 <__kernel_rem_pio2+0x4c8>
 8008eb8:	ed87 5b00 	vstr	d5, [r7]
 8008ebc:	ed87 6b02 	vstr	d6, [r7, #8]
 8008ec0:	ed87 7b04 	vstr	d7, [r7, #16]
 8008ec4:	e7d2      	b.n	8008e6c <__kernel_rem_pio2+0x3ac>
 8008ec6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8008fb0 <__kernel_rem_pio2+0x4f0>
 8008eca:	aa42      	add	r2, sp, #264	@ 0x108
 8008ecc:	4413      	add	r3, r2
 8008ece:	4622      	mov	r2, r4
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	da24      	bge.n	8008f1e <__kernel_rem_pio2+0x45e>
 8008ed4:	b34e      	cbz	r6, 8008f2a <__kernel_rem_pio2+0x46a>
 8008ed6:	eeb1 7b46 	vneg.f64	d7, d6
 8008eda:	ed87 7b00 	vstr	d7, [r7]
 8008ede:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8008ee2:	aa44      	add	r2, sp, #272	@ 0x110
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008eea:	429c      	cmp	r4, r3
 8008eec:	da20      	bge.n	8008f30 <__kernel_rem_pio2+0x470>
 8008eee:	b10e      	cbz	r6, 8008ef4 <__kernel_rem_pio2+0x434>
 8008ef0:	eeb1 7b47 	vneg.f64	d7, d7
 8008ef4:	ed87 7b02 	vstr	d7, [r7, #8]
 8008ef8:	e7b8      	b.n	8008e6c <__kernel_rem_pio2+0x3ac>
 8008efa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8008fb0 <__kernel_rem_pio2+0x4f0>
 8008efe:	aa42      	add	r2, sp, #264	@ 0x108
 8008f00:	4413      	add	r3, r2
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	da05      	bge.n	8008f12 <__kernel_rem_pio2+0x452>
 8008f06:	b10e      	cbz	r6, 8008f0c <__kernel_rem_pio2+0x44c>
 8008f08:	eeb1 7b47 	vneg.f64	d7, d7
 8008f0c:	ed87 7b00 	vstr	d7, [r7]
 8008f10:	e7ac      	b.n	8008e6c <__kernel_rem_pio2+0x3ac>
 8008f12:	ed33 6b02 	vldmdb	r3!, {d6}
 8008f16:	3c01      	subs	r4, #1
 8008f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008f1c:	e7f1      	b.n	8008f02 <__kernel_rem_pio2+0x442>
 8008f1e:	ed33 7b02 	vldmdb	r3!, {d7}
 8008f22:	3a01      	subs	r2, #1
 8008f24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008f28:	e7d2      	b.n	8008ed0 <__kernel_rem_pio2+0x410>
 8008f2a:	eeb0 7b46 	vmov.f64	d7, d6
 8008f2e:	e7d4      	b.n	8008eda <__kernel_rem_pio2+0x41a>
 8008f30:	ecb2 6b02 	vldmia	r2!, {d6}
 8008f34:	3301      	adds	r3, #1
 8008f36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008f3a:	e7d6      	b.n	8008eea <__kernel_rem_pio2+0x42a>
 8008f3c:	ed91 7b00 	vldr	d7, [r1]
 8008f40:	ed91 5b02 	vldr	d5, [r1, #8]
 8008f44:	3801      	subs	r0, #1
 8008f46:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008f4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f4e:	ed81 6b00 	vstr	d6, [r1]
 8008f52:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008f56:	ed81 7b02 	vstr	d7, [r1, #8]
 8008f5a:	e798      	b.n	8008e8e <__kernel_rem_pio2+0x3ce>
 8008f5c:	ed92 7b00 	vldr	d7, [r2]
 8008f60:	ed92 5b02 	vldr	d5, [r2, #8]
 8008f64:	3901      	subs	r1, #1
 8008f66:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008f6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f6e:	ed82 6b00 	vstr	d6, [r2]
 8008f72:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008f76:	ed82 7b02 	vstr	d7, [r2, #8]
 8008f7a:	e78d      	b.n	8008e98 <__kernel_rem_pio2+0x3d8>
 8008f7c:	ed33 6b02 	vldmdb	r3!, {d6}
 8008f80:	3c01      	subs	r4, #1
 8008f82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008f86:	e78f      	b.n	8008ea8 <__kernel_rem_pio2+0x3e8>
 8008f88:	eeb1 5b45 	vneg.f64	d5, d5
 8008f8c:	eeb1 6b46 	vneg.f64	d6, d6
 8008f90:	ed87 5b00 	vstr	d5, [r7]
 8008f94:	eeb1 7b47 	vneg.f64	d7, d7
 8008f98:	ed87 6b02 	vstr	d6, [r7, #8]
 8008f9c:	e790      	b.n	8008ec0 <__kernel_rem_pio2+0x400>
 8008f9e:	bf00      	nop
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	41700000 	.word	0x41700000
 8008fa8:	00000000 	.word	0x00000000
 8008fac:	3e700000 	.word	0x3e700000
	...

08008fb8 <scalbn>:
 8008fb8:	ee10 1a90 	vmov	r1, s1
 8008fbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008fc0:	b98b      	cbnz	r3, 8008fe6 <scalbn+0x2e>
 8008fc2:	ee10 3a10 	vmov	r3, s0
 8008fc6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008fca:	4319      	orrs	r1, r3
 8008fcc:	d00a      	beq.n	8008fe4 <scalbn+0x2c>
 8008fce:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009080 <scalbn+0xc8>
 8008fd2:	4b37      	ldr	r3, [pc, #220]	@ (80090b0 <scalbn+0xf8>)
 8008fd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008fd8:	4298      	cmp	r0, r3
 8008fda:	da0b      	bge.n	8008ff4 <scalbn+0x3c>
 8008fdc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009088 <scalbn+0xd0>
 8008fe0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008fe4:	4770      	bx	lr
 8008fe6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d107      	bne.n	8008ffe <scalbn+0x46>
 8008fee:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008ff2:	4770      	bx	lr
 8008ff4:	ee10 1a90 	vmov	r1, s1
 8008ff8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ffc:	3b36      	subs	r3, #54	@ 0x36
 8008ffe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009002:	4290      	cmp	r0, r2
 8009004:	dd0d      	ble.n	8009022 <scalbn+0x6a>
 8009006:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009090 <scalbn+0xd8>
 800900a:	ee10 3a90 	vmov	r3, s1
 800900e:	eeb0 6b47 	vmov.f64	d6, d7
 8009012:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8009098 <scalbn+0xe0>
 8009016:	2b00      	cmp	r3, #0
 8009018:	fe27 7b05 	vselge.f64	d7, d7, d5
 800901c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009020:	4770      	bx	lr
 8009022:	4418      	add	r0, r3
 8009024:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8009028:	4298      	cmp	r0, r3
 800902a:	dcec      	bgt.n	8009006 <scalbn+0x4e>
 800902c:	2800      	cmp	r0, #0
 800902e:	dd0a      	ble.n	8009046 <scalbn+0x8e>
 8009030:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8009034:	ec53 2b10 	vmov	r2, r3, d0
 8009038:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800903c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009040:	ec43 2b10 	vmov	d0, r2, r3
 8009044:	4770      	bx	lr
 8009046:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800904a:	da09      	bge.n	8009060 <scalbn+0xa8>
 800904c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8009088 <scalbn+0xd0>
 8009050:	ee10 3a90 	vmov	r3, s1
 8009054:	eeb0 6b47 	vmov.f64	d6, d7
 8009058:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80090a0 <scalbn+0xe8>
 800905c:	2b00      	cmp	r3, #0
 800905e:	e7db      	b.n	8009018 <scalbn+0x60>
 8009060:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8009064:	ec53 2b10 	vmov	r2, r3, d0
 8009068:	3036      	adds	r0, #54	@ 0x36
 800906a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800906e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009072:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80090a8 <scalbn+0xf0>
 8009076:	ec43 2b10 	vmov	d0, r2, r3
 800907a:	e7b1      	b.n	8008fe0 <scalbn+0x28>
 800907c:	f3af 8000 	nop.w
 8009080:	00000000 	.word	0x00000000
 8009084:	43500000 	.word	0x43500000
 8009088:	c2f8f359 	.word	0xc2f8f359
 800908c:	01a56e1f 	.word	0x01a56e1f
 8009090:	8800759c 	.word	0x8800759c
 8009094:	7e37e43c 	.word	0x7e37e43c
 8009098:	8800759c 	.word	0x8800759c
 800909c:	fe37e43c 	.word	0xfe37e43c
 80090a0:	c2f8f359 	.word	0xc2f8f359
 80090a4:	81a56e1f 	.word	0x81a56e1f
 80090a8:	00000000 	.word	0x00000000
 80090ac:	3c900000 	.word	0x3c900000
 80090b0:	ffff3cb0 	.word	0xffff3cb0
 80090b4:	00000000 	.word	0x00000000

080090b8 <floor>:
 80090b8:	ee10 3a90 	vmov	r3, s1
 80090bc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80090c0:	ee10 2a10 	vmov	r2, s0
 80090c4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80090c8:	2913      	cmp	r1, #19
 80090ca:	b530      	push	{r4, r5, lr}
 80090cc:	4615      	mov	r5, r2
 80090ce:	dc33      	bgt.n	8009138 <floor+0x80>
 80090d0:	2900      	cmp	r1, #0
 80090d2:	da18      	bge.n	8009106 <floor+0x4e>
 80090d4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8009198 <floor+0xe0>
 80090d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80090dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	dd0a      	ble.n	80090fc <floor+0x44>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da50      	bge.n	800918c <floor+0xd4>
 80090ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090ee:	4313      	orrs	r3, r2
 80090f0:	2200      	movs	r2, #0
 80090f2:	4293      	cmp	r3, r2
 80090f4:	4b2a      	ldr	r3, [pc, #168]	@ (80091a0 <floor+0xe8>)
 80090f6:	bf08      	it	eq
 80090f8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	ec41 0b10 	vmov	d0, r0, r1
 8009104:	e01f      	b.n	8009146 <floor+0x8e>
 8009106:	4827      	ldr	r0, [pc, #156]	@ (80091a4 <floor+0xec>)
 8009108:	4108      	asrs	r0, r1
 800910a:	ea03 0400 	and.w	r4, r3, r0
 800910e:	4314      	orrs	r4, r2
 8009110:	d019      	beq.n	8009146 <floor+0x8e>
 8009112:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009198 <floor+0xe0>
 8009116:	ee30 0b07 	vadd.f64	d0, d0, d7
 800911a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	ddeb      	ble.n	80090fc <floor+0x44>
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfbe      	ittt	lt
 8009128:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800912c:	410a      	asrlt	r2, r1
 800912e:	189b      	addlt	r3, r3, r2
 8009130:	ea23 0300 	bic.w	r3, r3, r0
 8009134:	2200      	movs	r2, #0
 8009136:	e7e1      	b.n	80090fc <floor+0x44>
 8009138:	2933      	cmp	r1, #51	@ 0x33
 800913a:	dd05      	ble.n	8009148 <floor+0x90>
 800913c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009140:	d101      	bne.n	8009146 <floor+0x8e>
 8009142:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009146:	bd30      	pop	{r4, r5, pc}
 8009148:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	40e0      	lsrs	r0, r4
 8009152:	4210      	tst	r0, r2
 8009154:	d0f7      	beq.n	8009146 <floor+0x8e>
 8009156:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009198 <floor+0xe0>
 800915a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800915e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009166:	ddc9      	ble.n	80090fc <floor+0x44>
 8009168:	2b00      	cmp	r3, #0
 800916a:	da02      	bge.n	8009172 <floor+0xba>
 800916c:	2914      	cmp	r1, #20
 800916e:	d103      	bne.n	8009178 <floor+0xc0>
 8009170:	3301      	adds	r3, #1
 8009172:	ea22 0200 	bic.w	r2, r2, r0
 8009176:	e7c1      	b.n	80090fc <floor+0x44>
 8009178:	2401      	movs	r4, #1
 800917a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800917e:	fa04 f101 	lsl.w	r1, r4, r1
 8009182:	440a      	add	r2, r1
 8009184:	42aa      	cmp	r2, r5
 8009186:	bf38      	it	cc
 8009188:	191b      	addcc	r3, r3, r4
 800918a:	e7f2      	b.n	8009172 <floor+0xba>
 800918c:	2200      	movs	r2, #0
 800918e:	4613      	mov	r3, r2
 8009190:	e7b4      	b.n	80090fc <floor+0x44>
 8009192:	bf00      	nop
 8009194:	f3af 8000 	nop.w
 8009198:	8800759c 	.word	0x8800759c
 800919c:	7e37e43c 	.word	0x7e37e43c
 80091a0:	bff00000 	.word	0xbff00000
 80091a4:	000fffff 	.word	0x000fffff

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
