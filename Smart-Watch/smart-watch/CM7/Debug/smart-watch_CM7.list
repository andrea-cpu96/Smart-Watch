
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a864  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac04  0800ac04  0000c01c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac04  0800ac04  0000c01c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac04  0800ac04  0000c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  0800ac0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  2400001c  0800ac28  0000c01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007e8  0800ac28  0000c7e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001446f  00000000  00000000  0000c04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003345  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d47  00000000  00000000  000249b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004179b  00000000  00000000  000256f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019973  00000000  00000000  00066e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199578  00000000  00000000  00080805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  00219dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0021e504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800aae4 	.word	0x0800aae4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	0800aae4 	.word	0x0800aae4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fa5d 	bl	80018d8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fa57 	bl	80018d8 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fa43 	bl	80018d8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fa3d 	bl	80018d8 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 fa29 	bl	80018d8 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fa23 	bl	80018d8 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa72 	bl	80009a4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa5a 	bl	80009a4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff ffa4 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000524:	2005      	movs	r0, #5
 8000526:	f000 fecf 	bl	80012c8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ff6a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f000 fec9 	bl	80012c8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff ff64 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800053c:	2078      	movs	r0, #120	@ 0x78
 800053e:	f000 fec3 	bl	80012c8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000542:	20ef      	movs	r0, #239	@ 0xef
 8000544:	f7ff ffac 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000548:	20eb      	movs	r0, #235	@ 0xeb
 800054a:	f7ff ffa9 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800054e:	2014      	movs	r0, #20
 8000550:	f7ff ffd5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000554:	20fe      	movs	r0, #254	@ 0xfe
 8000556:	f7ff ffa3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800055a:	20ef      	movs	r0, #239	@ 0xef
 800055c:	f7ff ffa0 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000560:	20eb      	movs	r0, #235	@ 0xeb
 8000562:	f7ff ff9d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000566:	2014      	movs	r0, #20
 8000568:	f7ff ffc9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800056c:	2084      	movs	r0, #132	@ 0x84
 800056e:	f7ff ff97 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000572:	2040      	movs	r0, #64	@ 0x40
 8000574:	f7ff ffc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000578:	2085      	movs	r0, #133	@ 0x85
 800057a:	f7ff ff91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800057e:	20ff      	movs	r0, #255	@ 0xff
 8000580:	f7ff ffbd 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000584:	2086      	movs	r0, #134	@ 0x86
 8000586:	f7ff ff8b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800058a:	20ff      	movs	r0, #255	@ 0xff
 800058c:	f7ff ffb7 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000590:	2087      	movs	r0, #135	@ 0x87
 8000592:	f7ff ff85 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000596:	20ff      	movs	r0, #255	@ 0xff
 8000598:	f7ff ffb1 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800059c:	2088      	movs	r0, #136	@ 0x88
 800059e:	f7ff ff7f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005a2:	200a      	movs	r0, #10
 80005a4:	f7ff ffab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005a8:	2089      	movs	r0, #137	@ 0x89
 80005aa:	f7ff ff79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ae:	2021      	movs	r0, #33	@ 0x21
 80005b0:	f7ff ffa5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005b4:	208a      	movs	r0, #138	@ 0x8a
 80005b6:	f7ff ff73 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff ff9f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 80005c0:	208b      	movs	r0, #139	@ 0x8b
 80005c2:	f7ff ff6d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80005c6:	2080      	movs	r0, #128	@ 0x80
 80005c8:	f7ff ff99 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 80005cc:	208c      	movs	r0, #140	@ 0x8c
 80005ce:	f7ff ff67 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ff93 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 80005d8:	208d      	movs	r0, #141	@ 0x8d
 80005da:	f7ff ff61 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff ff8d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 80005e4:	208e      	movs	r0, #142	@ 0x8e
 80005e6:	f7ff ff5b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ea:	20ff      	movs	r0, #255	@ 0xff
 80005ec:	f7ff ff87 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 80005f0:	208f      	movs	r0, #143	@ 0x8f
 80005f2:	f7ff ff55 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005f6:	20ff      	movs	r0, #255	@ 0xff
 80005f8:	f7ff ff81 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 80005fc:	20b6      	movs	r0, #182	@ 0xb6
 80005fe:	f7ff ff4f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff7b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff78 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800060e:	2036      	movs	r0, #54	@ 0x36
 8000610:	f7ff ff46 	bl	80004a0 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000614:	2048      	movs	r0, #72	@ 0x48
 8000616:	f7ff ff72 	bl	80004fe <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800061a:	203a      	movs	r0, #58	@ 0x3a
 800061c:	f7ff ff40 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__18_BIT);
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff6c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000626:	2090      	movs	r0, #144	@ 0x90
 8000628:	f7ff ff3a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff66 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000632:	2008      	movs	r0, #8
 8000634:	f7ff ff63 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000638:	2008      	movs	r0, #8
 800063a:	f7ff ff60 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800063e:	2008      	movs	r0, #8
 8000640:	f7ff ff5d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000644:	20bd      	movs	r0, #189	@ 0xbd
 8000646:	f7ff ff2b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800064a:	2006      	movs	r0, #6
 800064c:	f7ff ff57 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000650:	20bc      	movs	r0, #188	@ 0xbc
 8000652:	f7ff ff25 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff51 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800065c:	20ff      	movs	r0, #255	@ 0xff
 800065e:	f7ff ff1f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000662:	2060      	movs	r0, #96	@ 0x60
 8000664:	f7ff ff4b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff ff48 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800066e:	2004      	movs	r0, #4
 8000670:	f7ff ff45 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000674:	20c3      	movs	r0, #195	@ 0xc3
 8000676:	f7ff ff13 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800067a:	2013      	movs	r0, #19
 800067c:	f7ff ff3f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000680:	20c4      	movs	r0, #196	@ 0xc4
 8000682:	f7ff ff0d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000686:	2013      	movs	r0, #19
 8000688:	f7ff ff39 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800068c:	20c9      	movs	r0, #201	@ 0xc9
 800068e:	f7ff ff07 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000692:	2022      	movs	r0, #34	@ 0x22
 8000694:	f7ff ff33 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000698:	20be      	movs	r0, #190	@ 0xbe
 800069a:	f7ff ff01 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800069e:	2011      	movs	r0, #17
 80006a0:	f7ff ff2d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006a4:	20e1      	movs	r0, #225	@ 0xe1
 80006a6:	f7ff fefb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006aa:	2010      	movs	r0, #16
 80006ac:	f7ff ff27 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006b0:	200e      	movs	r0, #14
 80006b2:	f7ff ff24 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006b6:	20df      	movs	r0, #223	@ 0xdf
 80006b8:	f7ff fef2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006bc:	2021      	movs	r0, #33	@ 0x21
 80006be:	f7ff ff1e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f7ff ff1b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff ff18 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 80006ce:	20f0      	movs	r0, #240	@ 0xf0
 80006d0:	f7ff fee6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 80006d4:	2045      	movs	r0, #69	@ 0x45
 80006d6:	f7ff ff12 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 80006da:	2009      	movs	r0, #9
 80006dc:	f7ff ff0f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff0c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f7ff ff09 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 80006ec:	2026      	movs	r0, #38	@ 0x26
 80006ee:	f7ff ff06 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 80006f2:	202a      	movs	r0, #42	@ 0x2a
 80006f4:	f7ff ff03 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 80006f8:	20f1      	movs	r0, #241	@ 0xf1
 80006fa:	f7ff fed1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80006fe:	2043      	movs	r0, #67	@ 0x43
 8000700:	f7ff fefd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000704:	2070      	movs	r0, #112	@ 0x70
 8000706:	f7ff fefa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800070a:	2072      	movs	r0, #114	@ 0x72
 800070c:	f7ff fef7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000710:	2036      	movs	r0, #54	@ 0x36
 8000712:	f7ff fef4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000716:	2037      	movs	r0, #55	@ 0x37
 8000718:	f7ff fef1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800071c:	206f      	movs	r0, #111	@ 0x6f
 800071e:	f7ff feee 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000722:	20f2      	movs	r0, #242	@ 0xf2
 8000724:	f7ff febc 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000728:	2045      	movs	r0, #69	@ 0x45
 800072a:	f7ff fee8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800072e:	2009      	movs	r0, #9
 8000730:	f7ff fee5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000734:	2008      	movs	r0, #8
 8000736:	f7ff fee2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff fedf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000740:	2026      	movs	r0, #38	@ 0x26
 8000742:	f7ff fedc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000746:	202a      	movs	r0, #42	@ 0x2a
 8000748:	f7ff fed9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800074c:	20f3      	movs	r0, #243	@ 0xf3
 800074e:	f7ff fea7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000752:	2043      	movs	r0, #67	@ 0x43
 8000754:	f7ff fed3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000758:	2070      	movs	r0, #112	@ 0x70
 800075a:	f7ff fed0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800075e:	2072      	movs	r0, #114	@ 0x72
 8000760:	f7ff fecd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000764:	2036      	movs	r0, #54	@ 0x36
 8000766:	f7ff feca 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800076a:	2037      	movs	r0, #55	@ 0x37
 800076c:	f7ff fec7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000770:	206f      	movs	r0, #111	@ 0x6f
 8000772:	f7ff fec4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000776:	20ed      	movs	r0, #237	@ 0xed
 8000778:	f7ff fe92 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800077c:	201b      	movs	r0, #27
 800077e:	f7ff febe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000782:	200b      	movs	r0, #11
 8000784:	f7ff febb 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000788:	20ae      	movs	r0, #174	@ 0xae
 800078a:	f7ff fe89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800078e:	2077      	movs	r0, #119	@ 0x77
 8000790:	f7ff feb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000794:	20cd      	movs	r0, #205	@ 0xcd
 8000796:	f7ff fe83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800079a:	2063      	movs	r0, #99	@ 0x63
 800079c:	f7ff feaf 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007a0:	2070      	movs	r0, #112	@ 0x70
 80007a2:	f7ff fe7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007a6:	2007      	movs	r0, #7
 80007a8:	f7ff fea9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ac:	2007      	movs	r0, #7
 80007ae:	f7ff fea6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007b2:	2004      	movs	r0, #4
 80007b4:	f7ff fea3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007b8:	200e      	movs	r0, #14
 80007ba:	f7ff fea0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007be:	200f      	movs	r0, #15
 80007c0:	f7ff fe9d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 80007c4:	2009      	movs	r0, #9
 80007c6:	f7ff fe9a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ca:	2007      	movs	r0, #7
 80007cc:	f7ff fe97 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 80007d0:	2008      	movs	r0, #8
 80007d2:	f7ff fe94 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 80007d6:	2003      	movs	r0, #3
 80007d8:	f7ff fe91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 80007dc:	20e8      	movs	r0, #232	@ 0xe8
 80007de:	f7ff fe5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80007e2:	2034      	movs	r0, #52	@ 0x34
 80007e4:	f7ff fe8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 80007e8:	2062      	movs	r0, #98	@ 0x62
 80007ea:	f7ff fe59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 80007ee:	2018      	movs	r0, #24
 80007f0:	f7ff fe85 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 80007f4:	200d      	movs	r0, #13
 80007f6:	f7ff fe82 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80007fa:	2071      	movs	r0, #113	@ 0x71
 80007fc:	f7ff fe7f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000800:	20ed      	movs	r0, #237	@ 0xed
 8000802:	f7ff fe7c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000806:	2070      	movs	r0, #112	@ 0x70
 8000808:	f7ff fe79 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800080c:	2070      	movs	r0, #112	@ 0x70
 800080e:	f7ff fe76 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000812:	2018      	movs	r0, #24
 8000814:	f7ff fe73 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000818:	200f      	movs	r0, #15
 800081a:	f7ff fe70 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800081e:	2071      	movs	r0, #113	@ 0x71
 8000820:	f7ff fe6d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000824:	20ef      	movs	r0, #239	@ 0xef
 8000826:	f7ff fe6a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800082a:	2070      	movs	r0, #112	@ 0x70
 800082c:	f7ff fe67 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000830:	2070      	movs	r0, #112	@ 0x70
 8000832:	f7ff fe64 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000836:	2063      	movs	r0, #99	@ 0x63
 8000838:	f7ff fe32 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800083c:	2018      	movs	r0, #24
 800083e:	f7ff fe5e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000842:	2011      	movs	r0, #17
 8000844:	f7ff fe5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000848:	2071      	movs	r0, #113	@ 0x71
 800084a:	f7ff fe58 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800084e:	20f1      	movs	r0, #241	@ 0xf1
 8000850:	f7ff fe55 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000854:	2070      	movs	r0, #112	@ 0x70
 8000856:	f7ff fe52 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800085a:	2070      	movs	r0, #112	@ 0x70
 800085c:	f7ff fe4f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000860:	2018      	movs	r0, #24
 8000862:	f7ff fe4c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000866:	2013      	movs	r0, #19
 8000868:	f7ff fe49 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800086c:	2071      	movs	r0, #113	@ 0x71
 800086e:	f7ff fe46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000872:	20f3      	movs	r0, #243	@ 0xf3
 8000874:	f7ff fe43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000878:	2070      	movs	r0, #112	@ 0x70
 800087a:	f7ff fe40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800087e:	2070      	movs	r0, #112	@ 0x70
 8000880:	f7ff fe3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000884:	2064      	movs	r0, #100	@ 0x64
 8000886:	f7ff fe0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f7ff fe37 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000890:	2029      	movs	r0, #41	@ 0x29
 8000892:	f7ff fe34 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000896:	20f1      	movs	r0, #241	@ 0xf1
 8000898:	f7ff fe31 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fe2e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008a2:	20f1      	movs	r0, #241	@ 0xf1
 80008a4:	f7ff fe2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fe28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ae:	2007      	movs	r0, #7
 80008b0:	f7ff fe25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008b4:	2066      	movs	r0, #102	@ 0x66
 80008b6:	f7ff fdf3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008ba:	203c      	movs	r0, #60	@ 0x3c
 80008bc:	f7ff fe1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fe1c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 80008c6:	20cd      	movs	r0, #205	@ 0xcd
 80008c8:	f7ff fe19 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 80008cc:	2067      	movs	r0, #103	@ 0x67
 80008ce:	f7ff fe16 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80008d2:	2045      	movs	r0, #69	@ 0x45
 80008d4:	f7ff fe13 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 80008d8:	2045      	movs	r0, #69	@ 0x45
 80008da:	f7ff fe10 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 80008de:	2010      	movs	r0, #16
 80008e0:	f7ff fe0d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fe0a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fe07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fe04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 80008f6:	2067      	movs	r0, #103	@ 0x67
 80008f8:	f7ff fdd2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fdfe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000902:	203c      	movs	r0, #60	@ 0x3c
 8000904:	f7ff fdfb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdf8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fdf5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fdf2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff fdef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000920:	2054      	movs	r0, #84	@ 0x54
 8000922:	f7ff fdec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000926:	2010      	movs	r0, #16
 8000928:	f7ff fde9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800092c:	2032      	movs	r0, #50	@ 0x32
 800092e:	f7ff fde6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000932:	2098      	movs	r0, #152	@ 0x98
 8000934:	f7ff fde3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000938:	2074      	movs	r0, #116	@ 0x74
 800093a:	f7ff fdb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff fddd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000944:	2085      	movs	r0, #133	@ 0x85
 8000946:	f7ff fdda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800094a:	2080      	movs	r0, #128	@ 0x80
 800094c:	f7ff fdd7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fdd4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fdd1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800095c:	204e      	movs	r0, #78	@ 0x4e
 800095e:	f7ff fdce 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fdcb 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000968:	2098      	movs	r0, #152	@ 0x98
 800096a:	f7ff fd99 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800096e:	203e      	movs	r0, #62	@ 0x3e
 8000970:	f7ff fdc5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000974:	2007      	movs	r0, #7
 8000976:	f7ff fdc2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800097a:	2035      	movs	r0, #53	@ 0x35
 800097c:	f7ff fd90 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000980:	2021      	movs	r0, #33	@ 0x21
 8000982:	f7ff fd8d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000986:	2011      	movs	r0, #17
 8000988:	f7ff fd8a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 800098c:	2078      	movs	r0, #120	@ 0x78
 800098e:	f000 fc9b 	bl	80012c8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000992:	2029      	movs	r0, #41	@ 0x29
 8000994:	f7ff fd84 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 8000998:	2014      	movs	r0, #20
 800099a:	f000 fc95 	bl	80012c8 <HAL_Delay>
    
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009b0:	887a      	ldrh	r2, [r7, #2]
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <GC9A01_spi_tx+0x30>)
 80009ba:	f006 fac5 	bl	8006f48 <HAL_SPI_Transmit>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <GC9A01_spi_tx+0x34>)
 80009c4:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <GC9A01_spi_tx+0x34>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
		return;

}
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240000b8 	.word	0x240000b8
 80009d8:	24000038 	.word	0x24000038

080009dc <lcd_init>:

uint8_t color[3];


void lcd_init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

	GC9A01_init();
 80009e0:	f7ff fd9b 	bl	800051a <GC9A01_init>

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <lcd_process>:


void lcd_process(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

	sd_image();
 80009ec:	f000 f802 	bl	80009f4 <sd_image>
	// lcd_demo();

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <sd_image>:

}


void sd_image(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	sd_open(&file, fileName, FA_READ);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4903      	ldr	r1, [pc, #12]	@ (8000a08 <sd_image+0x14>)
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <sd_image+0x18>)
 80009fe:	f000 fa13 	bl	8000e28 <sd_open>

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000008 	.word	0x24000008
 8000a0c:	24000370 	.word	0x24000370

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a1c:	bf00      	nop
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <main+0xa8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d004      	beq.n	8000a34 <main+0x24>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dcf4      	bgt.n	8000a1e <main+0xe>
  if ( timeout < 0 )
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da01      	bge.n	8000a3e <main+0x2e>
  {
  Error_Handler();
 8000a3a:	f000 f9cb 	bl	8000dd4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f000 fbb1 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f83b 	bl	8000abc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <main+0xa8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <main+0xa8>)
 8000a4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <main+0xa8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 ff51 	bl	800190c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 ff67 	bl	8001940 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a76:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a78:	bf00      	nop
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <main+0xa8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d104      	bne.n	8000a90 <main+0x80>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dcf4      	bgt.n	8000a7a <main+0x6a>
if ( timeout < 0 )
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da01      	bge.n	8000a9a <main+0x8a>
{
Error_Handler();
 8000a96:	f000 f99d 	bl	8000dd4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 f905 	bl	8000ca8 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000a9e:	f000 f8af 	bl	8000c00 <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8000aa2:	f000 f889 	bl	8000bb8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000aa6:	f007 faf1 	bl	800808c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  sd_init();
 8000aaa:	f000 f999 	bl	8000de0 <sd_init>
  lcd_init();
 8000aae:	f7ff ff95 	bl	80009dc <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000ab2:	f7ff ff99 	bl	80009e8 <lcd_process>
 8000ab6:	e7fc      	b.n	8000ab2 <main+0xa2>
 8000ab8:	58024400 	.word	0x58024400

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	@ 0x70
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f009 ffdd 	bl	800aa8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f009 ffd7 	bl	800aa8a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000adc:	2004      	movs	r0, #4
 8000ade:	f000 ff43 	bl	8001968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <SystemClock_Config+0xf4>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <SystemClock_Config+0xf4>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000af2:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <SystemClock_Config+0xf4>)
 8000af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <SystemClock_Config+0xf8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b04:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb4 <SystemClock_Config+0xf8>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <SystemClock_Config+0xf8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b18:	bf00      	nop
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <SystemClock_Config+0xf8>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b26:	d1f8      	bne.n	8000b1a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2340      	movs	r3, #64	@ 0x40
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b40:	230c      	movs	r3, #12
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000b48:	230d      	movs	r3, #13
 8000b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b50:	230c      	movs	r3, #12
 8000b52:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 ff5a 	bl	8001a1c <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b6e:	f000 f931 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	233f      	movs	r3, #63	@ 0x3f
 8000b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b82:	2340      	movs	r3, #64	@ 0x40
 8000b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b86:	2340      	movs	r3, #64	@ 0x40
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2102      	movs	r1, #2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fb99 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000ba4:	f000 f916 	bl	8000dd4 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3770      	adds	r7, #112	@ 0x70
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	58000400 	.word	0x58000400
 8000bb4:	58024800 	.word	0x58024800

08000bb8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <MX_SDMMC1_SD_Init+0x44>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bd4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000be4:	f004 fc28 	bl	8005438 <HAL_SD_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000bee:	f000 f8f1 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2400003c 	.word	0x2400003c
 8000bfc:	52007000 	.word	0x52007000

08000c00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c06:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <MX_SPI5_Init+0xa4>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c0c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_SPI5_Init+0xa0>)
 8000c8e:	f006 f837 	bl	8006d00 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8000c98:	f000 f89c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	240000b8 	.word	0x240000b8
 8000ca4:	40015000 	.word	0x40015000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b39      	ldr	r3, [pc, #228]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a38      	ldr	r2, [pc, #224]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b35      	ldr	r3, [pc, #212]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cfa:	4b32      	ldr	r3, [pc, #200]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a30      	ldr	r2, [pc, #192]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d18:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a29      	ldr	r2, [pc, #164]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3c:	4a21      	ldr	r2, [pc, #132]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d46:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	481b      	ldr	r0, [pc, #108]	@ (8000dc8 <MX_GPIO_Init+0x120>)
 8000d5a:	f000 fdbd 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2161      	movs	r1, #97	@ 0x61
 8000d62:	481a      	ldr	r0, [pc, #104]	@ (8000dcc <MX_GPIO_Init+0x124>)
 8000d64:	f000 fdb8 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4814      	ldr	r0, [pc, #80]	@ (8000dd0 <MX_GPIO_Init+0x128>)
 8000d7e:	f000 fbe3 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <MX_GPIO_Init+0x120>)
 8000d9a:	f000 fbd5 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8000d9e:	2361      	movs	r3, #97	@ 0x61
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_GPIO_Init+0x124>)
 8000db6:	f000 fbc7 	bl	8001548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58022800 	.word	0x58022800
 8000dcc:	58022400 	.word	0x58022400
 8000dd0:	58022000 	.word	0x58022000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <sd_init>:

static void sd_error_handler(void);


void sd_init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af02      	add	r7, sp, #8

    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000de6:	2200      	movs	r2, #0
 8000de8:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <sd_init+0x3c>)
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <sd_init+0x40>)
 8000dec:	f008 ffc6 	bl	8009d7c <f_mount>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <sd_init+0x1a>
    	sd_error_handler();
 8000df6:	f000 f82c 	bl	8000e52 <sd_error_handler>

    if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <sd_init+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	2107      	movs	r1, #7
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <sd_init+0x3c>)
 8000e08:	f009 f9b8 	bl	800a17c <f_mkfs>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <sd_init+0x36>
		sd_error_handler();
 8000e12:	f000 f81e 	bl	8000e52 <sd_error_handler>

}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	240007a8 	.word	0x240007a8
 8000e20:	24000140 	.word	0x24000140
 8000e24:	240005a0 	.word	0x240005a0

08000e28 <sd_open>:


void sd_open(FIL *file, char *fileName, char rw)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

	if(f_open(file, fileName, FA_READ) != FR_OK)
 8000e36:	2201      	movs	r2, #1
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f008 ffe4 	bl	8009e08 <f_open>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <sd_open+0x22>
		sd_error_handler();
 8000e46:	f000 f804 	bl	8000e52 <sd_error_handler>

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <sd_error_handler>:

/****************************************** PRIVATE FUNCTIONS */


static void sd_error_handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

	while(1);
 8000e56:	bf00      	nop
 8000e58:	e7fd      	b.n	8000e56 <sd_error_handler+0x4>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x30>)
 8000e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e68:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x30>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x30>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0be      	sub	sp, #248	@ 0xf8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	22c8      	movs	r2, #200	@ 0xc8
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f009 fdea 	bl	800aa8a <memset>
  if(hsd->Instance==SDMMC1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a3c      	ldr	r2, [pc, #240]	@ (8000fac <HAL_SD_MspInit+0x11c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d171      	bne.n	8000fa4 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ec0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fd71 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000ee0:	f7ff ff78 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ee4:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000ee6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eea:	4a31      	ldr	r2, [pc, #196]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000ef6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a22      	ldr	r2, [pc, #136]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <HAL_SD_MspInit+0x120>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8000f3e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <HAL_SD_MspInit+0x124>)
 8000f66:	f000 faef 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f82:	230c      	movs	r3, #12
 8000f84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <HAL_SD_MspInit+0x128>)
 8000f90:	f000 fada 	bl	8001548 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2031      	movs	r0, #49	@ 0x31
 8000f9a:	f000 faa0 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000f9e:	2031      	movs	r0, #49	@ 0x31
 8000fa0:	f000 fab7 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37f8      	adds	r7, #248	@ 0xf8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	52007000 	.word	0x52007000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58020c00 	.word	0x58020c00

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0be      	sub	sp, #248	@ 0xf8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	22c8      	movs	r2, #200	@ 0xc8
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 fd54 	bl	800aa8a <memset>
  if(hspi->Instance==SPI5)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a39      	ldr	r2, [pc, #228]	@ (80010cc <HAL_SPI_MspInit+0x110>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d16a      	bne.n	80010c2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fcda 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800100e:	f7ff fee1 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001012:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001018:	4a2d      	ldr	r2, [pc, #180]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 800101a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800101e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001022:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001030:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001038:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_SPI_MspInit+0x114>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 800106c:	2301      	movs	r3, #1
 800106e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001084:	2305      	movs	r3, #5
 8001086:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	@ (80010d4 <HAL_SPI_MspInit+0x118>)
 8001092:	f000 fa59 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 8001096:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800109a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80010b0:	2305      	movs	r3, #5
 80010b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010b6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <HAL_SPI_MspInit+0x11c>)
 80010be:	f000 fa43 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37f8      	adds	r7, #248	@ 0xf8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40015000 	.word	0x40015000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58022800 	.word	0x58022800
 80010d8:	58022400 	.word	0x58022400

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <MemManage_Handler+0x4>

080010f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <UsageFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f8a9 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <SDMMC1_IRQHandler+0x10>)
 8001142:	f004 fbe9 	bl	8005918 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2400003c 	.word	0x2400003c

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f7ff f8c0 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f009 fc8d 	bl	800aa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fc45 	bl	8000a10 <main>
  bx  lr
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800118c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001190:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8001194:	0800ac0c 	.word	0x0800ac0c
  ldr r2, =_sbss
 8001198:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 800119c:	240007e8 	.word	0x240007e8

080011a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC3_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f98c 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b0:	f001 fa44 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_Init+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	4913      	ldr	r1, [pc, #76]	@ (8001210 <HAL_Init+0x6c>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_Init+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HAL_Init+0x6c>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_Init+0x70>)
 80011e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_Init+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f814 	bl	800121c <HAL_InitTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e002      	b.n	8001204 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011fe:	f7ff fe2d 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58024400 	.word	0x58024400
 8001210:	0800ab40 	.word	0x0800ab40
 8001214:	24000004 	.word	0x24000004
 8001218:	24000000 	.word	0x24000000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e021      	b.n	8001274 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_InitTick+0x64>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f971 	bl	800152e <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f93b 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_InitTick+0x68>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24000018 	.word	0x24000018
 8001280:	24000000 	.word	0x24000000
 8001284:	24000014 	.word	0x24000014

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	24000018 	.word	0x24000018
 80012ac:	240007a0 	.word	0x240007a0

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	240007a0 	.word	0x240007a0

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff ffee 	bl	80012b0 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffde 	bl	80012b0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000018 	.word	0x24000018

08001310 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_GetREVID+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0c1b      	lsrs	r3, r3, #16
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	5c001000 	.word	0x5c001000

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x40>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	05fa0000 	.word	0x05fa0000

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	@ (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	@ (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	@ (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	@ 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff29 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff40 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff33 	bl	800138c <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa4 	bl	8001484 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001556:	4b89      	ldr	r3, [pc, #548]	@ (800177c <HAL_GPIO_Init+0x234>)
 8001558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800155a:	e194      	b.n	8001886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8186 	beq.w	8001880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d005      	beq.n	800158c <HAL_GPIO_Init+0x44>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d130      	bne.n	80015ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c2:	2201      	movs	r2, #1
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	f003 0201 	and.w	r2, r3, #1
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d017      	beq.n	800162a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d123      	bne.n	800167e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	69b9      	ldr	r1, [r7, #24]
 800167a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0203 	and.w	r2, r3, #3
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80e0 	beq.w	8001880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <HAL_GPIO_Init+0x238>)
 80016c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001780 <HAL_GPIO_Init+0x238>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <HAL_GPIO_Init+0x238>)
 80016d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <HAL_GPIO_Init+0x23c>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a20      	ldr	r2, [pc, #128]	@ (8001788 <HAL_GPIO_Init+0x240>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d052      	beq.n	80017b0 <HAL_GPIO_Init+0x268>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1f      	ldr	r2, [pc, #124]	@ (800178c <HAL_GPIO_Init+0x244>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d031      	beq.n	8001776 <HAL_GPIO_Init+0x22e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <HAL_GPIO_Init+0x248>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x22a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a1d      	ldr	r2, [pc, #116]	@ (8001794 <HAL_GPIO_Init+0x24c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x226>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <HAL_GPIO_Init+0x250>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x222>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <HAL_GPIO_Init+0x254>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <HAL_GPIO_Init+0x258>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a19      	ldr	r2, [pc, #100]	@ (80017a4 <HAL_GPIO_Init+0x25c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x216>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a18      	ldr	r2, [pc, #96]	@ (80017a8 <HAL_GPIO_Init+0x260>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x212>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <HAL_GPIO_Init+0x264>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20e>
 8001752:	2309      	movs	r3, #9
 8001754:	e02d      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 8001756:	230a      	movs	r3, #10
 8001758:	e02b      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 800175a:	2308      	movs	r3, #8
 800175c:	e029      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 800175e:	2307      	movs	r3, #7
 8001760:	e027      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 8001762:	2306      	movs	r3, #6
 8001764:	e025      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 8001766:	2305      	movs	r3, #5
 8001768:	e023      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 800176a:	2304      	movs	r3, #4
 800176c:	e021      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 800176e:	2303      	movs	r3, #3
 8001770:	e01f      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 8001772:	2302      	movs	r3, #2
 8001774:	e01d      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 8001776:	2301      	movs	r3, #1
 8001778:	e01b      	b.n	80017b2 <HAL_GPIO_Init+0x26a>
 800177a:	bf00      	nop
 800177c:	58000080 	.word	0x58000080
 8001780:	58024400 	.word	0x58024400
 8001784:	58000400 	.word	0x58000400
 8001788:	58020000 	.word	0x58020000
 800178c:	58020400 	.word	0x58020400
 8001790:	58020800 	.word	0x58020800
 8001794:	58020c00 	.word	0x58020c00
 8001798:	58021000 	.word	0x58021000
 800179c:	58021400 	.word	0x58021400
 80017a0:	58021800 	.word	0x58021800
 80017a4:	58021c00 	.word	0x58021c00
 80017a8:	58022000 	.word	0x58022000
 80017ac:	58022400 	.word	0x58022400
 80017b0:	2300      	movs	r3, #0
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c2:	4938      	ldr	r1, [pc, #224]	@ (80018a4 <HAL_GPIO_Init+0x35c>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f ae63 	bne.w	800155c <HAL_GPIO_Init+0x14>
  }
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	@ 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58000400 	.word	0x58000400

080018a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e001      	b.n	80018ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001914:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <HAL_HSEM_FastTake+0x2c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3320      	adds	r3, #32
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_HSEM_FastTake+0x30>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	58026400 	.word	0x58026400
 800193c:	80000300 	.word	0x80000300

08001940 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800194a:	4906      	ldr	r1, [pc, #24]	@ (8001964 <HAL_HSEM_Release+0x24>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	58026400 	.word	0x58026400

08001968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	2b06      	cmp	r3, #6
 800197a:	d00a      	beq.n	8001992 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e040      	b.n	8001a10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e03e      	b.n	8001a10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800199a:	491f      	ldr	r1, [pc, #124]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019a2:	f7ff fc85 	bl	80012b0 <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019a8:	e009      	b.n	80019be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019aa:	f7ff fc81 	bl	80012b0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019b8:	d901      	bls.n	80019be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e028      	b.n	8001a10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ca:	d1ee      	bne.n	80019aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b1e      	cmp	r3, #30
 80019d0:	d008      	beq.n	80019e4 <HAL_PWREx_ConfigSupply+0x7c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80019d6:	d005      	beq.n	80019e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b1d      	cmp	r3, #29
 80019dc:	d002      	beq.n	80019e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80019e2:	d114      	bne.n	8001a0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019e4:	f7ff fc64 	bl	80012b0 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019ea:	e009      	b.n	8001a00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ec:	f7ff fc60 	bl	80012b0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019fa:	d901      	bls.n	8001a00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0c:	d1ee      	bne.n	80019ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	58024800 	.word	0x58024800

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 bc48 	b.w	80022c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8088 	beq.w	8001b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3e:	4b99      	ldr	r3, [pc, #612]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a48:	4b96      	ldr	r3, [pc, #600]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d007      	beq.n	8001a64 <HAL_RCC_OscConfig+0x48>
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	2b18      	cmp	r3, #24
 8001a58:	d111      	bne.n	8001a7e <HAL_RCC_OscConfig+0x62>
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d06d      	beq.n	8001b4c <HAL_RCC_OscConfig+0x130>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d169      	bne.n	8001b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f000 bc21 	b.w	80022c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x7a>
 8001a88:	4b86      	ldr	r3, [pc, #536]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x9c>
 8001a9e:	4b81      	ldr	r3, [pc, #516]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a80      	ldr	r2, [pc, #512]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xc0>
 8001ac2:	4b78      	ldr	r3, [pc, #480]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a77      	ldr	r2, [pc, #476]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b75      	ldr	r3, [pc, #468]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a74      	ldr	r2, [pc, #464]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd8>
 8001adc:	4b71      	ldr	r3, [pc, #452]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a70      	ldr	r2, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6d      	ldr	r2, [pc, #436]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fbd8 	bl	80012b0 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fbd4 	bl	80012b0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e3d4      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b16:	4b63      	ldr	r3, [pc, #396]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe8>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbc4 	bl	80012b0 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fbc0 	bl	80012b0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e3c0      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3e:	4b59      	ldr	r3, [pc, #356]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x110>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80ca 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5c:	4b51      	ldr	r3, [pc, #324]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_RCC_OscConfig+0x166>
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2b18      	cmp	r3, #24
 8001b76:	d156      	bne.n	8001c26 <HAL_RCC_OscConfig+0x20a>
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d151      	bne.n	8001c26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b82:	4b48      	ldr	r3, [pc, #288]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x17e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e392      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0219 	bic.w	r2, r3, #25
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fb80 	bl	80012b0 <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fb7c 	bl	80012b0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e37c      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	f7ff fb9d 	bl	8001310 <HAL_GetREVID>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d817      	bhi.n	8001c10 <HAL_RCC_OscConfig+0x1f4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b40      	cmp	r3, #64	@ 0x40
 8001be6:	d108      	bne.n	8001bfa <HAL_RCC_OscConfig+0x1de>
 8001be8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf8:	e07a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	031b      	lsls	r3, r3, #12
 8001c08:	4926      	ldr	r1, [pc, #152]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0e:	e06f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	4921      	ldr	r1, [pc, #132]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	e064      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d047      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0219 	bic.w	r2, r3, #25
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	491a      	ldr	r1, [pc, #104]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb36 	bl	80012b0 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb32 	bl	80012b0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e332      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	f7ff fb53 	bl	8001310 <HAL_GetREVID>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d819      	bhi.n	8001ca8 <HAL_RCC_OscConfig+0x28c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d108      	bne.n	8001c8e <HAL_RCC_OscConfig+0x272>
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c84:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8a:	6053      	str	r3, [r2, #4]
 8001c8c:	e030      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	031b      	lsls	r3, r3, #12
 8001c9c:	4901      	ldr	r1, [pc, #4]	@ (8001ca4 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
 8001ca2:	e025      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	4997      	ldr	r1, [pc, #604]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b95      	ldr	r3, [pc, #596]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a94      	ldr	r2, [pc, #592]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff faf1 	bl	80012b0 <HAL_GetTick>
 8001cce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff faed 	bl	80012b0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e2ed      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce4:	4b8b      	ldr	r3, [pc, #556]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a9 	beq.w	8001e50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b85      	ldr	r3, [pc, #532]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d08:	4b82      	ldr	r3, [pc, #520]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d007      	beq.n	8001d24 <HAL_RCC_OscConfig+0x308>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b18      	cmp	r3, #24
 8001d18:	d13a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x374>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d135      	bne.n	8001d90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d24:	4b7b      	ldr	r3, [pc, #492]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x320>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e2c1      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3c:	f7ff fae8 	bl	8001310 <HAL_GetREVID>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d817      	bhi.n	8001d7a <HAL_RCC_OscConfig+0x35e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d108      	bne.n	8001d64 <HAL_RCC_OscConfig+0x348>
 8001d52:	4b70      	ldr	r3, [pc, #448]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d62:	e075      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d64:	4b6b      	ldr	r3, [pc, #428]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	069b      	lsls	r3, r3, #26
 8001d72:	4968      	ldr	r1, [pc, #416]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d78:	e06a      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7a:	4b66      	ldr	r3, [pc, #408]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	061b      	lsls	r3, r3, #24
 8001d88:	4962      	ldr	r1, [pc, #392]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d8e:	e05f      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d042      	beq.n	8001e1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d98:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff fa84 	bl	80012b0 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dac:	f7ff fa80 	bl	80012b0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e280      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dbe:	4b55      	ldr	r3, [pc, #340]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dca:	f7ff faa1 	bl	8001310 <HAL_GetREVID>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d817      	bhi.n	8001e08 <HAL_RCC_OscConfig+0x3ec>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d108      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3d6>
 8001de0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001de8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dee:	6053      	str	r3, [r2, #4]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
 8001df2:	4b48      	ldr	r3, [pc, #288]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	069b      	lsls	r3, r3, #26
 8001e00:	4944      	ldr	r1, [pc, #272]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
 8001e06:	e023      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
 8001e08:	4b42      	ldr	r3, [pc, #264]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	493f      	ldr	r1, [pc, #252]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3c      	ldr	r2, [pc, #240]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fa41 	bl	80012b0 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e32:	f7ff fa3d 	bl	80012b0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e23d      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e44:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d036      	beq.n	8001eca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d019      	beq.n	8001e98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e64:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e68:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa1e 	bl	80012b0 <HAL_GetTick>
 8001e74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fa1a 	bl	80012b0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e21a      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x45c>
 8001e96:	e018      	b.n	8001eca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa04 	bl	80012b0 <HAL_GetTick>
 8001ea8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa00 	bl	80012b0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e200      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d039      	beq.n	8001f4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f9e1 	bl	80012b0 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef2:	f7ff f9dd 	bl	80012b0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1dd      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4d6>
 8001f10:	e01b      	b.n	8001f4a <HAL_RCC_OscConfig+0x52e>
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f18:	4b9b      	ldr	r3, [pc, #620]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a9a      	ldr	r2, [pc, #616]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f9c4 	bl	80012b0 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f2c:	f7ff f9c0 	bl	80012b0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1c0      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f3e:	4b92      	ldr	r3, [pc, #584]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8081 	beq.w	800205a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f58:	4b8c      	ldr	r3, [pc, #560]	@ (800218c <HAL_RCC_OscConfig+0x770>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a8b      	ldr	r2, [pc, #556]	@ (800218c <HAL_RCC_OscConfig+0x770>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f64:	f7ff f9a4 	bl	80012b0 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7ff f9a0 	bl	80012b0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1a0      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f7e:	4b83      	ldr	r3, [pc, #524]	@ (800218c <HAL_RCC_OscConfig+0x770>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x584>
 8001f92:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	4a7c      	ldr	r2, [pc, #496]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9e:	e02d      	b.n	8001ffc <HAL_RCC_OscConfig+0x5e0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5a6>
 8001fa8:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a76      	ldr	r2, [pc, #472]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	4b74      	ldr	r3, [pc, #464]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a73      	ldr	r2, [pc, #460]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x5e0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c8>
 8001fca:	4b6f      	ldr	r3, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a6e      	ldr	r2, [pc, #440]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a6b      	ldr	r2, [pc, #428]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x5e0>
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a67      	ldr	r2, [pc, #412]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a64      	ldr	r2, [pc, #400]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f954 	bl	80012b0 <HAL_GetTick>
 8002008:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff f950 	bl	80012b0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e14e      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002022:	4b59      	ldr	r3, [pc, #356]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x5f0>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f93e 	bl	80012b0 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff f93a 	bl	80012b0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e138      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800204e:	4b4e      	ldr	r3, [pc, #312]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 812d 	beq.w	80022be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002064:	4b48      	ldr	r3, [pc, #288]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800206c:	2b18      	cmp	r3, #24
 800206e:	f000 80bd 	beq.w	80021ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2b02      	cmp	r3, #2
 8002078:	f040 809e 	bne.w	80021b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b42      	ldr	r3, [pc, #264]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a41      	ldr	r2, [pc, #260]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f912 	bl	80012b0 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f90e 	bl	80012b0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e10e      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b2:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <HAL_RCC_OscConfig+0x774>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	430a      	orrs	r2, r1
 80020c2:	4931      	ldr	r1, [pc, #196]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	3b01      	subs	r3, #1
 80020ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d6:	3b01      	subs	r3, #1
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	b29b      	uxth	r3, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e2:	3b01      	subs	r3, #1
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	3b01      	subs	r3, #1
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020f8:	4923      	ldr	r1, [pc, #140]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020fe:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800210a:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800210c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210e:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x778>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002116:	00d2      	lsls	r2, r2, #3
 8002118:	491b      	ldr	r1, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800211e:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	f023 020c 	bic.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4917      	ldr	r1, [pc, #92]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800212c:	4313      	orrs	r3, r2
 800212e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002130:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	f023 0202 	bic.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	4912      	ldr	r1, [pc, #72]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002166:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <HAL_RCC_OscConfig+0x76c>)
 8002178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7ff f897 	bl	80012b0 <HAL_GetTick>
 8002182:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002184:	e011      	b.n	80021aa <HAL_RCC_OscConfig+0x78e>
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	58024800 	.word	0x58024800
 8002190:	fffffc0c 	.word	0xfffffc0c
 8002194:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff f88a 	bl	80012b0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e08a      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x77c>
 80021b6:	e082      	b.n	80022be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a42      	ldr	r2, [pc, #264]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff f874 	bl	80012b0 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f870 	bl	80012b0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e070      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x7b0>
 80021ea:	e068      	b.n	80022be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021ec:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021f2:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d031      	beq.n	8002264 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0203 	and.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d12a      	bne.n	8002264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d122      	bne.n	8002264 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d11a      	bne.n	8002264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	0a5b      	lsrs	r3, r3, #9
 8002232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d111      	bne.n	8002264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	0e1b      	lsrs	r3, r3, #24
 8002256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e02b      	b.n	80022c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002272:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	429a      	cmp	r2, r3
 800227c:	d01f      	beq.n	80022be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800228a:	f7ff f811 	bl	80012b0 <HAL_GetTick>
 800228e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002290:	bf00      	nop
 8002292:	f7ff f80d 	bl	80012b0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	4293      	cmp	r3, r2
 800229c:	d0f9      	beq.n	8002292 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_RCC_OscConfig+0x8b0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022aa:	00d2      	lsls	r2, r2, #3
 80022ac:	4906      	ldr	r1, [pc, #24]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_RCC_OscConfig+0x8ac>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3730      	adds	r7, #48	@ 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	ffff0007 	.word	0xffff0007

080022d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e19c      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b87      	ldr	r3, [pc, #540]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	4985      	ldr	r1, [pc, #532]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b83      	ldr	r3, [pc, #524]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e184      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b7b      	ldr	r3, [pc, #492]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002330:	4b78      	ldr	r3, [pc, #480]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4975      	ldr	r1, [pc, #468]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800233e:	4313      	orrs	r3, r2
 8002340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d908      	bls.n	8002370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	496a      	ldr	r1, [pc, #424]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800236c:	4313      	orrs	r3, r2
 800236e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	4b64      	ldr	r3, [pc, #400]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002388:	429a      	cmp	r2, r3
 800238a:	d908      	bls.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800238c:	4b61      	ldr	r3, [pc, #388]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	495e      	ldr	r1, [pc, #376]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800239a:	4313      	orrs	r3, r2
 800239c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023ba:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4953      	ldr	r1, [pc, #332]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d908      	bls.n	80023fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f023 020f 	bic.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4947      	ldr	r1, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d055      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002406:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4940      	ldr	r1, [pc, #256]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002414:	4313      	orrs	r3, r2
 8002416:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002420:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d121      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0f6      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0ea      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0de      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d6      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f023 0207 	bic.w	r2, r3, #7
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4925      	ldr	r1, [pc, #148]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800247e:	4313      	orrs	r3, r2
 8002480:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002482:	f7fe ff15 	bl	80012b0 <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe ff11 	bl	80012b0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0be      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d1eb      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d208      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	490e      	ldr	r1, [pc, #56]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d214      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	4906      	ldr	r1, [pc, #24]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e086      	b.n	800261e <HAL_RCC_ClockConfig+0x34e>
 8002510:	52002000 	.word	0x52002000
 8002514:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	4b3f      	ldr	r3, [pc, #252]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002534:	4b3c      	ldr	r3, [pc, #240]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4939      	ldr	r1, [pc, #228]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002542:	4313      	orrs	r3, r2
 8002544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002562:	4b31      	ldr	r3, [pc, #196]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	492e      	ldr	r1, [pc, #184]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002570:	4313      	orrs	r3, r2
 8002572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800258c:	429a      	cmp	r2, r3
 800258e:	d208      	bcs.n	80025a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002590:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4922      	ldr	r1, [pc, #136]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d208      	bcs.n	80025d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025be:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4917      	ldr	r1, [pc, #92]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025d0:	f000 f834 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	4912      	ldr	r1, [pc, #72]	@ (800262c <HAL_RCC_ClockConfig+0x35c>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <HAL_RCC_ClockConfig+0x358>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <HAL_RCC_ClockConfig+0x35c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <HAL_RCC_ClockConfig+0x360>)
 8002606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x364>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_RCC_ClockConfig+0x368>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fe02 	bl	800121c <HAL_InitTick>
 8002618:	4603      	mov	r3, r0
 800261a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	58024400 	.word	0x58024400
 800262c:	0800ab40 	.word	0x0800ab40
 8002630:	24000004 	.word	0x24000004
 8002634:	24000000 	.word	0x24000000
 8002638:	24000014 	.word	0x24000014

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002642:	4bb3      	ldr	r3, [pc, #716]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800264a:	2b18      	cmp	r3, #24
 800264c:	f200 8155 	bhi.w	80028fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002650:	a201      	add	r2, pc, #4	@ (adr r2, 8002658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	080026bd 	.word	0x080026bd
 800265c:	080028fb 	.word	0x080028fb
 8002660:	080028fb 	.word	0x080028fb
 8002664:	080028fb 	.word	0x080028fb
 8002668:	080028fb 	.word	0x080028fb
 800266c:	080028fb 	.word	0x080028fb
 8002670:	080028fb 	.word	0x080028fb
 8002674:	080028fb 	.word	0x080028fb
 8002678:	080026e3 	.word	0x080026e3
 800267c:	080028fb 	.word	0x080028fb
 8002680:	080028fb 	.word	0x080028fb
 8002684:	080028fb 	.word	0x080028fb
 8002688:	080028fb 	.word	0x080028fb
 800268c:	080028fb 	.word	0x080028fb
 8002690:	080028fb 	.word	0x080028fb
 8002694:	080028fb 	.word	0x080028fb
 8002698:	080026e9 	.word	0x080026e9
 800269c:	080028fb 	.word	0x080028fb
 80026a0:	080028fb 	.word	0x080028fb
 80026a4:	080028fb 	.word	0x080028fb
 80026a8:	080028fb 	.word	0x080028fb
 80026ac:	080028fb 	.word	0x080028fb
 80026b0:	080028fb 	.word	0x080028fb
 80026b4:	080028fb 	.word	0x080028fb
 80026b8:	080026ef 	.word	0x080026ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026bc:	4b94      	ldr	r3, [pc, #592]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026c8:	4b91      	ldr	r3, [pc, #580]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	4a90      	ldr	r2, [pc, #576]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
 80026d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026da:	e111      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026de:	61bb      	str	r3, [r7, #24]
      break;
 80026e0:	e10e      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026e4:	61bb      	str	r3, [r7, #24]
      break;
 80026e6:	e10b      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026e8:	4b8c      	ldr	r3, [pc, #560]	@ (800291c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026ea:	61bb      	str	r3, [r7, #24]
      break;
 80026ec:	e108      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026ee:	4b88      	ldr	r3, [pc, #544]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026f8:	4b85      	ldr	r3, [pc, #532]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002702:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002704:	4b82      	ldr	r3, [pc, #520]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80e1 	beq.w	80028f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b02      	cmp	r3, #2
 8002736:	f000 8083 	beq.w	8002840 <HAL_RCC_GetSysClockFreq+0x204>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b02      	cmp	r3, #2
 800273e:	f200 80a1 	bhi.w	8002884 <HAL_RCC_GetSysClockFreq+0x248>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x114>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d056      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800274e:	e099      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002750:	4b6f      	ldr	r3, [pc, #444]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02d      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800275c:	4b6c      	ldr	r3, [pc, #432]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	4a6b      	ldr	r2, [pc, #428]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002786:	4b62      	ldr	r3, [pc, #392]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	ed97 6a02 	vldr	s12, [r7, #8]
 800279a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800279e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027b6:	e087      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002924 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b51      	ldr	r3, [pc, #324]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027fa:	e065      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002928 <HAL_RCC_GetSysClockFreq+0x2ec>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b40      	ldr	r3, [pc, #256]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800283e:	e043      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800292c <HAL_RCC_GetSysClockFreq+0x2f0>
 800284e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002862:	ed97 6a02 	vldr	s12, [r7, #8]
 8002866:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800286a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002882:	e021      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	0a5b      	lsrs	r3, r3, #9
 80028ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028d2:	3301      	adds	r3, #1
 80028d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80028e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ec:	ee17 3a90 	vmov	r3, s15
 80028f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028f2:	e005      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
      break;
 80028f8:	e002      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028fc:	61bb      	str	r3, [r7, #24]
      break;
 80028fe:	bf00      	nop
  }

  return sysclockfreq;
 8002900:	69bb      	ldr	r3, [r7, #24]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
 8002914:	03d09000 	.word	0x03d09000
 8002918:	003d0900 	.word	0x003d0900
 800291c:	017d7840 	.word	0x017d7840
 8002920:	46000000 	.word	0x46000000
 8002924:	4c742400 	.word	0x4c742400
 8002928:	4a742400 	.word	0x4a742400
 800292c:	4bbebc20 	.word	0x4bbebc20

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002936:	f7ff fe81 	bl	800263c <HAL_RCC_GetSysClockFreq>
 800293a:	4602      	mov	r2, r0
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x50>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	490f      	ldr	r1, [pc, #60]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x54>)
 8002948:	5ccb      	ldrb	r3, [r1, r3]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002954:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x50>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4a09      	ldr	r2, [pc, #36]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x54>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	4a07      	ldr	r2, [pc, #28]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x58>)
 800296c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800296e:	4a07      	ldr	r2, [pc, #28]	@ (800298c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002974:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <HAL_RCC_GetHCLKFreq+0x58>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	58024400 	.word	0x58024400
 8002984:	0800ab40 	.word	0x0800ab40
 8002988:	24000004 	.word	0x24000004
 800298c:	24000000 	.word	0x24000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002994:	f7ff ffcc 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4904      	ldr	r1, [pc, #16]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	58024400 	.word	0x58024400
 80029b8:	0800ab40 	.word	0x0800ab40

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0cc      	sub	sp, #304	@ 0x130
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029e0:	2500      	movs	r5, #0
 80029e2:	ea54 0305 	orrs.w	r3, r4, r5
 80029e6:	d049      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029f2:	d02f      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029f8:	d828      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029fe:	d01a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a04:	d822      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a10:	e01c      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a12:	4bb8      	ldr	r3, [pc, #736]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	4ab7      	ldr	r2, [pc, #732]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a1e:	e01a      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a24:	3308      	adds	r3, #8
 8002a26:	2102      	movs	r1, #2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fba1 	bl	8005170 <RCCEx_PLL2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a34:	e00f      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a3a:	3328      	adds	r3, #40	@ 0x28
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fc48 	bl	80052d4 <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a4a:	e004      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a5e:	4ba5      	ldr	r3, [pc, #660]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a72:	e003      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a88:	f04f 0900 	mov.w	r9, #0
 8002a8c:	ea58 0309 	orrs.w	r3, r8, r9
 8002a90:	d047      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d82a      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab9 	.word	0x08002ab9
 8002aa8:	08002ac7 	.word	0x08002ac7
 8002aac:	08002add 	.word	0x08002add
 8002ab0:	08002afb 	.word	0x08002afb
 8002ab4:	08002afb 	.word	0x08002afb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	4a8d      	ldr	r2, [pc, #564]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac4:	e01a      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aca:	3308      	adds	r3, #8
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fb4e 	bl	8005170 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ada:	e00f      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae0:	3328      	adds	r3, #40	@ 0x28
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 fbf5 	bl	80052d4 <RCCEx_PLL3_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af0:	e004      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b04:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	f023 0107 	bic.w	r1, r3, #7
 8002b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	4a78      	ldr	r2, [pc, #480]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b2e:	f04f 0b00 	mov.w	fp, #0
 8002b32:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b36:	d04c      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b42:	d030      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b48:	d829      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b4c:	d02d      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b50:	d825      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b52:	2b80      	cmp	r3, #128	@ 0x80
 8002b54:	d018      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d821      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b5e:	2b40      	cmp	r3, #64	@ 0x40
 8002b60:	d007      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b62:	e01c      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b64:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	4a62      	ldr	r2, [pc, #392]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b70:	e01c      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b76:	3308      	adds	r3, #8
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 faf8 	bl	8005170 <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b86:	e011      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b8c:	3328      	adds	r3, #40	@ 0x28
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 fb9f 	bl	80052d4 <RCCEx_PLL3_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bc8:	e003      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002bde:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002be8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002bec:	460b      	mov	r3, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	d053      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bfe:	d035      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c04:	d82e      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c0a:	d031      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c10:	d828      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c16:	d01a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1c:	d822      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c26:	d007      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c28:	e01c      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2a:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a31      	ldr	r2, [pc, #196]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c36:	e01c      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 fa95 	bl	8005170 <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c4c:	e011      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c52:	3328      	adds	r3, #40	@ 0x28
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 fb3c 	bl	80052d4 <RCCEx_PLL3_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c62:	e006      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ca6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	d056      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc6:	d038      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ccc:	d831      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd2:	d034      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd8:	d82b      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cde:	d01d      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce4:	d825      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cf0:	e01f      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cf2:	bf00      	nop
 8002cf4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf8:	4ba2      	ldr	r3, [pc, #648]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4aa1      	ldr	r2, [pc, #644]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d04:	e01c      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 fa2e 	bl	8005170 <RCCEx_PLL2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d1a:	e011      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d20:	3328      	adds	r3, #40	@ 0x28
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fad5 	bl	80052d4 <RCCEx_PLL3_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d48:	4b8e      	ldr	r3, [pc, #568]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d58:	4a8a      	ldr	r2, [pc, #552]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d7e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002d82:	460b      	mov	r3, r1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	d03a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	2b30      	cmp	r3, #48	@ 0x30
 8002d90:	d01f      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d92:	2b30      	cmp	r3, #48	@ 0x30
 8002d94:	d819      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d815      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d111      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da6:	4b77      	ldr	r3, [pc, #476]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	4a76      	ldr	r2, [pc, #472]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002db2:	e011      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db8:	3308      	adds	r3, #8
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 f9d7 	bl	8005170 <RCCEx_PLL2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002de0:	4b68      	ldr	r3, [pc, #416]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	4a65      	ldr	r2, [pc, #404]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df0:	430b      	orrs	r3, r1
 8002df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df4:	e003      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dfa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e14:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	d051      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e28:	d035      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2e:	d82e      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e34:	d031      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e3a:	d828      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e40:	d01a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e46:	d822      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e50:	d007      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e52:	e01c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e54:	4b4b      	ldr	r3, [pc, #300]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4a4a      	ldr	r2, [pc, #296]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e60:	e01c      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e66:	3308      	adds	r3, #8
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 f980 	bl	8005170 <RCCEx_PLL2_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e76:	e011      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e7c:	3328      	adds	r3, #40	@ 0x28
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fa27 	bl	80052d4 <RCCEx_PLL3_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e8c:	e006      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ea4:	4b37      	ldr	r3, [pc, #220]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002eac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb2:	4a34      	ldr	r2, [pc, #208]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ebe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ece:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	d056      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eec:	d033      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002eee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef2:	d82c      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ef8:	d02f      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002efa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002efe:	d826      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f04:	d02b      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f0a:	d820      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f10:	d012      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f16:	d81a      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d022      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d115      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f26:	3308      	adds	r3, #8
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 f920 	bl	8005170 <RCCEx_PLL2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f36:	e015      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f3c:	3328      	adds	r3, #40	@ 0x28
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 f9c7 	bl	80052d4 <RCCEx_PLL3_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f54:	e006      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f56:	bf00      	nop
 8002f58:	e004      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f7a:	4a02      	ldr	r2, [pc, #8]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f80:	e006      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002fa6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002faa:	460b      	mov	r3, r1
 8002fac:	4313      	orrs	r3, r2
 8002fae:	d055      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fbc:	d033      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc2:	d82c      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d02f      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fce:	d826      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fd4:	d02b      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002fd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fda:	d820      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe0:	d012      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe6:	d81a      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d022      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff0:	d115      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 f8b8 	bl	8005170 <RCCEx_PLL2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003006:	e015      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800300c:	3328      	adds	r3, #40	@ 0x28
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f002 f95f 	bl	80052d4 <RCCEx_PLL3_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800301c:	e00a      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003024:	e006      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003034:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800303c:	4bb6      	ldr	r3, [pc, #728]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800304c:	4ab2      	ldr	r2, [pc, #712]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800304e:	430b      	orrs	r3, r1
 8003050:	6593      	str	r3, [r2, #88]	@ 0x58
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003058:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800305c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003072:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d02a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800307c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003090:	3308      	adds	r3, #8
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f002 f86b 	bl	8005170 <RCCEx_PLL2_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80030a0:	e004      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030a8:	e000      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80030aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80030b4:	4b98      	ldr	r3, [pc, #608]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80030bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c2:	4a95      	ldr	r2, [pc, #596]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030c4:	430b      	orrs	r3, r1
 80030c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80030de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80030e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ec:	460b      	mov	r3, r1
 80030ee:	4313      	orrs	r3, r2
 80030f0:	d037      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030fc:	d00e      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x760>
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003102:	d816      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d018      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800310c:	d111      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	4a81      	ldr	r2, [pc, #516]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800311a:	e00f      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800311c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003120:	3308      	adds	r3, #8
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f002 f823 	bl	8005170 <RCCEx_PLL2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003130:	e004      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003144:	4b74      	ldr	r3, [pc, #464]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003148:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800314c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003152:	4a71      	ldr	r2, [pc, #452]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003154:	430b      	orrs	r3, r1
 8003156:	6513      	str	r3, [r2, #80]	@ 0x50
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800315e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003162:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800316e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003178:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800317c:	460b      	mov	r3, r1
 800317e:	4313      	orrs	r3, r2
 8003180:	d03a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003188:	2b03      	cmp	r3, #3
 800318a:	d81d      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800318c:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031a5 	.word	0x080031a5
 800319c:	080031b3 	.word	0x080031b3
 80031a0:	080031d1 	.word	0x080031d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031b0:	e00f      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b6:	3308      	adds	r3, #8
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 ffd8 	bl	8005170 <RCCEx_PLL2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031c6:	e004      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80031d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031da:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	f023 0103 	bic.w	r1, r3, #3
 80031e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ea:	430b      	orrs	r3, r1
 80031ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003204:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800320e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003212:	460b      	mov	r3, r1
 8003214:	4313      	orrs	r3, r2
 8003216:	f000 80a0 	beq.w	800335a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321a:	4b40      	ldr	r3, [pc, #256]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3f      	ldr	r2, [pc, #252]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003224:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003226:	f7fe f843 	bl	80012b0 <HAL_GetTick>
 800322a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322e:	e00b      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe f83e 	bl	80012b0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	@ 0x64
 800323e:	d903      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003246:	e005      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ed      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003254:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003258:	2b00      	cmp	r3, #0
 800325a:	d17a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800325c:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800325e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003264:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003268:	4053      	eors	r3, r2
 800326a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800327e:	4b26      	ldr	r3, [pc, #152]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	4a25      	ldr	r2, [pc, #148]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003288:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328a:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003294:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003296:	4a20      	ldr	r2, [pc, #128]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003298:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800329c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800329e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032aa:	d118      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe f800 	bl	80012b0 <HAL_GetTick>
 80032b0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b4:	e00d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fffb 	bl	80012b0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032c0:	1ad2      	subs	r2, r2, r3
 80032c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d903      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80032d0:	e005      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0eb      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80032de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d130      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032f6:	d115      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003304:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003308:	091a      	lsrs	r2, r3, #4
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800330c:	4013      	ands	r3, r2
 800330e:	4a02      	ldr	r2, [pc, #8]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6113      	str	r3, [r2, #16]
 8003314:	e00c      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
 800331c:	58024800 	.word	0x58024800
 8003320:	00ffffcf 	.word	0x00ffffcf
 8003324:	4bd4      	ldr	r3, [pc, #848]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4ad3      	ldr	r2, [pc, #844]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800332a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800332e:	6113      	str	r3, [r2, #16]
 8003330:	4bd1      	ldr	r3, [pc, #836]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003332:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003338:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	4acd      	ldr	r2, [pc, #820]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003342:	430b      	orrs	r3, r1
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003348:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800334c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003356:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800335a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f002 0301 	and.w	r3, r2, #1
 8003366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	f000 808b 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800337c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003384:	2b28      	cmp	r3, #40	@ 0x28
 8003386:	d86b      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	08003469 	.word	0x08003469
 8003394:	08003461 	.word	0x08003461
 8003398:	08003461 	.word	0x08003461
 800339c:	08003461 	.word	0x08003461
 80033a0:	08003461 	.word	0x08003461
 80033a4:	08003461 	.word	0x08003461
 80033a8:	08003461 	.word	0x08003461
 80033ac:	08003461 	.word	0x08003461
 80033b0:	08003435 	.word	0x08003435
 80033b4:	08003461 	.word	0x08003461
 80033b8:	08003461 	.word	0x08003461
 80033bc:	08003461 	.word	0x08003461
 80033c0:	08003461 	.word	0x08003461
 80033c4:	08003461 	.word	0x08003461
 80033c8:	08003461 	.word	0x08003461
 80033cc:	08003461 	.word	0x08003461
 80033d0:	0800344b 	.word	0x0800344b
 80033d4:	08003461 	.word	0x08003461
 80033d8:	08003461 	.word	0x08003461
 80033dc:	08003461 	.word	0x08003461
 80033e0:	08003461 	.word	0x08003461
 80033e4:	08003461 	.word	0x08003461
 80033e8:	08003461 	.word	0x08003461
 80033ec:	08003461 	.word	0x08003461
 80033f0:	08003469 	.word	0x08003469
 80033f4:	08003461 	.word	0x08003461
 80033f8:	08003461 	.word	0x08003461
 80033fc:	08003461 	.word	0x08003461
 8003400:	08003461 	.word	0x08003461
 8003404:	08003461 	.word	0x08003461
 8003408:	08003461 	.word	0x08003461
 800340c:	08003461 	.word	0x08003461
 8003410:	08003469 	.word	0x08003469
 8003414:	08003461 	.word	0x08003461
 8003418:	08003461 	.word	0x08003461
 800341c:	08003461 	.word	0x08003461
 8003420:	08003461 	.word	0x08003461
 8003424:	08003461 	.word	0x08003461
 8003428:	08003461 	.word	0x08003461
 800342c:	08003461 	.word	0x08003461
 8003430:	08003469 	.word	0x08003469
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003434:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003438:	3308      	adds	r3, #8
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fe97 	bl	8005170 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003448:	e00f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800344a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344e:	3328      	adds	r3, #40	@ 0x28
 8003450:	2101      	movs	r1, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f001 ff3e 	bl	80052d4 <RCCEx_PLL3_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003472:	4b81      	ldr	r3, [pc, #516]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800347a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003482:	4a7d      	ldr	r2, [pc, #500]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6553      	str	r3, [r2, #84]	@ 0x54
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800348e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f002 0302 	and.w	r3, r2, #2
 800349e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034a8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d042      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80034b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d825      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80034bc:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	08003511 	.word	0x08003511
 80034c8:	080034dd 	.word	0x080034dd
 80034cc:	080034f3 	.word	0x080034f3
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003511 	.word	0x08003511
 80034d8:	08003511 	.word	0x08003511
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e0:	3308      	adds	r3, #8
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fe43 	bl	8005170 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 feea 	bl	80052d4 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800351a:	4b57      	ldr	r3, [pc, #348]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f023 0107 	bic.w	r1, r3, #7
 8003522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003528:	4a53      	ldr	r2, [pc, #332]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6553      	str	r3, [r2, #84]	@ 0x54
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003534:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 0304 	and.w	r3, r2, #4
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800354e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d044      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800355c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003560:	2b05      	cmp	r3, #5
 8003562:	d825      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003564:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035b9 	.word	0x080035b9
 8003570:	08003585 	.word	0x08003585
 8003574:	0800359b 	.word	0x0800359b
 8003578:	080035b9 	.word	0x080035b9
 800357c:	080035b9 	.word	0x080035b9
 8003580:	080035b9 	.word	0x080035b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003588:	3308      	adds	r3, #8
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fdef 	bl	8005170 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003598:	e00f      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800359a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359e:	3328      	adds	r3, #40	@ 0x28
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fe96 	bl	80052d4 <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035ae:	e004      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035b6:	e000      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80035b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f023 0107 	bic.w	r1, r3, #7
 80035ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035d2:	4a29      	ldr	r2, [pc, #164]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f002 0320 	and.w	r3, r2, #32
 80035ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d057      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800360e:	d035      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003614:	d82c      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800361a:	d031      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003620:	d826      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003622:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003626:	d02d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003628:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800362c:	d820      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800362e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003632:	d012      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003638:	d81a      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d024      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003642:	d115      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003648:	3308      	adds	r3, #8
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fd8f 	bl	8005170 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003658:	e017      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800365a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800365e:	3328      	adds	r3, #40	@ 0x28
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fe36 	bl	80052d4 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003676:	e008      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003678:	58024400 	.word	0x58024400
        break;
 800367c:	bf00      	nop
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003692:	4bc2      	ldr	r3, [pc, #776]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800369a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a2:	4abe      	ldr	r2, [pc, #760]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80036be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80036c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	d055      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036de:	d033      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80036e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036e4:	d82c      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	d02f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f0:	d826      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036f6:	d02b      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80036f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036fc:	d820      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003702:	d012      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003708:	d81a      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d022      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003712:	d115      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003718:	3308      	adds	r3, #8
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fd27 	bl	8005170 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003728:	e015      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	3328      	adds	r3, #40	@ 0x28
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fdce 	bl	80052d4 <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800373e:	e00a      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003746:	e006      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003748:	bf00      	nop
 800374a:	e004      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800374c:	bf00      	nop
 800374e:	e002      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003756:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800375e:	4b8f      	ldr	r3, [pc, #572]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800376e:	4a8b      	ldr	r2, [pc, #556]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6593      	str	r3, [r2, #88]	@ 0x58
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800377a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800377e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800378a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003794:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d055      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80037aa:	d033      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80037ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80037b0:	d82c      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b6:	d02f      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037bc:	d826      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037c2:	d02b      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80037c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037c8:	d820      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ce:	d012      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037d4:	d81a      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037de:	d115      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e4:	3308      	adds	r3, #8
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fcc1 	bl	8005170 <RCCEx_PLL2_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037f4:	e015      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037fa:	3328      	adds	r3, #40	@ 0x28
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 fd68 	bl	80052d4 <RCCEx_PLL3_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800380a:	e00a      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003812:	e006      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003814:	bf00      	nop
 8003816:	e004      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003822:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800382a:	4b5c      	ldr	r3, [pc, #368]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800383a:	4a58      	ldr	r2, [pc, #352]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800383c:	430b      	orrs	r3, r1
 800383e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003846:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f002 0308 	and.w	r3, r2, #8
 8003856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003860:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d01e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800386a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003876:	d10c      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387c:	3328      	adds	r3, #40	@ 0x28
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fd27 	bl	80052d4 <RCCEx_PLL3_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003892:	4b42      	ldr	r3, [pc, #264]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800389a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	4a3e      	ldr	r2, [pc, #248]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f002 0310 	and.w	r3, r2, #16
 80038b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d01e      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80038c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fcf8 	bl	80052d4 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038f0:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003900:	4a26      	ldr	r2, [pc, #152]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003902:	430b      	orrs	r3, r1
 8003904:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800391c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d040      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800392e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003932:	d022      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003938:	d81b      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003942:	d00b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003944:	e015      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800394a:	3308      	adds	r3, #8
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fc0e 	bl	8005170 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800395a:	e00f      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800395c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003960:	3328      	adds	r3, #40	@ 0x28
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f001 fcb5 	bl	80052d4 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003970:	e004      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800397a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800398c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003994:	4a01      	ldr	r2, [pc, #4]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003996:	430b      	orrs	r3, r1
 8003998:	6593      	str	r3, [r2, #88]	@ 0x58
 800399a:	e005      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800399c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80039b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039b6:	2300      	movs	r3, #0
 80039b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d03b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039d0:	d01f      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80039d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039d6:	d818      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80039d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039dc:	d003      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80039de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039e2:	d007      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80039e4:	e011      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e6:	4b64      	ldr	r3, [pc, #400]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f8:	3328      	adds	r3, #40	@ 0x28
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fc69 	bl	80052d4 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a1c:	4b56      	ldr	r3, [pc, #344]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a20:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2c:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a4e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d031      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a66:	d007      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003a68:	e011      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6a:	4b43      	ldr	r3, [pc, #268]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	4a42      	ldr	r2, [pc, #264]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a76:	e00e      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fb75 	bl	8005170 <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a9e:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ab8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aca:	2300      	movs	r3, #0
 8003acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ace:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00c      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003adc:	3328      	adds	r3, #40	@ 0x28
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fbf7 	bl	80052d4 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b00:	2300      	movs	r3, #0
 8003b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d03a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1a:	d018      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b20:	d811      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b26:	d014      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2c:	d80b      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d011      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b36:	d106      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b70:	4a01      	ldr	r2, [pc, #4]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b76:	e005      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b92:	2300      	movs	r3, #0
 8003b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba0:	4baa      	ldr	r3, [pc, #680]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bae:	4aa7      	ldr	r2, [pc, #668]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003bc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003bd0:	4b9e      	ldr	r3, [pc, #632]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003be0:	4a9a      	ldr	r2, [pc, #616]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d009      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c02:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a8e      	ldr	r2, [pc, #568]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003c22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c24:	2300      	movs	r3, #0
 8003c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c32:	4b86      	ldr	r3, [pc, #536]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a85      	ldr	r2, [pc, #532]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c3c:	6113      	str	r3, [r2, #16]
 8003c3e:	4b83      	ldr	r3, [pc, #524]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c40:	6919      	ldr	r1, [r3, #16]
 8003c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c4a:	4a80      	ldr	r2, [pc, #512]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c5e:	2300      	movs	r3, #0
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c6c:	4b77      	ldr	r3, [pc, #476]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	4a74      	ldr	r2, [pc, #464]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	4a67      	ldr	r2, [pc, #412]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	2100      	movs	r1, #0
 8003cbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d011      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fa4a 	bl	8005170 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	6239      	str	r1, [r7, #32]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	d011      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d12:	3308      	adds	r3, #8
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fa2a 	bl	8005170 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	61b9      	str	r1, [r7, #24]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	d011      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d52:	3308      	adds	r3, #8
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fa0a 	bl	8005170 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	6139      	str	r1, [r7, #16]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d011      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d92:	3328      	adds	r3, #40	@ 0x28
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 fa9c 	bl	80052d4 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003da2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	d011      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dd2:	3328      	adds	r3, #40	@ 0x28
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fa7c 	bl	80052d4 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d011      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e12:	3328      	adds	r3, #40	@ 0x28
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fa5c 	bl	80052d4 <RCCEx_PLL3_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003e32:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4c:	58024400 	.word	0x58024400

08003e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b090      	sub	sp, #64	@ 0x40
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8003e62:	430b      	orrs	r3, r1
 8003e64:	f040 8094 	bne.w	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8003e68:	4b9e      	ldr	r3, [pc, #632]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8003e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003e95 	.word	0x08003e95
 8003e84:	08003ebd 	.word	0x08003ebd
 8003e88:	08003ee5 	.word	0x08003ee5
 8003e8c:	08003f81 	.word	0x08003f81
 8003e90:	08003f0d 	.word	0x08003f0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e94:	4b93      	ldr	r3, [pc, #588]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f810 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003eb0:	f000 bd45 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003eb8:	f000 bd41 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ebc:	4b89      	ldr	r3, [pc, #548]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ec8:	d108      	bne.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003eca:	f107 0318 	add.w	r3, r7, #24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fd54 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ed8:	f000 bd31 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ee0:	f000 bd2d 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ee4:	4b7f      	ldr	r3, [pc, #508]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef0:	d108      	bne.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ef2:	f107 030c 	add.w	r3, r7, #12
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fe94 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003f00:	f000 bd1d 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f08:	f000 bd19 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003f0c:	4b75      	ldr	r3, [pc, #468]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003f16:	4b73      	ldr	r3, [pc, #460]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f28:	4b6e      	ldr	r3, [pc, #440]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	4a6d      	ldr	r2, [pc, #436]	@ (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f3a:	e01f      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003f3c:	4b69      	ldr	r3, [pc, #420]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f48:	d106      	bne.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f50:	d102      	bne.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003f52:	4b66      	ldr	r3, [pc, #408]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003f58:	4b62      	ldr	r3, [pc, #392]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8003f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f6c:	d102      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003f6e:	4b60      	ldr	r3, [pc, #384]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8003f78:	f000 bce1 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8003f7c:	f000 bcdf 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003f80:	4b5c      	ldr	r3, [pc, #368]	@ (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f84:	f000 bcdb 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f8c:	f000 bcd7 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	f040 80ad 	bne.w	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fae:	d056      	beq.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	f200 8090 	bhi.w	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fbe:	f000 8088 	beq.w	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc4:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fc6:	f200 8088 	bhi.w	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	2b80      	cmp	r3, #128	@ 0x80
 8003fce:	d032      	beq.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	f200 8081 	bhi.w	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	d014      	beq.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8003fe4:	e079      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff2:	d108      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ff67 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004002:	f000 bc9c 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800400a:	f000 bc98 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800400e:	4b35      	ldr	r3, [pc, #212]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800401a:	d108      	bne.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800401c:	f107 0318 	add.w	r3, r7, #24
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fcab 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800402a:	f000 bc88 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004032:	f000 bc84 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004036:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004042:	d108      	bne.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fdeb 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004052:	f000 bc74 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800405a:	f000 bc70 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800405e:	4b21      	ldr	r3, [pc, #132]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b04      	cmp	r3, #4
 8004072:	d10c      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800407a:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800408c:	e01f      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409a:	d106      	bne.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a2:	d102      	bne.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040a8:	e011      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040aa:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040be:	d102      	bne.n	80040c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80040ca:	f000 bc38 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80040ce:	f000 bc36 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80040d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80040d6:	f000 bc32 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80040de:	f000 bc2e 	b.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	03d09000 	.word	0x03d09000
 80040ec:	003d0900 	.word	0x003d0900
 80040f0:	017d7840 	.word	0x017d7840
 80040f4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004100:	430b      	orrs	r3, r1
 8004102:	f040 809c 	bne.w	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004106:	4b9e      	ldr	r3, [pc, #632]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800410e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004116:	d054      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800411e:	f200 808b 	bhi.w	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004128:	f000 8083 	beq.w	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004132:	f200 8081 	bhi.w	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413c:	d02f      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004144:	d878      	bhi.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004152:	d012      	beq.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004154:	e070      	b.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004156:	4b8a      	ldr	r3, [pc, #552]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004162:	d107      	bne.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004168:	4618      	mov	r0, r3
 800416a:	f000 feaf 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004172:	e3e4      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004178:	e3e1      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800417a:	4b81      	ldr	r3, [pc, #516]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004186:	d107      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004188:	f107 0318 	add.w	r3, r7, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fbf5 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004196:	e3d2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800419c:	e3cf      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800419e:	4b78      	ldr	r3, [pc, #480]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041aa:	d107      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041ac:	f107 030c 	add.w	r3, r7, #12
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fd37 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80041ba:	e3c0      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041c0:	e3bd      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80041c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80041cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d10c      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041de:	4b68      	ldr	r3, [pc, #416]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	4a66      	ldr	r2, [pc, #408]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f0:	e01e      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80041f2:	4b63      	ldr	r3, [pc, #396]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fe:	d106      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004206:	d102      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004208:	4b5f      	ldr	r3, [pc, #380]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800420a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800420c:	e010      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800420e:	4b5c      	ldr	r3, [pc, #368]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800421a:	d106      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d102      	bne.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004224:	4b59      	ldr	r3, [pc, #356]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800422e:	e386      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004230:	e385      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004232:	4b57      	ldr	r3, [pc, #348]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004236:	e382      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800423c:	e37f      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800423e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004242:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004246:	430b      	orrs	r3, r1
 8004248:	f040 80a7 	bne.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800424c:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004250:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004254:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800425c:	d055      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004264:	f200 8096 	bhi.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800426e:	f000 8084 	beq.w	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004278:	f200 808c 	bhi.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004282:	d030      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800428a:	f200 8083 	bhi.w	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800429a:	d012      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800429c:	e07a      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800429e:	4b38      	ldr	r3, [pc, #224]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042aa:	d107      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe0b 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042ba:	e340      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042c0:	e33d      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ce:	d107      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d0:	f107 0318 	add.w	r3, r7, #24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb51 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042de:	e32e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042e4:	e32b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042e6:	4b26      	ldr	r3, [pc, #152]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f2:	d107      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fc93 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004302:	e31c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004308:	e319      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800430a:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004312:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004314:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d10c      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004326:	4b16      	ldr	r3, [pc, #88]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	08db      	lsrs	r3, r3, #3
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004338:	e01e      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004346:	d106      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800434e:	d102      	bne.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004350:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004354:	e010      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004356:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004362:	d106      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436a:	d102      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800436c:	4b07      	ldr	r3, [pc, #28]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800436e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004376:	e2e2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004378:	e2e1      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800437c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800437e:	e2de      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004380:	58024400 	.word	0x58024400
 8004384:	03d09000 	.word	0x03d09000
 8004388:	003d0900 	.word	0x003d0900
 800438c:	017d7840 	.word	0x017d7840
 8004390:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004398:	e2d1      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800439a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80043a2:	430b      	orrs	r3, r1
 80043a4:	f040 809c 	bne.w	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80043a8:	4b93      	ldr	r3, [pc, #588]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80043b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043b8:	d054      	beq.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	f200 808b 	bhi.w	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043ca:	f000 8083 	beq.w	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043d4:	f200 8081 	bhi.w	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80043d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043de:	d02f      	beq.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e6:	d878      	bhi.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d012      	beq.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80043f6:	e070      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043f8:	4b7f      	ldr	r3, [pc, #508]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004404:	d107      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd5e 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004414:	e293      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800441a:	e290      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800441c:	4b76      	ldr	r3, [pc, #472]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004428:	d107      	bne.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800442a:	f107 0318 	add.w	r3, r7, #24
 800442e:	4618      	mov	r0, r3
 8004430:	f000 faa4 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004438:	e281      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800443e:	e27e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004440:	4b6d      	ldr	r3, [pc, #436]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444c:	d107      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fbe6 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800445c:	e26f      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004462:	e26c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004464:	4b64      	ldr	r3, [pc, #400]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800446e:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b04      	cmp	r3, #4
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800447a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004480:	4b5d      	ldr	r3, [pc, #372]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	4a5c      	ldr	r2, [pc, #368]	@ (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004492:	e01e      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004494:	4b58      	ldr	r3, [pc, #352]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a0:	d106      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80044a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044a8:	d102      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80044aa:	4b55      	ldr	r3, [pc, #340]	@ (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ae:	e010      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80044b0:	4b51      	ldr	r3, [pc, #324]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044bc:	d106      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044c4:	d102      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80044c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80044c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ca:	e002      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80044d0:	e235      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80044d2:	e234      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80044d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044d8:	e231      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044de:	e22e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80044e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80044e8:	430b      	orrs	r3, r1
 80044ea:	f040 808f 	bne.w	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80044ee:	4b42      	ldr	r3, [pc, #264]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80044f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80044f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80044f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044fe:	d06b      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004506:	d874      	bhi.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800450e:	d056      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004516:	d86c      	bhi.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800451e:	d03b      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004522:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004526:	d864      	bhi.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800452e:	d021      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004536:	d85c      	bhi.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004544:	d004      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004546:	e054      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004548:	f7fe fa22 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800454c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800454e:	e1f6      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004550:	4b29      	ldr	r3, [pc, #164]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800455c:	d107      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800455e:	f107 0318 	add.w	r3, r7, #24
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fa0a 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800456c:	e1e7      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004572:	e1e4      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004574:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004580:	d107      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb4c 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004590:	e1d5      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004596:	e1d2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004598:	4b17      	ldr	r3, [pc, #92]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d109      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a4:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045b6:	e1c2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045bc:	e1bf      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80045be:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ca:	d102      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80045cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045d0:	e1b5      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045d6:	e1b2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045d8:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e4:	d102      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80045e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045ea:	e1a8      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045f0:	e1a5      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045f6:	e1a2      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	003d0900 	.word	0x003d0900
 8004604:	017d7840 	.word	0x017d7840
 8004608:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800460c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004610:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004614:	430b      	orrs	r3, r1
 8004616:	d173      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004618:	4b9c      	ldr	r3, [pc, #624]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004620:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004628:	d02f      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800462a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004630:	d863      	bhi.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463e:	d012      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004640:	e05b      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004642:	4b92      	ldr	r3, [pc, #584]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800464e:	d107      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f991 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800465e:	e16e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004664:	e16b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004666:	4b89      	ldr	r3, [pc, #548]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800466e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004672:	d107      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fad3 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004682:	e15c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004688:	e159      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800468a:	4b80      	ldr	r3, [pc, #512]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004694:	4b7d      	ldr	r3, [pc, #500]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d10c      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80046a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a6:	4b79      	ldr	r3, [pc, #484]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	4a77      	ldr	r2, [pc, #476]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80046b2:	fa22 f303 	lsr.w	r3, r2, r3
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b8:	e01e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046ba:	4b74      	ldr	r3, [pc, #464]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c6:	d106      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80046c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046ce:	d102      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80046d0:	4b70      	ldr	r3, [pc, #448]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d4:	e010      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046d6:	4b6d      	ldr	r3, [pc, #436]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046ea:	d102      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80046ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80046ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80046f6:	e122      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046f8:	e121      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046fe:	e11e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004704:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004708:	430b      	orrs	r3, r1
 800470a:	d133      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800470c:	4b5f      	ldr	r3, [pc, #380]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800470e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004714:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004722:	d012      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004724:	e023      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004726:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004732:	d107      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fbc7 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004742:	e0fc      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004748:	e0f9      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800474a:	4b50      	ldr	r3, [pc, #320]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004756:	d107      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004758:	f107 0318 	add.w	r3, r7, #24
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f90d 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004766:	e0ea      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800476c:	e0e7      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004772:	e0e4      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004778:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800477c:	430b      	orrs	r3, r1
 800477e:	f040 808d 	bne.w	800489c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004782:	4b42      	ldr	r3, [pc, #264]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004792:	d06b      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800479a:	d874      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a2:	d056      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d86c      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047b2:	d03b      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047ba:	d864      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c2:	d021      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ca:	d85c      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80047cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047d8:	d004      	beq.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80047da:	e054      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80047dc:	f000 f8b8 	bl	8004950 <HAL_RCCEx_GetD3PCLK1Freq>
 80047e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047e2:	e0ac      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047e4:	4b29      	ldr	r3, [pc, #164]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f0:	d107      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f8c0 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004800:	e09d      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004806:	e09a      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004808:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004814:	d107      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa02 	bl	8004c24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004824:	e08b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800482a:	e088      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d109      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004838:	4b14      	ldr	r3, [pc, #80]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	08db      	lsrs	r3, r3, #3
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800484a:	e078      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004850:	e075      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485e:	d102      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004860:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004864:	e06b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800486a:	e068      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004878:	d102      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800487a:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800487c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800487e:	e05e      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004884:	e05b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800488a:	e058      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800488c:	58024400 	.word	0x58024400
 8004890:	03d09000 	.word	0x03d09000
 8004894:	003d0900 	.word	0x003d0900
 8004898:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80048a4:	430b      	orrs	r3, r1
 80048a6:	d148      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048b8:	d02a      	beq.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c0:	d838      	bhi.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80048c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048ce:	d00d      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80048d0:	e030      	b.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048de:	d102      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048e4:	e02b      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048ea:	e028      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048f8:	d107      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fae4 	bl	8004ecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004908:	e019      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800490e:	e016      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004910:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800491c:	d107      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800491e:	f107 0318 	add.w	r3, r7, #24
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f82a 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800492c:	e007      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004932:	e004      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004938:	e001      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004940:	4618      	mov	r0, r3
 8004942:	3740      	adds	r7, #64	@ 0x40
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	58024400 	.word	0x58024400
 800494c:	017d7840 	.word	0x017d7840

08004950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004954:	f7fd ffec 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4904      	ldr	r1, [pc, #16]	@ (8004978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	0800ab40 	.word	0x0800ab40

0800497c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	@ 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004984:	4ba1      	ldr	r3, [pc, #644]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800498e:	4b9f      	ldr	r3, [pc, #636]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	0b1b      	lsrs	r3, r3, #12
 8004994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004998:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800499a:	4b9c      	ldr	r3, [pc, #624]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049a6:	4b99      	ldr	r3, [pc, #612]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8111 	beq.w	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	f000 8083 	beq.w	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f200 80a1 	bhi.w	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d056      	beq.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049e6:	e099      	b.n	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e8:	4b88      	ldr	r3, [pc, #544]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02d      	beq.n	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049f4:	4b85      	ldr	r3, [pc, #532]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	08db      	lsrs	r3, r3, #3
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	4a84      	ldr	r2, [pc, #528]	@ (8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
 8004a04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a4e:	e087      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b6a      	ldr	r3, [pc, #424]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e065      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b59      	ldr	r3, [pc, #356]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e043      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b48      	ldr	r3, [pc, #288]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	e021      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b37      	ldr	r3, [pc, #220]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b60:	4b2a      	ldr	r3, [pc, #168]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	0a5b      	lsrs	r3, r3, #9
 8004b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 2a90 	vmov	r2, s15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb4:	ee17 2a90 	vmov	r2, s15
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bbc:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	ee17 2a90 	vmov	r2, s15
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bea:	e008      	b.n	8004bfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	3724      	adds	r7, #36	@ 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	03d09000 	.word	0x03d09000
 8004c14:	46000000 	.word	0x46000000
 8004c18:	4c742400 	.word	0x4c742400
 8004c1c:	4a742400 	.word	0x4a742400
 8004c20:	4bbebc20 	.word	0x4bbebc20

08004c24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c2c:	4ba1      	ldr	r3, [pc, #644]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c36:	4b9f      	ldr	r3, [pc, #636]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	0d1b      	lsrs	r3, r3, #20
 8004c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c42:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c4e:	4b99      	ldr	r3, [pc, #612]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c52:	08db      	lsrs	r3, r3, #3
 8004c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8111 	beq.w	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	f000 8083 	beq.w	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f200 80a1 	bhi.w	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d056      	beq.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c8e:	e099      	b.n	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c90:	4b88      	ldr	r3, [pc, #544]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02d      	beq.n	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c9c:	4b85      	ldr	r3, [pc, #532]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	4a84      	ldr	r2, [pc, #528]	@ (8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cf6:	e087      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3a:	e065      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b59      	ldr	r3, [pc, #356]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e043      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b48      	ldr	r3, [pc, #288]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	e021      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b37      	ldr	r3, [pc, #220]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e08:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	0a5b      	lsrs	r3, r3, #9
 8004e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 2a90 	vmov	r2, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e36:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5c:	ee17 2a90 	vmov	r2, s15
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e64:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
}
 8004ea6:	bf00      	nop
 8004ea8:	3724      	adds	r7, #36	@ 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	03d09000 	.word	0x03d09000
 8004ebc:	46000000 	.word	0x46000000
 8004ec0:	4c742400 	.word	0x4c742400
 8004ec4:	4a742400 	.word	0x4a742400
 8004ec8:	4bbebc20 	.word	0x4bbebc20

08004ecc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004ede:	4b9e      	ldr	r3, [pc, #632]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004eea:	4b9b      	ldr	r3, [pc, #620]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ef4:	4b98      	ldr	r3, [pc, #608]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	ee07 3a90 	vmov	s15, r3
 8004f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8111 	beq.w	800513a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	f000 8083 	beq.w	8005026 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	f200 80a1 	bhi.w	800506a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d056      	beq.n	8004fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004f34:	e099      	b.n	800506a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f36:	4b88      	ldr	r3, [pc, #544]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02d      	beq.n	8004f9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f42:	4b85      	ldr	r3, [pc, #532]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	4a83      	ldr	r2, [pc, #524]	@ (800515c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6c:	4b7a      	ldr	r3, [pc, #488]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f9c:	e087      	b.n	80050ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb0:	4b69      	ldr	r3, [pc, #420]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fe0:	e065      	b.n	80050ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005168 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff4:	4b58      	ldr	r3, [pc, #352]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005004:	ed97 6a03 	vldr	s12, [r7, #12]
 8005008:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800500c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005020:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005024:	e043      	b.n	80050ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005030:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800516c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005038:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005048:	ed97 6a03 	vldr	s12, [r7, #12]
 800504c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005064:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005068:	e021      	b.n	80050ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005074:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005164 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507c:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005090:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80050ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d4:	ee17 2a90 	vmov	r2, s15
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80050dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005102:	ee17 2a90 	vmov	r2, s15
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800510a:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005124:	edd7 6a07 	vldr	s13, [r7, #28]
 8005128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005130:	ee17 2a90 	vmov	r2, s15
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005138:	e008      	b.n	800514c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	3724      	adds	r7, #36	@ 0x24
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	58024400 	.word	0x58024400
 800515c:	03d09000 	.word	0x03d09000
 8005160:	46000000 	.word	0x46000000
 8005164:	4c742400 	.word	0x4c742400
 8005168:	4a742400 	.word	0x4a742400
 800516c:	4bbebc20 	.word	0x4bbebc20

08005170 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800517e:	4b53      	ldr	r3, [pc, #332]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b03      	cmp	r3, #3
 8005188:	d101      	bne.n	800518e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e099      	b.n	80052c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800518e:	4b4f      	ldr	r3, [pc, #316]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a4e      	ldr	r2, [pc, #312]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005194:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519a:	f7fc f889 	bl	80012b0 <HAL_GetTick>
 800519e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051a2:	f7fc f885 	bl	80012b0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e086      	b.n	80052c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051b4:	4b45      	ldr	r3, [pc, #276]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051c0:	4b42      	ldr	r3, [pc, #264]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	493f      	ldr	r1, [pc, #252]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	3b01      	subs	r3, #1
 80051da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	025b      	lsls	r3, r3, #9
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005204:	4931      	ldr	r1, [pc, #196]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800520a:	4b30      	ldr	r3, [pc, #192]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	492d      	ldr	r1, [pc, #180]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800521c:	4b2b      	ldr	r3, [pc, #172]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005220:	f023 0220 	bic.w	r2, r3, #32
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	4928      	ldr	r1, [pc, #160]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800522e:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a26      	ldr	r2, [pc, #152]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005234:	f023 0310 	bic.w	r3, r3, #16
 8005238:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800523c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523e:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <RCCEx_PLL2_Config+0x160>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	69d2      	ldr	r2, [r2, #28]
 8005246:	00d2      	lsls	r2, r2, #3
 8005248:	4920      	ldr	r1, [pc, #128]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800524e:	4b1f      	ldr	r3, [pc, #124]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4a1e      	ldr	r2, [pc, #120]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005254:	f043 0310 	orr.w	r3, r3, #16
 8005258:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005260:	4b1a      	ldr	r3, [pc, #104]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005266:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800526a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800526c:	e00f      	b.n	800528e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d106      	bne.n	8005282 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005274:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a14      	ldr	r2, [pc, #80]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005280:	e005      	b.n	800528e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	4a11      	ldr	r2, [pc, #68]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800528c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800528e:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a0e      	ldr	r2, [pc, #56]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 8005294:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529a:	f7fc f809 	bl	80012b0 <HAL_GetTick>
 800529e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052a0:	e008      	b.n	80052b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052a2:	f7fc f805 	bl	80012b0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e006      	b.n	80052c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <RCCEx_PLL2_Config+0x15c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
 80052d0:	ffff0007 	.word	0xffff0007

080052d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052e2:	4b53      	ldr	r3, [pc, #332]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d101      	bne.n	80052f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e099      	b.n	8005426 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4e      	ldr	r2, [pc, #312]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fe:	f7fb ffd7 	bl	80012b0 <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005304:	e008      	b.n	8005318 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005306:	f7fb ffd3 	bl	80012b0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e086      	b.n	8005426 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005318:	4b45      	ldr	r3, [pc, #276]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f0      	bne.n	8005306 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005324:	4b42      	ldr	r3, [pc, #264]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	051b      	lsls	r3, r3, #20
 8005332:	493f      	ldr	r1, [pc, #252]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	628b      	str	r3, [r1, #40]	@ 0x28
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	3b01      	subs	r3, #1
 800533e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	b29b      	uxth	r3, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	3b01      	subs	r3, #1
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	3b01      	subs	r3, #1
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005368:	4931      	ldr	r1, [pc, #196]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800536e:	4b30      	ldr	r3, [pc, #192]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	492d      	ldr	r1, [pc, #180]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005380:	4b2b      	ldr	r3, [pc, #172]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	4928      	ldr	r1, [pc, #160]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005392:	4b27      	ldr	r3, [pc, #156]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a26      	ldr	r2, [pc, #152]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 8005398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800539c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <RCCEx_PLL3_Config+0x160>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	69d2      	ldr	r2, [r2, #28]
 80053aa:	00d2      	lsls	r2, r2, #3
 80053ac:	4920      	ldr	r1, [pc, #128]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053d0:	e00f      	b.n	80053f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d106      	bne.n	80053e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053d8:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	4a14      	ldr	r2, [pc, #80]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053e4:	e005      	b.n	80053f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053e6:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fe:	f7fb ff57 	bl	80012b0 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005404:	e008      	b.n	8005418 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005406:	f7fb ff53 	bl	80012b0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <RCCEx_PLL3_Config+0x15c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
 8005434:	ffff0007 	.word	0xffff0007

08005438 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	@ 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e075      	b.n	8005536 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d105      	bne.n	8005462 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fb fd17 	bl	8000e90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2204      	movs	r2, #4
 8005466:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f868 	bl	8005540 <HAL_SD_InitCard>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e05d      	b.n	8005536 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fdaf 	bl	8005fe4 <HAL_SD_GetCardStatus>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e052      	b.n	8005536 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005490:	7e3b      	ldrb	r3, [r7, #24]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005496:	7e7b      	ldrb	r3, [r7, #25]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10a      	bne.n	80054ba <HAL_SD_Init+0x82>
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <HAL_SD_Init+0x78>
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80054b8:	e00b      	b.n	80054d2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d104      	bne.n	80054cc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80054ca:	e002      	b.n	80054d2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fe6d 	bl	80061b8 <HAL_SD_ConfigWideBusOperation>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e026      	b.n	8005536 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80054e8:	f7fb fee2 	bl	80012b0 <HAL_GetTick>
 80054ec:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80054ee:	e011      	b.n	8005514 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80054f0:	f7fb fede 	bl	80012b0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d109      	bne.n	8005514 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005506:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e010      	b.n	8005536 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 ff61 	bl	80063dc <HAL_SD_GetCardState>
 800551a:	4603      	mov	r3, r0
 800551c:	2b04      	cmp	r3, #4
 800551e:	d1e7      	bne.n	80054f0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	@ 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b08d      	sub	sp, #52	@ 0x34
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005558:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	f7fe fc76 	bl	8003e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8005564:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800557a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e070      	b.n	8005662 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	4a39      	ldr	r2, [pc, #228]	@ (800566c <HAL_SD_InitCard+0x12c>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681c      	ldr	r4, [r3, #0]
 8005592:	466a      	mov	r2, sp
 8005594:	f107 0318 	add.w	r3, r7, #24
 8005598:	e893 0003 	ldmia.w	r3, {r0, r1}
 800559c:	e882 0003 	stmia.w	r2, {r0, r1}
 80055a0:	f107 030c 	add.w	r3, r7, #12
 80055a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055a6:	4620      	mov	r0, r4
 80055a8:	f001 ffa6 	bl	80074f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 ffe9 	bl	8007588 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80055ce:	4a28      	ldr	r2, [pc, #160]	@ (8005670 <HAL_SD_InitCard+0x130>)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	3301      	adds	r3, #1
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fb fe75 	bl	80012c8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 ffea 	bl	80065b8 <SD_PowerON>
 80055e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e02e      	b.n	8005662 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 ff09 	bl	800641c <SD_InitCard>
 800560a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e01b      	b.n	8005662 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005632:	4618      	mov	r0, r3
 8005634:	f002 f83e 	bl	80076b4 <SDMMC_CmdBlockLength>
 8005638:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00f      	beq.n	8005660 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0b      	ldr	r2, [pc, #44]	@ (8005674 <HAL_SD_InitCard+0x134>)
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	372c      	adds	r7, #44	@ 0x2c
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	bf00      	nop
 800566c:	014f8b59 	.word	0x014f8b59
 8005670:	00012110 	.word	0x00012110
 8005674:	1fe00fff 	.word	0x1fe00fff

08005678 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	@ 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e08d      	b.n	80057bc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 8086 	bne.w	80057ba <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80056b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056be:	429a      	cmp	r2, r3
 80056c0:	d907      	bls.n	80056d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e074      	b.n	80057bc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2203      	movs	r2, #3
 80056d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	025a      	lsls	r2, r3, #9
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	025b      	lsls	r3, r3, #9
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	025b      	lsls	r3, r3, #9
 8005708:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800570a:	2390      	movs	r3, #144	@ 0x90
 800570c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800570e:	2302      	movs	r3, #2
 8005710:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005716:	2300      	movs	r3, #0
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f107 0210 	add.w	r2, r7, #16
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f001 ff99 	bl	800765c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005738:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d90a      	bls.n	8005766 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2282      	movs	r2, #130	@ 0x82
 8005754:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800575c:	4618      	mov	r0, r3
 800575e:	f001 ffef 	bl	8007740 <SDMMC_CmdReadMultiBlock>
 8005762:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005764:	e009      	b.n	800577a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2281      	movs	r2, #129	@ 0x81
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005772:	4618      	mov	r0, r3
 8005774:	f001 ffc1 	bl	80076fa <SDMMC_CmdReadSingleBlock>
 8005778:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d012      	beq.n	80057a6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0f      	ldr	r2, [pc, #60]	@ (80057c4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578e:	431a      	orrs	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00a      	b.n	80057bc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3730      	adds	r7, #48	@ 0x30
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	1fe00fff 	.word	0x1fe00fff

080057c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	@ 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d107      	bne.n	80057f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e08d      	b.n	800590c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	f040 8086 	bne.w	800590a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	429a      	cmp	r2, r3
 8005810:	d907      	bls.n	8005822 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e074      	b.n	800590c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2203      	movs	r2, #3
 8005826:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	025a      	lsls	r2, r3, #9
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	2b01      	cmp	r3, #1
 8005846:	d002      	beq.n	800584e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	025b      	lsls	r3, r3, #9
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	025b      	lsls	r3, r3, #9
 8005858:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800585a:	2390      	movs	r3, #144	@ 0x90
 800585c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005862:	2300      	movs	r3, #0
 8005864:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f107 0210 	add.w	r2, r7, #16
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fef1 	bl	800765c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005888:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d90a      	bls.n	80058b6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	22a0      	movs	r2, #160	@ 0xa0
 80058a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 ff8d 	bl	80077cc <SDMMC_CmdWriteMultiBlock>
 80058b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80058b4:	e009      	b.n	80058ca <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2290      	movs	r2, #144	@ 0x90
 80058ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 ff5f 	bl	8007786 <SDMMC_CmdWriteSingleBlock>
 80058c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005914 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	431a      	orrs	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e00a      	b.n	800590c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8005904:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	@ 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	1fe00fff 	.word	0x1fe00fff

08005918 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_SD_IRQHandler+0x2e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 f926 	bl	8006b90 <SD_Read_IT>
 8005944:	e19a      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80ac 	beq.w	8005aae <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <HAL_SD_IRQHandler+0x1b8>)
 800596c:	400b      	ands	r3, r1
 800596e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800597e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800598e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d038      	beq.n	8005a0c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <HAL_SD_IRQHandler+0x96>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 ff2e 	bl	8007814 <SDMMC_CmdStopTransfer>
 80059b8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f95b 	bl	8005c88 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad4 <HAL_SD_IRQHandler+0x1bc>)
 80059d8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <HAL_SD_IRQHandler+0xe4>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f002 fbe1 	bl	80081c4 <HAL_SD_RxCpltCallback>
 8005a02:	e13b      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f002 fbd3 	bl	80081b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a0a:	e137      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8132 	beq.w	8005c7c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <HAL_SD_IRQHandler+0x12c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d011      	beq.n	8005a68 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fee3 	bl	8007814 <SDMMC_CmdStopTransfer>
 8005a4e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f910 	bl	8005c88 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_SD_IRQHandler+0x172>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 fb90 	bl	80081b0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <HAL_SD_IRQHandler+0x18e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80eb 	beq.w	8005c7c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f002 fb8c 	bl	80081c4 <HAL_SD_RxCpltCallback>
}
 8005aac:	e0e6      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <HAL_SD_IRQHandler+0x1c0>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 f8a8 	bl	8006c1c <SD_Write_IT>
 8005acc:	e0d6      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
 8005ace:	bf00      	nop
 8005ad0:	ffff3ec5 	.word	0xffff3ec5
 8005ad4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 809d 	beq.w	8005c22 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	f043 0208 	orr.w	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b48:	f043 0210 	orr.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a4b      	ldr	r2, [pc, #300]	@ (8005c84 <HAL_SD_IRQHandler+0x36c>)
 8005b56:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005b66:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b76:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b96:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fe39 	bl	8007814 <SDMMC_CmdStopTransfer>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bbc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f851 	bl	8005c88 <HAL_SD_ErrorCallback>
}
 8005be6:	e049      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d044      	beq.n	8005c7c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d040      	beq.n	8005c7c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005c08:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f834 	bl	8005c88 <HAL_SD_ErrorCallback>
}
 8005c20:	e02c      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d025      	beq.n	8005c7c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10c      	bne.n	8005c62 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f84a 	bl	8006cec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005c58:	e010      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 f832 	bl	8006cc4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005c60:	e00c      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f833 	bl	8006cd8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8005c72:	e003      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f81b 	bl	8006cb0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8005c7a:	e7ff      	b.n	8005c7c <HAL_SD_IRQHandler+0x364>
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	18000f3a 	.word	0x18000f3a

08005c88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	0f9b      	lsrs	r3, r3, #30
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	0e9b      	lsrs	r3, r3, #26
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc8:	0e1b      	lsrs	r3, r3, #24
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cfc:	0d1b      	lsrs	r3, r3, #20
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1a:	0bdb      	lsrs	r3, r3, #15
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	0b9b      	lsrs	r3, r3, #14
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3e:	0b5b      	lsrs	r3, r3, #13
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d50:	0b1b      	lsrs	r3, r3, #12
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d163      	bne.n	8005e34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d70:	009a      	lsls	r2, r3, #2
 8005d72:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d76:	4013      	ands	r3, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8005d7c:	0f92      	lsrs	r2, r2, #30
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d88:	0edb      	lsrs	r3, r3, #27
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dac:	0d5b      	lsrs	r3, r3, #21
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dbe:	0c9b      	lsrs	r3, r3, #18
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd0:	0bdb      	lsrs	r3, r3, #15
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	7e1b      	ldrb	r3, [r3, #24]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	3302      	adds	r3, #2
 8005df4:	2201      	movs	r2, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dfe:	fb03 f202 	mul.w	r2, r3, r2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	7a1b      	ldrb	r3, [r3, #8]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e20:	0a52      	lsrs	r2, r2, #9
 8005e22:	fb03 f202 	mul.w	r2, r3, r2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e30:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e32:	e031      	b.n	8005e98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11d      	bne.n	8005e78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	3301      	adds	r3, #1
 8005e58:	029a      	lsls	r2, r3, #10
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e76:	e00f      	b.n	8005e98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a58      	ldr	r2, [pc, #352]	@ (8005fe0 <HAL_SD_GetCardCSD+0x344>)
 8005e7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e09d      	b.n	8005fd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	0b9b      	lsrs	r3, r3, #14
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eae:	09db      	lsrs	r3, r3, #7
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed0:	0fdb      	lsrs	r3, r3, #31
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005edc:	0f5b      	lsrs	r3, r3, #29
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eee:	0e9b      	lsrs	r3, r3, #26
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f00:	0d9b      	lsrs	r3, r3, #22
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f12:	0d5b      	lsrs	r3, r3, #21
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f42:	0bdb      	lsrs	r3, r3, #15
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f56:	0b9b      	lsrs	r3, r3, #14
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f6a:	0b5b      	lsrs	r3, r3, #13
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f7e:	0b1b      	lsrs	r3, r3, #12
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f92:	0a9b      	lsrs	r3, r3, #10
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	1fe00fff 	.word	0x1fe00fff

08005fe4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b094      	sub	sp, #80	@ 0x50
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d101      	bne.n	8006004 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0a7      	b.n	8006154 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fb62 	bl	80066d4 <SD_SendSDStatus>
 8006010:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006014:	2b00      	cmp	r3, #0
 8006016:	d011      	beq.n	800603c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a4f      	ldr	r2, [pc, #316]	@ (800615c <HAL_SD_GetCardStatus+0x178>)
 800601e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800603a:	e070      	b.n	800611e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	099b      	lsrs	r3, r3, #6
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	b2da      	uxtb	r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	0a1b      	lsrs	r3, r3, #8
 8006060:	b29b      	uxth	r3, r3
 8006062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006066:	b29a      	uxth	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	0e1b      	lsrs	r3, r3, #24
 800606c:	b29b      	uxth	r3, r3
 800606e:	4313      	orrs	r3, r2
 8006070:	b29a      	uxth	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	061a      	lsls	r2, r3, #24
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006082:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800608c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	0e1b      	lsrs	r3, r3, #24
 8006092:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	0a1b      	lsrs	r3, r3, #8
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	0a9b      	lsrs	r3, r3, #10
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	b2da      	uxtb	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	b2da      	uxtb	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	0e1b      	lsrs	r3, r3, #24
 8006118:	b2da      	uxtb	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fac4 	bl	80076b4 <SDMMC_CmdBlockLength>
 800612c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800612e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a08      	ldr	r2, [pc, #32]	@ (800615c <HAL_SD_GetCardStatus+0x178>)
 800613a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006140:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8006150:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006154:	4618      	mov	r0, r3
 8006156:	3750      	adds	r7, #80	@ 0x50
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	1fe00fff 	.word	0x1fe00fff

08006160 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b08d      	sub	sp, #52	@ 0x34
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2203      	movs	r2, #3
 80061cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d02e      	beq.n	8006236 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061de:	d106      	bne.n	80061ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80061ec:	e029      	b.n	8006242 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f4:	d10a      	bne.n	800620c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb64 	bl	80068c4 <SD_WideBus_Enable>
 80061fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	635a      	str	r2, [r3, #52]	@ 0x34
 800620a:	e01a      	b.n	8006242 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fba1 	bl	800695a <SD_WideBus_Disable>
 8006218:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	635a      	str	r2, [r3, #52]	@ 0x34
 8006226:	e00c      	b.n	8006242 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800622c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	635a      	str	r2, [r3, #52]	@ 0x34
 8006234:	e005      	b.n	8006242 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5f      	ldr	r2, [pc, #380]	@ (80063cc <HAL_SD_ConfigWideBusOperation+0x214>)
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006258:	e096      	b.n	8006388 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800625a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	f7fd fdf5 	bl	8003e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8006266:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 8083 	beq.w	8006376 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4950      	ldr	r1, [pc, #320]	@ (80063d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800628e:	fba1 1303 	umull	r1, r3, r1, r3
 8006292:	0e1b      	lsrs	r3, r3, #24
 8006294:	429a      	cmp	r2, r3
 8006296:	d303      	bcc.n	80062a0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	e05a      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a8:	d103      	bne.n	80062b2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e051      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ba:	d126      	bne.n	800630a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10e      	bne.n	80062e2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4a43      	ldr	r2, [pc, #268]	@ (80063d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4a40      	ldr	r2, [pc, #256]	@ (80063d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	0e5b      	lsrs	r3, r3, #25
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	e03d      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e039      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	4a39      	ldr	r2, [pc, #228]	@ (80063d4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d906      	bls.n	8006302 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4a36      	ldr	r2, [pc, #216]	@ (80063d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e029      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e025      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10e      	bne.n	8006330 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4a30      	ldr	r2, [pc, #192]	@ (80063d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d906      	bls.n	8006328 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4a2c      	ldr	r2, [pc, #176]	@ (80063d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	0e1b      	lsrs	r3, r3, #24
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e016      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e012      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	4a26      	ldr	r2, [pc, #152]	@ (80063d8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d906      	bls.n	8006350 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4a22      	ldr	r2, [pc, #136]	@ (80063d0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0e1b      	lsrs	r3, r3, #24
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e002      	b.n	8006356 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681c      	ldr	r4, [r3, #0]
 800635a:	466a      	mov	r2, sp
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006364:	e882 0003 	stmia.w	r2, {r0, r1}
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636e:	4620      	mov	r0, r4
 8006370:	f001 f8c2 	bl	80074f8 <SDMMC_Init>
 8006374:	e008      	b.n	8006388 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800637a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f98f 	bl	80076b4 <SDMMC_CmdBlockLength>
 8006396:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a0a      	ldr	r2, [pc, #40]	@ (80063cc <HAL_SD_ConfigWideBusOperation+0x214>)
 80063a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80063c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	372c      	adds	r7, #44	@ 0x2c
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}
 80063cc:	1fe00fff 	.word	0x1fe00fff
 80063d0:	55e63b89 	.word	0x55e63b89
 80063d4:	02faf080 	.word	0x02faf080
 80063d8:	017d7840 	.word	0x017d7840

080063dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa40 	bl	8006874 <SD_SendStatus>
 80063f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006412:	693b      	ldr	r3, [r7, #16]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b090      	sub	sp, #64	@ 0x40
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006428:	f7fa ff42 	bl	80012b0 <HAL_GetTick>
 800642c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f8b9 	bl	80075aa <SDMMC_GetPowerState>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800643e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006442:	e0b5      	b.n	80065b0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	2b03      	cmp	r3, #3
 800644a:	d02e      	beq.n	80064aa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fb04 	bl	8007a5e <SDMMC_CmdSendCID>
 8006456:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <SD_InitCard+0x46>
    {
      return errorstate;
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	e0a6      	b.n	80065b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f8e4 	bl	8007636 <SDMMC_GetResponse>
 800646e:	4602      	mov	r2, r0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2104      	movs	r1, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f001 f8db 	bl	8007636 <SDMMC_GetResponse>
 8006480:	4602      	mov	r2, r0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2108      	movs	r1, #8
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f8d2 	bl	8007636 <SDMMC_GetResponse>
 8006492:	4602      	mov	r2, r0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	210c      	movs	r1, #12
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 f8c9 	bl	8007636 <SDMMC_GetResponse>
 80064a4:	4602      	mov	r2, r0
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d01d      	beq.n	80064ee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80064b2:	e019      	b.n	80064e8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f107 020a 	add.w	r2, r7, #10
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fb0c 	bl	8007adc <SDMMC_CmdSetRelAdd>
 80064c4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	e06f      	b.n	80065b0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80064d0:	f7fa feee 	bl	80012b0 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3287 	movw	r2, #4999	@ 0x1387
 80064de:	4293      	cmp	r3, r2
 80064e0:	d902      	bls.n	80064e8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80064e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064e6:	e063      	b.n	80065b0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80064e8:	897b      	ldrh	r3, [r7, #10]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0e2      	beq.n	80064b4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d036      	beq.n	8006564 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f001 fac6 	bl	8007a9c <SDMMC_CmdSendCSD>
 8006510:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <SD_InitCard+0x100>
    {
      return errorstate;
 8006518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651a:	e049      	b.n	80065b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 f887 	bl	8007636 <SDMMC_GetResponse>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2104      	movs	r1, #4
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f87e 	bl	8007636 <SDMMC_GetResponse>
 800653a:	4602      	mov	r2, r0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2108      	movs	r1, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f875 	bl	8007636 <SDMMC_GetResponse>
 800654c:	4602      	mov	r2, r0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	210c      	movs	r1, #12
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f86c 	bl	8007636 <SDMMC_GetResponse>
 800655e:	4602      	mov	r2, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2104      	movs	r1, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f863 	bl	8007636 <SDMMC_GetResponse>
 8006570:	4603      	mov	r3, r0
 8006572:	0d1a      	lsrs	r2, r3, #20
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fb8c 	bl	8005c9c <HAL_SD_GetCardCSD>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800658a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800658e:	e00f      	b.n	80065b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f001 f975 	bl	800788c <SDMMC_CmdSelDesel>
 80065a2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <SD_InitCard+0x192>
  {
    return errorstate;
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	e000      	b.n	80065b0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3740      	adds	r7, #64	@ 0x40
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f97e 	bl	80078d2 <SDMMC_CmdGoIdleState>
 80065d6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	e072      	b.n	80066c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 f991 	bl	800790e <SDMMC_CmdOperCond>
 80065ec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f4:	d10d      	bne.n	8006612 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f001 f966 	bl	80078d2 <SDMMC_CmdGoIdleState>
 8006606:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <SD_PowerON+0x60>
    {
      return errorstate;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	e05a      	b.n	80066c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d137      	bne.n	8006690 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f001 f991 	bl	800794e <SDMMC_CmdAppCommand>
 800662c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02d      	beq.n	8006690 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006634:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006638:	e046      	b.n	80066c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f001 f984 	bl	800794e <SDMMC_CmdAppCommand>
 8006646:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <SD_PowerON+0x9a>
    {
      return errorstate;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	e03a      	b.n	80066c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	491e      	ldr	r1, [pc, #120]	@ (80066d0 <SD_PowerON+0x118>)
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f99b 	bl	8007994 <SDMMC_CmdAppOperCommand>
 800665e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006666:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800666a:	e02d      	b.n	80066c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f000 ffdf 	bl	8007636 <SDMMC_GetResponse>
 8006678:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	0fdb      	lsrs	r3, r3, #31
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <SD_PowerON+0xce>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <SD_PowerON+0xd0>
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]

    count++;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3301      	adds	r3, #1
 800668e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006696:	4293      	cmp	r3, r2
 8006698:	d802      	bhi.n	80066a0 <SD_PowerON+0xe8>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0cc      	beq.n	800663a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d902      	bls.n	80066b0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80066aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066ae:	e00b      	b.n	80066c8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	c1100000 	.word	0xc1100000

080066d4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	@ 0x30
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066de:	f7fa fde7 	bl	80012b0 <HAL_GetTick>
 80066e2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 ffa1 	bl	8007636 <SDMMC_GetResponse>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066fe:	d102      	bne.n	8006706 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006700:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006704:	e0b0      	b.n	8006868 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2140      	movs	r1, #64	@ 0x40
 800670c:	4618      	mov	r0, r3
 800670e:	f000 ffd1 	bl	80076b4 <SDMMC_CmdBlockLength>
 8006712:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	e0a0      	b.n	8006868 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f001 f90b 	bl	800794e <SDMMC_CmdAppCommand>
 8006738:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	e08d      	b.n	8006868 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006752:	2340      	movs	r3, #64	@ 0x40
 8006754:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006756:	2360      	movs	r3, #96	@ 0x60
 8006758:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800675a:	2302      	movs	r3, #2
 800675c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f107 0208 	add.w	r2, r7, #8
 800676e:	4611      	mov	r1, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ff73 	bl	800765c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f001 f9f3 	bl	8007b66 <SDMMC_CmdStatusRegister>
 8006780:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02b      	beq.n	80067e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	e069      	b.n	8006868 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d013      	beq.n	80067ca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067a6:	e00d      	b.n	80067c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fecd 	bl	800754c <SDMMC_ReadFIFO>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	601a      	str	r2, [r3, #0]
        pData++;
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	3304      	adds	r3, #4
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80067be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c0:	3301      	adds	r3, #1
 80067c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	2b07      	cmp	r3, #7
 80067c8:	d9ee      	bls.n	80067a8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067ca:	f7fa fd71 	bl	80012b0 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d102      	bne.n	80067e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80067da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80067de:	e043      	b.n	8006868 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0d2      	beq.n	8006794 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80067fc:	2308      	movs	r3, #8
 80067fe:	e033      	b.n	8006868 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	e02a      	b.n	8006868 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d017      	beq.n	8006850 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006820:	2320      	movs	r3, #32
 8006822:	e021      	b.n	8006868 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fe8f 	bl	800754c <SDMMC_ReadFIFO>
 800682e:	4602      	mov	r2, r0
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	601a      	str	r2, [r3, #0]
    pData++;
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	3304      	adds	r3, #4
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800683a:	f7fa fd39 	bl	80012b0 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d102      	bne.n	8006850 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800684a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800684e:	e00b      	b.n	8006868 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e2      	bne.n	8006824 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a03      	ldr	r2, [pc, #12]	@ (8006870 <SD_SendSDStatus+0x19c>)
 8006864:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3730      	adds	r7, #48	@ 0x30
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	18000f3a 	.word	0x18000f3a

08006874 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006884:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006888:	e018      	b.n	80068bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f001 f942 	bl	8007b20 <SDMMC_CmdSendStatus>
 800689c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e009      	b.n	80068bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fec1 	bl	8007636 <SDMMC_GetResponse>
 80068b4:	4602      	mov	r2, r0
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 feab 	bl	8007636 <SDMMC_GetResponse>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ea:	d102      	bne.n	80068f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068f0:	e02f      	b.n	8006952 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068f2:	f107 030c 	add.w	r3, r7, #12
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f879 	bl	80069f0 <SD_FindSCR>
 80068fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	e023      	b.n	8006952 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01c      	beq.n	800694e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691c:	041b      	lsls	r3, r3, #16
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f001 f814 	bl	800794e <SDMMC_CmdAppCommand>
 8006926:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	e00f      	b.n	8006952 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2102      	movs	r1, #2
 8006938:	4618      	mov	r0, r3
 800693a:	f001 f84b 	bl	80079d4 <SDMMC_CmdBusWidth>
 800693e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	e003      	b.n	8006952 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800694a:	2300      	movs	r3, #0
 800694c:	e001      	b.n	8006952 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800694e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fe60 	bl	8007636 <SDMMC_GetResponse>
 8006976:	4603      	mov	r3, r0
 8006978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006980:	d102      	bne.n	8006988 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006982:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006986:	e02f      	b.n	80069e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f82e 	bl	80069f0 <SD_FindSCR>
 8006994:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	e023      	b.n	80069e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01c      	beq.n	80069e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f000 ffc9 	bl	800794e <SDMMC_CmdAppCommand>
 80069bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	e00f      	b.n	80069e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 f800 	bl	80079d4 <SDMMC_CmdBusWidth>
 80069d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	e003      	b.n	80069e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e001      	b.n	80069e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	@ 0x38
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069fa:	f7fa fc59 	bl	80012b0 <HAL_GetTick>
 80069fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2108      	movs	r1, #8
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fe4c 	bl	80076b4 <SDMMC_CmdBlockLength>
 8006a1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	e0ad      	b.n	8006b84 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f000 ff8a 	bl	800794e <SDMMC_CmdAppCommand>
 8006a3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	e09e      	b.n	8006b84 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006a50:	2330      	movs	r3, #48	@ 0x30
 8006a52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a54:	2302      	movs	r3, #2
 8006a56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f107 0210 	add.w	r2, r7, #16
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fdf6 	bl	800765c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 ffd0 	bl	8007a1a <SDMMC_CmdSendSCR>
 8006a7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d027      	beq.n	8006ad2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	e07e      	b.n	8006b84 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d113      	bne.n	8006abc <SD_FindSCR+0xcc>
 8006a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fd54 	bl	800754c <SDMMC_ReadFIFO>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fd4d 	bl	800754c <SDMMC_ReadFIFO>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	60fb      	str	r3, [r7, #12]
      index++;
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	3301      	adds	r3, #1
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006abc:	f7fa fbf8 	bl	80012b0 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d102      	bne.n	8006ad2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ad0:	e058      	b.n	8006b84 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0d1      	beq.n	8006a86 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2208      	movs	r2, #8
 8006af6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006af8:	2308      	movs	r3, #8
 8006afa:	e043      	b.n	8006b84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b12:	2302      	movs	r3, #2
 8006b14:	e036      	b.n	8006b84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	e029      	b.n	8006b84 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a15      	ldr	r2, [pc, #84]	@ (8006b8c <SD_FindSCR+0x19c>)
 8006b36:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	061a      	lsls	r2, r3, #24
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006b4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	0e1b      	lsrs	r3, r3, #24
 8006b54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	601a      	str	r2, [r3, #0]
    scr++;
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	061a      	lsls	r2, r3, #24
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	0e1b      	lsrs	r3, r3, #24
 8006b7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3738      	adds	r7, #56	@ 0x38
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	18000f3a 	.word	0x18000f3a

08006b90 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba2:	2b1f      	cmp	r3, #31
 8006ba4:	d936      	bls.n	8006c14 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e027      	b.n	8006bfc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fccb 	bl	800754c <SDMMC_ReadFIFO>
 8006bb6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	0a1b      	lsrs	r3, r3, #8
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	3301      	adds	r3, #1
 8006be4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d9d4      	bls.n	8006bac <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	f1a3 0220 	sub.w	r2, r3, #32
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2b1f      	cmp	r3, #31
 8006c30:	d93a      	bls.n	8006ca8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e02b      	b.n	8006c90 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	3301      	adds	r3, #1
 8006c54:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	041a      	lsls	r2, r3, #16
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3301      	adds	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	061a      	lsls	r2, r3, #24
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3301      	adds	r3, #1
 8006c78:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f107 020c 	add.w	r2, r7, #12
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fc6e 	bl	8007566 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b07      	cmp	r3, #7
 8006c94:	d9d0      	bls.n	8006c38 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f1a3 0220 	sub.w	r2, r3, #32
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	621a      	str	r2, [r3, #32]
  }
}
 8006ca8:	bf00      	nop
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e10f      	b.n	8006f32 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a87      	ldr	r2, [pc, #540]	@ (8006f3c <HAL_SPI_Init+0x23c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00f      	beq.n	8006d42 <HAL_SPI_Init+0x42>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a86      	ldr	r2, [pc, #536]	@ (8006f40 <HAL_SPI_Init+0x240>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00a      	beq.n	8006d42 <HAL_SPI_Init+0x42>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a84      	ldr	r2, [pc, #528]	@ (8006f44 <HAL_SPI_Init+0x244>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d005      	beq.n	8006d42 <HAL_SPI_Init+0x42>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d901      	bls.n	8006d42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e0f7      	b.n	8006f32 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fbbc 	bl	80074c0 <SPI_GetPacketSize>
 8006d48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f3c <HAL_SPI_Init+0x23c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00c      	beq.n	8006d6e <HAL_SPI_Init+0x6e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a79      	ldr	r2, [pc, #484]	@ (8006f40 <HAL_SPI_Init+0x240>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <HAL_SPI_Init+0x6e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a78      	ldr	r2, [pc, #480]	@ (8006f44 <HAL_SPI_Init+0x244>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Init+0x6e>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d811      	bhi.n	8006d92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006d72:	4a72      	ldr	r2, [pc, #456]	@ (8006f3c <HAL_SPI_Init+0x23c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a70      	ldr	r2, [pc, #448]	@ (8006f40 <HAL_SPI_Init+0x240>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_SPI_Init+0x8c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6f      	ldr	r2, [pc, #444]	@ (8006f44 <HAL_SPI_Init+0x244>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d104      	bne.n	8006d96 <HAL_SPI_Init+0x96>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	d901      	bls.n	8006d96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0cd      	b.n	8006f32 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fa f906 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006dd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ddc:	d119      	bne.n	8006e12 <HAL_SPI_Init+0x112>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006de6:	d103      	bne.n	8006df0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10c      	bne.n	8006e12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e00:	d107      	bne.n	8006e12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <HAL_SPI_Init+0x13e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d90b      	bls.n	8006e3e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e007      	b.n	8006e4e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69da      	ldr	r2, [r3, #28]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	431a      	orrs	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	ea42 0103 	orr.w	r1, r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eae:	ea42 0103 	orr.w	r1, r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d113      	bne.n	8006eee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006eec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40013000 	.word	0x40013000
 8006f40:	40003800 	.word	0x40003800
 8006f44:	40003c00 	.word	0x40003c00

08006f48 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3320      	adds	r3, #32
 8006f5e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f60:	f7fa f9a6 	bl	80012b0 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
 8006f74:	e1d1      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SPI_Transmit+0x3a>
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e1c9      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_SPI_Transmit+0x4c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e1c2      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006fec:	d108      	bne.n	8007000 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e009      	b.n	8007014 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007012:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	4b96      	ldr	r3, [pc, #600]	@ (8007274 <HAL_SPI_Transmit+0x32c>)
 800701c:	4013      	ands	r3, r2
 800701e:	88f9      	ldrh	r1, [r7, #6]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	430b      	orrs	r3, r1
 8007026:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007040:	d107      	bne.n	8007052 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d947      	bls.n	80070ea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800705a:	e03f      	b.n	80070dc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b02      	cmp	r3, #2
 8007068:	d114      	bne.n	8007094 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007092:	e023      	b.n	80070dc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007094:	f7fa f90c 	bl	80012b0 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d803      	bhi.n	80070ac <HAL_SPI_Transmit+0x164>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d102      	bne.n	80070b2 <HAL_SPI_Transmit+0x16a>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d114      	bne.n	80070dc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f936 	bl	8007324 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e11e      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1b9      	bne.n	800705c <HAL_SPI_Transmit+0x114>
 80070e8:	e0f1      	b.n	80072ce <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b07      	cmp	r3, #7
 80070f0:	f240 80e6 	bls.w	80072c0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80070f4:	e05d      	b.n	80071b2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d132      	bne.n	800716a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d918      	bls.n	8007142 <HAL_SPI_Transmit+0x1fa>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d014      	beq.n	8007142 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007128:	1d1a      	adds	r2, r3, #4
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b02      	subs	r3, #2
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007140:	e037      	b.n	80071b2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007146:	881a      	ldrh	r2, [r3, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007150:	1c9a      	adds	r2, r3, #2
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007168:	e023      	b.n	80071b2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716a:	f7fa f8a1 	bl	80012b0 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d803      	bhi.n	8007182 <HAL_SPI_Transmit+0x23a>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d102      	bne.n	8007188 <HAL_SPI_Transmit+0x240>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d114      	bne.n	80071b2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f8cb 	bl	8007324 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007194:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e0b3      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d19b      	bne.n	80070f6 <HAL_SPI_Transmit+0x1ae>
 80071be:	e086      	b.n	80072ce <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d154      	bne.n	8007278 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d918      	bls.n	800720c <HAL_SPI_Transmit+0x2c4>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d914      	bls.n	800720c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071fe:	b29b      	uxth	r3, r3
 8007200:	3b04      	subs	r3, #4
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800720a:	e059      	b.n	80072c0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007212:	b29b      	uxth	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d917      	bls.n	8007248 <HAL_SPI_Transmit+0x300>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d013      	beq.n	8007248 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007224:	881a      	ldrh	r2, [r3, #0]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b02      	subs	r3, #2
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007246:	e03b      	b.n	80072c0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3320      	adds	r3, #32
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007272:	e025      	b.n	80072c0 <HAL_SPI_Transmit+0x378>
 8007274:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007278:	f7fa f81a 	bl	80012b0 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d803      	bhi.n	8007290 <HAL_SPI_Transmit+0x348>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Transmit+0x34e>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d114      	bne.n	80072c0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f844 	bl	8007324 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e02c      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af79 	bne.w	80071c0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2200      	movs	r2, #0
 80072d6:	2108      	movs	r1, #8
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f8c3 	bl	8007464 <SPI_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ea:	f043 0220 	orr.w	r2, r3, #32
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f815 	bl	8007324 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007318:	2300      	movs	r3, #0
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop

08007324 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0208 	orr.w	r2, r2, #8
 8007342:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0210 	orr.w	r2, r2, #16
 8007352:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0201 	bic.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6919      	ldr	r1, [r3, #16]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b3c      	ldr	r3, [pc, #240]	@ (8007460 <SPI_CloseTransfer+0x13c>)
 8007370:	400b      	ands	r3, r1
 8007372:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007382:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b04      	cmp	r3, #4
 800738e:	d014      	beq.n	80073ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00f      	beq.n	80073ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0220 	orr.w	r2, r2, #32
 80073b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d014      	beq.n	80073f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00f      	beq.n	80073f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d6:	f043 0204 	orr.w	r2, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007400:	f043 0201 	orr.w	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007418:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00f      	beq.n	8007444 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742a:	f043 0208 	orr.w	r2, r3, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007442:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	fffffc90 	.word	0xfffffc90

08007464 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007474:	e010      	b.n	8007498 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007476:	f7f9 ff1b 	bl	80012b0 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d803      	bhi.n	800748e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d102      	bne.n	8007494 <SPI_WaitOnFlagUntilTimeout+0x30>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e00f      	b.n	80074b8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d0df      	beq.n	8007476 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3307      	adds	r3, #7
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80074f8:	b084      	sub	sp, #16
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	f107 001c 	add.w	r0, r7, #28
 8007506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800750e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007510:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007512:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8007516:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800751a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800751e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	4b07      	ldr	r3, [pc, #28]	@ (8007548 <SDMMC_Init+0x50>)
 800752c:	4013      	ands	r3, r2
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	b004      	add	sp, #16
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	ffc02c00 	.word	0xffc02c00

0800754c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f043 0203 	orr.w	r2, r3, #3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0303 	and.w	r3, r3, #3
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80075e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80075ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80075f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <SDMMC_SendCommand+0x50>)
 8007600:	4013      	ands	r3, r2
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	fffee0c0 	.word	0xfffee0c0

0800761c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	b2db      	uxtb	r3, r3
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3314      	adds	r3, #20
 8007644:	461a      	mov	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007682:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007688:	431a      	orrs	r2, r3
                       Data->DPSM);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800768e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0

}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80076c2:	2310      	movs	r3, #16
 80076c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076d6:	f107 0308 	add.w	r3, r7, #8
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff73 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80076e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e6:	2110      	movs	r1, #16
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa5f 	bl	8007bac <SDMMC_GetCmdResp1>
 80076ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b088      	sub	sp, #32
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007708:	2311      	movs	r3, #17
 800770a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800770c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800771a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800771c:	f107 0308 	add.w	r3, r7, #8
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff ff50 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772c:	2111      	movs	r1, #17
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa3c 	bl	8007bac <SDMMC_GetCmdResp1>
 8007734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007736:	69fb      	ldr	r3, [r7, #28]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800774e:	2312      	movs	r3, #18
 8007750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800775c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ff2d 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800776e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007772:	2112      	movs	r1, #18
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa19 	bl	8007bac <SDMMC_GetCmdResp1>
 800777a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800777c:	69fb      	ldr	r3, [r7, #28]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007794:	2318      	movs	r3, #24
 8007796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800779c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a8:	f107 0308 	add.w	r3, r7, #8
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff ff0a 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b8:	2118      	movs	r1, #24
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9f6 	bl	8007bac <SDMMC_GetCmdResp1>
 80077c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c2:	69fb      	ldr	r3, [r7, #28]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80077da:	2319      	movs	r3, #25
 80077dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077ee:	f107 0308 	add.w	r3, r7, #8
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fee7 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077fe:	2119      	movs	r1, #25
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f9d3 	bl	8007bac <SDMMC_GetCmdResp1>
 8007806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007808:	69fb      	ldr	r3, [r7, #28]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007820:	230c      	movs	r3, #12
 8007822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800782e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007832:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff feb8 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007858:	4a0b      	ldr	r2, [pc, #44]	@ (8007888 <SDMMC_CmdStopTransfer+0x74>)
 800785a:	210c      	movs	r1, #12
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f9a5 	bl	8007bac <SDMMC_GetCmdResp1>
 8007862:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007876:	d101      	bne.n	800787c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800787c:	69fb      	ldr	r3, [r7, #28]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3720      	adds	r7, #32
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	05f5e100 	.word	0x05f5e100

0800788c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800789a:	2307      	movs	r3, #7
 800789c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800789e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fe87 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80078ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078be:	2107      	movs	r1, #7
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f973 	bl	8007bac <SDMMC_GetCmdResp1>
 80078c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c8:	69fb      	ldr	r3, [r7, #28]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f0:	f107 0308 	add.w	r3, r7, #8
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fe66 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb97 	bl	8008030 <SDMMC_GetCmdError>
 8007902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007904:	69fb      	ldr	r3, [r7, #28]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b088      	sub	sp, #32
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007916:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800791a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800791c:	2308      	movs	r3, #8
 800791e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800792a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800792e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fe46 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb29 	bl	8007f94 <SDMMC_GetCmdResp7>
 8007942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007944:	69fb      	ldr	r3, [r7, #28]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800795c:	2337      	movs	r3, #55	@ 0x37
 800795e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800796a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800796e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff fe26 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800797c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007980:	2137      	movs	r1, #55	@ 0x37
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f912 	bl	8007bac <SDMMC_GetCmdResp1>
 8007988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80079a2:	2329      	movs	r3, #41	@ 0x29
 80079a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079b6:	f107 0308 	add.w	r3, r7, #8
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fe03 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa2e 	bl	8007e24 <SDMMC_GetCmdResp3>
 80079c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079ca:	69fb      	ldr	r3, [r7, #28]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80079e2:	2306      	movs	r3, #6
 80079e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079f6:	f107 0308 	add.w	r3, r7, #8
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fde3 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a06:	2106      	movs	r1, #6
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f8cf 	bl	8007bac <SDMMC_GetCmdResp1>
 8007a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a10:	69fb      	ldr	r3, [r7, #28]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007a26:	2333      	movs	r3, #51	@ 0x33
 8007a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fdc1 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4a:	2133      	movs	r1, #51	@ 0x33
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8ad 	bl	8007bac <SDMMC_GetCmdResp1>
 8007a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a54:	69fb      	ldr	r3, [r7, #28]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b088      	sub	sp, #32
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff fd9f 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f980 	bl	8007d90 <SDMMC_GetCmdResp2>
 8007a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007aaa:	2309      	movs	r3, #9
 8007aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007aae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007abc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff fd7f 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f960 	bl	8007d90 <SDMMC_GetCmdResp2>
 8007ad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007aea:	2303      	movs	r3, #3
 8007aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007afc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007afe:	f107 0308 	add.w	r3, r7, #8
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fd5f 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	2103      	movs	r1, #3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9c8 	bl	8007ea4 <SDMMC_GetCmdResp6>
 8007b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b2e:	230d      	movs	r3, #13
 8007b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b42:	f107 0308 	add.w	r3, r7, #8
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fd3d 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b52:	210d      	movs	r1, #13
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f829 	bl	8007bac <SDMMC_GetCmdResp1>
 8007b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b088      	sub	sp, #32
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007b72:	230d      	movs	r3, #13
 8007b74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fd1b 	bl	80075c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b96:	210d      	movs	r1, #13
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f807 	bl	8007bac <SDMMC_GetCmdResp1>
 8007b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007bba:	4b70      	ldr	r3, [pc, #448]	@ (8007d7c <SDMMC_GetCmdResp1+0x1d0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a70      	ldr	r2, [pc, #448]	@ (8007d80 <SDMMC_GetCmdResp1+0x1d4>)
 8007bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc4:	0a5a      	lsrs	r2, r3, #9
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	fb02 f303 	mul.w	r3, r2, r3
 8007bcc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	1e5a      	subs	r2, r3, #1
 8007bd2:	61fa      	str	r2, [r7, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007bdc:	e0c9      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4b67      	ldr	r3, [pc, #412]	@ (8007d84 <SDMMC_GetCmdResp1+0x1d8>)
 8007be8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0ef      	beq.n	8007bce <SDMMC_GetCmdResp1+0x22>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ea      	bne.n	8007bce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2204      	movs	r2, #4
 8007c08:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c0a:	2304      	movs	r3, #4
 8007c0c:	e0b1      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0a6      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4a58      	ldr	r2, [pc, #352]	@ (8007d88 <SDMMC_GetCmdResp1+0x1dc>)
 8007c28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7ff fcf6 	bl	800761c <SDMMC_GetCommandResponse>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d001      	beq.n	8007c3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e099      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c3e:	2100      	movs	r1, #0
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fcf8 	bl	8007636 <SDMMC_GetResponse>
 8007c46:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4b50      	ldr	r3, [pc, #320]	@ (8007d8c <SDMMC_GetCmdResp1+0x1e0>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e08d      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da02      	bge.n	8007c62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c60:	e087      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c6c:	2340      	movs	r3, #64	@ 0x40
 8007c6e:	e080      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c7a:	2380      	movs	r3, #128	@ 0x80
 8007c7c:	e079      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c8c:	e071      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c9c:	e069      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cac:	e061      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007cb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cbc:	e059      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ccc:	e051      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007cdc:	e049      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ce8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007cec:	e041      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfc:	e039      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d0c:	e031      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007d1c:	e029      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d2c:	e021      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007d3c:	e019      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d4c:	e011      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d5c:	e009      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d68:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007d6c:	e001      	b.n	8007d72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	24000000 	.word	0x24000000
 8007d80:	10624dd3 	.word	0x10624dd3
 8007d84:	00200045 	.word	0x00200045
 8007d88:	002000c5 	.word	0x002000c5
 8007d8c:	fdffe008 	.word	0xfdffe008

08007d90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007d98:	4b1f      	ldr	r3, [pc, #124]	@ (8007e18 <SDMMC_GetCmdResp2+0x88>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e1c <SDMMC_GetCmdResp2+0x8c>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	0a5b      	lsrs	r3, r3, #9
 8007da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1e5a      	subs	r2, r3, #1
 8007db2:	60fa      	str	r2, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007db8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007dbc:	e026      	b.n	8007e0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ea      	bne.n	8007dae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2204      	movs	r2, #4
 8007de8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dea:	2304      	movs	r3, #4
 8007dec:	e00e      	b.n	8007e0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e003      	b.n	8007e0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a06      	ldr	r2, [pc, #24]	@ (8007e20 <SDMMC_GetCmdResp2+0x90>)
 8007e08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	24000000 	.word	0x24000000
 8007e1c:	10624dd3 	.word	0x10624dd3
 8007e20:	002000c5 	.word	0x002000c5

08007e24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <SDMMC_GetCmdResp3+0x74>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1a      	ldr	r2, [pc, #104]	@ (8007e9c <SDMMC_GetCmdResp3+0x78>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	0a5b      	lsrs	r3, r3, #9
 8007e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e3c:	fb02 f303 	mul.w	r3, r2, r3
 8007e40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1e5a      	subs	r2, r3, #1
 8007e46:	60fa      	str	r2, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e50:	e01b      	b.n	8007e8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0ef      	beq.n	8007e42 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ea      	bne.n	8007e42 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e7e:	2304      	movs	r3, #4
 8007e80:	e003      	b.n	8007e8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a06      	ldr	r2, [pc, #24]	@ (8007ea0 <SDMMC_GetCmdResp3+0x7c>)
 8007e86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	24000000 	.word	0x24000000
 8007e9c:	10624dd3 	.word	0x10624dd3
 8007ea0:	002000c5 	.word	0x002000c5

08007ea4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	460b      	mov	r3, r1
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007eb2:	4b35      	ldr	r3, [pc, #212]	@ (8007f88 <SDMMC_GetCmdResp6+0xe4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a35      	ldr	r2, [pc, #212]	@ (8007f8c <SDMMC_GetCmdResp6+0xe8>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	0a5b      	lsrs	r3, r3, #9
 8007ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	1e5a      	subs	r2, r3, #1
 8007ecc:	61fa      	str	r2, [r7, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ed2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ed6:	e052      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007edc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0ef      	beq.n	8007ec8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1ea      	bne.n	8007ec8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2204      	movs	r2, #4
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f04:	2304      	movs	r3, #4
 8007f06:	e03a      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e02f      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fb7c 	bl	800761c <SDMMC_GetCommandResponse>
 8007f24:	4603      	mov	r3, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d001      	beq.n	8007f32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e025      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a16      	ldr	r2, [pc, #88]	@ (8007f90 <SDMMC_GetCmdResp6+0xec>)
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f38:	2100      	movs	r1, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fb7b 	bl	8007636 <SDMMC_GetResponse>
 8007f40:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d106      	bne.n	8007f5a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e011      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007f68:	e009      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f78:	e001      	b.n	8007f7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	24000000 	.word	0x24000000
 8007f8c:	10624dd3 	.word	0x10624dd3
 8007f90:	002000c5 	.word	0x002000c5

08007f94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007f9c:	4b22      	ldr	r3, [pc, #136]	@ (8008028 <SDMMC_GetCmdResp7+0x94>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a22      	ldr	r2, [pc, #136]	@ (800802c <SDMMC_GetCmdResp7+0x98>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	0a5b      	lsrs	r3, r3, #9
 8007fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
 8007fb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1e5a      	subs	r2, r3, #1
 8007fb6:	60fa      	str	r2, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fc0:	e02c      	b.n	800801c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0ef      	beq.n	8007fb2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1ea      	bne.n	8007fb2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2204      	movs	r2, #4
 8007fec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fee:	2304      	movs	r3, #4
 8007ff0:	e014      	b.n	800801c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008004:	2301      	movs	r3, #1
 8008006:	e009      	b.n	800801c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2240      	movs	r2, #64	@ 0x40
 8008018:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800801a:	2300      	movs	r3, #0

}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	24000000 	.word	0x24000000
 800802c:	10624dd3 	.word	0x10624dd3

08008030 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008038:	4b11      	ldr	r3, [pc, #68]	@ (8008080 <SDMMC_GetCmdError+0x50>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <SDMMC_GetCmdError+0x54>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	0a5b      	lsrs	r3, r3, #9
 8008044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1e5a      	subs	r2, r3, #1
 8008052:	60fa      	str	r2, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008058:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800805c:	e009      	b.n	8008072 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f1      	beq.n	800804e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a06      	ldr	r2, [pc, #24]	@ (8008088 <SDMMC_GetCmdError+0x58>)
 800806e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	24000000 	.word	0x24000000
 8008084:	10624dd3 	.word	0x10624dd3
 8008088:	002000c5 	.word	0x002000c5

0800808c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008090:	4904      	ldr	r1, [pc, #16]	@ (80080a4 <MX_FATFS_Init+0x18>)
 8008092:	4805      	ldr	r0, [pc, #20]	@ (80080a8 <MX_FATFS_Init+0x1c>)
 8008094:	f002 fcea 	bl	800aa6c <FATFS_LinkDriver>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	4b03      	ldr	r3, [pc, #12]	@ (80080ac <MX_FATFS_Init+0x20>)
 800809e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80080a0:	bf00      	nop
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	240007a8 	.word	0x240007a8
 80080a8:	0800ab50 	.word	0x0800ab50
 80080ac:	240007a4 	.word	0x240007a4

080080b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80080b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80080ca:	f000 f885 	bl	80081d8 <BSP_SD_IsDetected>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d001      	beq.n	80080d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80080d4:	2302      	movs	r3, #2
 80080d6:	e012      	b.n	80080fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80080d8:	480b      	ldr	r0, [pc, #44]	@ (8008108 <BSP_SD_Init+0x48>)
 80080da:	f7fd f9ad 	bl	8005438 <HAL_SD_Init>
 80080de:	4603      	mov	r3, r0
 80080e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80080e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80080ec:	4806      	ldr	r0, [pc, #24]	@ (8008108 <BSP_SD_Init+0x48>)
 80080ee:	f7fe f863 	bl	80061b8 <HAL_SD_ConfigWideBusOperation>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80080fc:	79fb      	ldrb	r3, [r7, #7]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	2400003c 	.word	0x2400003c

0800810c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	68f9      	ldr	r1, [r7, #12]
 8008122:	4806      	ldr	r0, [pc, #24]	@ (800813c <BSP_SD_ReadBlocks_DMA+0x30>)
 8008124:	f7fd faa8 	bl	8005678 <HAL_SD_ReadBlocks_DMA>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	2400003c 	.word	0x2400003c

08008140 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	68f9      	ldr	r1, [r7, #12]
 8008156:	4806      	ldr	r0, [pc, #24]	@ (8008170 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008158:	f7fd fb36 	bl	80057c8 <HAL_SD_WriteBlocks_DMA>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	2400003c 	.word	0x2400003c

08008174 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008178:	4805      	ldr	r0, [pc, #20]	@ (8008190 <BSP_SD_GetCardState+0x1c>)
 800817a:	f7fe f92f 	bl	80063dc <HAL_SD_GetCardState>
 800817e:	4603      	mov	r3, r0
 8008180:	2b04      	cmp	r3, #4
 8008182:	bf14      	ite	ne
 8008184:	2301      	movne	r3, #1
 8008186:	2300      	moveq	r3, #0
 8008188:	b2db      	uxtb	r3, r3
}
 800818a:	4618      	mov	r0, r3
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2400003c 	.word	0x2400003c

08008194 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4803      	ldr	r0, [pc, #12]	@ (80081ac <BSP_SD_GetCardInfo+0x18>)
 80081a0:	f7fd ffde 	bl	8006160 <HAL_SD_GetCardInfo>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	2400003c 	.word	0x2400003c

080081b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80081b8:	f000 f9a0 	bl	80084fc <BSP_SD_WriteCpltCallback>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80081cc:	f000 f9a2 	bl	8008514 <BSP_SD_ReadCpltCallback>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80081de:	2301      	movs	r3, #1
 80081e0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80081e2:	f000 f80b 	bl	80081fc <BSP_PlatformIsDetected>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80081ec:	2300      	movs	r3, #0
 80081ee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	b2db      	uxtb	r3, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008202:	2301      	movs	r3, #1
 8008204:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008206:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800820a:	4806      	ldr	r0, [pc, #24]	@ (8008224 <BSP_PlatformIsDetected+0x28>)
 800820c:	f7f9 fb4c 	bl	80018a8 <HAL_GPIO_ReadPin>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008216:	2300      	movs	r3, #0
 8008218:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800821a:	79fb      	ldrb	r3, [r7, #7]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	58022000 	.word	0x58022000

08008228 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008230:	f7f9 f83e 	bl	80012b0 <HAL_GetTick>
 8008234:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008236:	e006      	b.n	8008246 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008238:	f7ff ff9c 	bl	8008174 <BSP_SD_GetCardState>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008242:	2300      	movs	r3, #0
 8008244:	e009      	b.n	800825a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008246:	f7f9 f833 	bl	80012b0 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	429a      	cmp	r2, r3
 8008254:	d8f0      	bhi.n	8008238 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800826e:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <SD_CheckStatus+0x38>)
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008274:	f7ff ff7e 	bl	8008174 <BSP_SD_GetCardState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800827e:	4b07      	ldr	r3, [pc, #28]	@ (800829c <SD_CheckStatus+0x38>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	b2da      	uxtb	r2, r3
 800828a:	4b04      	ldr	r3, [pc, #16]	@ (800829c <SD_CheckStatus+0x38>)
 800828c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800828e:	4b03      	ldr	r3, [pc, #12]	@ (800829c <SD_CheckStatus+0x38>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b2db      	uxtb	r3, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	24000019 	.word	0x24000019

080082a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80082aa:	f7ff ff09 	bl	80080c0 <BSP_SD_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d107      	bne.n	80082c4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff ffd4 	bl	8008264 <SD_CheckStatus>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	4b04      	ldr	r3, [pc, #16]	@ (80082d4 <SD_initialize+0x34>)
 80082c2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80082c4:	4b03      	ldr	r3, [pc, #12]	@ (80082d4 <SD_initialize+0x34>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b2db      	uxtb	r3, r3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	24000019 	.word	0x24000019

080082d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff ffbd 	bl	8008264 <SD_CheckStatus>
 80082ea:	4603      	mov	r3, r0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008308:	f247 5030 	movw	r0, #30000	@ 0x7530
 800830c:	f7ff ff8c 	bl	8008228 <SD_CheckStatusWithTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	da01      	bge.n	800831a <SD_read+0x26>
  {
    return res;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	e03b      	b.n	8008392 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	68b8      	ldr	r0, [r7, #8]
 8008320:	f7ff fef4 	bl	800810c <BSP_SD_ReadBlocks_DMA>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d132      	bne.n	8008390 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800832a:	4b1c      	ldr	r3, [pc, #112]	@ (800839c <SD_read+0xa8>)
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008330:	f7f8 ffbe 	bl	80012b0 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008336:	bf00      	nop
 8008338:	4b18      	ldr	r3, [pc, #96]	@ (800839c <SD_read+0xa8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <SD_read+0x5e>
 8008340:	f7f8 ffb6 	bl	80012b0 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800834e:	4293      	cmp	r3, r2
 8008350:	d9f2      	bls.n	8008338 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <SD_read+0xa8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	75fb      	strb	r3, [r7, #23]
 800835e:	e017      	b.n	8008390 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008360:	4b0e      	ldr	r3, [pc, #56]	@ (800839c <SD_read+0xa8>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008366:	f7f8 ffa3 	bl	80012b0 <HAL_GetTick>
 800836a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800836c:	e007      	b.n	800837e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800836e:	f7ff ff01 	bl	8008174 <BSP_SD_GetCardState>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <SD_read+0x8a>
          {
            res = RES_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800837c:	e008      	b.n	8008390 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800837e:	f7f8 ff97 	bl	80012b0 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f247 522f 	movw	r2, #29999	@ 0x752f
 800838c:	4293      	cmp	r3, r2
 800838e:	d9ee      	bls.n	800836e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	240007b0 	.word	0x240007b0

080083a0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80083b4:	4b24      	ldr	r3, [pc, #144]	@ (8008448 <SD_write+0xa8>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80083ba:	f247 5030 	movw	r0, #30000	@ 0x7530
 80083be:	f7ff ff33 	bl	8008228 <SD_CheckStatusWithTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da01      	bge.n	80083cc <SD_write+0x2c>
  {
    return res;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	e038      	b.n	800843e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	68b8      	ldr	r0, [r7, #8]
 80083d2:	f7ff feb5 	bl	8008140 <BSP_SD_WriteBlocks_DMA>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d12f      	bne.n	800843c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80083dc:	f7f8 ff68 	bl	80012b0 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80083e2:	bf00      	nop
 80083e4:	4b18      	ldr	r3, [pc, #96]	@ (8008448 <SD_write+0xa8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d108      	bne.n	80083fe <SD_write+0x5e>
 80083ec:	f7f8 ff60 	bl	80012b0 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d9f2      	bls.n	80083e4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80083fe:	4b12      	ldr	r3, [pc, #72]	@ (8008448 <SD_write+0xa8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
 800840a:	e017      	b.n	800843c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800840c:	4b0e      	ldr	r3, [pc, #56]	@ (8008448 <SD_write+0xa8>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008412:	f7f8 ff4d 	bl	80012b0 <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008418:	e007      	b.n	800842a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800841a:	f7ff feab 	bl	8008174 <BSP_SD_GetCardState>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <SD_write+0x8a>
          {
            res = RES_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	75fb      	strb	r3, [r7, #23]
            break;
 8008428:	e008      	b.n	800843c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800842a:	f7f8 ff41 	bl	80012b0 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008438:	4293      	cmp	r3, r2
 800843a:	d9ee      	bls.n	800841a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	240007ac 	.word	0x240007ac

0800844c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	@ 0x30
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	603a      	str	r2, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
 8008458:	460b      	mov	r3, r1
 800845a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008462:	4b25      	ldr	r3, [pc, #148]	@ (80084f8 <SD_ioctl+0xac>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <SD_ioctl+0x28>
 8008470:	2303      	movs	r3, #3
 8008472:	e03c      	b.n	80084ee <SD_ioctl+0xa2>

  switch (cmd)
 8008474:	79bb      	ldrb	r3, [r7, #6]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d834      	bhi.n	80084e4 <SD_ioctl+0x98>
 800847a:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <SD_ioctl+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	08008499 	.word	0x08008499
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084cb 	.word	0x080084cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008496:	e028      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008498:	f107 0308 	add.w	r3, r7, #8
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fe79 	bl	8008194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084ae:	e01c      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff fe6d 	bl	8008194 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	b29a      	uxth	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084c8:	e00f      	b.n	80084ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80084ca:	f107 0308 	add.w	r3, r7, #8
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fe60 	bl	8008194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	0a5a      	lsrs	r2, r3, #9
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80084e2:	e002      	b.n	80084ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80084ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3730      	adds	r7, #48	@ 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	24000019 	.word	0x24000019

080084fc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008500:	4b03      	ldr	r3, [pc, #12]	@ (8008510 <BSP_SD_WriteCpltCallback+0x14>)
 8008502:	2201      	movs	r2, #1
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	bf00      	nop
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	240007ac 	.word	0x240007ac

08008514 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008518:	4b03      	ldr	r3, [pc, #12]	@ (8008528 <BSP_SD_ReadCpltCallback+0x14>)
 800851a:	2201      	movs	r2, #1
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	240007b0 	.word	0x240007b0

0800852c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	4a08      	ldr	r2, [pc, #32]	@ (800855c <disk_status+0x30>)
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	79fa      	ldrb	r2, [r7, #7]
 8008544:	4905      	ldr	r1, [pc, #20]	@ (800855c <disk_status+0x30>)
 8008546:	440a      	add	r2, r1
 8008548:	7a12      	ldrb	r2, [r2, #8]
 800854a:	4610      	mov	r0, r2
 800854c:	4798      	blx	r3
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	240007dc 	.word	0x240007dc

08008560 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	4a0e      	ldr	r2, [pc, #56]	@ (80085ac <disk_initialize+0x4c>)
 8008572:	5cd3      	ldrb	r3, [r2, r3]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d114      	bne.n	80085a2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	4a0c      	ldr	r2, [pc, #48]	@ (80085ac <disk_initialize+0x4c>)
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	79fa      	ldrb	r2, [r7, #7]
 8008586:	4909      	ldr	r1, [pc, #36]	@ (80085ac <disk_initialize+0x4c>)
 8008588:	440a      	add	r2, r1
 800858a:	7a12      	ldrb	r2, [r2, #8]
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d103      	bne.n	80085a2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	4a03      	ldr	r2, [pc, #12]	@ (80085ac <disk_initialize+0x4c>)
 800859e:	2101      	movs	r1, #1
 80085a0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	240007dc 	.word	0x240007dc

080085b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80085b0:	b590      	push	{r4, r7, lr}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	4a0a      	ldr	r2, [pc, #40]	@ (80085ec <disk_read+0x3c>)
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	689c      	ldr	r4, [r3, #8]
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	4a07      	ldr	r2, [pc, #28]	@ (80085ec <disk_read+0x3c>)
 80085d0:	4413      	add	r3, r2
 80085d2:	7a18      	ldrb	r0, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	47a0      	blx	r4
 80085dc:	4603      	mov	r3, r0
 80085de:	75fb      	strb	r3, [r7, #23]
  return res;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd90      	pop	{r4, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	240007dc 	.word	0x240007dc

080085f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <disk_write+0x3c>)
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	68dc      	ldr	r4, [r3, #12]
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4a07      	ldr	r2, [pc, #28]	@ (800862c <disk_write+0x3c>)
 8008610:	4413      	add	r3, r2
 8008612:	7a18      	ldrb	r0, [r3, #8]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	47a0      	blx	r4
 800861c:	4603      	mov	r3, r0
 800861e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}
 800862a:	bf00      	nop
 800862c:	240007dc 	.word	0x240007dc

08008630 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	603a      	str	r2, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
 800863c:	460b      	mov	r3, r1
 800863e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	4a09      	ldr	r2, [pc, #36]	@ (8008668 <disk_ioctl+0x38>)
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	79fa      	ldrb	r2, [r7, #7]
 800864e:	4906      	ldr	r1, [pc, #24]	@ (8008668 <disk_ioctl+0x38>)
 8008650:	440a      	add	r2, r1
 8008652:	7a10      	ldrb	r0, [r2, #8]
 8008654:	79b9      	ldrb	r1, [r7, #6]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4798      	blx	r3
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
  return res;
 800865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	240007dc 	.word	0x240007dc

0800866c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3301      	adds	r3, #1
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800867c:	89fb      	ldrh	r3, [r7, #14]
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	b21a      	sxth	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b21b      	sxth	r3, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	b21b      	sxth	r3, r3
 800868c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800868e:	89fb      	ldrh	r3, [r7, #14]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3303      	adds	r3, #3
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	3202      	adds	r2, #2
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	3201      	adds	r2, #1
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	021b      	lsls	r3, r3, #8
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80086d4:	68fb      	ldr	r3, [r7, #12]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	887a      	ldrh	r2, [r7, #2]
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	887a      	ldrh	r2, [r7, #2]
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	0a1b      	lsrs	r3, r3, #8
 8008756:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	1c5a      	adds	r2, r3, #1
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00d      	beq.n	80087a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	1c53      	adds	r3, r2, #1
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	6179      	str	r1, [r7, #20]
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f1      	bne.n	800878a <mem_cpy+0x1a>
	}
}
 80087a6:	bf00      	nop
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80087b2:	b480      	push	{r7}
 80087b4:	b087      	sub	sp, #28
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	617a      	str	r2, [r7, #20]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	607b      	str	r3, [r7, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f3      	bne.n	80087c2 <mem_set+0x10>
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	@ 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	61fa      	str	r2, [r7, #28]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4619      	mov	r1, r3
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	61ba      	str	r2, [r7, #24]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	1acb      	subs	r3, r1, r3
 8008814:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3b01      	subs	r3, #1
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <mem_cmp+0x40>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0eb      	beq.n	8008800 <mem_cmp+0x18>

	return r;
 8008828:	697b      	ldr	r3, [r7, #20]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3724      	adds	r7, #36	@ 0x24
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008840:	e002      	b.n	8008848 <chk_chr+0x12>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3301      	adds	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <chk_chr+0x26>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	4293      	cmp	r3, r2
 800885a:	d1f2      	bne.n	8008842 <chk_chr+0xc>
	return *str;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	781b      	ldrb	r3, [r3, #0]
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	e029      	b.n	80088d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008880:	4a27      	ldr	r2, [pc, #156]	@ (8008920 <chk_lock+0xb4>)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	4413      	add	r3, r2
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01d      	beq.n	80088ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800888e:	4a24      	ldr	r2, [pc, #144]	@ (8008920 <chk_lock+0xb4>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	4413      	add	r3, r2
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d116      	bne.n	80088ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80088a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008920 <chk_lock+0xb4>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	4413      	add	r3, r2
 80088a8:	3304      	adds	r3, #4
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d10c      	bne.n	80088ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80088b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008920 <chk_lock+0xb4>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	4413      	add	r3, r2
 80088bc:	3308      	adds	r3, #8
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d102      	bne.n	80088ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80088c8:	e007      	b.n	80088da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80088ca:	2301      	movs	r3, #1
 80088cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d9d2      	bls.n	8008880 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d109      	bne.n	80088f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <chk_lock+0x80>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d101      	bne.n	80088f0 <chk_lock+0x84>
 80088ec:	2300      	movs	r3, #0
 80088ee:	e010      	b.n	8008912 <chk_lock+0xa6>
 80088f0:	2312      	movs	r3, #18
 80088f2:	e00e      	b.n	8008912 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <chk_lock+0xa0>
 80088fa:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <chk_lock+0xb4>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	330c      	adds	r3, #12
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800890a:	d101      	bne.n	8008910 <chk_lock+0xa4>
 800890c:	2310      	movs	r3, #16
 800890e:	e000      	b.n	8008912 <chk_lock+0xa6>
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	240007bc 	.word	0x240007bc

08008924 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	e002      	b.n	8008936 <enq_lock+0x12>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3301      	adds	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d806      	bhi.n	800894a <enq_lock+0x26>
 800893c:	4a09      	ldr	r2, [pc, #36]	@ (8008964 <enq_lock+0x40>)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	011b      	lsls	r3, r3, #4
 8008942:	4413      	add	r3, r2
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f2      	bne.n	8008930 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b02      	cmp	r3, #2
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	240007bc 	.word	0x240007bc

08008968 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e01f      	b.n	80089b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008978:	4a41      	ldr	r2, [pc, #260]	@ (8008a80 <inc_lock+0x118>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	4413      	add	r3, r2
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d113      	bne.n	80089b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800898a:	4a3d      	ldr	r2, [pc, #244]	@ (8008a80 <inc_lock+0x118>)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	4413      	add	r3, r2
 8008992:	3304      	adds	r3, #4
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800899a:	429a      	cmp	r2, r3
 800899c:	d109      	bne.n	80089b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800899e:	4a38      	ldr	r2, [pc, #224]	@ (8008a80 <inc_lock+0x118>)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	4413      	add	r3, r2
 80089a6:	3308      	adds	r3, #8
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d006      	beq.n	80089c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d9dc      	bls.n	8008978 <inc_lock+0x10>
 80089be:	e000      	b.n	80089c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80089c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d132      	bne.n	8008a2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e002      	b.n	80089d4 <inc_lock+0x6c>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3301      	adds	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d806      	bhi.n	80089e8 <inc_lock+0x80>
 80089da:	4a29      	ldr	r2, [pc, #164]	@ (8008a80 <inc_lock+0x118>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	4413      	add	r3, r2
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f2      	bne.n	80089ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d101      	bne.n	80089f2 <inc_lock+0x8a>
 80089ee:	2300      	movs	r3, #0
 80089f0:	e040      	b.n	8008a74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4922      	ldr	r1, [pc, #136]	@ (8008a80 <inc_lock+0x118>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	440b      	add	r3, r1
 80089fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	491e      	ldr	r1, [pc, #120]	@ (8008a80 <inc_lock+0x118>)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	440b      	add	r3, r1
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695a      	ldr	r2, [r3, #20]
 8008a14:	491a      	ldr	r1, [pc, #104]	@ (8008a80 <inc_lock+0x118>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a20:	4a17      	ldr	r2, [pc, #92]	@ (8008a80 <inc_lock+0x118>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	4413      	add	r3, r2
 8008a28:	330c      	adds	r3, #12
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <inc_lock+0xe0>
 8008a34:	4a12      	ldr	r2, [pc, #72]	@ (8008a80 <inc_lock+0x118>)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	4413      	add	r3, r2
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <inc_lock+0xe0>
 8008a44:	2300      	movs	r3, #0
 8008a46:	e015      	b.n	8008a74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d108      	bne.n	8008a60 <inc_lock+0xf8>
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a80 <inc_lock+0x118>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	4413      	add	r3, r2
 8008a56:	330c      	adds	r3, #12
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	e001      	b.n	8008a64 <inc_lock+0xfc>
 8008a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a64:	4906      	ldr	r1, [pc, #24]	@ (8008a80 <inc_lock+0x118>)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	440b      	add	r3, r1
 8008a6c:	330c      	adds	r3, #12
 8008a6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	240007bc 	.word	0x240007bc

08008a84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e010      	b.n	8008ab4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a92:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac8 <clear_lock+0x44>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	4413      	add	r3, r2
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d105      	bne.n	8008aae <clear_lock+0x2a>
 8008aa2:	4a09      	ldr	r2, [pc, #36]	@ (8008ac8 <clear_lock+0x44>)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	4413      	add	r3, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d9eb      	bls.n	8008a92 <clear_lock+0xe>
	}
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	240007bc 	.word	0x240007bc

08008acc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d034      	beq.n	8008b4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	7858      	ldrb	r0, [r3, #1]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008af0:	2301      	movs	r3, #1
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	f7ff fd7c 	bl	80085f0 <disk_write>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	73fb      	strb	r3, [r7, #15]
 8008b02:	e022      	b.n	8008b4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	1ad2      	subs	r2, r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d217      	bcs.n	8008b4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	789b      	ldrb	r3, [r3, #2]
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	e010      	b.n	8008b44 <sync_window+0x78>
					wsect += fs->fsize;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4413      	add	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7858      	ldrb	r0, [r3, #1]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b36:	2301      	movs	r3, #1
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	f7ff fd59 	bl	80085f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d8eb      	bhi.n	8008b22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d01b      	beq.n	8008ba4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ffad 	bl	8008acc <sync_window>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d113      	bne.n	8008ba4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b86:	2301      	movs	r3, #1
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	f7ff fd11 	bl	80085b0 <disk_read>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b94:	f04f 33ff 	mov.w	r3, #4294967295
 8008b98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	3b02      	subs	r3, #2
 8008bbc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	3b02      	subs	r3, #2
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d301      	bcc.n	8008bce <clust2sect+0x20>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e008      	b.n	8008be0 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	895b      	ldrh	r3, [r3, #10]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	fb03 f202 	mul.w	r2, r3, r2
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bde:	4413      	add	r3, r2
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d904      	bls.n	8008c0c <get_fat+0x20>
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e08e      	b.n	8008d30 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d061      	beq.n	8008ce4 <get_fat+0xf8>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	dc7b      	bgt.n	8008d1c <get_fat+0x130>
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d002      	beq.n	8008c2e <get_fat+0x42>
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d041      	beq.n	8008cb0 <get_fat+0xc4>
 8008c2c:	e076      	b.n	8008d1c <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	085b      	lsrs	r3, r3, #1
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4413      	add	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6a1a      	ldr	r2, [r3, #32]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0a5b      	lsrs	r3, r3, #9
 8008c44:	4413      	add	r3, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	6938      	ldr	r0, [r7, #16]
 8008c4a:	f7ff ff83 	bl	8008b54 <move_window>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d166      	bne.n	8008d22 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	60fa      	str	r2, [r7, #12]
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4413      	add	r3, r2
 8008c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c66:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6a1a      	ldr	r2, [r3, #32]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	0a5b      	lsrs	r3, r3, #9
 8008c70:	4413      	add	r3, r2
 8008c72:	4619      	mov	r1, r3
 8008c74:	6938      	ldr	r0, [r7, #16]
 8008c76:	f7ff ff6d 	bl	8008b54 <move_window>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d152      	bne.n	8008d26 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <get_fat+0xba>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	091b      	lsrs	r3, r3, #4
 8008ca4:	e002      	b.n	8008cac <get_fat+0xc0>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cac:	617b      	str	r3, [r7, #20]
			break;
 8008cae:	e03f      	b.n	8008d30 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6a1a      	ldr	r2, [r3, #32]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	4413      	add	r3, r2
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6938      	ldr	r0, [r7, #16]
 8008cbe:	f7ff ff49 	bl	8008b54 <move_window>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d130      	bne.n	8008d2a <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008cd6:	4413      	add	r3, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fcc7 	bl	800866c <ld_word>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	617b      	str	r3, [r7, #20]
			break;
 8008ce2:	e025      	b.n	8008d30 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6a1a      	ldr	r2, [r3, #32]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	09db      	lsrs	r3, r3, #7
 8008cec:	4413      	add	r3, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6938      	ldr	r0, [r7, #16]
 8008cf2:	f7ff ff2f 	bl	8008b54 <move_window>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d118      	bne.n	8008d2e <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008d0a:	4413      	add	r3, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fcc5 	bl	800869c <ld_dword>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d18:	617b      	str	r3, [r7, #20]
			break;
 8008d1a:	e009      	b.n	8008d30 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e006      	b.n	8008d30 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d22:	bf00      	nop
 8008d24:	e004      	b.n	8008d30 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d26:	bf00      	nop
 8008d28:	e002      	b.n	8008d30 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d2a:	bf00      	nop
 8008d2c:	e000      	b.n	8008d30 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d2e:	bf00      	nop
		}
	}

	return val;
 8008d30:	697b      	ldr	r3, [r7, #20]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d3a:	b590      	push	{r4, r7, lr}
 8008d3c:	b089      	sub	sp, #36	@ 0x24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d46:	2302      	movs	r3, #2
 8008d48:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	f240 80d9 	bls.w	8008f04 <put_fat+0x1ca>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	f080 80d3 	bcs.w	8008f04 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	f000 8096 	beq.w	8008e94 <put_fat+0x15a>
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	f300 80cb 	bgt.w	8008f04 <put_fat+0x1ca>
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d002      	beq.n	8008d78 <put_fat+0x3e>
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d06e      	beq.n	8008e54 <put_fat+0x11a>
 8008d76:	e0c5      	b.n	8008f04 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	085b      	lsrs	r3, r3, #1
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4413      	add	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1a      	ldr	r2, [r3, #32]
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	4413      	add	r3, r2
 8008d90:	4619      	mov	r1, r3
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fede 	bl	8008b54 <move_window>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d9c:	7ffb      	ldrb	r3, [r7, #31]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 80a9 	bne.w	8008ef6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	1c59      	adds	r1, r3, #1
 8008dae:	61b9      	str	r1, [r7, #24]
 8008db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db4:	4413      	add	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00d      	beq.n	8008dde <put_fat+0xa4>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	b25b      	sxtb	r3, r3
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	b25a      	sxtb	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	e001      	b.n	8008de2 <put_fat+0xa8>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1a      	ldr	r2, [r3, #32]
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	0a5b      	lsrs	r3, r3, #9
 8008df4:	4413      	add	r3, r2
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff feab 	bl	8008b54 <move_window>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e02:	7ffb      	ldrb	r3, [r7, #31]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d178      	bne.n	8008efa <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e14:	4413      	add	r3, r2
 8008e16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <put_fat+0xf0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	e00e      	b.n	8008e48 <put_fat+0x10e>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b25b      	sxtb	r3, r3
 8008e30:	f023 030f 	bic.w	r3, r3, #15
 8008e34:	b25a      	sxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	4313      	orrs	r3, r2
 8008e44:	b25b      	sxtb	r3, r3
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	70da      	strb	r2, [r3, #3]
			break;
 8008e52:	e057      	b.n	8008f04 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4619      	mov	r1, r3
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7ff fe77 	bl	8008b54 <move_window>
 8008e66:	4603      	mov	r3, r0
 8008e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d146      	bne.n	8008efe <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008e7e:	4413      	add	r3, r2
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	b292      	uxth	r2, r2
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7ff fc2b 	bl	80086e2 <st_word>
			fs->wflag = 1;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	70da      	strb	r2, [r3, #3]
			break;
 8008e92:	e037      	b.n	8008f04 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	09db      	lsrs	r3, r3, #7
 8008e9c:	4413      	add	r3, r2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fe57 	bl	8008b54 <move_window>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eaa:	7ffb      	ldrb	r3, [r7, #31]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d128      	bne.n	8008f02 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ec4:	4413      	add	r3, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fbe8 	bl	800869c <ld_dword>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008ed2:	4323      	orrs	r3, r4
 8008ed4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ee4:	4413      	add	r3, r2
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fc15 	bl	8008718 <st_dword>
			fs->wflag = 1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	70da      	strb	r2, [r3, #3]
			break;
 8008ef4:	e006      	b.n	8008f04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f02:	bf00      	nop
		}
	}
	return res;
 8008f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3724      	adds	r7, #36	@ 0x24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd90      	pop	{r4, r7, pc}

08008f0e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d904      	bls.n	8008f34 <remove_chain+0x26>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d301      	bcc.n	8008f38 <remove_chain+0x2a>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e04b      	b.n	8008fd0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	69b8      	ldr	r0, [r7, #24]
 8008f46:	f7ff fef8 	bl	8008d3a <put_fat>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f4e:	7ffb      	ldrb	r3, [r7, #31]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <remove_chain+0x4a>
 8008f54:	7ffb      	ldrb	r3, [r7, #31]
 8008f56:	e03b      	b.n	8008fd0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fe46 	bl	8008bec <get_fat>
 8008f60:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d031      	beq.n	8008fcc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <remove_chain+0x64>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e02e      	b.n	8008fd0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d101      	bne.n	8008f7e <remove_chain+0x70>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e028      	b.n	8008fd0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f7e:	2200      	movs	r2, #0
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	69b8      	ldr	r0, [r7, #24]
 8008f84:	f7ff fed9 	bl	8008d3a <put_fat>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008f8c:	7ffb      	ldrb	r3, [r7, #31]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <remove_chain+0x88>
 8008f92:	7ffb      	ldrb	r3, [r7, #31]
 8008f94:	e01c      	b.n	8008fd0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	691a      	ldr	r2, [r3, #16]
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	3b02      	subs	r3, #2
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d20b      	bcs.n	8008fbc <remove_chain+0xae>
			fs->free_clst++;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	791b      	ldrb	r3, [r3, #4]
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d3c6      	bcc.n	8008f58 <remove_chain+0x4a>
 8008fca:	e000      	b.n	8008fce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008fcc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10d      	bne.n	800900a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <create_chain+0x2c>
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	429a      	cmp	r2, r3
 8009002:	d31b      	bcc.n	800903c <create_chain+0x64>
 8009004:	2301      	movs	r3, #1
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e018      	b.n	800903c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fded 	bl	8008bec <get_fat>
 8009012:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d801      	bhi.n	800901e <create_chain+0x46>
 800901a:	2301      	movs	r3, #1
 800901c:	e070      	b.n	8009100 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d101      	bne.n	800902a <create_chain+0x52>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e06a      	b.n	8009100 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	429a      	cmp	r2, r3
 8009032:	d201      	bcs.n	8009038 <create_chain+0x60>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	e063      	b.n	8009100 <create_chain+0x128>
		scl = clst;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	3301      	adds	r3, #1
 8009044:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	429a      	cmp	r2, r3
 800904e:	d307      	bcc.n	8009060 <create_chain+0x88>
				ncl = 2;
 8009050:	2302      	movs	r3, #2
 8009052:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	429a      	cmp	r2, r3
 800905a:	d901      	bls.n	8009060 <create_chain+0x88>
 800905c:	2300      	movs	r3, #0
 800905e:	e04f      	b.n	8009100 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009060:	69f9      	ldr	r1, [r7, #28]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fdc2 	bl	8008bec <get_fat>
 8009068:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00e      	beq.n	800908e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d003      	beq.n	800907e <create_chain+0xa6>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d101      	bne.n	8009082 <create_chain+0xaa>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	e03e      	b.n	8009100 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	429a      	cmp	r2, r3
 8009088:	d1da      	bne.n	8009040 <create_chain+0x68>
 800908a:	2300      	movs	r3, #0
 800908c:	e038      	b.n	8009100 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800908e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	69f9      	ldr	r1, [r7, #28]
 8009096:	6938      	ldr	r0, [r7, #16]
 8009098:	f7ff fe4f 	bl	8008d3a <put_fat>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <create_chain+0xe2>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d006      	beq.n	80090ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6938      	ldr	r0, [r7, #16]
 80090b2:	f7ff fe42 	bl	8008d3a <put_fat>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d116      	bne.n	80090ee <create_chain+0x116>
		fs->last_clst = ncl;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	3b02      	subs	r3, #2
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d804      	bhi.n	80090de <create_chain+0x106>
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	791b      	ldrb	r3, [r3, #4]
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	711a      	strb	r2, [r3, #4]
 80090ec:	e007      	b.n	80090fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d102      	bne.n	80090fa <create_chain+0x122>
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	e000      	b.n	80090fc <create_chain+0x124>
 80090fa:	2301      	movs	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80090fe:	69fb      	ldr	r3, [r7, #28]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3720      	adds	r7, #32
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800911e:	d204      	bcs.n	800912a <dir_sdi+0x22>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f003 031f 	and.w	r3, r3, #31
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <dir_sdi+0x26>
		return FR_INT_ERR;
 800912a:	2302      	movs	r3, #2
 800912c:	e063      	b.n	80091f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <dir_sdi+0x46>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d902      	bls.n	800914e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10c      	bne.n	800916e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	8912      	ldrh	r2, [r2, #8]
 800915c:	4293      	cmp	r3, r2
 800915e:	d301      	bcc.n	8009164 <dir_sdi+0x5c>
 8009160:	2302      	movs	r3, #2
 8009162:	e048      	b.n	80091f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	61da      	str	r2, [r3, #28]
 800916c:	e029      	b.n	80091c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	895b      	ldrh	r3, [r3, #10]
 8009172:	025b      	lsls	r3, r3, #9
 8009174:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009176:	e019      	b.n	80091ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6979      	ldr	r1, [r7, #20]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fd35 	bl	8008bec <get_fat>
 8009182:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918a:	d101      	bne.n	8009190 <dir_sdi+0x88>
 800918c:	2301      	movs	r3, #1
 800918e:	e032      	b.n	80091f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d904      	bls.n	80091a0 <dir_sdi+0x98>
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	429a      	cmp	r2, r3
 800919e:	d301      	bcc.n	80091a4 <dir_sdi+0x9c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e028      	b.n	80091f6 <dir_sdi+0xee>
			ofs -= csz;
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d2e1      	bcs.n	8009178 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80091b4:	6979      	ldr	r1, [r7, #20]
 80091b6:	6938      	ldr	r0, [r7, #16]
 80091b8:	f7ff fcf9 	bl	8008bae <clust2sect>
 80091bc:	4602      	mov	r2, r0
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <dir_sdi+0xcc>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e010      	b.n	80091f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	0a5b      	lsrs	r3, r3, #9
 80091dc:	441a      	add	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	441a      	add	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3718      	adds	r7, #24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	3320      	adds	r3, #32
 8009214:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <dir_next+0x28>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009224:	d301      	bcc.n	800922a <dir_next+0x2c>
 8009226:	2304      	movs	r3, #4
 8009228:	e0aa      	b.n	8009380 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8098 	bne.w	8009366 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	095b      	lsrs	r3, r3, #5
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	8912      	ldrh	r2, [r2, #8]
 8009250:	4293      	cmp	r3, r2
 8009252:	f0c0 8088 	bcc.w	8009366 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	61da      	str	r2, [r3, #28]
 800925c:	2304      	movs	r3, #4
 800925e:	e08f      	b.n	8009380 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	0a5b      	lsrs	r3, r3, #9
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	8952      	ldrh	r2, [r2, #10]
 8009268:	3a01      	subs	r2, #1
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d17a      	bne.n	8009366 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	4619      	mov	r1, r3
 8009278:	4610      	mov	r0, r2
 800927a:	f7ff fcb7 	bl	8008bec <get_fat>
 800927e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d801      	bhi.n	800928a <dir_next+0x8c>
 8009286:	2302      	movs	r3, #2
 8009288:	e07a      	b.n	8009380 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009290:	d101      	bne.n	8009296 <dir_next+0x98>
 8009292:	2301      	movs	r3, #1
 8009294:	e074      	b.n	8009380 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	429a      	cmp	r2, r3
 800929e:	d358      	bcc.n	8009352 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	61da      	str	r2, [r3, #28]
 80092ac:	2304      	movs	r3, #4
 80092ae:	e067      	b.n	8009380 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f7ff fe8d 	bl	8008fd8 <create_chain>
 80092be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <dir_next+0xcc>
 80092c6:	2307      	movs	r3, #7
 80092c8:	e05a      	b.n	8009380 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <dir_next+0xd6>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e055      	b.n	8009380 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092da:	d101      	bne.n	80092e0 <dir_next+0xe2>
 80092dc:	2301      	movs	r3, #1
 80092de:	e04f      	b.n	8009380 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fbf3 	bl	8008acc <sync_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <dir_next+0xf2>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e047      	b.n	8009380 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3330      	adds	r3, #48	@ 0x30
 80092f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092f8:	2100      	movs	r1, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fa59 	bl	80087b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009300:	2300      	movs	r3, #0
 8009302:	613b      	str	r3, [r7, #16]
 8009304:	6979      	ldr	r1, [r7, #20]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7ff fc51 	bl	8008bae <clust2sect>
 800930c:	4602      	mov	r2, r0
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009312:	e012      	b.n	800933a <dir_next+0x13c>
						fs->wflag = 1;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff fbd6 	bl	8008acc <sync_window>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <dir_next+0x12c>
 8009326:	2301      	movs	r3, #1
 8009328:	e02a      	b.n	8009380 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3301      	adds	r3, #1
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	62da      	str	r2, [r3, #44]	@ 0x2c
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	895b      	ldrh	r3, [r3, #10]
 800933e:	461a      	mov	r2, r3
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4293      	cmp	r3, r2
 8009344:	d3e6      	bcc.n	8009314 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad2      	subs	r2, r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fc27 	bl	8008bae <clust2sect>
 8009360:	4602      	mov	r2, r0
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009378:	441a      	add	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff feb4 	bl	8009108 <dir_sdi>
 80093a0:	4603      	mov	r3, r0
 80093a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d12b      	bne.n	8009402 <dir_alloc+0x7a>
		n = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	4619      	mov	r1, r3
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fbcd 	bl	8008b54 <move_window>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d11d      	bne.n	8009400 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2be5      	cmp	r3, #229	@ 0xe5
 80093cc:	d004      	beq.n	80093d8 <dir_alloc+0x50>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d107      	bne.n	80093e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	3301      	adds	r3, #1
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d102      	bne.n	80093ec <dir_alloc+0x64>
 80093e6:	e00c      	b.n	8009402 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80093e8:	2300      	movs	r3, #0
 80093ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80093ec:	2101      	movs	r1, #1
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff ff05 	bl	80091fe <dir_next>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0d7      	beq.n	80093ae <dir_alloc+0x26>
 80093fe:	e000      	b.n	8009402 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009400:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b04      	cmp	r3, #4
 8009406:	d101      	bne.n	800940c <dir_alloc+0x84>
 8009408:	2307      	movs	r3, #7
 800940a:	75fb      	strb	r3, [r7, #23]
	return res;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	331a      	adds	r3, #26
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff f921 	bl	800866c <ld_word>
 800942a:	4603      	mov	r3, r0
 800942c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b03      	cmp	r3, #3
 8009434:	d109      	bne.n	800944a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	3314      	adds	r3, #20
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff f916 	bl	800866c <ld_word>
 8009440:	4603      	mov	r3, r0
 8009442:	041b      	lsls	r3, r3, #16
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	331a      	adds	r3, #26
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	b292      	uxth	r2, r2
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff f939 	bl	80086e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d109      	bne.n	800948c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f103 0214 	add.w	r2, r3, #20
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	b29b      	uxth	r3, r3
 8009484:	4619      	mov	r1, r3
 8009486:	4610      	mov	r0, r2
 8009488:	f7ff f92b 	bl	80086e2 <st_word>
	}
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80094a2:	2100      	movs	r1, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff fe2f 	bl	8009108 <dir_sdi>
 80094aa:	4603      	mov	r3, r0
 80094ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <dir_find+0x24>
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
 80094b6:	e03e      	b.n	8009536 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	4619      	mov	r1, r3
 80094be:	6938      	ldr	r0, [r7, #16]
 80094c0:	f7ff fb48 	bl	8008b54 <move_window>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d12f      	bne.n	800952e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <dir_find+0x4e>
 80094dc:	2304      	movs	r3, #4
 80094de:	75fb      	strb	r3, [r7, #23]
 80094e0:	e028      	b.n	8009534 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	330b      	adds	r3, #11
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	330b      	adds	r3, #11
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <dir_find+0x86>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a18      	ldr	r0, [r3, #32]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3324      	adds	r3, #36	@ 0x24
 800950c:	220b      	movs	r2, #11
 800950e:	4619      	mov	r1, r3
 8009510:	f7ff f96a 	bl	80087e8 <mem_cmp>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff fe6e 	bl	80091fe <dir_next>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0c5      	beq.n	80094b8 <dir_find+0x24>
 800952c:	e002      	b.n	8009534 <dir_find+0xa0>
		if (res != FR_OK) break;
 800952e:	bf00      	nop
 8009530:	e000      	b.n	8009534 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009532:	bf00      	nop

	return res;
 8009534:	7dfb      	ldrb	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800954c:	2101      	movs	r1, #1
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff ff1a 	bl	8009388 <dir_alloc>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d11c      	bne.n	8009598 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	4619      	mov	r1, r3
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f7ff faf5 	bl	8008b54 <move_window>
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d111      	bne.n	8009598 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	2220      	movs	r2, #32
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff f918 	bl	80087b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a18      	ldr	r0, [r3, #32]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3324      	adds	r3, #36	@ 0x24
 800958a:	220b      	movs	r2, #11
 800958c:	4619      	mov	r1, r3
 800958e:	f7ff f8ef 	bl	8008770 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2201      	movs	r2, #1
 8009596:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3324      	adds	r3, #36	@ 0x24
 80095b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80095ba:	220b      	movs	r2, #11
 80095bc:	2120      	movs	r1, #32
 80095be:	68b8      	ldr	r0, [r7, #8]
 80095c0:	f7ff f8f7 	bl	80087b2 <mem_set>
	si = i = 0; ni = 8;
 80095c4:	2300      	movs	r3, #0
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	61fb      	str	r3, [r7, #28]
 80095cc:	2308      	movs	r3, #8
 80095ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	61fa      	str	r2, [r7, #28]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80095de:	7efb      	ldrb	r3, [r7, #27]
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d94e      	bls.n	8009682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80095e4:	7efb      	ldrb	r3, [r7, #27]
 80095e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80095e8:	d006      	beq.n	80095f8 <create_name+0x54>
 80095ea:	7efb      	ldrb	r3, [r7, #27]
 80095ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80095ee:	d110      	bne.n	8009612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80095f0:	e002      	b.n	80095f8 <create_name+0x54>
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	3301      	adds	r3, #1
 80095f6:	61fb      	str	r3, [r7, #28]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b2f      	cmp	r3, #47	@ 0x2f
 8009602:	d0f6      	beq.n	80095f2 <create_name+0x4e>
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	4413      	add	r3, r2
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b5c      	cmp	r3, #92	@ 0x5c
 800960e:	d0f0      	beq.n	80095f2 <create_name+0x4e>
			break;
 8009610:	e038      	b.n	8009684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009612:	7efb      	ldrb	r3, [r7, #27]
 8009614:	2b2e      	cmp	r3, #46	@ 0x2e
 8009616:	d003      	beq.n	8009620 <create_name+0x7c>
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	429a      	cmp	r2, r3
 800961e:	d30c      	bcc.n	800963a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b0b      	cmp	r3, #11
 8009624:	d002      	beq.n	800962c <create_name+0x88>
 8009626:	7efb      	ldrb	r3, [r7, #27]
 8009628:	2b2e      	cmp	r3, #46	@ 0x2e
 800962a:	d001      	beq.n	8009630 <create_name+0x8c>
 800962c:	2306      	movs	r3, #6
 800962e:	e044      	b.n	80096ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009630:	2308      	movs	r3, #8
 8009632:	613b      	str	r3, [r7, #16]
 8009634:	230b      	movs	r3, #11
 8009636:	617b      	str	r3, [r7, #20]
			continue;
 8009638:	e022      	b.n	8009680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800963a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da04      	bge.n	800964c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009642:	7efb      	ldrb	r3, [r7, #27]
 8009644:	3b80      	subs	r3, #128	@ 0x80
 8009646:	4a1f      	ldr	r2, [pc, #124]	@ (80096c4 <create_name+0x120>)
 8009648:	5cd3      	ldrb	r3, [r2, r3]
 800964a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800964c:	7efb      	ldrb	r3, [r7, #27]
 800964e:	4619      	mov	r1, r3
 8009650:	481d      	ldr	r0, [pc, #116]	@ (80096c8 <create_name+0x124>)
 8009652:	f7ff f8f0 	bl	8008836 <chk_chr>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <create_name+0xbc>
 800965c:	2306      	movs	r3, #6
 800965e:	e02c      	b.n	80096ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009660:	7efb      	ldrb	r3, [r7, #27]
 8009662:	2b60      	cmp	r3, #96	@ 0x60
 8009664:	d905      	bls.n	8009672 <create_name+0xce>
 8009666:	7efb      	ldrb	r3, [r7, #27]
 8009668:	2b7a      	cmp	r3, #122	@ 0x7a
 800966a:	d802      	bhi.n	8009672 <create_name+0xce>
 800966c:	7efb      	ldrb	r3, [r7, #27]
 800966e:	3b20      	subs	r3, #32
 8009670:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	613a      	str	r2, [r7, #16]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	4413      	add	r3, r2
 800967c:	7efa      	ldrb	r2, [r7, #27]
 800967e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009680:	e7a6      	b.n	80095d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	441a      	add	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <create_name+0xf4>
 8009694:	2306      	movs	r3, #6
 8009696:	e010      	b.n	80096ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2be5      	cmp	r3, #229	@ 0xe5
 800969e:	d102      	bne.n	80096a6 <create_name+0x102>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2205      	movs	r2, #5
 80096a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80096a6:	7efb      	ldrb	r3, [r7, #27]
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	d801      	bhi.n	80096b0 <create_name+0x10c>
 80096ac:	2204      	movs	r2, #4
 80096ae:	e000      	b.n	80096b2 <create_name+0x10e>
 80096b0:	2200      	movs	r2, #0
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	330b      	adds	r3, #11
 80096b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80096b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	0800ab64 	.word	0x0800ab64
 80096c8:	0800aafc 	.word	0x0800aafc

080096cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80096e0:	e002      	b.n	80096e8 <follow_path+0x1c>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	603b      	str	r3, [r7, #0]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80096ee:	d0f8      	beq.n	80096e2 <follow_path+0x16>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80096f6:	d0f4      	beq.n	80096e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2200      	movs	r2, #0
 80096fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b1f      	cmp	r3, #31
 8009704:	d80a      	bhi.n	800971c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2280      	movs	r2, #128	@ 0x80
 800970a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800970e:	2100      	movs	r1, #0
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff fcf9 	bl	8009108 <dir_sdi>
 8009716:	4603      	mov	r3, r0
 8009718:	75fb      	strb	r3, [r7, #23]
 800971a:	e043      	b.n	80097a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800971c:	463b      	mov	r3, r7
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ff3f 	bl	80095a4 <create_name>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d134      	bne.n	800979a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff feaf 	bl	8009494 <dir_find>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d127      	bne.n	800979e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d122      	bne.n	800979e <follow_path+0xd2>
 8009758:	2305      	movs	r3, #5
 800975a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800975c:	e01f      	b.n	800979e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800975e:	7afb      	ldrb	r3, [r7, #11]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11c      	bne.n	80097a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	799b      	ldrb	r3, [r3, #6]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009774:	2305      	movs	r3, #5
 8009776:	75fb      	strb	r3, [r7, #23]
 8009778:	e014      	b.n	80097a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	4413      	add	r3, r2
 800978a:	4619      	mov	r1, r3
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff fe42 	bl	8009416 <ld_clust>
 8009792:	4602      	mov	r2, r0
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009798:	e7c0      	b.n	800971c <follow_path+0x50>
			if (res != FR_OK) break;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <follow_path+0xd8>
				break;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097a2:	bf00      	nop
			}
		}
	}

	return res;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b087      	sub	sp, #28
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80097b6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d031      	beq.n	8009828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	e002      	b.n	80097d2 <get_ldnumber+0x24>
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	3301      	adds	r3, #1
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b20      	cmp	r3, #32
 80097d8:	d903      	bls.n	80097e2 <get_ldnumber+0x34>
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b3a      	cmp	r3, #58	@ 0x3a
 80097e0:	d1f4      	bne.n	80097cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b3a      	cmp	r3, #58	@ 0x3a
 80097e8:	d11c      	bne.n	8009824 <get_ldnumber+0x76>
			tp = *path;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	60fa      	str	r2, [r7, #12]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	3b30      	subs	r3, #48	@ 0x30
 80097fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d80e      	bhi.n	8009820 <get_ldnumber+0x72>
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	429a      	cmp	r2, r3
 8009808:	d10a      	bne.n	8009820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d107      	bne.n	8009820 <get_ldnumber+0x72>
					vol = (int)i;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	3301      	adds	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	e002      	b.n	800982a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009824:	2300      	movs	r3, #0
 8009826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009828:	693b      	ldr	r3, [r7, #16]
}
 800982a:	4618      	mov	r0, r3
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
	...

08009838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	70da      	strb	r2, [r3, #3]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f04f 32ff 	mov.w	r2, #4294967295
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff f97e 	bl	8008b54 <move_window>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <check_fs+0x2a>
 800985e:	2304      	movs	r3, #4
 8009860:	e038      	b.n	80098d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3330      	adds	r3, #48	@ 0x30
 8009866:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fefe 	bl	800866c <ld_word>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009878:	429a      	cmp	r2, r3
 800987a:	d001      	beq.n	8009880 <check_fs+0x48>
 800987c:	2303      	movs	r3, #3
 800987e:	e029      	b.n	80098d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009886:	2be9      	cmp	r3, #233	@ 0xe9
 8009888:	d009      	beq.n	800989e <check_fs+0x66>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009890:	2beb      	cmp	r3, #235	@ 0xeb
 8009892:	d11e      	bne.n	80098d2 <check_fs+0x9a>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800989a:	2b90      	cmp	r3, #144	@ 0x90
 800989c:	d119      	bne.n	80098d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3330      	adds	r3, #48	@ 0x30
 80098a2:	3336      	adds	r3, #54	@ 0x36
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fef9 	bl	800869c <ld_dword>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80098b0:	4a0a      	ldr	r2, [pc, #40]	@ (80098dc <check_fs+0xa4>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d101      	bne.n	80098ba <check_fs+0x82>
 80098b6:	2300      	movs	r3, #0
 80098b8:	e00c      	b.n	80098d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3330      	adds	r3, #48	@ 0x30
 80098be:	3352      	adds	r3, #82	@ 0x52
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe feeb 	bl	800869c <ld_dword>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4a05      	ldr	r2, [pc, #20]	@ (80098e0 <check_fs+0xa8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d101      	bne.n	80098d2 <check_fs+0x9a>
 80098ce:	2300      	movs	r3, #0
 80098d0:	e000      	b.n	80098d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80098d2:	2302      	movs	r3, #2
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	00544146 	.word	0x00544146
 80098e0:	33544146 	.word	0x33544146

080098e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b096      	sub	sp, #88	@ 0x58
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f7ff ff58 	bl	80097ae <get_ldnumber>
 80098fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009902:	2b00      	cmp	r3, #0
 8009904:	da01      	bge.n	800990a <find_volume+0x26>
 8009906:	230b      	movs	r3, #11
 8009908:	e22d      	b.n	8009d66 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800990a:	4aa1      	ldr	r2, [pc, #644]	@ (8009b90 <find_volume+0x2ac>)
 800990c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009912:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <find_volume+0x3a>
 800991a:	230c      	movs	r3, #12
 800991c:	e223      	b.n	8009d66 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01a      	beq.n	800996a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe fdf7 	bl	800852c <disk_status>
 800993e:	4603      	mov	r3, r0
 8009940:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009944:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10c      	bne.n	800996a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <find_volume+0x82>
 8009956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009962:	230a      	movs	r3, #10
 8009964:	e1ff      	b.n	8009d66 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009966:	2300      	movs	r3, #0
 8009968:	e1fd      	b.n	8009d66 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800996a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009972:	b2da      	uxtb	r2, r3
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fdef 	bl	8008560 <disk_initialize>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009988:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009994:	2303      	movs	r3, #3
 8009996:	e1e6      	b.n	8009d66 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <find_volume+0xca>
 800999e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80099a2:	f003 0304 	and.w	r3, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80099aa:	230a      	movs	r3, #10
 80099ac:	e1db      	b.n	8009d66 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80099b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099b6:	f7ff ff3f 	bl	8009838 <check_fs>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80099c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d149      	bne.n	8009a5c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099c8:	2300      	movs	r3, #0
 80099ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80099cc:	e01e      	b.n	8009a0c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80099dc:	4413      	add	r3, r2
 80099de:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	3304      	adds	r3, #4
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d006      	beq.n	80099f8 <find_volume+0x114>
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	3308      	adds	r3, #8
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fe54 	bl	800869c <ld_dword>
 80099f4:	4602      	mov	r2, r0
 80099f6:	e000      	b.n	80099fa <find_volume+0x116>
 80099f8:	2200      	movs	r2, #0
 80099fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	3358      	adds	r3, #88	@ 0x58
 8009a00:	443b      	add	r3, r7
 8009a02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a08:	3301      	adds	r3, #1
 8009a0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d9dd      	bls.n	80099ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a12:	2300      	movs	r3, #0
 8009a14:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <find_volume+0x13e>
 8009a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	3358      	adds	r3, #88	@ 0x58
 8009a28:	443b      	add	r3, r7
 8009a2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a2e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <find_volume+0x15e>
 8009a36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a3a:	f7ff fefd 	bl	8009838 <check_fs>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	e000      	b.n	8009a44 <find_volume+0x160>
 8009a42:	2303      	movs	r3, #3
 8009a44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009a48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d905      	bls.n	8009a5c <find_volume+0x178>
 8009a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a52:	3301      	adds	r3, #1
 8009a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d9e2      	bls.n	8009a22 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a60:	2b04      	cmp	r3, #4
 8009a62:	d101      	bne.n	8009a68 <find_volume+0x184>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e17e      	b.n	8009d66 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d901      	bls.n	8009a74 <find_volume+0x190>
 8009a70:	230d      	movs	r3, #13
 8009a72:	e178      	b.n	8009d66 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	3330      	adds	r3, #48	@ 0x30
 8009a78:	330b      	adds	r3, #11
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fdf6 	bl	800866c <ld_word>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a86:	d001      	beq.n	8009a8c <find_volume+0x1a8>
 8009a88:	230d      	movs	r3, #13
 8009a8a:	e16c      	b.n	8009d66 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	3330      	adds	r3, #48	@ 0x30
 8009a90:	3316      	adds	r3, #22
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe fdea 	bl	800866c <ld_word>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <find_volume+0x1cc>
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	3330      	adds	r3, #48	@ 0x30
 8009aa6:	3324      	adds	r3, #36	@ 0x24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe fdf7 	bl	800869c <ld_dword>
 8009aae:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ab4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	789b      	ldrb	r3, [r3, #2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d005      	beq.n	8009ad4 <find_volume+0x1f0>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	789b      	ldrb	r3, [r3, #2]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d001      	beq.n	8009ad4 <find_volume+0x1f0>
 8009ad0:	230d      	movs	r3, #13
 8009ad2:	e148      	b.n	8009d66 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	789b      	ldrb	r3, [r3, #2]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009adc:	fb02 f303 	mul.w	r3, r2, r3
 8009ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af0:	895b      	ldrh	r3, [r3, #10]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d008      	beq.n	8009b08 <find_volume+0x224>
 8009af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af8:	895b      	ldrh	r3, [r3, #10]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	895b      	ldrh	r3, [r3, #10]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	4013      	ands	r3, r2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <find_volume+0x228>
 8009b08:	230d      	movs	r3, #13
 8009b0a:	e12c      	b.n	8009d66 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	3330      	adds	r3, #48	@ 0x30
 8009b10:	3311      	adds	r3, #17
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fdaa 	bl	800866c <ld_word>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	891b      	ldrh	r3, [r3, #8]
 8009b24:	f003 030f 	and.w	r3, r3, #15
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <find_volume+0x24e>
 8009b2e:	230d      	movs	r3, #13
 8009b30:	e119      	b.n	8009d66 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b34:	3330      	adds	r3, #48	@ 0x30
 8009b36:	3313      	adds	r3, #19
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe fd97 	bl	800866c <ld_word>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <find_volume+0x272>
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	3330      	adds	r3, #48	@ 0x30
 8009b4c:	3320      	adds	r3, #32
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fda4 	bl	800869c <ld_dword>
 8009b54:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	3330      	adds	r3, #48	@ 0x30
 8009b5a:	330e      	adds	r3, #14
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe fd85 	bl	800866c <ld_word>
 8009b62:	4603      	mov	r3, r0
 8009b64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <find_volume+0x28c>
 8009b6c:	230d      	movs	r3, #13
 8009b6e:	e0fa      	b.n	8009d66 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b74:	4413      	add	r3, r2
 8009b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b78:	8912      	ldrh	r2, [r2, #8]
 8009b7a:	0912      	lsrs	r2, r2, #4
 8009b7c:	b292      	uxth	r2, r2
 8009b7e:	4413      	add	r3, r2
 8009b80:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d204      	bcs.n	8009b94 <find_volume+0x2b0>
 8009b8a:	230d      	movs	r3, #13
 8009b8c:	e0eb      	b.n	8009d66 <find_volume+0x482>
 8009b8e:	bf00      	nop
 8009b90:	240007b4 	.word	0x240007b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b9c:	8952      	ldrh	r2, [r2, #10]
 8009b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <find_volume+0x2ca>
 8009baa:	230d      	movs	r3, #13
 8009bac:	e0db      	b.n	8009d66 <find_volume+0x482>
		fmt = FS_FAT32;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d802      	bhi.n	8009bc4 <find_volume+0x2e0>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d802      	bhi.n	8009bd4 <find_volume+0x2f0>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	1c9a      	adds	r2, r3, #2
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009be0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009be2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009be6:	441a      	add	r2, r3
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009bec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	441a      	add	r2, r3
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d11e      	bne.n	8009c3c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	3330      	adds	r3, #48	@ 0x30
 8009c02:	332a      	adds	r3, #42	@ 0x2a
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fd31 	bl	800866c <ld_word>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <find_volume+0x330>
 8009c10:	230d      	movs	r3, #13
 8009c12:	e0a8      	b.n	8009d66 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	891b      	ldrh	r3, [r3, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <find_volume+0x33c>
 8009c1c:	230d      	movs	r3, #13
 8009c1e:	e0a2      	b.n	8009d66 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	3330      	adds	r3, #48	@ 0x30
 8009c24:	332c      	adds	r3, #44	@ 0x2c
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe fd38 	bl	800869c <ld_dword>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c3a:	e01f      	b.n	8009c7c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	891b      	ldrh	r3, [r3, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <find_volume+0x364>
 8009c44:	230d      	movs	r3, #13
 8009c46:	e08e      	b.n	8009d66 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c4e:	441a      	add	r2, r3
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d103      	bne.n	8009c64 <find_volume+0x380>
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	e00a      	b.n	8009c7a <find_volume+0x396>
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	695a      	ldr	r2, [r3, #20]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	4413      	add	r3, r2
 8009c6e:	085a      	lsrs	r2, r3, #1
 8009c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c7a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c82:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009c86:	0a5b      	lsrs	r3, r3, #9
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d201      	bcs.n	8009c90 <find_volume+0x3ac>
 8009c8c:	230d      	movs	r3, #13
 8009c8e:	e06a      	b.n	8009d66 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c92:	f04f 32ff 	mov.w	r2, #4294967295
 8009c96:	611a      	str	r2, [r3, #16]
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca2:	2280      	movs	r2, #128	@ 0x80
 8009ca4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d149      	bne.n	8009d42 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb0:	3330      	adds	r3, #48	@ 0x30
 8009cb2:	3330      	adds	r3, #48	@ 0x30
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fcd9 	bl	800866c <ld_word>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d140      	bne.n	8009d42 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009cc8:	f7fe ff44 	bl	8008b54 <move_window>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d137      	bne.n	8009d42 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	3330      	adds	r3, #48	@ 0x30
 8009cdc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fcc3 	bl	800866c <ld_word>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d127      	bne.n	8009d42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf4:	3330      	adds	r3, #48	@ 0x30
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fcd0 	bl	800869c <ld_dword>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8009d70 <find_volume+0x48c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d11e      	bne.n	8009d42 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	3330      	adds	r3, #48	@ 0x30
 8009d08:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe fcc5 	bl	800869c <ld_dword>
 8009d12:	4603      	mov	r3, r0
 8009d14:	4a17      	ldr	r2, [pc, #92]	@ (8009d74 <find_volume+0x490>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d113      	bne.n	8009d42 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	3330      	adds	r3, #48	@ 0x30
 8009d1e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fcba 	bl	800869c <ld_dword>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	3330      	adds	r3, #48	@ 0x30
 8009d32:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fcb0 	bl	800869c <ld_dword>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009d48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d78 <find_volume+0x494>)
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	4b09      	ldr	r3, [pc, #36]	@ (8009d78 <find_volume+0x494>)
 8009d54:	801a      	strh	r2, [r3, #0]
 8009d56:	4b08      	ldr	r3, [pc, #32]	@ (8009d78 <find_volume+0x494>)
 8009d58:	881a      	ldrh	r2, [r3, #0]
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d60:	f7fe fe90 	bl	8008a84 <clear_lock>
#endif
	return FR_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3758      	adds	r7, #88	@ 0x58
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	41615252 	.word	0x41615252
 8009d74:	61417272 	.word	0x61417272
 8009d78:	240007b8 	.word	0x240007b8

08009d7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4613      	mov	r3, r2
 8009d88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009d8e:	f107 0310 	add.w	r3, r7, #16
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fd0b 	bl	80097ae <get_ldnumber>
 8009d98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da01      	bge.n	8009da4 <f_mount+0x28>
 8009da0:	230b      	movs	r3, #11
 8009da2:	e02b      	b.n	8009dfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009da4:	4a17      	ldr	r2, [pc, #92]	@ (8009e04 <f_mount+0x88>)
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009db4:	69b8      	ldr	r0, [r7, #24]
 8009db6:	f7fe fe65 	bl	8008a84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	490d      	ldr	r1, [pc, #52]	@ (8009e04 <f_mount+0x88>)
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <f_mount+0x66>
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d001      	beq.n	8009de6 <f_mount+0x6a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	e00a      	b.n	8009dfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009de6:	f107 010c 	add.w	r1, r7, #12
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	2200      	movs	r2, #0
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fd77 	bl	80098e4 <find_volume>
 8009df6:	4603      	mov	r3, r0
 8009df8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3720      	adds	r7, #32
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	240007b4 	.word	0x240007b4

08009e08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b098      	sub	sp, #96	@ 0x60
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <f_open+0x18>
 8009e1c:	2309      	movs	r3, #9
 8009e1e:	e1a9      	b.n	800a174 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e28:	79fa      	ldrb	r2, [r7, #7]
 8009e2a:	f107 0110 	add.w	r1, r7, #16
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fd56 	bl	80098e4 <find_volume>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f040 818d 	bne.w	800a162 <f_open+0x35a>
		dj.obj.fs = fs;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	f107 0314 	add.w	r3, r7, #20
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fc39 	bl	80096cc <follow_path>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d118      	bne.n	8009e9a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e6c:	b25b      	sxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da03      	bge.n	8009e7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e72:	2306      	movs	r3, #6
 8009e74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009e78:	e00f      	b.n	8009e9a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	bf8c      	ite	hi
 8009e80:	2301      	movhi	r3, #1
 8009e82:	2300      	movls	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	f107 0314 	add.w	r3, r7, #20
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fcec 	bl	800886c <chk_lock>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	f003 031c 	and.w	r3, r3, #28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d07f      	beq.n	8009fa4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009eac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d10e      	bne.n	8009ed2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009eb4:	f7fe fd36 	bl	8008924 <enq_lock>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d006      	beq.n	8009ecc <f_open+0xc4>
 8009ebe:	f107 0314 	add.w	r3, r7, #20
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7ff fb3b 	bl	800953e <dir_register>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	e000      	b.n	8009ece <f_open+0xc6>
 8009ecc:	2312      	movs	r3, #18
 8009ece:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	f043 0308 	orr.w	r3, r3, #8
 8009ed8:	71fb      	strb	r3, [r7, #7]
 8009eda:	e010      	b.n	8009efe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009edc:	7ebb      	ldrb	r3, [r7, #26]
 8009ede:	f003 0311 	and.w	r3, r3, #17
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <f_open+0xe6>
					res = FR_DENIED;
 8009ee6:	2307      	movs	r3, #7
 8009ee8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009eec:	e007      	b.n	8009efe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <f_open+0xf6>
 8009ef8:	2308      	movs	r3, #8
 8009efa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009efe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d168      	bne.n	8009fd8 <f_open+0x1d0>
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d063      	beq.n	8009fd8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009f10:	f7fe f8ce 	bl	80080b0 <get_fattime>
 8009f14:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f18:	330e      	adds	r3, #14
 8009f1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fbfb 	bl	8008718 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f24:	3316      	adds	r3, #22
 8009f26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe fbf5 	bl	8008718 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f30:	330b      	adds	r3, #11
 8009f32:	2220      	movs	r2, #32
 8009f34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff fa6a 	bl	8009416 <ld_clust>
 8009f42:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fa82 	bl	8009454 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f52:	331c      	adds	r3, #28
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fbde 	bl	8008718 <st_dword>
					fs->wflag = 1;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d037      	beq.n	8009fd8 <f_open+0x1d0>
						dw = fs->winsect;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009f6e:	f107 0314 	add.w	r3, r7, #20
 8009f72:	2200      	movs	r2, #0
 8009f74:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe ffc9 	bl	8008f0e <remove_chain>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009f82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d126      	bne.n	8009fd8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fde0 	bl	8008b54 <move_window>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	60da      	str	r2, [r3, #12]
 8009fa2:	e019      	b.n	8009fd8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d115      	bne.n	8009fd8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009fac:	7ebb      	ldrb	r3, [r7, #26]
 8009fae:	f003 0310 	and.w	r3, r3, #16
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <f_open+0x1b6>
					res = FR_NO_FILE;
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009fbc:	e00c      	b.n	8009fd8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d007      	beq.n	8009fd8 <f_open+0x1d0>
 8009fc8:	7ebb      	ldrb	r3, [r7, #26]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <f_open+0x1d0>
						res = FR_DENIED;
 8009fd2:	2307      	movs	r3, #7
 8009fd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d126      	bne.n	800a02e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a000:	79fb      	ldrb	r3, [r7, #7]
 800a002:	2b01      	cmp	r3, #1
 800a004:	bf8c      	ite	hi
 800a006:	2301      	movhi	r3, #1
 800a008:	2300      	movls	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fca7 	bl	8008968 <inc_lock>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <f_open+0x226>
 800a028:	2302      	movs	r3, #2
 800a02a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a02e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a032:	2b00      	cmp	r3, #0
 800a034:	f040 8095 	bne.w	800a162 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a03c:	4611      	mov	r1, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff f9e9 	bl	8009416 <ld_clust>
 800a044:	4602      	mov	r2, r0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04c:	331c      	adds	r3, #28
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fb24 	bl	800869c <ld_dword>
 800a054:	4602      	mov	r2, r0
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	88da      	ldrh	r2, [r3, #6]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3330      	adds	r3, #48	@ 0x30
 800a08a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe fb8e 	bl	80087b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d060      	beq.n	800a162 <f_open+0x35a>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d05c      	beq.n	800a162 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	895b      	ldrh	r3, [r3, #10]
 800a0b4:	025b      	lsls	r3, r3, #9
 800a0b6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0c4:	e016      	b.n	800a0f4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fd8e 	bl	8008bec <get_fat>
 800a0d0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a0d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d802      	bhi.n	800a0de <f_open+0x2d6>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a0de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d102      	bne.n	800a0ec <f_open+0x2e4>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a0ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <f_open+0x2fc>
 800a0fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a100:	429a      	cmp	r2, r3
 800a102:	d8e0      	bhi.n	800a0c6 <f_open+0x2be>
				}
				fp->clust = clst;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a108:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a10a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d127      	bne.n	800a162 <f_open+0x35a>
 800a112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d022      	beq.n	800a162 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fd44 	bl	8008bae <clust2sect>
 800a126:	6478      	str	r0, [r7, #68]	@ 0x44
 800a128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <f_open+0x32e>
						res = FR_INT_ERR;
 800a12e:	2302      	movs	r3, #2
 800a130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a134:	e015      	b.n	800a162 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a138:	0a5a      	lsrs	r2, r3, #9
 800a13a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a13c:	441a      	add	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	7858      	ldrb	r0, [r3, #1]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a1a      	ldr	r2, [r3, #32]
 800a150:	2301      	movs	r3, #1
 800a152:	f7fe fa2d 	bl	80085b0 <disk_read>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <f_open+0x35a>
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a162:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <f_open+0x368>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a170:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a174:	4618      	mov	r0, r3
 800a176:	3760      	adds	r7, #96	@ 0x60
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b09d      	sub	sp, #116	@ 0x74
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	460b      	mov	r3, r1
 800a18a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a18c:	2301      	movs	r3, #1
 800a18e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a194:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fb07 	bl	80097ae <get_ldnumber>
 800a1a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da02      	bge.n	800a1ae <f_mkfs+0x32>
 800a1a8:	230b      	movs	r3, #11
 800a1aa:	f000 bc0d 	b.w	800a9c8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a1ae:	4a94      	ldr	r2, [pc, #592]	@ (800a400 <f_mkfs+0x284>)
 800a1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <f_mkfs+0x4a>
 800a1ba:	4a91      	ldr	r2, [pc, #580]	@ (800a400 <f_mkfs+0x284>)
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a1d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fe f9c2 	bl	8008560 <disk_initialize>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a1e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <f_mkfs+0x76>
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e3ea      	b.n	800a9c8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a1f2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <f_mkfs+0x86>
 800a1fe:	230a      	movs	r3, #10
 800a200:	e3e2      	b.n	800a9c8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a202:	f107 0214 	add.w	r2, r7, #20
 800a206:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a20a:	2103      	movs	r1, #3
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fa0f 	bl	8008630 <disk_ioctl>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10c      	bne.n	800a232 <f_mkfs+0xb6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d009      	beq.n	800a232 <f_mkfs+0xb6>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a224:	d805      	bhi.n	800a232 <f_mkfs+0xb6>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	1e5a      	subs	r2, r3, #1
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <f_mkfs+0xba>
 800a232:	2301      	movs	r3, #1
 800a234:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a23a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <f_mkfs+0xce>
 800a242:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	429a      	cmp	r2, r3
 800a248:	d309      	bcc.n	800a25e <f_mkfs+0xe2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a250:	d805      	bhi.n	800a25e <f_mkfs+0xe2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	1e5a      	subs	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4013      	ands	r3, r2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <f_mkfs+0xe6>
 800a25e:	2313      	movs	r3, #19
 800a260:	e3b2      	b.n	800a9c8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a262:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a270:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a272:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a27c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a280:	fb02 f303 	mul.w	r3, r2, r3
 800a284:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <f_mkfs+0x114>
 800a28c:	230e      	movs	r3, #14
 800a28e:	e39b      	b.n	800a9c8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a290:	f107 0210 	add.w	r2, r7, #16
 800a294:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a298:	2101      	movs	r1, #1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe f9c8 	bl	8008630 <disk_ioctl>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <f_mkfs+0x12e>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e38e      	b.n	800a9c8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	f003 0308 	and.w	r3, r3, #8
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <f_mkfs+0x13c>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	e000      	b.n	800a2ba <f_mkfs+0x13e>
 800a2b8:	233f      	movs	r3, #63	@ 0x3f
 800a2ba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d901      	bls.n	800a2c8 <f_mkfs+0x14c>
 800a2c4:	230e      	movs	r3, #14
 800a2c6:	e37f      	b.n	800a9c8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2d4:	d801      	bhi.n	800a2da <f_mkfs+0x15e>
 800a2d6:	230e      	movs	r3, #14
 800a2d8:	e376      	b.n	800a9c8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b80      	cmp	r3, #128	@ 0x80
 800a2de:	d901      	bls.n	800a2e4 <f_mkfs+0x168>
 800a2e0:	2313      	movs	r3, #19
 800a2e2:	e371      	b.n	800a9c8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00d      	beq.n	800a30a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	f003 0307 	and.w	r3, r3, #7
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d004      	beq.n	800a302 <f_mkfs+0x186>
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a302:	2303      	movs	r3, #3
 800a304:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a308:	e009      	b.n	800a31e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <f_mkfs+0x19c>
 800a314:	2313      	movs	r3, #19
 800a316:	e357      	b.n	800a9c8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a318:	2302      	movs	r3, #2
 800a31a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a322:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a326:	2b03      	cmp	r3, #3
 800a328:	d13c      	bne.n	800a3a4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a32a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d11b      	bne.n	800a368 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	0c5b      	lsrs	r3, r3, #17
 800a334:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a336:	2300      	movs	r3, #0
 800a338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a33a:	2301      	movs	r3, #1
 800a33c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a33e:	e005      	b.n	800a34c <f_mkfs+0x1d0>
 800a340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a342:	3301      	adds	r3, #1
 800a344:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a34c:	4a2d      	ldr	r2, [pc, #180]	@ (800a404 <f_mkfs+0x288>)
 800a34e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <f_mkfs+0x1ec>
 800a358:	4a2a      	ldr	r2, [pc, #168]	@ (800a404 <f_mkfs+0x288>)
 800a35a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a360:	461a      	mov	r2, r3
 800a362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a364:	4293      	cmp	r3, r2
 800a366:	d2eb      	bcs.n	800a340 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a370:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	3302      	adds	r3, #2
 800a376:	009a      	lsls	r2, r3, #2
 800a378:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a37a:	4413      	add	r3, r2
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a380:	fbb2 f3f3 	udiv	r3, r2, r3
 800a384:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a386:	2320      	movs	r3, #32
 800a388:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800a38a:	2300      	movs	r3, #0
 800a38c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a394:	4293      	cmp	r3, r2
 800a396:	d903      	bls.n	800a3a0 <f_mkfs+0x224>
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	4a1b      	ldr	r2, [pc, #108]	@ (800a408 <f_mkfs+0x28c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d952      	bls.n	800a446 <f_mkfs+0x2ca>
 800a3a0:	230e      	movs	r3, #14
 800a3a2:	e311      	b.n	800a9c8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d11b      	bne.n	800a3e2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	0b1b      	lsrs	r3, r3, #12
 800a3ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3b8:	e005      	b.n	800a3c6 <f_mkfs+0x24a>
 800a3ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3bc:	3301      	adds	r3, #1
 800a3be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3c6:	4a11      	ldr	r2, [pc, #68]	@ (800a40c <f_mkfs+0x290>)
 800a3c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <f_mkfs+0x266>
 800a3d2:	4a0e      	ldr	r2, [pc, #56]	@ (800a40c <f_mkfs+0x290>)
 800a3d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d2eb      	bcs.n	800a3ba <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ea:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d90c      	bls.n	800a410 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fe:	e012      	b.n	800a426 <f_mkfs+0x2aa>
 800a400:	240007b4 	.word	0x240007b4
 800a404:	0800abe4 	.word	0x0800abe4
 800a408:	0ffffff5 	.word	0x0ffffff5
 800a40c:	0800abf4 	.word	0x0800abf4
				} else {
					fmt = FS_FAT12;
 800a410:	2301      	movs	r3, #1
 800a412:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a416:	6a3a      	ldr	r2, [r7, #32]
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	3301      	adds	r3, #1
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	3303      	adds	r3, #3
 800a424:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a426:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a42a:	4413      	add	r3, r2
 800a42c:	1e5a      	subs	r2, r3, #1
 800a42e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a430:	fbb2 f3f3 	udiv	r3, r2, r3
 800a434:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a436:	2301      	movs	r3, #1
 800a438:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a44a:	4413      	add	r3, r2
 800a44c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a44e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a452:	fb03 f202 	mul.w	r2, r3, r2
 800a456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a458:	4413      	add	r3, r2
 800a45a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a45c:	4413      	add	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	4413      	add	r3, r2
 800a466:	1e5a      	subs	r2, r3, #1
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	425b      	negs	r3, r3
 800a46c:	401a      	ands	r2, r3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a474:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d108      	bne.n	800a48e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a47c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a47e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a480:	4413      	add	r3, r2
 800a482:	657b      	str	r3, [r7, #84]	@ 0x54
 800a484:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a488:	4413      	add	r3, r2
 800a48a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a48c:	e006      	b.n	800a49c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a48e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a498:	4413      	add	r3, r2
 800a49a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a49e:	011a      	lsls	r2, r3, #4
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	441a      	add	r2, r3
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d901      	bls.n	800a4b2 <f_mkfs+0x336>
 800a4ae:	230e      	movs	r3, #14
 800a4b0:	e28a      	b.n	800a9c8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	1ad2      	subs	r2, r2, r3
 800a4c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c4:	1ad2      	subs	r2, r2, r3
 800a4c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4cc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a4ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d10f      	bne.n	800a4f6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d80a      	bhi.n	800a4f6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d105      	bne.n	800a4f2 <f_mkfs+0x376>
 800a4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	607b      	str	r3, [r7, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d144      	bne.n	800a57c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a4f2:	230e      	movs	r3, #14
 800a4f4:	e268      	b.n	800a9c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a4f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d133      	bne.n	800a566 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a504:	4293      	cmp	r3, r2
 800a506:	d91e      	bls.n	800a546 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d107      	bne.n	800a51e <f_mkfs+0x3a2>
 800a50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	2b40      	cmp	r3, #64	@ 0x40
 800a514:	d803      	bhi.n	800a51e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	607b      	str	r3, [r7, #4]
 800a51c:	e033      	b.n	800a586 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a528:	2303      	movs	r3, #3
 800a52a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a52e:	e02a      	b.n	800a586 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d105      	bne.n	800a542 <f_mkfs+0x3c6>
 800a536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	607b      	str	r3, [r7, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b80      	cmp	r3, #128	@ 0x80
 800a540:	d91e      	bls.n	800a580 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a542:	230e      	movs	r3, #14
 800a544:	e240      	b.n	800a9c8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d80a      	bhi.n	800a566 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <f_mkfs+0x3e6>
 800a556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	607b      	str	r3, [r7, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b80      	cmp	r3, #128	@ 0x80
 800a560:	d910      	bls.n	800a584 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a562:	230e      	movs	r3, #14
 800a564:	e230      	b.n	800a9c8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a566:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d10c      	bne.n	800a588 <f_mkfs+0x40c>
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a574:	4293      	cmp	r3, r2
 800a576:	d907      	bls.n	800a588 <f_mkfs+0x40c>
 800a578:	230e      	movs	r3, #14
 800a57a:	e225      	b.n	800a9c8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a57c:	bf00      	nop
 800a57e:	e6ce      	b.n	800a31e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a580:	bf00      	nop
 800a582:	e6cc      	b.n	800a31e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a584:	bf00      	nop
			pau = au;
 800a586:	e6ca      	b.n	800a31e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a588:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a58a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a58c:	461a      	mov	r2, r3
 800a58e:	2100      	movs	r1, #0
 800a590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a592:	f7fe f90e 	bl	80087b2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a596:	220b      	movs	r2, #11
 800a598:	49b2      	ldr	r1, [pc, #712]	@ (800a864 <f_mkfs+0x6e8>)
 800a59a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a59c:	f7fe f8e8 	bl	8008770 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	330b      	adds	r3, #11
 800a5a4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe f89a 	bl	80086e2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	330d      	adds	r3, #13
 800a5b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5b4:	b2d2      	uxtb	r2, r2
 800a5b6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	330e      	adds	r3, #14
 800a5bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5be:	b292      	uxth	r2, r2
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe f88d 	bl	80086e2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	3310      	adds	r3, #16
 800a5cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	f103 0211 	add.w	r2, r3, #17
 800a5d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5dc:	2b03      	cmp	r3, #3
 800a5de:	d002      	beq.n	800a5e6 <f_mkfs+0x46a>
 800a5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	e000      	b.n	800a5e8 <f_mkfs+0x46c>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	f7fe f879 	bl	80086e2 <st_word>
		if (sz_vol < 0x10000) {
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5f6:	d208      	bcs.n	800a60a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	3313      	adds	r3, #19
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	b292      	uxth	r2, r2
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe f86d 	bl	80086e2 <st_word>
 800a608:	e006      	b.n	800a618 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60c:	3320      	adds	r3, #32
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe f880 	bl	8008718 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	3315      	adds	r3, #21
 800a61c:	22f8      	movs	r2, #248	@ 0xf8
 800a61e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	3318      	adds	r3, #24
 800a624:	213f      	movs	r1, #63	@ 0x3f
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe f85b 	bl	80086e2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62e:	331a      	adds	r3, #26
 800a630:	21ff      	movs	r1, #255	@ 0xff
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe f855 	bl	80086e2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	331c      	adds	r3, #28
 800a63c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe f86a 	bl	8008718 <st_dword>
		if (fmt == FS_FAT32) {
 800a644:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d131      	bne.n	800a6b0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800a652:	f7fd fd2d 	bl	80080b0 <get_fattime>
 800a656:	4603      	mov	r3, r0
 800a658:	4619      	mov	r1, r3
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7fe f85c 	bl	8008718 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	3324      	adds	r3, #36	@ 0x24
 800a664:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe f856 	bl	8008718 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	332c      	adds	r3, #44	@ 0x2c
 800a670:	2102      	movs	r1, #2
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe f850 	bl	8008718 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	3330      	adds	r3, #48	@ 0x30
 800a67c:	2101      	movs	r1, #1
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe f82f 	bl	80086e2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	3332      	adds	r3, #50	@ 0x32
 800a688:	2106      	movs	r1, #6
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe f829 	bl	80086e2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	3340      	adds	r3, #64	@ 0x40
 800a694:	2280      	movs	r2, #128	@ 0x80
 800a696:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69a:	3342      	adds	r3, #66	@ 0x42
 800a69c:	2229      	movs	r2, #41	@ 0x29
 800a69e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	3347      	adds	r3, #71	@ 0x47
 800a6a4:	2213      	movs	r2, #19
 800a6a6:	4970      	ldr	r1, [pc, #448]	@ (800a868 <f_mkfs+0x6ec>)
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe f861 	bl	8008770 <mem_cpy>
 800a6ae:	e020      	b.n	800a6f2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800a6b6:	f7fd fcfb 	bl	80080b0 <get_fattime>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7fe f82a 	bl	8008718 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c6:	3316      	adds	r3, #22
 800a6c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a6ca:	b292      	uxth	r2, r2
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe f807 	bl	80086e2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	3324      	adds	r3, #36	@ 0x24
 800a6d8:	2280      	movs	r2, #128	@ 0x80
 800a6da:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6de:	3326      	adds	r3, #38	@ 0x26
 800a6e0:	2229      	movs	r2, #41	@ 0x29
 800a6e2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	332b      	adds	r3, #43	@ 0x2b
 800a6e8:	2213      	movs	r2, #19
 800a6ea:	4960      	ldr	r1, [pc, #384]	@ (800a86c <f_mkfs+0x6f0>)
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe f83f 	bl	8008770 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a6f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fd fff0 	bl	80086e2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a702:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a706:	2301      	movs	r3, #1
 800a708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a70a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a70c:	f7fd ff70 	bl	80085f0 <disk_write>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <f_mkfs+0x59e>
 800a716:	2301      	movs	r3, #1
 800a718:	e156      	b.n	800a9c8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a71a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d140      	bne.n	800a7a4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a724:	1d9a      	adds	r2, r3, #6
 800a726:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a72a:	2301      	movs	r3, #1
 800a72c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a72e:	f7fd ff5f 	bl	80085f0 <disk_write>
			mem_set(buf, 0, ss);
 800a732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a734:	461a      	mov	r2, r3
 800a736:	2100      	movs	r1, #0
 800a738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a73a:	f7fe f83a 	bl	80087b2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a73e:	494c      	ldr	r1, [pc, #304]	@ (800a870 <f_mkfs+0x6f4>)
 800a740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a742:	f7fd ffe9 	bl	8008718 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a74c:	4949      	ldr	r1, [pc, #292]	@ (800a874 <f_mkfs+0x6f8>)
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fd ffe2 	bl	8008718 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7fd ffd9 	bl	8008718 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a76c:	2102      	movs	r1, #2
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd ffd2 	bl	8008718 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a77a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd ffaf 	bl	80086e2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	1dda      	adds	r2, r3, #7
 800a788:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a78c:	2301      	movs	r3, #1
 800a78e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a790:	f7fd ff2e 	bl	80085f0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a79c:	2301      	movs	r3, #1
 800a79e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7a0:	f7fd ff26 	bl	80085f0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a7a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7aa:	f7fe f802 	bl	80087b2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a7ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7b0:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7b6:	e04b      	b.n	800a850 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a7b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d113      	bne.n	800a7e8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a7c0:	f06f 0107 	mvn.w	r1, #7
 800a7c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7c6:	f7fd ffa7 	bl	8008718 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fd ffa0 	bl	8008718 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	3308      	adds	r3, #8
 800a7dc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd ff99 	bl	8008718 <st_dword>
 800a7e6:	e00b      	b.n	800a800 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a7e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <f_mkfs+0x678>
 800a7f0:	4b21      	ldr	r3, [pc, #132]	@ (800a878 <f_mkfs+0x6fc>)
 800a7f2:	e001      	b.n	800a7f8 <f_mkfs+0x67c>
 800a7f4:	f06f 0307 	mvn.w	r3, #7
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7fc:	f7fd ff8c 	bl	8008718 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a802:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a808:	4293      	cmp	r3, r2
 800a80a:	bf28      	it	cs
 800a80c:	4613      	movcs	r3, r2
 800a80e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a810:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a816:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a818:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a81a:	f7fd fee9 	bl	80085f0 <disk_write>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <f_mkfs+0x6ac>
 800a824:	2301      	movs	r3, #1
 800a826:	e0cf      	b.n	800a9c8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a828:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a82a:	461a      	mov	r2, r3
 800a82c:	2100      	movs	r1, #0
 800a82e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a830:	f7fd ffbf 	bl	80087b2 <mem_set>
				sect += n; nsect -= n;
 800a834:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a838:	4413      	add	r3, r2
 800a83a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a83c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a83e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800a844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1dc      	bne.n	800a804 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a84a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84c:	3301      	adds	r3, #1
 800a84e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a854:	429a      	cmp	r2, r3
 800a856:	d3af      	bcc.n	800a7b8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a858:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d10d      	bne.n	800a87c <f_mkfs+0x700>
 800a860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a862:	e00c      	b.n	800a87e <f_mkfs+0x702>
 800a864:	0800ab0c 	.word	0x0800ab0c
 800a868:	0800ab18 	.word	0x0800ab18
 800a86c:	0800ab2c 	.word	0x0800ab2c
 800a870:	41615252 	.word	0x41615252
 800a874:	61417272 	.word	0x61417272
 800a878:	00fffff8 	.word	0x00fffff8
 800a87c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a880:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a884:	4293      	cmp	r3, r2
 800a886:	bf28      	it	cs
 800a888:	4613      	movcs	r3, r2
 800a88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a88c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a892:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a894:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a896:	f7fd feab 	bl	80085f0 <disk_write>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <f_mkfs+0x728>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e091      	b.n	800a9c8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800a8a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8a8:	4413      	add	r3, r2
 800a8aa:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800a8b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e2      	bne.n	800a880 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a8ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d103      	bne.n	800a8ca <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800a8c8:	e010      	b.n	800a8ec <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d0:	d303      	bcc.n	800a8da <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a8d2:	2306      	movs	r3, #6
 800a8d4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800a8d8:	e008      	b.n	800a8ec <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a8da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d101      	bne.n	800a8e6 <f_mkfs+0x76a>
 800a8e2:	2304      	movs	r3, #4
 800a8e4:	e000      	b.n	800a8e8 <f_mkfs+0x76c>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	f003 0308 	and.w	r3, r3, #8
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d15b      	bne.n	800a9ae <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800a8f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8fe:	f7fd ff58 	bl	80087b2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a908:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fd fee8 	bl	80086e2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a918:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	3301      	adds	r3, #1
 800a924:	2201      	movs	r2, #1
 800a926:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	3302      	adds	r3, #2
 800a92c:	2201      	movs	r2, #1
 800a92e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	3303      	adds	r3, #3
 800a934:	2200      	movs	r2, #0
 800a936:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	3304      	adds	r3, #4
 800a93c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800a940:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	441a      	add	r2, r3
 800a948:	4b21      	ldr	r3, [pc, #132]	@ (800a9d0 <f_mkfs+0x854>)
 800a94a:	fba3 1302 	umull	r1, r3, r3, r2
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	0852      	lsrs	r2, r2, #1
 800a952:	4413      	add	r3, r2
 800a954:	0b5b      	lsrs	r3, r3, #13
 800a956:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	3305      	adds	r3, #5
 800a95c:	22fe      	movs	r2, #254	@ 0xfe
 800a95e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800a960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	b2da      	uxtb	r2, r3
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	3306      	adds	r3, #6
 800a96a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800a96e:	b2d2      	uxtb	r2, r2
 800a970:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3307      	adds	r3, #7
 800a976:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	3308      	adds	r3, #8
 800a980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd fec8 	bl	8008718 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	330c      	adds	r3, #12
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f7fd fec1 	bl	8008718 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a996:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800a99a:	2301      	movs	r3, #1
 800a99c:	2200      	movs	r2, #0
 800a99e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9a0:	f7fd fe26 	bl	80085f0 <disk_write>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <f_mkfs+0x832>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e00c      	b.n	800a9c8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800a9ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd fe3a 	bl	8008630 <disk_ioctl>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <f_mkfs+0x84a>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <f_mkfs+0x84c>

	return FR_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3774      	adds	r7, #116	@ 0x74
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd90      	pop	{r4, r7, pc}
 800a9d0:	0515565b 	.word	0x0515565b

0800a9d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a9ea:	4b1f      	ldr	r3, [pc, #124]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800a9ec:	7a5b      	ldrb	r3, [r3, #9]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d131      	bne.n	800aa58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800a9f6:	7a5b      	ldrb	r3, [r3, #9]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800a9fe:	2100      	movs	r1, #0
 800aa00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa02:	4b19      	ldr	r3, [pc, #100]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa04:	7a5b      	ldrb	r3, [r3, #9]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	4a17      	ldr	r2, [pc, #92]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa12:	4b15      	ldr	r3, [pc, #84]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa14:	7a5b      	ldrb	r3, [r3, #9]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4b13      	ldr	r3, [pc, #76]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa1c:	4413      	add	r3, r2
 800aa1e:	79fa      	ldrb	r2, [r7, #7]
 800aa20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aa22:	4b11      	ldr	r3, [pc, #68]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa24:	7a5b      	ldrb	r3, [r3, #9]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	b2d1      	uxtb	r1, r2
 800aa2c:	4a0e      	ldr	r2, [pc, #56]	@ (800aa68 <FATFS_LinkDriverEx+0x94>)
 800aa2e:	7251      	strb	r1, [r2, #9]
 800aa30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aa32:	7dbb      	ldrb	r3, [r7, #22]
 800aa34:	3330      	adds	r3, #48	@ 0x30
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	223a      	movs	r2, #58	@ 0x3a
 800aa42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	3302      	adds	r3, #2
 800aa48:	222f      	movs	r2, #47	@ 0x2f
 800aa4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	3303      	adds	r3, #3
 800aa50:	2200      	movs	r2, #0
 800aa52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	240007dc 	.word	0x240007dc

0800aa6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa76:	2200      	movs	r2, #0
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff ffaa 	bl	800a9d4 <FATFS_LinkDriverEx>
 800aa80:	4603      	mov	r3, r0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <memset>:
 800aa8a:	4402      	add	r2, r0
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d100      	bne.n	800aa94 <memset+0xa>
 800aa92:	4770      	bx	lr
 800aa94:	f803 1b01 	strb.w	r1, [r3], #1
 800aa98:	e7f9      	b.n	800aa8e <memset+0x4>
	...

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d0d      	ldr	r5, [pc, #52]	@ (800aad4 <__libc_init_array+0x38>)
 800aaa0:	4c0d      	ldr	r4, [pc, #52]	@ (800aad8 <__libc_init_array+0x3c>)
 800aaa2:	1b64      	subs	r4, r4, r5
 800aaa4:	10a4      	asrs	r4, r4, #2
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	4d0b      	ldr	r5, [pc, #44]	@ (800aadc <__libc_init_array+0x40>)
 800aaae:	4c0c      	ldr	r4, [pc, #48]	@ (800aae0 <__libc_init_array+0x44>)
 800aab0:	f000 f818 	bl	800aae4 <_init>
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	2600      	movs	r6, #0
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800ac04 	.word	0x0800ac04
 800aad8:	0800ac04 	.word	0x0800ac04
 800aadc:	0800ac04 	.word	0x0800ac04
 800aae0:	0800ac08 	.word	0x0800ac08

0800aae4 <_init>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	bf00      	nop
 800aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaea:	bc08      	pop	{r3}
 800aaec:	469e      	mov	lr, r3
 800aaee:	4770      	bx	lr

0800aaf0 <_fini>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr
