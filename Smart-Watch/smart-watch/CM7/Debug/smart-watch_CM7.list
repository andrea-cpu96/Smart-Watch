
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae98  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800b130  0800b130  0000c130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b21c  0800b21c  0000d01c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b21c  0800b21c  0000d01c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b21c  0800b21c  0000d01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b21c  0800b21c  0000c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  24000000  0800b224  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2400001c  0800b240  0000d01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005ec  0800b240  0000d5ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cbc  00000000  00000000  0000d04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034db  00000000  00000000  00021d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000251e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da0  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041fe0  00000000  00000000  000271a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ec1  00000000  00000000  00069188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019a1fb  00000000  00000000  00083049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021d244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0021d288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00221c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b118 	.word	0x0800b118

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	0800b118 	.word	0x0800b118

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fdff 	bl	800201c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fdf9 	bl	800201c <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fde5 	bl	800201c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fddf 	bl	800201c <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 fdcb 	bl	800201c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fdc5 	bl	800201c <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f001 fa51 	bl	8001a0c <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f001 fa4b 	bl	8001a0c <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f001 fa45 	bl	8001a0c <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
    
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
 8000654:	2018      	movs	r0, #24
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x48);
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f001 f81d 	bl	8001a0c <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f001 f817 	bl	8001a0c <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_spi_tx+0x30>)
 80009fa:	f006 fe47 	bl	800768c <HAL_SPI_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a04:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
		return;

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2400051c 	.word	0x2400051c
 8000a18:	24000038 	.word	0x24000038

08000a1c <bmp_init>:
static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx);
static void imageWindowed(doubleFormat *data);


error_bmp bmp_init(BMP *bmp, FIL *fil, char *fName, const void (*drawFunc))
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]

	bmp->fp = fil;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	601a      	str	r2, [r3, #0]
	bmp->name = fName;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	605a      	str	r2, [r3, #4]
	bmp->draw = drawFunc;
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	61da      	str	r2, [r3, #28]

	return open_bmp(bmp);
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 f805 	bl	8000a4c <open_bmp>
 8000a42:	4603      	mov	r3, r0

}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <open_bmp>:


error_bmp open_bmp(BMP *bmp)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	FRESULT fres; 		//Result after operations


    fres = f_open(bmp->fp, bmp->name, FA_READ);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f009 fdc0 	bl	800a5e4 <f_open>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]

    if(fres!=FR_OK)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <open_bmp+0x26>
    	return ERROR_BMP_OPEN;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e003      	b.n	8000a7a <open_bmp+0x2e>

    /* Header */

    return read_header_bmp(bmp);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f90e 	bl	8000c94 <read_header_bmp>
 8000a78:	4603      	mov	r3, r0

}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <showImageBmp>:
// wd,ht - width, height of the video (raw data has no header with such info)
// nl - num lines read in one operation (nl*wd*2 bytes are loaded)
// skipFr - num frames to skip
//
error_bmp showImageBmp(BMP *bmp)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	f5ad 3d28 	sub.w	sp, sp, #172032	@ 0x2a000
 8000a8a:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8000a8e:	af02      	add	r7, sp, #8
 8000a90:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000a94:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000a98:	6018      	str	r0, [r3, #0]
	uint8_t bytePerPxl;

	UINT byteRead;


	pBuf.u8Arr = bufRam;					// Pointer to buf in order to convert format from uint8_t to uint16_t
 8000a9a:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000a9e:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8000aa2:	4b73      	ldr	r3, [pc, #460]	@ (8000c70 <showImageBmp+0x1ec>)
 8000aa4:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000aa8:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000aac:	443b      	add	r3, r7
 8000aae:	6013      	str	r3, [r2, #0]

	sectionSizeByte = ( ( bmp->height * bmp->width ) * ( bmp->depth / 8 ) );
 8000ab0:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000ab4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8000ac0:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	68d2      	ldr	r2, [r2, #12]
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8000ad0:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	8a92      	ldrh	r2, [r2, #20]
 8000ad8:	08d2      	lsrs	r2, r2, #3
 8000ada:	b292      	uxth	r2, r2
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a64      	ldr	r2, [pc, #400]	@ (8000c74 <showImageBmp+0x1f0>)
 8000ae2:	443a      	add	r2, r7
 8000ae4:	6013      	str	r3, [r2, #0]
	sectionDim = ( bmp->height * bmp->width );
 8000ae6:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000aea:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8000af6:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	68d2      	ldr	r2, [r2, #12]
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	4a5d      	ldr	r2, [pc, #372]	@ (8000c78 <showImageBmp+0x1f4>)
 8000b04:	443a      	add	r2, r7
 8000b06:	6013      	str	r3, [r2, #0]
	bytePerPxl = ( bmp->depth / 8 );
 8000b08:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000b0c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	8a9b      	ldrh	r3, [r3, #20]
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4a58      	ldr	r2, [pc, #352]	@ (8000c7c <showImageBmp+0x1f8>)
 8000b1a:	443a      	add	r2, r7
 8000b1c:	7013      	strb	r3, [r2, #0]

	// Point to the initial position
	f_rewind(bmp->fp);
 8000b1e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000b22:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00a f852 	bl	800abd6 <f_lseek>


	while(!f_eof(bmp->fp))
 8000b32:	e084      	b.n	8000c3e <showImageBmp+0x1ba>
	{

		// Skip header file
		f_lseek(bmp->fp, bmp->fp->fptr + bmp->offset);
 8000b34:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000b38:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000b44:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f507 7248 	add.w	r2, r7, #800	@ 0x320
 8000b52:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	8912      	ldrh	r2, [r2, #8]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f00a f83a 	bl	800abd6 <f_lseek>

		memset(bufRam, 0, MAX_BUFF_RAM);
 8000b62:	4b43      	ldr	r3, [pc, #268]	@ (8000c70 <showImageBmp+0x1ec>)
 8000b64:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000b68:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000b6c:	443b      	add	r3, r7
 8000b6e:	4a44      	ldr	r2, [pc, #272]	@ (8000c80 <showImageBmp+0x1fc>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00a faa3 	bl	800b0be <memset>
		fres = f_read(bmp->fp, bufRam, sectionSizeByte, &byteRead);
 8000b78:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000b7c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <showImageBmp+0x200>)
 8000b86:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000b8a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000b8e:	443b      	add	r3, r7
 8000b90:	4937      	ldr	r1, [pc, #220]	@ (8000c70 <showImageBmp+0x1ec>)
 8000b92:	4a3d      	ldr	r2, [pc, #244]	@ (8000c88 <showImageBmp+0x204>)
 8000b94:	440a      	add	r2, r1
 8000b96:	19d1      	adds	r1, r2, r7
 8000b98:	4a36      	ldr	r2, [pc, #216]	@ (8000c74 <showImageBmp+0x1f0>)
 8000b9a:	443a      	add	r2, r7
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	f009 fedb 	bl	800a958 <f_read>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a39      	ldr	r2, [pc, #228]	@ (8000c8c <showImageBmp+0x208>)
 8000ba6:	443a      	add	r2, r7
 8000ba8:	7013      	strb	r3, [r2, #0]

		if(fres != FR_OK)
 8000baa:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <showImageBmp+0x208>)
 8000bac:	443b      	add	r3, r7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <showImageBmp+0x134>
			return ERROR_BMP_READ_FILE;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e054      	b.n	8000c62 <showImageBmp+0x1de>

		if(byteRead != sectionSizeByte)
 8000bb8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000bbc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c74 <showImageBmp+0x1f0>)
 8000bc4:	443a      	add	r2, r7
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d001      	beq.n	8000bd0 <showImageBmp+0x14c>
			return ERROR_BMP_READ_FEW_DATA;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	e048      	b.n	8000c62 <showImageBmp+0x1de>

		depth24To16(&pBuf, sectionDim, bytePerPxl);
 8000bd0:	4b29      	ldr	r3, [pc, #164]	@ (8000c78 <showImageBmp+0x1f4>)
 8000bd2:	443b      	add	r3, r7
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b299      	uxth	r1, r3
 8000bd8:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <showImageBmp+0x1f8>)
 8000bda:	443b      	add	r3, r7
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b2c      	ldr	r3, [pc, #176]	@ (8000c90 <showImageBmp+0x20c>)
 8000be0:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000be4:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000be8:	443b      	add	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f9aa 	bl	8000f44 <depth24To16>
		imageWindowed(&pBuf);
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <showImageBmp+0x20c>)
 8000bf2:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000bf6:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000bfa:	443b      	add	r3, r7
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fa0f 	bl	8001020 <imageWindowed>

		bmp->draw(0, 0, bmp->width, bmp->height, pBuf.u8Arr);
 8000c02:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c06:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	69dc      	ldr	r4, [r3, #28]
 8000c0e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c12:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c20:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c2e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	460b      	mov	r3, r1
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	47a0      	blx	r4
	while(!f_eof(bmp->fp))
 8000c3e:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c42:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8000c50:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	f47f af6a 	bne.w	8000b34 <showImageBmp+0xb0>

	}

	return BMP_OK;
 8000c60:	2300      	movs	r3, #0

}
 8000c62:	4618      	mov	r0, r3
 8000c64:	f507 3728 	add.w	r7, r7, #172032	@ 0x2a000
 8000c68:	f507 7749 	add.w	r7, r7, #804	@ 0x324
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	fffd5cf4 	.word	0xfffd5cf4
 8000c74:	0002a31c 	.word	0x0002a31c
 8000c78:	0002a318 	.word	0x0002a318
 8000c7c:	0002a317 	.word	0x0002a317
 8000c80:	0002a300 	.word	0x0002a300
 8000c84:	fffd5cec 	.word	0xfffd5cec
 8000c88:	0002a320 	.word	0x0002a320
 8000c8c:	0002a316 	.word	0x0002a316
 8000c90:	fffd5cf0 	.word	0xfffd5cf0

08000c94 <read_header_bmp>:


error_bmp read_header_bmp(BMP *bmp)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	uint8_t slotRam[10];
	uint8_t *pSlotRam = slotRam;
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	617b      	str	r3, [r7, #20]

	memset(slotRam, 0, 10);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	220a      	movs	r2, #10
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f00a fa07 	bl	800b0be <memset>
	if(read_sign_bmp(bmp, pSlotRam) != BMP_OK)
 8000cb0:	6979      	ldr	r1, [r7, #20]
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f84e 	bl	8000d54 <read_sign_bmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <read_header_bmp+0x2e>
		return ERROR_BMP_HEADER;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e043      	b.n	8000d4a <read_header_bmp+0xb6>

	memset(slotRam, 0, 10);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	220a      	movs	r2, #10
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00a f9f7 	bl	800b0be <memset>
	read_fSize_bmp(bmp, pSlotRam);
 8000cd0:	6979      	ldr	r1, [r7, #20]
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f85a 	bl	8000d8c <read_fSize_bmp>

	skip_slots_bmp(bmp, 4);
 8000cd8:	2104      	movs	r1, #4
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f8d3 	bl	8000e86 <skip_slots_bmp>

	memset(slotRam, 0, 10);
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00a f9e8 	bl	800b0be <memset>
	read_off_bmp(bmp, pSlotRam);
 8000cee:	6979      	ldr	r1, [r7, #20]
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f85a 	bl	8000daa <read_off_bmp>

	skip_slots_bmp(bmp, 4);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f8c4 	bl	8000e86 <skip_slots_bmp>

	memset(slotRam, 0, 10);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	220a      	movs	r2, #10
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00a f9d9 	bl	800b0be <memset>
	read_width_bmp(bmp, pSlotRam);
 8000d0c:	6979      	ldr	r1, [r7, #20]
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f85f 	bl	8000dd2 <read_width_bmp>

	memset(slotRam, 0, 10);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	220a      	movs	r2, #10
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a f9ce 	bl	800b0be <memset>
	read_height_bmp(bmp, pSlotRam);
 8000d22:	6979      	ldr	r1, [r7, #20]
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f877 	bl	8000e18 <read_height_bmp>

	skip_slots_bmp(bmp, 2);
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f8aa 	bl	8000e86 <skip_slots_bmp>

	memset(slotRam, 0, 10);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	220a      	movs	r2, #10
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00a f9bf 	bl	800b0be <memset>
	read_depth_bmp(bmp, pSlotRam);
 8000d40:	6979      	ldr	r1, [r7, #20]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 f88b 	bl	8000e5e <read_depth_bmp>

	return BMP_OK;
 8000d48:	2300      	movs	r3, #0

}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <read_sign_bmp>:

//////////////////////////////////////////////////////////////


static error_bmp read_sign_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 2);
 8000d5e:	2202      	movs	r2, #2
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f8ce 	bl	8000f04 <read_bmp_blocks>

	if(memcmp(slotsBuf, "BM", 2) != 0)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	4907      	ldr	r1, [pc, #28]	@ (8000d88 <read_sign_bmp+0x34>)
 8000d6c:	6838      	ldr	r0, [r7, #0]
 8000d6e:	f00a f996 	bl	800b09e <memcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <read_sign_bmp+0x28>
		return ERROR_BMP_HEADER;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e000      	b.n	8000d7e <read_sign_bmp+0x2a>

	return BMP_OK;
 8000d7c:	2300      	movs	r3, #0

}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	0800b130 	.word	0x0800b130

08000d8c <read_fSize_bmp>:


static error_bmp read_fSize_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 4);
 8000d96:	2204      	movs	r2, #4
 8000d98:	6839      	ldr	r1, [r7, #0]
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f8b2 	bl	8000f04 <read_bmp_blocks>

	return BMP_OK;
 8000da0:	2300      	movs	r3, #0

}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <read_off_bmp>:


static error_bmp read_off_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 4);
 8000db4:	2204      	movs	r2, #4
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f8a3 	bl	8000f04 <read_bmp_blocks>

	bmp->offset = slotsBuf[0];
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	811a      	strh	r2, [r3, #8]

	return BMP_OK;
 8000dc8:	2300      	movs	r3, #0

}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <read_width_bmp>:


static error_bmp read_width_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 4);
 8000ddc:	2204      	movs	r2, #4
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f88f 	bl	8000f04 <read_bmp_blocks>

	bmp->width = FILE_WORD(slotsBuf);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	441a      	add	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	441a      	add	r2, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	061b      	lsls	r3, r3, #24
 8000e08:	441a      	add	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60da      	str	r2, [r3, #12]

	return BMP_OK;
 8000e0e:	2300      	movs	r3, #0

}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <read_height_bmp>:


static error_bmp read_height_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 4);
 8000e22:	2204      	movs	r2, #4
 8000e24:	6839      	ldr	r1, [r7, #0]
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f86c 	bl	8000f04 <read_bmp_blocks>

	bmp->height = FILE_WORD(slotsBuf);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	441a      	add	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	041b      	lsls	r3, r3, #16
 8000e44:	441a      	add	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	441a      	add	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	611a      	str	r2, [r3, #16]

	return BMP_OK;
 8000e54:	2300      	movs	r3, #0

}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <read_depth_bmp>:


static error_bmp read_depth_bmp(BMP *bmp, uint8_t *slotsBuf)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]

	read_bmp_blocks(bmp, slotsBuf, 2);
 8000e68:	2202      	movs	r2, #2
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f849 	bl	8000f04 <read_bmp_blocks>

	bmp->depth = slotsBuf[0];
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	829a      	strh	r2, [r3, #20]

	return BMP_OK;
 8000e7c:	2300      	movs	r3, #0

}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <skip_slots_bmp>:


static error_bmp skip_slots_bmp(BMP *bmp, uint16_t byteToSkip)
{
 8000e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	466b      	mov	r3, sp
 8000e96:	461e      	mov	r6, r3

	uint8_t dummyBuf[byteToSkip];
 8000e98:	8879      	ldrh	r1, [r7, #2]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	b28b      	uxth	r3, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	4691      	mov	r9, r2
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000eb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000eb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ebc:	b28b      	uxth	r3, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	461c      	mov	r4, r3
 8000ec2:	4615      	mov	r5, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	00eb      	lsls	r3, r5, #3
 8000ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ed2:	00e2      	lsls	r2, r4, #3
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	3307      	adds	r3, #7
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ee0:	466b      	mov	r3, sp
 8000ee2:	3300      	adds	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
	uint8_t *pDummyBuf = dummyBuf;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	60fb      	str	r3, [r7, #12]

	read_bmp_blocks(bmp, pDummyBuf, byteToSkip);
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	461a      	mov	r2, r3
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f807 	bl	8000f04 <read_bmp_blocks>

	return BMP_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	46b5      	mov	sp, r6

}
 8000efa:	4618      	mov	r0, r3
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f04 <read_bmp_blocks>:


static error_bmp read_bmp_blocks(BMP *bmp, uint8_t *buf, size_t nbytes)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]

	UINT cnt;
	FRESULT fres; 		//Result after operations

    fres = f_read(bmp->fp, buf, nbytes, &cnt);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	f009 fd1c 	bl	800a958 <f_read>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]

    if(fres!=FR_OK)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <read_bmp_blocks+0x2a>
    	return ERROR_BMP_READ_FILE;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e006      	b.n	8000f3c <read_bmp_blocks+0x38>

    if(cnt!=nbytes)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d001      	beq.n	8000f3a <read_bmp_blocks+0x36>
    	return ERROR_BMP_READ_FEW_DATA;
 8000f36:	2306      	movs	r3, #6
 8000f38:	e000      	b.n	8000f3c <read_bmp_blocks+0x38>

    return BMP_OK;
 8000f3a:	2300      	movs	r3, #0

}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e054      	b.n	8001004 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	787a      	ldrb	r2, [r7, #1]
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	fb01 f202 	mul.w	r2, r1, r2
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	fb01 f303 	mul.w	r3, r1, r3
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(b, r, g);
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <depth24To16+0xd8>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7a7b      	ldrb	r3, [r7, #9]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b219      	sxth	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b28a      	uxth	r2, r1
 8000fc8:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	440b      	add	r3, r1
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b219      	sxth	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b28a      	uxth	r2, r1
 8000ffc:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	dba6      	blt.n	8000f5a <depth24To16+0x16>

	}

}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	fffff800 	.word	0xfffff800

08001020 <imageWindowed>:


static void imageWindowed(doubleFormat *data)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	uint16_t tmp;


	for(int i = 0 ; i < 240 ; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e043      	b.n	80010b6 <imageWindowed+0x96>
	{

		for(int j = 0 ; j < 120 ; j++)
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e03a      	b.n	80010aa <imageWindowed+0x8a>
		{

			tmp = data->u16Arr[j+(i*240)];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4613      	mov	r3, r2
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	461a      	mov	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	440b      	add	r3, r1
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	81fb      	strh	r3, [r7, #14]
			data->u16Arr[j+(i*240)] = data->u16Arr[(240-1-j)+(i*240)];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f1c3 00ef 	rsb	r0, r3, #239	@ 0xef
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4613      	mov	r3, r2
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4403      	add	r3, r0
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4419      	add	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4613      	mov	r3, r2
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	461a      	mov	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4403      	add	r3, r0
 8001082:	880a      	ldrh	r2, [r1, #0]
 8001084:	801a      	strh	r2, [r3, #0]
			data->u16Arr[(240-1-j)+(i*240)] = tmp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f1c3 00ef 	rsb	r0, r3, #239	@ 0xef
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4403      	add	r3, r0
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	801a      	strh	r2, [r3, #0]
		for(int j = 0 ; j < 120 ; j++)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	3301      	adds	r3, #1
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b77      	cmp	r3, #119	@ 0x77
 80010ae:	ddc1      	ble.n	8001034 <imageWindowed+0x14>
	for(int i = 0 ; i < 240 ; i++)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2bef      	cmp	r3, #239	@ 0xef
 80010ba:	ddb8      	ble.n	800102e <imageWindowed+0xe>

		}

	}

}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

	GC9A01_init();
 80010d0:	f7ff fa43 	bl	800055a <GC9A01_init>
	sd_init();
 80010d4:	f000 f868 	bl	80011a8 <sd_init>

	bmp_init(bmp, &file, fName, lcd_draw);
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <lcd_init+0x20>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <lcd_init+0x24>)
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <lcd_init+0x28>)
 80010e0:	4905      	ldr	r1, [pc, #20]	@ (80010f8 <lcd_init+0x2c>)
 80010e2:	f7ff fc9b 	bl	8000a1c <bmp_init>

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2400049c 	.word	0x2400049c
 80010f0:	08001109 	.word	0x08001109
 80010f4:	24000008 	.word	0x24000008
 80010f8:	2400026c 	.word	0x2400026c

080010fc <lcd_process>:


void lcd_process(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

	sd_image_demo();
 8001100:	f000 f842 	bl	8001188 <sd_image_demo>
	// lcd_demo();

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e022      	b.n	8001172 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e016      	b.n	8001160 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	429a      	cmp	r2, r3
 8001138:	d108      	bne.n	800114c <lcd_draw+0x44>
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	429a      	cmp	r2, r3
 8001140:	d104      	bne.n	800114c <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8001142:	2102      	movs	r1, #2
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f7ff f9e8 	bl	800051a <GC9A01_write>
 800114a:	e003      	b.n	8001154 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 800114c:	2102      	movs	r1, #2
 800114e:	6a38      	ldr	r0, [r7, #32]
 8001150:	f7ff f9f3 	bl	800053a <GC9A01_write_continue>

			}

			data += 2;
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	3302      	adds	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	883a      	ldrh	r2, [r7, #0]
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbe2      	blt.n	8001132 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	4413      	add	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbd6      	blt.n	800112c <lcd_draw+0x24>

		}

	}

}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <sd_image_demo>:

}


void sd_image_demo(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

	showImageBmp(bmp);
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <sd_image_demo+0x1c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fc77 	bl	8000a84 <showImageBmp>

	HAL_Delay(2000);
 8001196:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800119a:	f000 fc37 	bl	8001a0c <HAL_Delay>

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2400049c 	.word	0x2400049c

080011a8 <sd_init>:


// SD

static void sd_init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)
 80011ac:	2201      	movs	r2, #1
 80011ae:	4905      	ldr	r1, [pc, #20]	@ (80011c4 <sd_init+0x1c>)
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <sd_init+0x20>)
 80011b2:	f009 f9d1 	bl	800a558 <f_mount>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <sd_init+0x18>
    	sd_error_handler();
 80011bc:	f000 f806 	bl	80011cc <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	240005ac 	.word	0x240005ac
 80011c8:	2400003c 	.word	0x2400003c

080011cc <sd_error_handler>:


static void sd_error_handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

	while(1);
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <sd_error_handler+0x4>

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80011da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80011e0:	bf00      	nop
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <main+0xa4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <main+0x24>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	dcf4      	bgt.n	80011e2 <main+0xe>
  if ( timeout < 0 )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da01      	bge.n	8001202 <main+0x2e>
  {
  Error_Handler();
 80011fe:	f000 f9c9 	bl	8001594 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f000 fb71 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f839 	bl	800127c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <main+0xa4>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <main+0xa4>)
 8001212:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <main+0xa4>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001228:	2000      	movs	r0, #0
 800122a:	f000 ff11 	bl	8002050 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f000 ff27 	bl	8002084 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800123c:	bf00      	nop
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <main+0xa4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d104      	bne.n	8001254 <main+0x80>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dcf4      	bgt.n	800123e <main+0x6a>
if ( timeout < 0 )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da01      	bge.n	800125e <main+0x8a>
{
Error_Handler();
 800125a:	f000 f99b 	bl	8001594 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f000 f903 	bl	8001468 <MX_GPIO_Init>
  MX_SPI5_Init();
 8001262:	f000 f8ad 	bl	80013c0 <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8001266:	f000 f887 	bl	8001378 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800126a:	f007 fab1 	bl	80087d0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800126e:	f7ff ff2d 	bl	80010cc <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8001272:	f7ff ff43 	bl	80010fc <lcd_process>
 8001276:	e7fc      	b.n	8001272 <main+0x9e>
 8001278:	58024400 	.word	0x58024400

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09c      	sub	sp, #112	@ 0x70
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001286:	224c      	movs	r2, #76	@ 0x4c
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f009 ff17 	bl	800b0be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2220      	movs	r2, #32
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f009 ff11 	bl	800b0be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800129c:	2004      	movs	r0, #4
 800129e:	f000 ff05 	bl	80020ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <SystemClock_Config+0xf4>)
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	4a31      	ldr	r2, [pc, #196]	@ (8001370 <SystemClock_Config+0xf4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <SystemClock_Config+0xf4>)
 80012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <SystemClock_Config+0xf8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001374 <SystemClock_Config+0xf8>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <SystemClock_Config+0xf8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012d8:	bf00      	nop
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <SystemClock_Config+0xf8>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012e6:	d1f8      	bne.n	80012da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2340      	movs	r3, #64	@ 0x40
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001300:	230c      	movs	r3, #12
 8001302:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8001308:	230d      	movs	r3, #13
 800130a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001310:	230c      	movs	r3, #12
 8001312:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001314:	2300      	movs	r3, #0
 8001316:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4618      	mov	r0, r3
 8001324:	f000 ff1c 	bl	8002160 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800132e:	f000 f931 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	233f      	movs	r3, #63	@ 0x3f
 8001334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2303      	movs	r3, #3
 8001338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001342:	2340      	movs	r3, #64	@ 0x40
 8001344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001346:	2340      	movs	r3, #64	@ 0x40
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001350:	2340      	movs	r3, #64	@ 0x40
 8001352:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fb5b 	bl	8002a14 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001364:	f000 f916 	bl	8001594 <Error_Handler>
  }
}
 8001368:	bf00      	nop
 800136a:	3770      	adds	r7, #112	@ 0x70
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58000400 	.word	0x58000400
 8001374:	58024800 	.word	0x58024800

08001378 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <MX_SDMMC1_SD_Init+0x44>)
 8001380:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 8001390:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001394:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_SDMMC1_SD_Init+0x40>)
 80013a4:	f004 fbea 	bl	8005b7c <HAL_SD_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80013ae:	f000 f8f1 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	240004a0 	.word	0x240004a0
 80013bc:	52007000 	.word	0x52007000

080013c0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013c4:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013c6:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <MX_SPI5_Init+0xa4>)
 80013c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d8:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013da:	2207      	movs	r2, #7
 80013dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_SPI5_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_SPI5_Init+0xa0>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001412:	2200      	movs	r2, #0
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_SPI5_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <MX_SPI5_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_SPI5_Init+0xa0>)
 800143c:	2200      	movs	r2, #0
 800143e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_SPI5_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <MX_SPI5_Init+0xa0>)
 800144e:	f005 fff9 	bl	8007444 <HAL_SPI_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001458:	f000 f89c 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2400051c 	.word	0x2400051c
 8001464:	40015000 	.word	0x40015000

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <MX_GPIO_Init+0x11c>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	4a3f      	ldr	r2, [pc, #252]	@ (8001584 <MX_GPIO_Init+0x11c>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <MX_GPIO_Init+0x11c>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <MX_GPIO_Init+0x11c>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a2:	4a38      	ldr	r2, [pc, #224]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ac:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014ba:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c0:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014de:	4a29      	ldr	r2, [pc, #164]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e8:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fc:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <MX_GPIO_Init+0x11c>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <MX_GPIO_Init+0x11c>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2102      	movs	r1, #2
 8001518:	481b      	ldr	r0, [pc, #108]	@ (8001588 <MX_GPIO_Init+0x120>)
 800151a:	f000 fd7f 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2161      	movs	r1, #97	@ 0x61
 8001522:	481a      	ldr	r0, [pc, #104]	@ (800158c <MX_GPIO_Init+0x124>)
 8001524:	f000 fd7a 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4814      	ldr	r0, [pc, #80]	@ (8001590 <MX_GPIO_Init+0x128>)
 800153e:	f000 fba5 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001542:	2302      	movs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <MX_GPIO_Init+0x120>)
 800155a:	f000 fb97 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800155e:	2361      	movs	r3, #97	@ 0x61
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_GPIO_Init+0x124>)
 8001576:	f000 fb89 	bl	8001c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58024400 	.word	0x58024400
 8001588:	58022800 	.word	0x58022800
 800158c:	58022400 	.word	0x58022400
 8001590:	58022000 	.word	0x58022000

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <Error_Handler+0x8>

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_MspInit+0x30>)
 80015a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x30>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x30>)
 80015b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	58024400 	.word	0x58024400

080015d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0be      	sub	sp, #248	@ 0xf8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	22c8      	movs	r2, #200	@ 0xc8
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f009 fd62 	bl	800b0be <memset>
  if(hsd->Instance==SDMMC1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	@ (80016f0 <HAL_SD_MspInit+0x11c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d171      	bne.n	80016e8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001604:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001610:	2300      	movs	r3, #0
 8001612:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fd71 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001624:	f7ff ffb6 	bl	8001594 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 800162a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800162e:	4a31      	ldr	r2, [pc, #196]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001634:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001638:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 800163a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800163e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001656:	4b27      	ldr	r3, [pc, #156]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166a:	4a22      	ldr	r2, [pc, #136]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001674:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <HAL_SD_MspInit+0x120>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001682:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800169c:	230c      	movs	r3, #12
 800169e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <HAL_SD_MspInit+0x124>)
 80016aa:	f000 faef 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016c6:	230c      	movs	r3, #12
 80016c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016d0:	4619      	mov	r1, r3
 80016d2:	480a      	ldr	r0, [pc, #40]	@ (80016fc <HAL_SD_MspInit+0x128>)
 80016d4:	f000 fada 	bl	8001c8c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2031      	movs	r0, #49	@ 0x31
 80016de:	f000 faa0 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016e2:	2031      	movs	r0, #49	@ 0x31
 80016e4:	f000 fab7 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	37f8      	adds	r7, #248	@ 0xf8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	52007000 	.word	0x52007000
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020800 	.word	0x58020800
 80016fc:	58020c00 	.word	0x58020c00

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0be      	sub	sp, #248	@ 0xf8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	22c8      	movs	r2, #200	@ 0xc8
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f009 fccc 	bl	800b0be <memset>
  if(hspi->Instance==SPI5)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a39      	ldr	r2, [pc, #228]	@ (8001810 <HAL_SPI_MspInit+0x110>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d16a      	bne.n	8001806 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001730:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fcda 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001752:	f7ff ff1f 	bl	8001594 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001756:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 8001758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800175c:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 800175e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 8001768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800176c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 800177c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_SPI_MspInit+0x114>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017c8:	2305      	movs	r3, #5
 80017ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4810      	ldr	r0, [pc, #64]	@ (8001818 <HAL_SPI_MspInit+0x118>)
 80017d6:	f000 fa59 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 80017da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017fa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017fe:	4619      	mov	r1, r3
 8001800:	4806      	ldr	r0, [pc, #24]	@ (800181c <HAL_SPI_MspInit+0x11c>)
 8001802:	f000 fa43 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	37f8      	adds	r7, #248	@ 0xf8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40015000 	.word	0x40015000
 8001814:	58024400 	.word	0x58024400
 8001818:	58022800 	.word	0x58022800
 800181c:	58022400 	.word	0x58022400

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f8a9 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <SDMMC1_IRQHandler+0x10>)
 8001886:	f004 fbe9 	bl	800605c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	240004a0 	.word	0x240004a0

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001898:	f7fe fd1e 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	@ (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c2:	f009 fc05 	bl	800b0d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fc85 	bl	80011d4 <main>
  bx  lr
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018d4:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80018d8:	0800b224 	.word	0x0800b224
  ldr r2, =_sbss
 80018dc:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 80018e0:	240005ec 	.word	0x240005ec

080018e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC3_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ee:	2003      	movs	r0, #3
 80018f0:	f000 f98c 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018f4:	f001 fa44 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_Init+0x68>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	4913      	ldr	r1, [pc, #76]	@ (8001954 <HAL_Init+0x6c>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_Init+0x68>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	4a0e      	ldr	r2, [pc, #56]	@ (8001954 <HAL_Init+0x6c>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_Init+0x70>)
 800192a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800192c:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_Init+0x74>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f814 	bl	8001960 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e002      	b.n	8001948 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001942:	f7ff fe2d 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	58024400 	.word	0x58024400
 8001954:	0800b178 	.word	0x0800b178
 8001958:	24000004 	.word	0x24000004
 800195c:	24000000 	.word	0x24000000

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_InitTick+0x60>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e021      	b.n	80019b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_InitTick+0x64>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <HAL_InitTick+0x60>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f971 	bl	8001c72 <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 f93b 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <HAL_InitTick+0x68>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	24000018 	.word	0x24000018
 80019c4:	24000000 	.word	0x24000000
 80019c8:	24000014 	.word	0x24000014

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	24000018 	.word	0x24000018
 80019f0:	240005a4 	.word	0x240005a4

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	240005a4 	.word	0x240005a4

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	24000018 	.word	0x24000018

08001a54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <HAL_GetREVID+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	5c001000 	.word	0x5c001000

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	05fa0000 	.word	0x05fa0000

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff40 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff33 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa4 	bl	8001bc8 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c9a:	4b89      	ldr	r3, [pc, #548]	@ (8001ec0 <HAL_GPIO_Init+0x234>)
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	e194      	b.n	8001fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8186 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x44>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e0 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a29      	ldr	r2, [pc, #164]	@ (8001ec8 <HAL_GPIO_Init+0x23c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a20      	ldr	r2, [pc, #128]	@ (8001ecc <HAL_GPIO_Init+0x240>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d052      	beq.n	8001ef4 <HAL_GPIO_Init+0x268>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_GPIO_Init+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <HAL_GPIO_Init+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_GPIO_Init+0x24c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_GPIO_Init+0x250>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x254>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee4 <HAL_GPIO_Init+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <HAL_GPIO_Init+0x25c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <HAL_GPIO_Init+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_GPIO_Init+0x264>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e02d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e02b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e029      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e027      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e025      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e023      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e021      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ebe:	bf00      	nop
 8001ec0:	58000080 	.word	0x58000080
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58021400 	.word	0x58021400
 8001ee4:	58021800 	.word	0x58021800
 8001ee8:	58021c00 	.word	0x58021c00
 8001eec:	58022000 	.word	0x58022000
 8001ef0:	58022400 	.word	0x58022400
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4938      	ldr	r1, [pc, #224]	@ (8001fe8 <HAL_GPIO_Init+0x35c>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae63 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <HAL_HSEM_FastTake+0x2c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3320      	adds	r3, #32
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_HSEM_FastTake+0x30>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	58026400 	.word	0x58026400
 8002080:	80000300 	.word	0x80000300

08002084 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800208e:	4906      	ldr	r1, [pc, #24]	@ (80020a8 <HAL_HSEM_Release+0x24>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	58026400 	.word	0x58026400

080020ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d00a      	beq.n	80020d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020c0:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d001      	beq.n	80020d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e040      	b.n	8002154 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e03e      	b.n	8002154 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020d6:	4b21      	ldr	r3, [pc, #132]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80020de:	491f      	ldr	r1, [pc, #124]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020e6:	f7ff fc85 	bl	80019f4 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ec:	e009      	b.n	8002102 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020ee:	f7ff fc81 	bl	80019f4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020fc:	d901      	bls.n	8002102 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e028      	b.n	8002154 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800210a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210e:	d1ee      	bne.n	80020ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b1e      	cmp	r3, #30
 8002114:	d008      	beq.n	8002128 <HAL_PWREx_ConfigSupply+0x7c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b2e      	cmp	r3, #46	@ 0x2e
 800211a:	d005      	beq.n	8002128 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b1d      	cmp	r3, #29
 8002120:	d002      	beq.n	8002128 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b2d      	cmp	r3, #45	@ 0x2d
 8002126:	d114      	bne.n	8002152 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002128:	f7ff fc64 	bl	80019f4 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800212e:	e009      	b.n	8002144 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002130:	f7ff fc60 	bl	80019f4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800213e:	d901      	bls.n	8002144 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_PWREx_ConfigSupply+0xb0>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002150:	d1ee      	bne.n	8002130 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	58024800 	.word	0x58024800

08002160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	f000 bc48 	b.w	8002a04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8088 	beq.w	8002292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4b99      	ldr	r3, [pc, #612]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800218c:	4b96      	ldr	r3, [pc, #600]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002194:	2b10      	cmp	r3, #16
 8002196:	d007      	beq.n	80021a8 <HAL_RCC_OscConfig+0x48>
 8002198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219a:	2b18      	cmp	r3, #24
 800219c:	d111      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62>
 800219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b8f      	ldr	r3, [pc, #572]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d06d      	beq.n	8002290 <HAL_RCC_OscConfig+0x130>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d169      	bne.n	8002290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f000 bc21 	b.w	8002a04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x7a>
 80021cc:	4b86      	ldr	r3, [pc, #536]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a85      	ldr	r2, [pc, #532]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0xd8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x9c>
 80021e2:	4b81      	ldr	r3, [pc, #516]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a80      	ldr	r2, [pc, #512]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b7e      	ldr	r3, [pc, #504]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7d      	ldr	r2, [pc, #500]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xd8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0xc0>
 8002206:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a74      	ldr	r2, [pc, #464]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xd8>
 8002220:	4b71      	ldr	r3, [pc, #452]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a70      	ldr	r2, [pc, #448]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b6e      	ldr	r3, [pc, #440]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6d      	ldr	r2, [pc, #436]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fbd8 	bl	80019f4 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fbd4 	bl	80019f4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e3d4      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800225a:	4b63      	ldr	r3, [pc, #396]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fbc4 	bl	80019f4 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff fbc0 	bl	80019f4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e3c0      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002282:	4b59      	ldr	r3, [pc, #356]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x110>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80ca 	beq.w	8002434 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a0:	4b51      	ldr	r3, [pc, #324]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022aa:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_RCC_OscConfig+0x166>
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b18      	cmp	r3, #24
 80022ba:	d156      	bne.n	800236a <HAL_RCC_OscConfig+0x20a>
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d151      	bne.n	800236a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c6:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e392      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022de:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0219 	bic.w	r2, r3, #25
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	493f      	ldr	r1, [pc, #252]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb80 	bl	80019f4 <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb7c 	bl	80019f4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e37c      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230a:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	f7ff fb9d 	bl	8001a54 <HAL_GetREVID>
 800231a:	4603      	mov	r3, r0
 800231c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002320:	4293      	cmp	r3, r2
 8002322:	d817      	bhi.n	8002354 <HAL_RCC_OscConfig+0x1f4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d108      	bne.n	800233e <HAL_RCC_OscConfig+0x1de>
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002334:	4a2c      	ldr	r2, [pc, #176]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800233a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	e07a      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b2a      	ldr	r3, [pc, #168]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	031b      	lsls	r3, r3, #12
 800234c:	4926      	ldr	r1, [pc, #152]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002352:	e06f      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4921      	ldr	r1, [pc, #132]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e064      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d047      	beq.n	8002402 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0219 	bic.w	r2, r3, #25
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	491a      	ldr	r1, [pc, #104]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fb36 	bl	80019f4 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7ff fb32 	bl	80019f4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e332      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	f7ff fb53 	bl	8001a54 <HAL_GetREVID>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d819      	bhi.n	80023ec <HAL_RCC_OscConfig+0x28c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b40      	cmp	r3, #64	@ 0x40
 80023be:	d108      	bne.n	80023d2 <HAL_RCC_OscConfig+0x272>
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023c8:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80023ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ce:	6053      	str	r3, [r2, #4]
 80023d0:	e030      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	4901      	ldr	r1, [pc, #4]	@ (80023e8 <HAL_RCC_OscConfig+0x288>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
 80023e6:	e025      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
 80023e8:	58024400 	.word	0x58024400
 80023ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	4997      	ldr	r1, [pc, #604]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
 8002400:	e018      	b.n	8002434 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b95      	ldr	r3, [pc, #596]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a94      	ldr	r2, [pc, #592]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7ff faf1 	bl	80019f4 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff faed 	bl	80019f4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e2ed      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002428:	4b8b      	ldr	r3, [pc, #556]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a9 	beq.w	8002594 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4b85      	ldr	r3, [pc, #532]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800244a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800244c:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d007      	beq.n	8002468 <HAL_RCC_OscConfig+0x308>
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b18      	cmp	r3, #24
 800245c:	d13a      	bne.n	80024d4 <HAL_RCC_OscConfig+0x374>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d135      	bne.n	80024d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002468:	4b7b      	ldr	r3, [pc, #492]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_OscConfig+0x320>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b80      	cmp	r3, #128	@ 0x80
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e2c1      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002480:	f7ff fae8 	bl	8001a54 <HAL_GetREVID>
 8002484:	4603      	mov	r3, r0
 8002486:	f241 0203 	movw	r2, #4099	@ 0x1003
 800248a:	4293      	cmp	r3, r2
 800248c:	d817      	bhi.n	80024be <HAL_RCC_OscConfig+0x35e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	2b20      	cmp	r3, #32
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x348>
 8002496:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800249e:	4a6e      	ldr	r2, [pc, #440]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a6:	e075      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	069b      	lsls	r3, r3, #26
 80024b6:	4968      	ldr	r1, [pc, #416]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024bc:	e06a      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024be:	4b66      	ldr	r3, [pc, #408]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	061b      	lsls	r3, r3, #24
 80024cc:	4962      	ldr	r1, [pc, #392]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d2:	e05f      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d042      	beq.n	8002562 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80024e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fa84 	bl	80019f4 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024f0:	f7ff fa80 	bl	80019f4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e280      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002502:	4b55      	ldr	r3, [pc, #340]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250e:	f7ff faa1 	bl	8001a54 <HAL_GetREVID>
 8002512:	4603      	mov	r3, r0
 8002514:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002518:	4293      	cmp	r3, r2
 800251a:	d817      	bhi.n	800254c <HAL_RCC_OscConfig+0x3ec>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	2b20      	cmp	r3, #32
 8002522:	d108      	bne.n	8002536 <HAL_RCC_OscConfig+0x3d6>
 8002524:	4b4c      	ldr	r3, [pc, #304]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800252c:	4a4a      	ldr	r2, [pc, #296]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800252e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002532:	6053      	str	r3, [r2, #4]
 8002534:	e02e      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
 8002536:	4b48      	ldr	r3, [pc, #288]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	069b      	lsls	r3, r3, #26
 8002544:	4944      	ldr	r1, [pc, #272]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
 800254a:	e023      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
 800254c:	4b42      	ldr	r3, [pc, #264]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	493f      	ldr	r1, [pc, #252]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e018      	b.n	8002594 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3c      	ldr	r2, [pc, #240]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fa41 	bl	80019f4 <HAL_GetTick>
 8002572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002576:	f7ff fa3d 	bl	80019f4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e23d      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002588:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d036      	beq.n	800260e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d019      	beq.n	80025dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa1e 	bl	80019f4 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025bc:	f7ff fa1a 	bl	80019f4 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e21a      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ce:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x45c>
 80025da:	e018      	b.n	800260e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fa04 	bl	80019f4 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff fa00 	bl	80019f4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e200      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d039      	beq.n	800268e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002622:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800262c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800262e:	f7ff f9e1 	bl	80019f4 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002636:	f7ff f9dd 	bl	80019f4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1dd      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_RCC_OscConfig+0x4f8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x4d6>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
 8002656:	bf00      	nop
 8002658:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800265c:	4b9b      	ldr	r3, [pc, #620]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a9a      	ldr	r2, [pc, #616]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002668:	f7ff f9c4 	bl	80019f4 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002670:	f7ff f9c0 	bl	80019f4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1c0      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002682:	4b92      	ldr	r3, [pc, #584]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8081 	beq.w	800279e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800269c:	4b8c      	ldr	r3, [pc, #560]	@ (80028d0 <HAL_RCC_OscConfig+0x770>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a8b      	ldr	r2, [pc, #556]	@ (80028d0 <HAL_RCC_OscConfig+0x770>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a8:	f7ff f9a4 	bl	80019f4 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7ff f9a0 	bl	80019f4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1a0      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c2:	4b83      	ldr	r3, [pc, #524]	@ (80028d0 <HAL_RCC_OscConfig+0x770>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x584>
 80026d6:	4b7d      	ldr	r3, [pc, #500]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a7c      	ldr	r2, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e2:	e02d      	b.n	8002740 <HAL_RCC_OscConfig+0x5e0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x5a6>
 80026ec:	4b77      	ldr	r3, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a76      	ldr	r2, [pc, #472]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	4b74      	ldr	r3, [pc, #464]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a73      	ldr	r2, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x5e0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c8>
 800270e:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	4b6c      	ldr	r3, [pc, #432]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	4a6b      	ldr	r2, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	@ 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x5e0>
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a67      	ldr	r2, [pc, #412]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
 8002734:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a64      	ldr	r2, [pc, #400]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f954 	bl	80019f4 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff f950 	bl	80019f4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e14e      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002766:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x5f0>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7ff f93e 	bl	80019f4 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7ff f93a 	bl	80019f4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e138      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002792:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 812d 	beq.w	8002a02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027a8:	4b48      	ldr	r3, [pc, #288]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027b0:	2b18      	cmp	r3, #24
 80027b2:	f000 80bd 	beq.w	8002930 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 809e 	bne.w	80028fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a41      	ldr	r2, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80027c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f912 	bl	80019f4 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f90e 	bl	80019f4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e10e      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e6:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f2:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027f6:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <HAL_RCC_OscConfig+0x774>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	430a      	orrs	r2, r1
 8002806:	4931      	ldr	r1, [pc, #196]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	628b      	str	r3, [r1, #40]	@ 0x28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	3b01      	subs	r3, #1
 8002812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	3b01      	subs	r3, #1
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	b29b      	uxth	r3, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	3b01      	subs	r3, #1
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800283c:	4923      	ldr	r1, [pc, #140]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	4a21      	ldr	r2, [pc, #132]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002852:	4b21      	ldr	r3, [pc, #132]	@ (80028d8 <HAL_RCC_OscConfig+0x778>)
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800285a:	00d2      	lsls	r2, r2, #3
 800285c:	491b      	ldr	r1, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	f023 020c 	bic.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4917      	ldr	r1, [pc, #92]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002874:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	f023 0202 	bic.w	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	4912      	ldr	r1, [pc, #72]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	4a10      	ldr	r2, [pc, #64]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	4a0d      	ldr	r2, [pc, #52]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <HAL_RCC_OscConfig+0x76c>)
 80028bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff f897 	bl	80019f4 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c8:	e011      	b.n	80028ee <HAL_RCC_OscConfig+0x78e>
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	58024800 	.word	0x58024800
 80028d4:	fffffc0c 	.word	0xfffffc0c
 80028d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff f88a 	bl	80019f4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e08a      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x77c>
 80028fa:	e082      	b.n	8002a02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a42      	ldr	r2, [pc, #264]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 8002902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff f874 	bl	80019f4 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7ff f870 	bl	80019f4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e070      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002922:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x7b0>
 800292e:	e068      	b.n	8002a02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002930:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002936:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	2b01      	cmp	r3, #1
 8002942:	d031      	beq.n	80029a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d12a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d122      	bne.n	80029a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0a5b      	lsrs	r3, r3, #9
 8002976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d111      	bne.n	80029a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0e1b      	lsrs	r3, r3, #24
 800299a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e02b      	b.n	8002a04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d01f      	beq.n	8002a02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a11      	ldr	r2, [pc, #68]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ce:	f7ff f811 	bl	80019f4 <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029d4:	bf00      	nop
 80029d6:	f7ff f80d 	bl	80019f4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	4293      	cmp	r3, r2
 80029e0:	d0f9      	beq.n	80029d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_RCC_OscConfig+0x8b0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ee:	00d2      	lsls	r2, r2, #3
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029f6:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_RCC_OscConfig+0x8ac>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3730      	adds	r7, #48	@ 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	ffff0007 	.word	0xffff0007

08002a14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e19c      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b8a      	ldr	r3, [pc, #552]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b87      	ldr	r3, [pc, #540]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 020f 	bic.w	r2, r3, #15
 8002a3e:	4985      	ldr	r1, [pc, #532]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b83      	ldr	r3, [pc, #524]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e184      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	4b7b      	ldr	r3, [pc, #492]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d908      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a74:	4b78      	ldr	r3, [pc, #480]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4975      	ldr	r1, [pc, #468]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	4b70      	ldr	r3, [pc, #448]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	496a      	ldr	r1, [pc, #424]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	4b64      	ldr	r3, [pc, #400]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ad0:	4b61      	ldr	r3, [pc, #388]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	495e      	ldr	r1, [pc, #376]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002afe:	4b56      	ldr	r3, [pc, #344]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4953      	ldr	r1, [pc, #332]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4b4d      	ldr	r3, [pc, #308]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d908      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f023 020f 	bic.w	r2, r3, #15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4947      	ldr	r1, [pc, #284]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d055      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b4a:	4b43      	ldr	r3, [pc, #268]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4940      	ldr	r1, [pc, #256]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b64:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d121      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0f6      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0ea      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b94:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0de      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d6      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4925      	ldr	r1, [pc, #148]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc6:	f7fe ff15 	bl	80019f4 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bce:	f7fe ff11 	bl	80019f4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0be      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d1eb      	bne.n	8002bce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d208      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c12:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f023 020f 	bic.w	r2, r3, #15
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	490e      	ldr	r1, [pc, #56]	@ (8002c58 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d214      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	4906      	ldr	r1, [pc, #24]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <HAL_RCC_ClockConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e086      	b.n	8002d62 <HAL_RCC_ClockConfig+0x34e>
 8002c54:	52002000 	.word	0x52002000
 8002c58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d010      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d208      	bcs.n	8002c8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c78:	4b3c      	ldr	r3, [pc, #240]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4939      	ldr	r1, [pc, #228]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d208      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ca6:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	492e      	ldr	r1, [pc, #184]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd4:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4922      	ldr	r1, [pc, #136]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d208      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d02:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4917      	ldr	r1, [pc, #92]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d14:	f000 f834 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	4912      	ldr	r1, [pc, #72]	@ (8002d70 <HAL_RCC_ClockConfig+0x35c>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_RCC_ClockConfig+0x358>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <HAL_RCC_ClockConfig+0x35c>)
 8002d3c:	5cd3      	ldrb	r3, [r2, r3]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_RCC_ClockConfig+0x360>)
 8002d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_RCC_ClockConfig+0x364>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_RCC_ClockConfig+0x368>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe02 	bl	8001960 <HAL_InitTick>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	0800b178 	.word	0x0800b178
 8002d74:	24000004 	.word	0x24000004
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	24000014 	.word	0x24000014

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d86:	4bb3      	ldr	r3, [pc, #716]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d8e:	2b18      	cmp	r3, #24
 8002d90:	f200 8155 	bhi.w	800303e <HAL_RCC_GetSysClockFreq+0x2be>
 8002d94:	a201      	add	r2, pc, #4	@ (adr r2, 8002d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	0800303f 	.word	0x0800303f
 8002da4:	0800303f 	.word	0x0800303f
 8002da8:	0800303f 	.word	0x0800303f
 8002dac:	0800303f 	.word	0x0800303f
 8002db0:	0800303f 	.word	0x0800303f
 8002db4:	0800303f 	.word	0x0800303f
 8002db8:	0800303f 	.word	0x0800303f
 8002dbc:	08002e27 	.word	0x08002e27
 8002dc0:	0800303f 	.word	0x0800303f
 8002dc4:	0800303f 	.word	0x0800303f
 8002dc8:	0800303f 	.word	0x0800303f
 8002dcc:	0800303f 	.word	0x0800303f
 8002dd0:	0800303f 	.word	0x0800303f
 8002dd4:	0800303f 	.word	0x0800303f
 8002dd8:	0800303f 	.word	0x0800303f
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	0800303f 	.word	0x0800303f
 8002de4:	0800303f 	.word	0x0800303f
 8002de8:	0800303f 	.word	0x0800303f
 8002dec:	0800303f 	.word	0x0800303f
 8002df0:	0800303f 	.word	0x0800303f
 8002df4:	0800303f 	.word	0x0800303f
 8002df8:	0800303f 	.word	0x0800303f
 8002dfc:	08002e33 	.word	0x08002e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e00:	4b94      	ldr	r3, [pc, #592]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e0c:	4b91      	ldr	r3, [pc, #580]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	4a90      	ldr	r2, [pc, #576]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e1e:	e111      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e20:	4b8d      	ldr	r3, [pc, #564]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e22:	61bb      	str	r3, [r7, #24]
      break;
 8002e24:	e10e      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e26:	4b8d      	ldr	r3, [pc, #564]	@ (800305c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e28:	61bb      	str	r3, [r7, #24]
      break;
 8002e2a:	e10b      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e2e:	61bb      	str	r3, [r7, #24]
      break;
 8002e30:	e108      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e32:	4b88      	ldr	r3, [pc, #544]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e3c:	4b85      	ldr	r3, [pc, #532]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e48:	4b82      	ldr	r3, [pc, #520]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e52:	4b80      	ldr	r3, [pc, #512]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80e1 	beq.w	8003038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	f000 8083 	beq.w	8002f84 <HAL_RCC_GetSysClockFreq+0x204>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	f200 80a1 	bhi.w	8002fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x114>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d056      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e92:	e099      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b62      	ldr	r3, [pc, #392]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002efa:	e087      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0e:	4b51      	ldr	r3, [pc, #324]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3e:	e065      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800306c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f52:	4b40      	ldr	r3, [pc, #256]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f82:	e043      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f96:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002faa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc6:	e021      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800306c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800300a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	0a5b      	lsrs	r3, r3, #9
 8003012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003016:	3301      	adds	r3, #1
 8003018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003024:	edd7 6a07 	vldr	s13, [r7, #28]
 8003028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800302c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003030:	ee17 3a90 	vmov	r3, s15
 8003034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003036:	e005      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
      break;
 800303c:	e002      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800303e:	4b07      	ldr	r3, [pc, #28]	@ (800305c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003040:	61bb      	str	r3, [r7, #24]
      break;
 8003042:	bf00      	nop
  }

  return sysclockfreq;
 8003044:	69bb      	ldr	r3, [r7, #24]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	58024400 	.word	0x58024400
 8003058:	03d09000 	.word	0x03d09000
 800305c:	003d0900 	.word	0x003d0900
 8003060:	017d7840 	.word	0x017d7840
 8003064:	46000000 	.word	0x46000000
 8003068:	4c742400 	.word	0x4c742400
 800306c:	4a742400 	.word	0x4a742400
 8003070:	4bbebc20 	.word	0x4bbebc20

08003074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800307a:	f7ff fe81 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490f      	ldr	r1, [pc, #60]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003098:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	4a09      	ldr	r2, [pc, #36]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x58>)
 80030b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030b2:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030b8:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x58>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	58024400 	.word	0x58024400
 80030c8:	0800b178 	.word	0x0800b178
 80030cc:	24000004 	.word	0x24000004
 80030d0:	24000000 	.word	0x24000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030d8:	f7ff ffcc 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4904      	ldr	r1, [pc, #16]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	0800b178 	.word	0x0800b178

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003104:	b0cc      	sub	sp, #304	@ 0x130
 8003106:	af00      	add	r7, sp, #0
 8003108:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800310c:	2300      	movs	r3, #0
 800310e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003112:	2300      	movs	r3, #0
 8003114:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003124:	2500      	movs	r5, #0
 8003126:	ea54 0305 	orrs.w	r3, r4, r5
 800312a:	d049      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800312c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003132:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003138:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800313c:	d828      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003142:	d01a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003148:	d822      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800314e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003152:	d007      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003154:	e01c      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003156:	4bb8      	ldr	r3, [pc, #736]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	4ab7      	ldr	r2, [pc, #732]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003162:	e01a      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003168:	3308      	adds	r3, #8
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f002 fba1 	bl	80058b4 <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003178:	e00f      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800317a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800317e:	3328      	adds	r3, #40	@ 0x28
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f002 fc48 	bl	8005a18 <RCCEx_PLL3_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800318e:	e004      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003196:	e000      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b0:	4aa1      	ldr	r2, [pc, #644]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80031b6:	e003      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031cc:	f04f 0900 	mov.w	r9, #0
 80031d0:	ea58 0309 	orrs.w	r3, r8, r9
 80031d4:	d047      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d82a      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	0800320b 	.word	0x0800320b
 80031f0:	08003221 	.word	0x08003221
 80031f4:	0800323f 	.word	0x0800323f
 80031f8:	0800323f 	.word	0x0800323f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	4a8d      	ldr	r2, [pc, #564]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003208:	e01a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800320a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800320e:	3308      	adds	r3, #8
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fb4e 	bl	80058b4 <RCCEx_PLL2_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800321e:	e00f      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003224:	3328      	adds	r3, #40	@ 0x28
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fbf5 	bl	8005a18 <RCCEx_PLL3_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003234:	e004      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800323c:	e000      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800323e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003240:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003248:	4b7b      	ldr	r3, [pc, #492]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324c:	f023 0107 	bic.w	r1, r3, #7
 8003250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	4a78      	ldr	r2, [pc, #480]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003258:	430b      	orrs	r3, r1
 800325a:	6513      	str	r3, [r2, #80]	@ 0x50
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003262:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003272:	f04f 0b00 	mov.w	fp, #0
 8003276:	ea5a 030b 	orrs.w	r3, sl, fp
 800327a:	d04c      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800327c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003286:	d030      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328c:	d829      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800328e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003290:	d02d      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003292:	2bc0      	cmp	r3, #192	@ 0xc0
 8003294:	d825      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d018      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800329a:	2b80      	cmp	r3, #128	@ 0x80
 800329c:	d821      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d007      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80032a6:	e01c      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a8:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	4a62      	ldr	r2, [pc, #392]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032b4:	e01c      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ba:	3308      	adds	r3, #8
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 faf8 	bl	80058b4 <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032ca:	e011      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d0:	3328      	adds	r3, #40	@ 0x28
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 fb9f 	bl	8005a18 <RCCEx_PLL3_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	4a4c      	ldr	r2, [pc, #304]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6513      	str	r3, [r2, #80]	@ 0x50
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003322:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800332c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d053      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800333e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003342:	d035      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003344:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003348:	d82e      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800334a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800334e:	d031      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003350:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003354:	d828      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800335a:	d01a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800335c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003360:	d822      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800336a:	d007      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800336c:	e01c      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336e:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800337a:	e01c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800337c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003380:	3308      	adds	r3, #8
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f002 fa95 	bl	80058b4 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003390:	e011      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003396:	3328      	adds	r3, #40	@ 0x28
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fb3c 	bl	8005a18 <RCCEx_PLL3_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a6:	e006      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80033c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80033ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80033f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d056      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800340a:	d038      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003410:	d831      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003416:	d034      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003418:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800341c:	d82b      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800341e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003422:	d01d      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003428:	d825      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800342e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003434:	e01f      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343c:	4ba2      	ldr	r3, [pc, #648]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	4aa1      	ldr	r2, [pc, #644]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003448:	e01c      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800344a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344e:	3308      	adds	r3, #8
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fa2e 	bl	80058b4 <RCCEx_PLL2_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003464:	3328      	adds	r3, #40	@ 0x28
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f002 fad5 	bl	8005a18 <RCCEx_PLL3_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800347c:	e002      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800348c:	4b8e      	ldr	r3, [pc, #568]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800349c:	4a8a      	ldr	r2, [pc, #552]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a2:	e003      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d03a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	2b30      	cmp	r3, #48	@ 0x30
 80034d4:	d01f      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80034d6:	2b30      	cmp	r3, #48	@ 0x30
 80034d8:	d819      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d815      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d111      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ea:	4b77      	ldr	r3, [pc, #476]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	4a76      	ldr	r2, [pc, #472]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034f6:	e011      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034fc:	3308      	adds	r3, #8
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f002 f9d7 	bl	80058b4 <RCCEx_PLL2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800350c:	e006      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003514:	e002      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800351a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003524:	4b68      	ldr	r3, [pc, #416]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003528:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800352c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	4a65      	ldr	r2, [pc, #404]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003534:	430b      	orrs	r3, r1
 8003536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800353e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800354e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003558:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800355c:	460b      	mov	r3, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	d051      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800356c:	d035      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003572:	d82e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003574:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003578:	d031      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800357a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800357e:	d828      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003584:	d01a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358a:	d822      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003594:	d007      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003596:	e01c      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003598:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	4a4a      	ldr	r2, [pc, #296]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035a4:	e01c      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035aa:	3308      	adds	r3, #8
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 f980 	bl	80058b4 <RCCEx_PLL2_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c0:	3328      	adds	r3, #40	@ 0x28
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fa27 	bl	8005a18 <RCCEx_PLL3_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035e8:	4b37      	ldr	r3, [pc, #220]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f6:	4a34      	ldr	r2, [pc, #208]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003602:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003612:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003616:	2300      	movs	r3, #0
 8003618:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800361c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d056      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800362a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003630:	d033      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003632:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003636:	d82c      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800363c:	d02f      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800363e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003642:	d826      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003644:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003648:	d02b      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800364a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800364e:	d820      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003654:	d012      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800365a:	d81a      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003664:	d115      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800366a:	3308      	adds	r3, #8
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f002 f920 	bl	80058b4 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800367a:	e015      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800367c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003680:	3328      	adds	r3, #40	@ 0x28
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f002 f9c7 	bl	8005a18 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003698:	e006      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800369a:	bf00      	nop
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10d      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036be:	4a02      	ldr	r2, [pc, #8]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036c6:	bf00      	nop
 80036c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036ea:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d055      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003700:	d033      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003706:	d82c      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370c:	d02f      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003712:	d826      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003714:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003718:	d02b      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800371a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800371e:	d820      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003724:	d012      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800372a:	d81a      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003734:	d115      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003736:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800373a:	3308      	adds	r3, #8
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f002 f8b8 	bl	80058b4 <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800374a:	e015      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f002 f95f 	bl	8005a18 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003778:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003780:	4bb6      	ldr	r3, [pc, #728]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003790:	4ab2      	ldr	r2, [pc, #712]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58
 8003796:	e003      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800379c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80037a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80037ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d02a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80037c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ce:	d10a      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d4:	3308      	adds	r3, #8
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 f86b 	bl	80058b4 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80037ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80037f8:	4b98      	ldr	r3, [pc, #608]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003800:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	4a95      	ldr	r2, [pc, #596]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003808:	430b      	orrs	r3, r1
 800380a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003812:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003822:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800382c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d037      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003840:	d00e      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003846:	d816      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d018      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800384c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003850:	d111      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003852:	4b82      	ldr	r3, [pc, #520]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003856:	4a81      	ldr	r2, [pc, #516]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800385e:	e00f      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003864:	3308      	adds	r3, #8
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 f823 	bl	80058b4 <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003888:	4b74      	ldr	r3, [pc, #464]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003896:	4a71      	ldr	r2, [pc, #452]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	@ 0x50
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80038bc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d03a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d81d      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	08003915 	.word	0x08003915
 80038dc:	080038e9 	.word	0x080038e9
 80038e0:	080038f7 	.word	0x080038f7
 80038e4:	08003915 	.word	0x08003915
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b5c      	ldr	r3, [pc, #368]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4a5b      	ldr	r2, [pc, #364]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038f4:	e00f      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038fa:	3308      	adds	r3, #8
 80038fc:	2102      	movs	r1, #2
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 ffd8 	bl	80058b4 <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800390a:	e004      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003916:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800391e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003922:	f023 0103 	bic.w	r1, r3, #3
 8003926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800392e:	430b      	orrs	r3, r1
 8003930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003938:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800393c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003952:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	f000 80a0 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395e:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3f      	ldr	r2, [pc, #252]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396a:	f7fe f843 	bl	80019f4 <HAL_GetTick>
 800396e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003972:	e00b      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe f83e 	bl	80019f4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b64      	cmp	r3, #100	@ 0x64
 8003982:	d903      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800398a:	e005      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ed      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003998:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800399c:	2b00      	cmp	r3, #0
 800399e:	d17a      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039a0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039ac:	4053      	eors	r3, r2
 80039ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d015      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b6:	4b29      	ldr	r3, [pc, #164]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c2:	4b26      	ldr	r3, [pc, #152]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	4a25      	ldr	r2, [pc, #148]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039da:	4a20      	ldr	r2, [pc, #128]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80039e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ee:	d118      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe f800 	bl	80019f4 <HAL_GetTick>
 80039f4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f8:	e00d      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fd fffb 	bl	80019f4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d903      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003a14:	e005      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a16:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0eb      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d130      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3a:	d115      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003a3c:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a4c:	091a      	lsrs	r2, r3, #4
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	4a02      	ldr	r2, [pc, #8]	@ (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6113      	str	r3, [r2, #16]
 8003a58:	e00c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003a5a:	bf00      	nop
 8003a5c:	58024400 	.word	0x58024400
 8003a60:	58024800 	.word	0x58024800
 8003a64:	00ffffcf 	.word	0x00ffffcf
 8003a68:	4bd4      	ldr	r3, [pc, #848]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	4ad3      	ldr	r2, [pc, #844]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003a6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a72:	6113      	str	r3, [r2, #16]
 8003a74:	4bd1      	ldr	r3, [pc, #836]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003a76:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	4acd      	ldr	r2, [pc, #820]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	e008      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f002 0301 	and.w	r3, r2, #1
 8003aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f000 808b 	beq.w	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac8:	2b28      	cmp	r3, #40	@ 0x28
 8003aca:	d86b      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003bad 	.word	0x08003bad
 8003ad8:	08003ba5 	.word	0x08003ba5
 8003adc:	08003ba5 	.word	0x08003ba5
 8003ae0:	08003ba5 	.word	0x08003ba5
 8003ae4:	08003ba5 	.word	0x08003ba5
 8003ae8:	08003ba5 	.word	0x08003ba5
 8003aec:	08003ba5 	.word	0x08003ba5
 8003af0:	08003ba5 	.word	0x08003ba5
 8003af4:	08003b79 	.word	0x08003b79
 8003af8:	08003ba5 	.word	0x08003ba5
 8003afc:	08003ba5 	.word	0x08003ba5
 8003b00:	08003ba5 	.word	0x08003ba5
 8003b04:	08003ba5 	.word	0x08003ba5
 8003b08:	08003ba5 	.word	0x08003ba5
 8003b0c:	08003ba5 	.word	0x08003ba5
 8003b10:	08003ba5 	.word	0x08003ba5
 8003b14:	08003b8f 	.word	0x08003b8f
 8003b18:	08003ba5 	.word	0x08003ba5
 8003b1c:	08003ba5 	.word	0x08003ba5
 8003b20:	08003ba5 	.word	0x08003ba5
 8003b24:	08003ba5 	.word	0x08003ba5
 8003b28:	08003ba5 	.word	0x08003ba5
 8003b2c:	08003ba5 	.word	0x08003ba5
 8003b30:	08003ba5 	.word	0x08003ba5
 8003b34:	08003bad 	.word	0x08003bad
 8003b38:	08003ba5 	.word	0x08003ba5
 8003b3c:	08003ba5 	.word	0x08003ba5
 8003b40:	08003ba5 	.word	0x08003ba5
 8003b44:	08003ba5 	.word	0x08003ba5
 8003b48:	08003ba5 	.word	0x08003ba5
 8003b4c:	08003ba5 	.word	0x08003ba5
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003bad 	.word	0x08003bad
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003ba5 	.word	0x08003ba5
 8003b6c:	08003ba5 	.word	0x08003ba5
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003bad 	.word	0x08003bad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fe97 	bl	80058b4 <RCCEx_PLL2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b8c:	e00f      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b92:	3328      	adds	r3, #40	@ 0x28
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 ff3e 	bl	8005a18 <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e004      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bb6:	4b81      	ldr	r3, [pc, #516]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f002 0302 	and.w	r3, r2, #2
 8003be2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003bec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d042      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d825      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c55 	.word	0x08003c55
 8003c0c:	08003c21 	.word	0x08003c21
 8003c10:	08003c37 	.word	0x08003c37
 8003c14:	08003c55 	.word	0x08003c55
 8003c18:	08003c55 	.word	0x08003c55
 8003c1c:	08003c55 	.word	0x08003c55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c24:	3308      	adds	r3, #8
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 fe43 	bl	80058b4 <RCCEx_PLL2_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c34:	e00f      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c3a:	3328      	adds	r3, #40	@ 0x28
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 feea 	bl	8005a18 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c5e:	4b57      	ldr	r3, [pc, #348]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c62:	f023 0107 	bic.w	r1, r3, #7
 8003c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6c:	4a53      	ldr	r2, [pc, #332]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c72:	e003      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 0304 	and.w	r3, r2, #4
 8003c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d044      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d825      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cdf 	.word	0x08003cdf
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003cfd 	.word	0x08003cfd
 8003cc4:	08003cfd 	.word	0x08003cfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ccc:	3308      	adds	r3, #8
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fdef 	bl	80058b4 <RCCEx_PLL2_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cdc:	e00f      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce2:	3328      	adds	r3, #40	@ 0x28
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fe96 	bl	8005a18 <RCCEx_PLL3_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cf2:	e004      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d06:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	f023 0107 	bic.w	r1, r3, #7
 8003d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d16:	4a29      	ldr	r2, [pc, #164]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f002 0320 	and.w	r3, r2, #32
 8003d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d057      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d52:	d035      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d58:	d82c      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d5e:	d031      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d64:	d826      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d6a:	d02d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003d6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d70:	d820      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d76:	d012      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d7c:	d81a      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d024      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d86:	d115      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fd8f 	bl	80058b4 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e017      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003da2:	3328      	adds	r3, #40	@ 0x28
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fe36 	bl	8005a18 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003db2:	e00c      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003dba:	e008      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003dbc:	58024400 	.word	0x58024400
        break;
 8003dc0:	bf00      	nop
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003dc4:	bf00      	nop
 8003dc6:	e002      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10b      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd6:	4bc2      	ldr	r3, [pc, #776]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	4abe      	ldr	r2, [pc, #760]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dec:	e003      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003df2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d055      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e22:	d033      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003e24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e28:	d82c      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2e:	d02f      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e34:	d826      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003e36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e3a:	d02b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003e3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e40:	d820      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e46:	d012      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e4c:	d81a      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d022      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e56:	d115      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fd27 	bl	80058b4 <RCCEx_PLL2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e6c:	e015      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e72:	3328      	adds	r3, #40	@ 0x28
 8003e74:	2102      	movs	r1, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 fdce 	bl	8005a18 <RCCEx_PLL3_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e82:	e00a      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e004      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003e90:	bf00      	nop
 8003e92:	e002      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003eb2:	4a8b      	ldr	r2, [pc, #556]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ebe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ece:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ed8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d055      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003eee:	d033      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003ef0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ef4:	d82c      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efa:	d02f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f00:	d826      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003f02:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003f08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f0c:	d820      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f12:	d012      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f18:	d81a      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f22:	d115      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f28:	3308      	adds	r3, #8
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fcc1 	bl	80058b4 <RCCEx_PLL2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f38:	e015      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f3e:	3328      	adds	r3, #40	@ 0x28
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fd68 	bl	8005a18 <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f56:	e006      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f7e:	4a58      	ldr	r2, [pc, #352]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f84:	e003      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f002 0308 	and.w	r3, r2, #8
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fa4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d01e      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fc0:	3328      	adds	r3, #40	@ 0x28
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fd27 	bl	8005a18 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fd6:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f002 0310 	and.w	r3, r2, #16
 8003ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004002:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d01e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800400c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004010:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800401a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800401e:	3328      	adds	r3, #40	@ 0x28
 8004020:	2102      	movs	r1, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f001 fcf8 	bl	8005a18 <RCCEx_PLL3_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004034:	4b2a      	ldr	r3, [pc, #168]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800403c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004044:	4a26      	ldr	r2, [pc, #152]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800404a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004060:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d040      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800406a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800406e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004076:	d022      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800407c:	d81b      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d00b      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004088:	e015      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800408e:	3308      	adds	r3, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fc0e 	bl	80058b4 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800409e:	e00f      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fcb5 	bl	8005a18 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80040be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040d8:	4a01      	ldr	r2, [pc, #4]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040da:	430b      	orrs	r3, r1
 80040dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040de:	e005      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80040e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80040f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040fa:	2300      	movs	r3, #0
 80040fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004102:	460b      	mov	r3, r1
 8004104:	4313      	orrs	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800410c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004114:	d01f      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800411a:	d818      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004126:	d007      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004128:	e011      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412a:	4b64      	ldr	r3, [pc, #400]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	4a63      	ldr	r2, [pc, #396]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004136:	e00f      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fc69 	bl	8005a18 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004158:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004160:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004170:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004172:	430b      	orrs	r3, r1
 8004174:	6553      	str	r3, [r2, #84]	@ 0x54
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800417c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800418c:	673b      	str	r3, [r7, #112]	@ 0x70
 800418e:	2300      	movs	r3, #0
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
 8004192:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800419c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041aa:	d007      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80041ac:	e011      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041ba:	e00e      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c0:	3308      	adds	r3, #8
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fb75 	bl	80058b4 <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041d0:	e003      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041e2:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f0:	4a32      	ldr	r2, [pc, #200]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041f6:	e003      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800420c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800420e:	2300      	movs	r3, #0
 8004210:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004212:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004216:	460b      	mov	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	d00c      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800421c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004220:	3328      	adds	r3, #40	@ 0x28
 8004222:	2102      	movs	r1, #2
 8004224:	4618      	mov	r0, r3
 8004226:	f001 fbf7 	bl	8005a18 <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004242:	663b      	str	r3, [r7, #96]	@ 0x60
 8004244:	2300      	movs	r3, #0
 8004246:	667b      	str	r3, [r7, #100]	@ 0x64
 8004248:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d03a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425e:	d018      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004260:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004264:	d811      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426a:	d014      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d80b      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d011      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427c:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	4a0e      	ldr	r2, [pc, #56]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800429a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10d      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b4:	4a01      	ldr	r2, [pc, #4]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ba:	e005      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80042bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042d6:	2300      	movs	r3, #0
 80042d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e4:	4baa      	ldr	r3, [pc, #680]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80042e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80042ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042f2:	4aa7      	ldr	r2, [pc, #668]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004304:	653b      	str	r3, [r7, #80]	@ 0x50
 8004306:	2300      	movs	r3, #0
 8004308:	657b      	str	r3, [r7, #84]	@ 0x54
 800430a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004314:	4b9e      	ldr	r3, [pc, #632]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800431c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004320:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004324:	4a9a      	ldr	r2, [pc, #616]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004326:	430b      	orrs	r3, r1
 8004328:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800432a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004338:	2300      	movs	r3, #0
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004340:	460b      	mov	r3, r1
 8004342:	4313      	orrs	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004346:	4b92      	ldr	r3, [pc, #584]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800434e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	4a8e      	ldr	r2, [pc, #568]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004356:	430b      	orrs	r3, r1
 8004358:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800435a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
 8004368:	2300      	movs	r3, #0
 800436a:	647b      	str	r3, [r7, #68]	@ 0x44
 800436c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004376:	4b86      	ldr	r3, [pc, #536]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4a85      	ldr	r2, [pc, #532]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800437c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004380:	6113      	str	r3, [r2, #16]
 8004382:	4b83      	ldr	r3, [pc, #524]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004384:	6919      	ldr	r1, [r3, #16]
 8004386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800438a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800438e:	4a80      	ldr	r2, [pc, #512]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a2:	2300      	movs	r3, #0
 80043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043b0:	4b77      	ldr	r3, [pc, #476]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043be:	4a74      	ldr	r2, [pc, #464]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d2:	2300      	movs	r3, #0
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80043e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f0:	4a67      	ldr	r2, [pc, #412]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	2100      	movs	r1, #0
 8004400:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004408:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d011      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004416:	3308      	adds	r3, #8
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fa4a 	bl	80058b4 <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004426:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004432:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	2100      	movs	r1, #0
 8004440:	6239      	str	r1, [r7, #32]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
 8004448:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d011      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004456:	3308      	adds	r3, #8
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fa2a 	bl	80058b4 <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004472:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004476:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	2100      	movs	r1, #0
 8004480:	61b9      	str	r1, [r7, #24]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d011      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004496:	3308      	adds	r3, #8
 8004498:	2102      	movs	r1, #2
 800449a:	4618      	mov	r0, r3
 800449c:	f001 fa0a 	bl	80058b4 <RCCEx_PLL2_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80044a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	2100      	movs	r1, #0
 80044c0:	6139      	str	r1, [r7, #16]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d011      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d6:	3328      	adds	r3, #40	@ 0x28
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fa9c 	bl	8005a18 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80044e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	2100      	movs	r1, #0
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d011      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004516:	3328      	adds	r3, #40	@ 0x28
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fa7c 	bl	8005a18 <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004526:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	2100      	movs	r1, #0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	e9d7 1200 	ldrd	r1, r2, [r7]
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d011      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004556:	3328      	adds	r3, #40	@ 0x28
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f001 fa5c 	bl	8005a18 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8004566:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004572:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8004576:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
}
 8004584:	4618      	mov	r0, r3
 8004586:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800458a:	46bd      	mov	sp, r7
 800458c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004590:	58024400 	.word	0x58024400

08004594 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b090      	sub	sp, #64	@ 0x40
 8004598:	af00      	add	r7, sp, #0
 800459a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800459e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80045a6:	430b      	orrs	r3, r1
 80045a8:	f040 8094 	bne.w	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80045ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	f200 8087 	bhi.w	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d9 	.word	0x080045d9
 80045c8:	08004601 	.word	0x08004601
 80045cc:	08004629 	.word	0x08004629
 80045d0:	080046c5 	.word	0x080046c5
 80045d4:	08004651 	.word	0x08004651
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045d8:	4b93      	ldr	r3, [pc, #588]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045e4:	d108      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f810 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80045f4:	f000 bd45 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045fc:	f000 bd41 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004600:	4b89      	ldr	r3, [pc, #548]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800460c:	d108      	bne.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800460e:	f107 0318 	add.w	r3, r7, #24
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fd54 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800461c:	f000 bd31 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004624:	f000 bd2d 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004628:	4b7f      	ldr	r3, [pc, #508]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004634:	d108      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fe94 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004644:	f000 bd1d 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800464c:	f000 bd19 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004650:	4b75      	ldr	r3, [pc, #468]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004658:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b04      	cmp	r3, #4
 8004664:	d10c      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800466c:	4b6e      	ldr	r3, [pc, #440]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	4a6d      	ldr	r2, [pc, #436]	@ (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800467e:	e01f      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004680:	4b69      	ldr	r3, [pc, #420]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468c:	d106      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800468e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004694:	d102      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004696:	4b66      	ldr	r3, [pc, #408]	@ (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469a:	e011      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800469c:	4b62      	ldr	r3, [pc, #392]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b0:	d102      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80046b2:	4b60      	ldr	r3, [pc, #384]	@ (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80046bc:	f000 bce1 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80046c0:	f000 bcdf 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80046c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046c8:	f000 bcdb 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046d0:	f000 bcd7 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80046d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80046dc:	430b      	orrs	r3, r1
 80046de:	f040 80ad 	bne.w	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80046e2:	4b51      	ldr	r3, [pc, #324]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f2:	d056      	beq.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fa:	f200 8090 	bhi.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004700:	2bc0      	cmp	r3, #192	@ 0xc0
 8004702:	f000 8088 	beq.w	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	2bc0      	cmp	r3, #192	@ 0xc0
 800470a:	f200 8088 	bhi.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d032      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	2b80      	cmp	r3, #128	@ 0x80
 8004718:	f200 8081 	bhi.w	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d014      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004728:	e079      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800472a:	4b3f      	ldr	r3, [pc, #252]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004736:	d108      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800473c:	4618      	mov	r0, r3
 800473e:	f000 ff67 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004746:	f000 bc9c 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800474e:	f000 bc98 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004752:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475e:	d108      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004760:	f107 0318 	add.w	r3, r7, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fcab 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800476e:	f000 bc88 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004776:	f000 bc84 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800477a:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004786:	d108      	bne.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fdeb 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004796:	f000 bc74 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800479e:	f000 bc70 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047a2:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80047b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	08db      	lsrs	r3, r3, #3
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	4a18      	ldr	r2, [pc, #96]	@ (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d0:	e01f      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047de:	d106      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80047e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047e6:	d102      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80047ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047fa:	d106      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004802:	d102      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800480e:	f000 bc38 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004812:	f000 bc36 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800481a:	f000 bc32 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004822:	f000 bc2e 	b.w	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
 800482c:	03d09000 	.word	0x03d09000
 8004830:	003d0900 	.word	0x003d0900
 8004834:	017d7840 	.word	0x017d7840
 8004838:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800483c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004840:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004844:	430b      	orrs	r3, r1
 8004846:	f040 809c 	bne.w	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800484a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8004852:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800485a:	d054      	beq.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004862:	f200 808b 	bhi.w	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800486c:	f000 8083 	beq.w	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004876:	f200 8081 	bhi.w	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004880:	d02f      	beq.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004888:	d878      	bhi.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004896:	d012      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004898:	e070      	b.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800489a:	4b8a      	ldr	r3, [pc, #552]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048a6:	d107      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 feaf 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048b6:	e3e4      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048bc:	e3e1      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048be:	4b81      	ldr	r3, [pc, #516]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d107      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048cc:	f107 0318 	add.w	r3, r7, #24
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fbf5 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048da:	e3d2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048e0:	e3cf      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048e2:	4b78      	ldr	r3, [pc, #480]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ee:	d107      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd37 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048fe:	e3c0      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004904:	e3bd      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004906:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004910:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004922:	4b68      	ldr	r3, [pc, #416]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	4a66      	ldr	r2, [pc, #408]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004934:	e01e      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004936:	4b63      	ldr	r3, [pc, #396]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d106      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800494a:	d102      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800494c:	4b5f      	ldr	r3, [pc, #380]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004950:	e010      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004952:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800495e:	d106      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004966:	d102      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004968:	4b59      	ldr	r3, [pc, #356]	@ (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496c:	e002      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004972:	e386      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004974:	e385      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004976:	4b57      	ldr	r3, [pc, #348]	@ (8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800497a:	e382      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004980:	e37f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004986:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800498a:	430b      	orrs	r3, r1
 800498c:	f040 80a7 	bne.w	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004990:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004998:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a0:	d055      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a8:	f200 8096 	bhi.w	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049b2:	f000 8084 	beq.w	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049bc:	f200 808c 	bhi.w	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049c6:	d030      	beq.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ce:	f200 8083 	bhi.w	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049de:	d012      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80049e0:	e07a      	b.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ee:	d107      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe0b 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049fe:	e340      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a04:	e33d      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a06:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a12:	d107      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a14:	f107 0318 	add.w	r3, r7, #24
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fb51 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a22:	e32e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a28:	e32b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a2a:	4b26      	ldr	r3, [pc, #152]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a36:	d107      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fc93 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a46:	e31c      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a4c:	e319      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a6a:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	08db      	lsrs	r3, r3, #3
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a7c:	e01e      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a92:	d102      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a94:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a98:	e010      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aae:	d102      	bne.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ab0:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004aba:	e2e2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004abc:	e2e1      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004abe:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ac2:	e2de      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	03d09000 	.word	0x03d09000
 8004acc:	003d0900 	.word	0x003d0900
 8004ad0:	017d7840 	.word	0x017d7840
 8004ad4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004adc:	e2d1      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	f040 809c 	bne.w	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004aec:	4b93      	ldr	r3, [pc, #588]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004af4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004afc:	d054      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b04:	f200 808b 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b0e:	f000 8083 	beq.w	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b18:	f200 8081 	bhi.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b22:	d02f      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2a:	d878      	bhi.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b38:	d012      	beq.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004b3a:	e070      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b48:	d107      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd5e 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b58:	e293      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b5e:	e290      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b60:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6e:	f107 0318 	add.w	r3, r7, #24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 faa4 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b7c:	e281      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b82:	e27e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b84:	4b6d      	ldr	r3, [pc, #436]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fbe6 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ba0:	e26f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ba6:	e26c      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ba8:	4b64      	ldr	r3, [pc, #400]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bb0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bb2:	4b62      	ldr	r3, [pc, #392]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	08db      	lsrs	r3, r3, #3
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	4a5c      	ldr	r2, [pc, #368]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bd6:	e01e      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bd8:	4b58      	ldr	r3, [pc, #352]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be4:	d106      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bec:	d102      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004bee:	4b55      	ldr	r3, [pc, #340]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf2:	e010      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bf4:	4b51      	ldr	r3, [pc, #324]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c00:	d106      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c08:	d102      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c0e:	e002      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004c14:	e235      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c16:	e234      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c18:	4b4c      	ldr	r3, [pc, #304]	@ (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c1c:	e231      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c22:	e22e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c28:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	f040 808f 	bne.w	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004c32:	4b42      	ldr	r3, [pc, #264]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c42:	d06b      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c4a:	d874      	bhi.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c52:	d056      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c5a:	d86c      	bhi.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c62:	d03b      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c6a:	d864      	bhi.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c72:	d021      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c7a:	d85c      	bhi.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c88:	d004      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004c8a:	e054      	b.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fa22 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004c90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c92:	e1f6      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c94:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ca2:	f107 0318 	add.w	r3, r7, #24
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa0a 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cb0:	e1e7      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cb6:	e1e4      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cb8:	4b20      	ldr	r3, [pc, #128]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cc6:	f107 030c 	add.w	r3, r7, #12
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fb4c 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cd4:	e1d5      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cda:	e1d2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cdc:	4b17      	ldr	r3, [pc, #92]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d109      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ce8:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	08db      	lsrs	r3, r3, #3
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	4a13      	ldr	r2, [pc, #76]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cfa:	e1c2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d00:	e1bf      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d14:	e1b5      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d1a:	e1b2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d1c:	4b07      	ldr	r3, [pc, #28]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d28:	d102      	bne.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	@ (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d2e:	e1a8      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d34:	e1a5      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d3a:	e1a2      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	003d0900 	.word	0x003d0900
 8004d48:	017d7840 	.word	0x017d7840
 8004d4c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	d173      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d6c:	d02f      	beq.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d74:	d863      	bhi.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d004      	beq.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d82:	d012      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004d84:	e05b      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d86:	4b92      	ldr	r3, [pc, #584]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d92:	d107      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d94:	f107 0318 	add.w	r3, r7, #24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f991 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004da2:	e16e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004da8:	e16b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004daa:	4b89      	ldr	r3, [pc, #548]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db8:	f107 030c 	add.w	r3, r7, #12
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fad3 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dc6:	e15c      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dcc:	e159      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dce:	4b80      	ldr	r3, [pc, #512]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dea:	4b79      	ldr	r3, [pc, #484]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	4a77      	ldr	r2, [pc, #476]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004df6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dfc:	e01e      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dfe:	4b74      	ldr	r3, [pc, #464]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e12:	d102      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e14:	4b70      	ldr	r3, [pc, #448]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e18:	e010      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e26:	d106      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e30:	4b6a      	ldr	r3, [pc, #424]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e34:	e002      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004e3a:	e122      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e3c:	e121      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e42:	e11e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e48:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	d133      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e50:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e66:	d012      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004e68:	e023      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e6a:	4b59      	ldr	r3, [pc, #356]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e76:	d107      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fbc7 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e86:	e0fc      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e8c:	e0f9      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e8e:	4b50      	ldr	r3, [pc, #320]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e9a:	d107      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e9c:	f107 0318 	add.w	r3, r7, #24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f90d 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eaa:	e0ea      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb0:	e0e7      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb6:	e0e4      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ebc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	f040 808d 	bne.w	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004ec6:	4b42      	ldr	r3, [pc, #264]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004ece:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ed6:	d06b      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ede:	d874      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee6:	d056      	beq.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eee:	d86c      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ef6:	d03b      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004efe:	d864      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f06:	d021      	beq.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f0e:	d85c      	bhi.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f1c:	d004      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004f1e:	e054      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f20:	f000 f8b8 	bl	8005094 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f26:	e0ac      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f28:	4b29      	ldr	r3, [pc, #164]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f34:	d107      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f36:	f107 0318 	add.w	r3, r7, #24
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f8c0 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f44:	e09d      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f4a:	e09a      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f4c:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f58:	d107      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f5a:	f107 030c 	add.w	r3, r7, #12
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fa02 	bl	8005368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f68:	e08b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f6e:	e088      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f70:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d109      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f8e:	e078      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f94:	e075      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f96:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	d102      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa8:	e06b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fae:	e068      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc2:	e05e      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc8:	e05b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fce:	e058      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	03d09000 	.word	0x03d09000
 8004fd8:	003d0900 	.word	0x003d0900
 8004fdc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	d148      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004fec:	4b27      	ldr	r3, [pc, #156]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ffc:	d02a      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005004:	d838      	bhi.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005012:	d00d      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005014:	e030      	b.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005016:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005022:	d102      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005024:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005028:	e02b      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800502e:	e028      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005030:	4b16      	ldr	r3, [pc, #88]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800503c:	d107      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800503e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fae4 	bl	8005610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504c:	e019      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005052:	e016      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005054:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800505c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005060:	d107      	bne.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005062:	f107 0318 	add.w	r3, r7, #24
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f82a 	bl	80050c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005070:	e007      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507c:	e001      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005084:	4618      	mov	r0, r3
 8005086:	3740      	adds	r7, #64	@ 0x40
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	58024400 	.word	0x58024400
 8005090:	017d7840 	.word	0x017d7840

08005094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005098:	f7fd ffec 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4904      	ldr	r1, [pc, #16]	@ (80050bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	58024400 	.word	0x58024400
 80050bc:	0800b178 	.word	0x0800b178

080050c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	@ 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050c8:	4ba1      	ldr	r3, [pc, #644]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80050d2:	4b9f      	ldr	r3, [pc, #636]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	0b1b      	lsrs	r3, r3, #12
 80050d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050de:	4b9c      	ldr	r3, [pc, #624]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80050ea:	4b99      	ldr	r3, [pc, #612]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8111 	beq.w	8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b02      	cmp	r3, #2
 8005112:	f000 8083 	beq.w	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f200 80a1 	bhi.w	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d056      	beq.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800512a:	e099      	b.n	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512c:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02d      	beq.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005138:	4b85      	ldr	r3, [pc, #532]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	4a84      	ldr	r2, [pc, #528]	@ (8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b7b      	ldr	r3, [pc, #492]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005192:	e087      	b.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800535c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e065      	b.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b59      	ldr	r3, [pc, #356]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	e043      	b.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b48      	ldr	r3, [pc, #288]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005242:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800525e:	e021      	b.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b37      	ldr	r3, [pc, #220]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a03 	vldr	s12, [r7, #12]
 8005286:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	0a5b      	lsrs	r3, r3, #9
 80052aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052be:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ca:	ee17 2a90 	vmov	r2, s15
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f8:	ee17 2a90 	vmov	r2, s15
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800531a:	edd7 6a07 	vldr	s13, [r7, #28]
 800531e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005326:	ee17 2a90 	vmov	r2, s15
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800532e:	e008      	b.n	8005342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	3724      	adds	r7, #36	@ 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	58024400 	.word	0x58024400
 8005354:	03d09000 	.word	0x03d09000
 8005358:	46000000 	.word	0x46000000
 800535c:	4c742400 	.word	0x4c742400
 8005360:	4a742400 	.word	0x4a742400
 8005364:	4bbebc20 	.word	0x4bbebc20

08005368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	@ 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005370:	4ba1      	ldr	r3, [pc, #644]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800537a:	4b9f      	ldr	r3, [pc, #636]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005386:	4b9c      	ldr	r3, [pc, #624]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005392:	4b99      	ldr	r3, [pc, #612]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8111 	beq.w	80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	f000 8083 	beq.w	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	f200 80a1 	bhi.w	8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d056      	beq.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053d2:	e099      	b.n	8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053d4:	4b88      	ldr	r3, [pc, #544]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02d      	beq.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053e0:	4b85      	ldr	r3, [pc, #532]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	4a84      	ldr	r2, [pc, #528]	@ (80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800543a:	e087      	b.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547e:	e065      	b.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800548e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005492:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c2:	e043      	b.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d6:	4b48      	ldr	r3, [pc, #288]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005506:	e021      	b.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b37      	ldr	r3, [pc, #220]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800554a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800554c:	4b2a      	ldr	r3, [pc, #168]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005566:	edd7 6a07 	vldr	s13, [r7, #28]
 800556a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800557a:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557e:	0c1b      	lsrs	r3, r3, #16
 8005580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005594:	edd7 6a07 	vldr	s13, [r7, #28]
 8005598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a0:	ee17 2a90 	vmov	r2, s15
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80055a8:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	0e1b      	lsrs	r3, r3, #24
 80055ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ce:	ee17 2a90 	vmov	r2, s15
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055d6:	e008      	b.n	80055ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
}
 80055ea:	bf00      	nop
 80055ec:	3724      	adds	r7, #36	@ 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	03d09000 	.word	0x03d09000
 8005600:	46000000 	.word	0x46000000
 8005604:	4c742400 	.word	0x4c742400
 8005608:	4a742400 	.word	0x4a742400
 800560c:	4bbebc20 	.word	0x4bbebc20

08005610 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	@ 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005618:	4ba0      	ldr	r3, [pc, #640]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005622:	4b9e      	ldr	r3, [pc, #632]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	091b      	lsrs	r3, r3, #4
 8005628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800562c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800562e:	4b9b      	ldr	r3, [pc, #620]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005638:	4b98      	ldr	r3, [pc, #608]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	08db      	lsrs	r3, r3, #3
 800563e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8111 	beq.w	800587e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b02      	cmp	r3, #2
 8005660:	f000 8083 	beq.w	800576a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b02      	cmp	r3, #2
 8005668:	f200 80a1 	bhi.w	80057ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d056      	beq.n	8005726 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005678:	e099      	b.n	80057ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800567a:	4b88      	ldr	r3, [pc, #544]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02d      	beq.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005686:	4b85      	ldr	r3, [pc, #532]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	08db      	lsrs	r3, r3, #3
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	4a83      	ldr	r2, [pc, #524]	@ (80058a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005692:	fa22 f303 	lsr.w	r3, r2, r3
 8005696:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b0:	4b7a      	ldr	r3, [pc, #488]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80056e0:	e087      	b.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80058a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f4:	4b69      	ldr	r3, [pc, #420]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005704:	ed97 6a03 	vldr	s12, [r7, #12]
 8005708:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800570c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005724:	e065      	b.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005730:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80058ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005738:	4b58      	ldr	r3, [pc, #352]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005748:	ed97 6a03 	vldr	s12, [r7, #12]
 800574c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005764:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005768:	e043      	b.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005774:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80058b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577c:	4b47      	ldr	r3, [pc, #284]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005790:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ac:	e021      	b.n	80057f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80058a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80057bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c0:	4b36      	ldr	r3, [pc, #216]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80057f2:	4b2a      	ldr	r3, [pc, #168]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	0a5b      	lsrs	r3, r3, #9
 80057f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005804:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800580c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005818:	ee17 2a90 	vmov	r2, s15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005820:	4b1e      	ldr	r3, [pc, #120]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800583a:	edd7 6a07 	vldr	s13, [r7, #28]
 800583e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005846:	ee17 2a90 	vmov	r2, s15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800584e:	4b13      	ldr	r3, [pc, #76]	@ (800589c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	0e1b      	lsrs	r3, r3, #24
 8005854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005868:	edd7 6a07 	vldr	s13, [r7, #28]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005874:	ee17 2a90 	vmov	r2, s15
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800587c:	e008      	b.n	8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	3724      	adds	r7, #36	@ 0x24
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	58024400 	.word	0x58024400
 80058a0:	03d09000 	.word	0x03d09000
 80058a4:	46000000 	.word	0x46000000
 80058a8:	4c742400 	.word	0x4c742400
 80058ac:	4a742400 	.word	0x4a742400
 80058b0:	4bbebc20 	.word	0x4bbebc20

080058b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058c2:	4b53      	ldr	r3, [pc, #332]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d101      	bne.n	80058d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e099      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058de:	f7fc f889 	bl	80019f4 <HAL_GetTick>
 80058e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058e6:	f7fc f885 	bl	80019f4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e086      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005904:	4b42      	ldr	r3, [pc, #264]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	493f      	ldr	r1, [pc, #252]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005914:	4313      	orrs	r3, r2
 8005916:	628b      	str	r3, [r1, #40]	@ 0x28
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	3b01      	subs	r3, #1
 800591e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	3b01      	subs	r3, #1
 8005928:	025b      	lsls	r3, r3, #9
 800592a:	b29b      	uxth	r3, r3
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	3b01      	subs	r3, #1
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	3b01      	subs	r3, #1
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005948:	4931      	ldr	r1, [pc, #196]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800594e:	4b30      	ldr	r3, [pc, #192]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	492d      	ldr	r1, [pc, #180]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005960:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	f023 0220 	bic.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	4928      	ldr	r1, [pc, #160]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005972:	4b27      	ldr	r3, [pc, #156]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	4a26      	ldr	r2, [pc, #152]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005978:	f023 0310 	bic.w	r3, r3, #16
 800597c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800597e:	4b24      	ldr	r3, [pc, #144]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005982:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <RCCEx_PLL2_Config+0x160>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	69d2      	ldr	r2, [r2, #28]
 800598a:	00d2      	lsls	r2, r2, #3
 800598c:	4920      	ldr	r1, [pc, #128]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005992:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 8005998:	f043 0310 	orr.w	r3, r3, #16
 800599c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	4a19      	ldr	r2, [pc, #100]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059b0:	e00f      	b.n	80059d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d106      	bne.n	80059c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059b8:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059c4:	e005      	b.n	80059d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059c6:	4b12      	ldr	r3, [pc, #72]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	4a11      	ldr	r2, [pc, #68]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059de:	f7fc f809 	bl	80019f4 <HAL_GetTick>
 80059e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059e6:	f7fc f805 	bl	80019f4 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <RCCEx_PLL2_Config+0x15c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	58024400 	.word	0x58024400
 8005a14:	ffff0007 	.word	0xffff0007

08005a18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a26:	4b53      	ldr	r3, [pc, #332]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d101      	bne.n	8005a36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e099      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a36:	4b4f      	ldr	r3, [pc, #316]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a4e      	ldr	r2, [pc, #312]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a42:	f7fb ffd7 	bl	80019f4 <HAL_GetTick>
 8005a46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a4a:	f7fb ffd3 	bl	80019f4 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e086      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a5c:	4b45      	ldr	r3, [pc, #276]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a68:	4b42      	ldr	r3, [pc, #264]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	051b      	lsls	r3, r3, #20
 8005a76:	493f      	ldr	r1, [pc, #252]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	025b      	lsls	r3, r3, #9
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005aac:	4931      	ldr	r1, [pc, #196]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ab2:	4b30      	ldr	r3, [pc, #192]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	492d      	ldr	r1, [pc, #180]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	4928      	ldr	r1, [pc, #160]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ad6:	4b27      	ldr	r3, [pc, #156]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	4a26      	ldr	r2, [pc, #152]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae6:	4b24      	ldr	r3, [pc, #144]	@ (8005b78 <RCCEx_PLL3_Config+0x160>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	69d2      	ldr	r2, [r2, #28]
 8005aee:	00d2      	lsls	r2, r2, #3
 8005af0:	4920      	ldr	r1, [pc, #128]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005af6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	4a1e      	ldr	r2, [pc, #120]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b08:	4b1a      	ldr	r3, [pc, #104]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0c:	4a19      	ldr	r2, [pc, #100]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b14:	e00f      	b.n	8005b36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d106      	bne.n	8005b2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b1c:	4b15      	ldr	r3, [pc, #84]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	4a14      	ldr	r2, [pc, #80]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b28:	e005      	b.n	8005b36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	4a11      	ldr	r2, [pc, #68]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b36:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b42:	f7fb ff57 	bl	80019f4 <HAL_GetTick>
 8005b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b48:	e008      	b.n	8005b5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b4a:	f7fb ff53 	bl	80019f4 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e006      	b.n	8005b6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b5c:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <RCCEx_PLL3_Config+0x15c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
 8005b78:	ffff0007 	.word	0xffff0007

08005b7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	@ 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e075      	b.n	8005c7a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fb fd17 	bl	80015d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f868 	bl	8005c84 <HAL_SD_InitCard>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e05d      	b.n	8005c7a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005bbe:	f107 0308 	add.w	r3, r7, #8
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fdaf 	bl	8006728 <HAL_SD_GetCardStatus>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e052      	b.n	8005c7a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005bd4:	7e3b      	ldrb	r3, [r7, #24]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005bda:	7e7b      	ldrb	r3, [r7, #25]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10a      	bne.n	8005bfe <HAL_SD_Init+0x82>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_SD_Init+0x78>
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfa:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bfc:	e00b      	b.n	8005c16 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d104      	bne.n	8005c10 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c0e:	e002      	b.n	8005c16 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fe6d 	bl	80068fc <HAL_SD_ConfigWideBusOperation>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e026      	b.n	8005c7a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005c2c:	f7fb fee2 	bl	80019f4 <HAL_GetTick>
 8005c30:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c32:	e011      	b.n	8005c58 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c34:	f7fb fede 	bl	80019f4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d109      	bne.n	8005c58 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c4a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e010      	b.n	8005c7a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 ff61 	bl	8006b20 <HAL_SD_GetCardState>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d1e7      	bne.n	8005c34 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3728      	adds	r7, #40	@ 0x28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b08d      	sub	sp, #52	@ 0x34
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005c9c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	f7fe fc76 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ca8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005cbe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e070      	b.n	8005da6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	4a39      	ldr	r2, [pc, #228]	@ (8005db0 <HAL_SD_InitCard+0x12c>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681c      	ldr	r4, [r3, #0]
 8005cd6:	466a      	mov	r2, sp
 8005cd8:	f107 0318 	add.w	r3, r7, #24
 8005cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ce0:	e882 0003 	stmia.w	r2, {r0, r1}
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cea:	4620      	mov	r0, r4
 8005cec:	f001 ffa6 	bl	8007c3c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 ffe9 	bl	8007ccc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005d12:	4a28      	ldr	r2, [pc, #160]	@ (8005db4 <HAL_SD_InitCard+0x130>)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb fe75 	bl	8001a0c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 ffea 	bl	8006cfc <SD_PowerON>
 8005d28:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e02e      	b.n	8005da6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 ff09 	bl	8006b60 <SD_InitCard>
 8005d4e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e01b      	b.n	8005da6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 f83e 	bl	8007df8 <SDMMC_CmdBlockLength>
 8005d7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00f      	beq.n	8005da4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a0b      	ldr	r2, [pc, #44]	@ (8005db8 <HAL_SD_InitCard+0x134>)
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	372c      	adds	r7, #44	@ 0x2c
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd90      	pop	{r4, r7, pc}
 8005dae:	bf00      	nop
 8005db0:	014f8b59 	.word	0x014f8b59
 8005db4:	00012110 	.word	0x00012110
 8005db8:	1fe00fff 	.word	0x1fe00fff

08005dbc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	@ 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e08d      	b.n	8005f00 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	f040 8086 	bne.w	8005efe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d907      	bls.n	8005e16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e074      	b.n	8005f00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	025a      	lsls	r2, r3, #9
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d002      	beq.n	8005e42 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	025b      	lsls	r3, r3, #9
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295
 8005e46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	025b      	lsls	r3, r3, #9
 8005e4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e4e:	2390      	movs	r3, #144	@ 0x90
 8005e50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e52:	2302      	movs	r3, #2
 8005e54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f107 0210 	add.w	r2, r7, #16
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 ff99 	bl	8007da0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e7c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d90a      	bls.n	8005eaa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2282      	movs	r2, #130	@ 0x82
 8005e98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 ffef 	bl	8007e84 <SDMMC_CmdReadMultiBlock>
 8005ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005ea8:	e009      	b.n	8005ebe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2281      	movs	r2, #129	@ 0x81
 8005eae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 ffc1 	bl	8007e3e <SDMMC_CmdReadSingleBlock>
 8005ebc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d012      	beq.n	8005eea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8005f08 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005eca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e00a      	b.n	8005f00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8005ef8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3730      	adds	r7, #48	@ 0x30
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	1fe00fff 	.word	0x1fe00fff

08005f0c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08c      	sub	sp, #48	@ 0x30
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d107      	bne.n	8005f34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e08d      	b.n	8006050 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 8086 	bne.w	800604e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d907      	bls.n	8005f66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e074      	b.n	8006050 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	025a      	lsls	r2, r3, #9
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d002      	beq.n	8005f92 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	025b      	lsls	r3, r3, #9
 8005f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	025b      	lsls	r3, r3, #9
 8005f9c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f9e:	2390      	movs	r3, #144	@ 0x90
 8005fa0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f107 0210 	add.w	r2, r7, #16
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fef1 	bl	8007da0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fcc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d90a      	bls.n	8005ffa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	22a0      	movs	r2, #160	@ 0xa0
 8005fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 ff8d 	bl	8007f10 <SDMMC_CmdWriteMultiBlock>
 8005ff6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005ff8:	e009      	b.n	800600e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2290      	movs	r2, #144	@ 0x90
 8005ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006006:	4618      	mov	r0, r3
 8006008:	f001 ff5f 	bl	8007eca <SDMMC_CmdWriteSingleBlock>
 800600c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0f      	ldr	r2, [pc, #60]	@ (8006058 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006022:	431a      	orrs	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e00a      	b.n	8006050 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8006048:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3730      	adds	r7, #48	@ 0x30
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	1fe00fff 	.word	0x1fe00fff

0800605c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_SD_IRQHandler+0x2e>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f926 	bl	80072d4 <SD_Read_IT>
 8006088:	e19a      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80ac 	beq.w	80061f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4b59      	ldr	r3, [pc, #356]	@ (8006214 <HAL_SD_IRQHandler+0x1b8>)
 80060b0:	400b      	ands	r3, r1
 80060b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80060c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d038      	beq.n	8006150 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_SD_IRQHandler+0x96>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d011      	beq.n	8006116 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 ff2e 	bl	8007f58 <SDMMC_CmdStopTransfer>
 80060fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f95b 	bl	80063cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3f      	ldr	r2, [pc, #252]	@ (8006218 <HAL_SD_IRQHandler+0x1bc>)
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <HAL_SD_IRQHandler+0xe4>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f002 fbe1 	bl	8008908 <HAL_SD_RxCpltCallback>
 8006146:	e13b      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f002 fbd3 	bl	80088f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800614e:	e137      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8132 	beq.w	80063c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2200      	movs	r2, #0
 8006162:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2200      	movs	r2, #0
 8006172:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <HAL_SD_IRQHandler+0x12c>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fee3 	bl	8007f58 <SDMMC_CmdStopTransfer>
 8006192:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f910 	bl	80063cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <HAL_SD_IRQHandler+0x172>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f002 fb90 	bl	80088f4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <HAL_SD_IRQHandler+0x18e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80eb 	beq.w	80063c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 fb8c 	bl	8008908 <HAL_SD_RxCpltCallback>
}
 80061f0:	e0e6      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <HAL_SD_IRQHandler+0x1c0>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f8a8 	bl	8007360 <SD_Write_IT>
 8006210:	e0d6      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
 8006212:	bf00      	nop
 8006214:	ffff3ec5 	.word	0xffff3ec5
 8006218:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 809d 	beq.w	8006366 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623e:	f043 0202 	orr.w	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006258:	f043 0208 	orr.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	f043 0210 	orr.w	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a4b      	ldr	r2, [pc, #300]	@ (80063c8 <HAL_SD_IRQHandler+0x36c>)
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80062aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80062da:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 fe39 	bl	8007f58 <SDMMC_CmdStopTransfer>
 80062e6:	4602      	mov	r2, r0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006300:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800630a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f851 	bl	80063cc <HAL_SD_ErrorCallback>
}
 800632a:	e049      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d044      	beq.n	80063c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d040      	beq.n	80063c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800634c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2200      	movs	r2, #0
 8006354:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f834 	bl	80063cc <HAL_SD_ErrorCallback>
}
 8006364:	e02c      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d025      	beq.n	80063c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f84a 	bl	8007430 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800639c:	e010      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 f832 	bl	8007408 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80063a4:	e00c      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f833 	bl	800741c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80063b6:	e003      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f81b 	bl	80073f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80063be:	e7ff      	b.n	80063c0 <HAL_SD_IRQHandler+0x364>
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	18000f3a 	.word	0x18000f3a

080063cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ee:	0f9b      	lsrs	r3, r3, #30
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fa:	0e9b      	lsrs	r3, r3, #26
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	b2da      	uxtb	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	b2da      	uxtb	r2, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	b2da      	uxtb	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	b2da      	uxtb	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006436:	b2da      	uxtb	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006440:	0d1b      	lsrs	r3, r3, #20
 8006442:	b29a      	uxth	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	b2da      	uxtb	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645e:	0bdb      	lsrs	r3, r3, #15
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	0b9b      	lsrs	r3, r3, #14
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006482:	0b5b      	lsrs	r3, r3, #13
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	0b1b      	lsrs	r3, r3, #12
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d163      	bne.n	8006578 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b4:	009a      	lsls	r2, r3, #2
 80064b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80064ba:	4013      	ands	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80064c0:	0f92      	lsrs	r2, r2, #30
 80064c2:	431a      	orrs	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064cc:	0edb      	lsrs	r3, r3, #27
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064de:	0e1b      	lsrs	r3, r3, #24
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f0:	0d5b      	lsrs	r3, r3, #21
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006502:	0c9b      	lsrs	r3, r3, #18
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	b2da      	uxtb	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006514:	0bdb      	lsrs	r3, r3, #15
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	b2da      	uxtb	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	7e1b      	ldrb	r3, [r3, #24]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	3302      	adds	r3, #2
 8006538:	2201      	movs	r2, #1
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006542:	fb03 f202 	mul.w	r2, r3, r2
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	7a1b      	ldrb	r3, [r3, #8]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	2201      	movs	r2, #1
 8006556:	409a      	lsls	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006564:	0a52      	lsrs	r2, r2, #9
 8006566:	fb03 f202 	mul.w	r2, r3, r2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006574:	655a      	str	r2, [r3, #84]	@ 0x54
 8006576:	e031      	b.n	80065dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	2b01      	cmp	r3, #1
 800657e:	d11d      	bne.n	80065bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	431a      	orrs	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	029a      	lsls	r2, r3, #10
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80065ba:	e00f      	b.n	80065dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a58      	ldr	r2, [pc, #352]	@ (8006724 <HAL_SD_GetCardCSD+0x344>)
 80065c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e09d      	b.n	8006718 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e0:	0b9b      	lsrs	r3, r3, #14
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660a:	b2da      	uxtb	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006614:	0fdb      	lsrs	r3, r3, #31
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006620:	0f5b      	lsrs	r3, r3, #29
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	b2da      	uxtb	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006632:	0e9b      	lsrs	r3, r3, #26
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006644:	0d9b      	lsrs	r3, r3, #22
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	b2da      	uxtb	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006656:	0d5b      	lsrs	r3, r3, #21
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006672:	0c1b      	lsrs	r3, r3, #16
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006686:	0bdb      	lsrs	r3, r3, #15
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800669a:	0b9b      	lsrs	r3, r3, #14
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ae:	0b5b      	lsrs	r3, r3, #13
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066c2:	0b1b      	lsrs	r3, r3, #12
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	1fe00fff 	.word	0x1fe00fff

08006728 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b094      	sub	sp, #80	@ 0x50
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b03      	cmp	r3, #3
 8006742:	d101      	bne.n	8006748 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0a7      	b.n	8006898 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006748:	f107 0308 	add.w	r3, r7, #8
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb62 	bl	8006e18 <SD_SendSDStatus>
 8006754:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a4f      	ldr	r2, [pc, #316]	@ (80068a0 <HAL_SD_GetCardStatus+0x178>)
 8006762:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800677e:	e070      	b.n	8006862 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	099b      	lsrs	r3, r3, #6
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	b2da      	uxtb	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	0e1b      	lsrs	r3, r3, #24
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	061a      	lsls	r2, r3, #24
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067d0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0e1b      	lsrs	r3, r3, #24
 80067d6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	0d1b      	lsrs	r3, r3, #20
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	b29b      	uxth	r3, r3
 8006804:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006808:	b29a      	uxth	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	b29b      	uxth	r3, r3
 800680e:	b2db      	uxtb	r3, r3
 8006810:	b29b      	uxth	r3, r3
 8006812:	4313      	orrs	r3, r2
 8006814:	b29a      	uxth	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	0a9b      	lsrs	r3, r3, #10
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006824:	b2da      	uxtb	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	b2da      	uxtb	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	b2da      	uxtb	r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	0e1b      	lsrs	r3, r3, #24
 800685c:	b2da      	uxtb	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fac4 	bl	8007df8 <SDMMC_CmdBlockLength>
 8006870:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a08      	ldr	r2, [pc, #32]	@ (80068a0 <HAL_SD_GetCardStatus+0x178>)
 800687e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8006894:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006898:	4618      	mov	r0, r3
 800689a:	3750      	adds	r7, #80	@ 0x50
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	1fe00fff 	.word	0x1fe00fff

080068a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b08d      	sub	sp, #52	@ 0x34
 8006900:	af02      	add	r7, sp, #8
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2203      	movs	r2, #3
 8006910:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	2b03      	cmp	r3, #3
 800691a:	d02e      	beq.n	800697a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006922:	d106      	bne.n	8006932 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006930:	e029      	b.n	8006986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006938:	d10a      	bne.n	8006950 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb64 	bl	8007008 <SD_WideBus_Enable>
 8006940:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	635a      	str	r2, [r3, #52]	@ 0x34
 800694e:	e01a      	b.n	8006986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fba1 	bl	800709e <SD_WideBus_Disable>
 800695c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	635a      	str	r2, [r3, #52]	@ 0x34
 800696a:	e00c      	b.n	8006986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	635a      	str	r2, [r3, #52]	@ 0x34
 8006978:	e005      	b.n	8006986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a5f      	ldr	r2, [pc, #380]	@ (8006b10 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006994:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800699c:	e096      	b.n	8006acc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800699e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	f7fd fdf5 	bl	8004594 <HAL_RCCEx_GetPeriphCLKFreq>
 80069aa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8083 	beq.w	8006aba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4950      	ldr	r1, [pc, #320]	@ (8006b14 <HAL_SD_ConfigWideBusOperation+0x218>)
 80069d2:	fba1 1303 	umull	r1, r3, r1, r3
 80069d6:	0e1b      	lsrs	r3, r3, #24
 80069d8:	429a      	cmp	r2, r3
 80069da:	d303      	bcc.n	80069e4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e05a      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ec:	d103      	bne.n	80069f6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e051      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d126      	bne.n	8006a4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10e      	bne.n	8006a26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4a43      	ldr	r2, [pc, #268]	@ (8006b18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d906      	bls.n	8006a1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4a40      	ldr	r2, [pc, #256]	@ (8006b14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	0e5b      	lsrs	r3, r3, #25
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e03d      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	e039      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	4a39      	ldr	r2, [pc, #228]	@ (8006b18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d906      	bls.n	8006a46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4a36      	ldr	r2, [pc, #216]	@ (8006b14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	0e5b      	lsrs	r3, r3, #25
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e029      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e025      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10e      	bne.n	8006a74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4a30      	ldr	r2, [pc, #192]	@ (8006b1c <HAL_SD_ConfigWideBusOperation+0x220>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d906      	bls.n	8006a6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4a2c      	ldr	r2, [pc, #176]	@ (8006b14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e016      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e012      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	4a26      	ldr	r2, [pc, #152]	@ (8006b1c <HAL_SD_ConfigWideBusOperation+0x220>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d906      	bls.n	8006a94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4a22      	ldr	r2, [pc, #136]	@ (8006b14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0e1b      	lsrs	r3, r3, #24
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e002      	b.n	8006a9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	466a      	mov	r2, sp
 8006aa0:	f107 0314 	add.w	r3, r7, #20
 8006aa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006aa8:	e882 0003 	stmia.w	r2, {r0, r1}
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f001 f8c2 	bl	8007c3c <SDMMC_Init>
 8006ab8:	e008      	b.n	8006acc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f98f 	bl	8007df8 <SDMMC_CmdBlockLength>
 8006ada:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00c      	beq.n	8006afc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	372c      	adds	r7, #44	@ 0x2c
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd90      	pop	{r4, r7, pc}
 8006b10:	1fe00fff 	.word	0x1fe00fff
 8006b14:	55e63b89 	.word	0x55e63b89
 8006b18:	02faf080 	.word	0x02faf080
 8006b1c:	017d7840 	.word	0x017d7840

08006b20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b2c:	f107 030c 	add.w	r3, r7, #12
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa40 	bl	8006fb8 <SD_SendStatus>
 8006b38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	0a5b      	lsrs	r3, r3, #9
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006b56:	693b      	ldr	r3, [r7, #16]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b090      	sub	sp, #64	@ 0x40
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006b6c:	f7fa ff42 	bl	80019f4 <HAL_GetTick>
 8006b70:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f8b9 	bl	8007cee <SDMMC_GetPowerState>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b82:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006b86:	e0b5      	b.n	8006cf4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d02e      	beq.n	8006bee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fb04 	bl	80081a2 <SDMMC_CmdSendCID>
 8006b9a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <SD_InitCard+0x46>
    {
      return errorstate;
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	e0a6      	b.n	8006cf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 f8e4 	bl	8007d7a <SDMMC_GetResponse>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2104      	movs	r1, #4
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 f8db 	bl	8007d7a <SDMMC_GetResponse>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2108      	movs	r1, #8
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 f8d2 	bl	8007d7a <SDMMC_GetResponse>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	210c      	movs	r1, #12
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 f8c9 	bl	8007d7a <SDMMC_GetResponse>
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d01d      	beq.n	8006c32 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006bf6:	e019      	b.n	8006c2c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f107 020a 	add.w	r2, r7, #10
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fb0c 	bl	8008220 <SDMMC_CmdSetRelAdd>
 8006c08:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	e06f      	b.n	8006cf4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006c14:	f7fa feee 	bl	80019f4 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d902      	bls.n	8006c2c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006c26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c2a:	e063      	b.n	8006cf4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006c2c:	897b      	ldrh	r3, [r7, #10]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0e2      	beq.n	8006bf8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d036      	beq.n	8006ca8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f001 fac6 	bl	80081e0 <SDMMC_CmdSendCSD>
 8006c54:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <SD_InitCard+0x100>
    {
      return errorstate;
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	e049      	b.n	8006cf4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 f887 	bl	8007d7a <SDMMC_GetResponse>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2104      	movs	r1, #4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f87e 	bl	8007d7a <SDMMC_GetResponse>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2108      	movs	r1, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 f875 	bl	8007d7a <SDMMC_GetResponse>
 8006c90:	4602      	mov	r2, r0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	210c      	movs	r1, #12
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f86c 	bl	8007d7a <SDMMC_GetResponse>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2104      	movs	r1, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f863 	bl	8007d7a <SDMMC_GetResponse>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	0d1a      	lsrs	r2, r3, #20
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fb8c 	bl	80063e0 <HAL_SD_GetCardCSD>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006cd2:	e00f      	b.n	8006cf4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f001 f975 	bl	8007fd0 <SDMMC_CmdSelDesel>
 8006ce6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <SD_InitCard+0x192>
  {
    return errorstate;
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	e000      	b.n	8006cf4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3740      	adds	r7, #64	@ 0x40
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 f97e 	bl	8008016 <SDMMC_CmdGoIdleState>
 8006d1a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	e072      	b.n	8006e0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f991 	bl	8008052 <SDMMC_CmdOperCond>
 8006d30:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d38:	d10d      	bne.n	8006d56 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f966 	bl	8008016 <SDMMC_CmdGoIdleState>
 8006d4a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <SD_PowerON+0x60>
    {
      return errorstate;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	e05a      	b.n	8006e0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d137      	bne.n	8006dd4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 f991 	bl	8008092 <SDMMC_CmdAppCommand>
 8006d70:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02d      	beq.n	8006dd4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006d7c:	e046      	b.n	8006e0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f984 	bl	8008092 <SDMMC_CmdAppCommand>
 8006d8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	e03a      	b.n	8006e0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	491e      	ldr	r1, [pc, #120]	@ (8006e14 <SD_PowerON+0x118>)
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f99b 	bl	80080d8 <SDMMC_CmdAppOperCommand>
 8006da2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006daa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006dae:	e02d      	b.n	8006e0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 ffdf 	bl	8007d7a <SDMMC_GetResponse>
 8006dbc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	0fdb      	lsrs	r3, r3, #31
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <SD_PowerON+0xce>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <SD_PowerON+0xd0>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]

    count++;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d802      	bhi.n	8006de4 <SD_PowerON+0xe8>
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0cc      	beq.n	8006d7e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d902      	bls.n	8006df4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006dee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006df2:	e00b      	b.n	8006e0c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	c1100000 	.word	0xc1100000

08006e18 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08c      	sub	sp, #48	@ 0x30
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e22:	f7fa fde7 	bl	80019f4 <HAL_GetTick>
 8006e26:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 ffa1 	bl	8007d7a <SDMMC_GetResponse>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e42:	d102      	bne.n	8006e4a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e48:	e0b0      	b.n	8006fac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2140      	movs	r1, #64	@ 0x40
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 ffd1 	bl	8007df8 <SDMMC_CmdBlockLength>
 8006e56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	e0a0      	b.n	8006fac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f001 f90b 	bl	8008092 <SDMMC_CmdAppCommand>
 8006e7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	e08d      	b.n	8006fac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006e96:	2340      	movs	r3, #64	@ 0x40
 8006e98:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006e9a:	2360      	movs	r3, #96	@ 0x60
 8006e9c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f107 0208 	add.w	r2, r7, #8
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 ff73 	bl	8007da0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 f9f3 	bl	80082aa <SDMMC_CmdStatusRegister>
 8006ec4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02b      	beq.n	8006f24 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	e069      	b.n	8006fac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eea:	e00d      	b.n	8006f08 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fecd 	bl	8007c90 <SDMMC_ReadFIFO>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	601a      	str	r2, [r3, #0]
        pData++;
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	3304      	adds	r3, #4
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8006f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f04:	3301      	adds	r3, #1
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	2b07      	cmp	r3, #7
 8006f0c:	d9ee      	bls.n	8006eec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f0e:	f7fa fd71 	bl	80019f4 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d102      	bne.n	8006f24 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f22:	e043      	b.n	8006fac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0d2      	beq.n	8006ed8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f40:	2308      	movs	r3, #8
 8006f42:	e033      	b.n	8006fac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	e02a      	b.n	8006fac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006f64:	2320      	movs	r3, #32
 8006f66:	e021      	b.n	8006fac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fe8f 	bl	8007c90 <SDMMC_ReadFIFO>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	601a      	str	r2, [r3, #0]
    pData++;
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f7e:	f7fa fd39 	bl	80019f4 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d102      	bne.n	8006f94 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f92:	e00b      	b.n	8006fac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e2      	bne.n	8006f68 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a03      	ldr	r2, [pc, #12]	@ (8006fb4 <SD_SendSDStatus+0x19c>)
 8006fa8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3730      	adds	r7, #48	@ 0x30
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	18000f3a 	.word	0x18000f3a

08006fb8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006fc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fcc:	e018      	b.n	8007000 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f001 f942 	bl	8008264 <SDMMC_CmdSendStatus>
 8006fe0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_SendStatus+0x34>
  {
    return errorstate;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e009      	b.n	8007000 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fec1 	bl	8007d7a <SDMMC_GetResponse>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f000 feab 	bl	8007d7a <SDMMC_GetResponse>
 8007024:	4603      	mov	r3, r0
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800702e:	d102      	bne.n	8007036 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007034:	e02f      	b.n	8007096 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f879 	bl	8007134 <SD_FindSCR>
 8007042:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	e023      	b.n	8007096 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01c      	beq.n	8007092 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007060:	041b      	lsls	r3, r3, #16
 8007062:	4619      	mov	r1, r3
 8007064:	4610      	mov	r0, r2
 8007066:	f001 f814 	bl	8008092 <SDMMC_CmdAppCommand>
 800706a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	e00f      	b.n	8007096 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2102      	movs	r1, #2
 800707c:	4618      	mov	r0, r3
 800707e:	f001 f84b 	bl	8008118 <SDMMC_CmdBusWidth>
 8007082:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e003      	b.n	8007096 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800708e:	2300      	movs	r3, #0
 8007090:	e001      	b.n	8007096 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007092:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe60 	bl	8007d7a <SDMMC_GetResponse>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c4:	d102      	bne.n	80070cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80070ca:	e02f      	b.n	800712c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070cc:	f107 030c 	add.w	r3, r7, #12
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f82e 	bl	8007134 <SD_FindSCR>
 80070d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	e023      	b.n	800712c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d01c      	beq.n	8007128 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f6:	041b      	lsls	r3, r3, #16
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f000 ffc9 	bl	8008092 <SDMMC_CmdAppCommand>
 8007100:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	e00f      	b.n	800712c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f800 	bl	8008118 <SDMMC_CmdBusWidth>
 8007118:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	e003      	b.n	800712c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007124:	2300      	movs	r3, #0
 8007126:	e001      	b.n	800712c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007128:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08e      	sub	sp, #56	@ 0x38
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800713e:	f7fa fc59 	bl	80019f4 <HAL_GetTick>
 8007142:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2108      	movs	r1, #8
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fe4c 	bl	8007df8 <SDMMC_CmdBlockLength>
 8007160:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	e0ad      	b.n	80072c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f000 ff8a 	bl	8008092 <SDMMC_CmdAppCommand>
 800717e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007188:	e09e      	b.n	80072c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007190:	2308      	movs	r3, #8
 8007192:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007194:	2330      	movs	r3, #48	@ 0x30
 8007196:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007198:	2302      	movs	r3, #2
 800719a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800719c:	2300      	movs	r3, #0
 800719e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f107 0210 	add.w	r2, r7, #16
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fdf6 	bl	8007da0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 ffd0 	bl	800815e <SDMMC_CmdSendSCR>
 80071be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d027      	beq.n	8007216 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	e07e      	b.n	80072c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d113      	bne.n	8007200 <SD_FindSCR+0xcc>
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d110      	bne.n	8007200 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fd54 	bl	8007c90 <SDMMC_ReadFIFO>
 80071e8:	4603      	mov	r3, r0
 80071ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fd4d 	bl	8007c90 <SDMMC_ReadFIFO>
 80071f6:	4603      	mov	r3, r0
 80071f8:	60fb      	str	r3, [r7, #12]
      index++;
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	3301      	adds	r3, #1
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007200:	f7fa fbf8 	bl	80019f4 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d102      	bne.n	8007216 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007210:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007214:	e058      	b.n	80072c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800721c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007220:	4013      	ands	r3, r2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0d1      	beq.n	80071ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2208      	movs	r2, #8
 800723a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800723c:	2308      	movs	r3, #8
 800723e:	e043      	b.n	80072c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2202      	movs	r2, #2
 8007254:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007256:	2302      	movs	r3, #2
 8007258:	e036      	b.n	80072c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2220      	movs	r2, #32
 800726e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007270:	2320      	movs	r3, #32
 8007272:	e029      	b.n	80072c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a15      	ldr	r2, [pc, #84]	@ (80072d0 <SD_FindSCR+0x19c>)
 800727a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	061a      	lsls	r2, r3, #24
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007288:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007292:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	0e1b      	lsrs	r3, r3, #24
 8007298:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	601a      	str	r2, [r3, #0]
    scr++;
 800729e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a0:	3304      	adds	r3, #4
 80072a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	061a      	lsls	r2, r3, #24
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80072b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	0e1b      	lsrs	r3, r3, #24
 80072c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3738      	adds	r7, #56	@ 0x38
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	18000f3a 	.word	0x18000f3a

080072d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	2b1f      	cmp	r3, #31
 80072e8:	d936      	bls.n	8007358 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	e027      	b.n	8007340 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fccb 	bl	8007c90 <SDMMC_ReadFIFO>
 80072fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	3301      	adds	r3, #1
 8007308:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	b2da      	uxtb	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	b2da      	uxtb	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3301      	adds	r3, #1
 8007328:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	0e1b      	lsrs	r3, r3, #24
 800732e:	b2da      	uxtb	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3301      	adds	r3, #1
 8007338:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	3301      	adds	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2b07      	cmp	r3, #7
 8007344:	d9d4      	bls.n	80072f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f1a3 0220 	sub.w	r2, r3, #32
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	2b1f      	cmp	r3, #31
 8007374:	d93a      	bls.n	80073ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e02b      	b.n	80073d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3301      	adds	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	021a      	lsls	r2, r3, #8
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3301      	adds	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	041a      	lsls	r2, r3, #16
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	061a      	lsls	r2, r3, #24
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	3301      	adds	r3, #1
 80073bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f107 020c 	add.w	r2, r7, #12
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fc6e 	bl	8007caa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	3301      	adds	r3, #1
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b07      	cmp	r3, #7
 80073d8:	d9d0      	bls.n	800737c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f1a3 0220 	sub.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]
  }
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e10f      	b.n	8007676 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a87      	ldr	r2, [pc, #540]	@ (8007680 <HAL_SPI_Init+0x23c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <HAL_SPI_Init+0x42>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a86      	ldr	r2, [pc, #536]	@ (8007684 <HAL_SPI_Init+0x240>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00a      	beq.n	8007486 <HAL_SPI_Init+0x42>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a84      	ldr	r2, [pc, #528]	@ (8007688 <HAL_SPI_Init+0x244>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d005      	beq.n	8007486 <HAL_SPI_Init+0x42>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d901      	bls.n	8007486 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e0f7      	b.n	8007676 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fbbc 	bl	8007c04 <SPI_GetPacketSize>
 800748c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a7b      	ldr	r2, [pc, #492]	@ (8007680 <HAL_SPI_Init+0x23c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00c      	beq.n	80074b2 <HAL_SPI_Init+0x6e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a79      	ldr	r2, [pc, #484]	@ (8007684 <HAL_SPI_Init+0x240>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <HAL_SPI_Init+0x6e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a78      	ldr	r2, [pc, #480]	@ (8007688 <HAL_SPI_Init+0x244>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Init+0x6e>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d811      	bhi.n	80074d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074b6:	4a72      	ldr	r2, [pc, #456]	@ (8007680 <HAL_SPI_Init+0x23c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a70      	ldr	r2, [pc, #448]	@ (8007684 <HAL_SPI_Init+0x240>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_SPI_Init+0x8c>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a6f      	ldr	r2, [pc, #444]	@ (8007688 <HAL_SPI_Init+0x244>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d104      	bne.n	80074da <HAL_SPI_Init+0x96>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d901      	bls.n	80074da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e0cd      	b.n	8007676 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fa f906 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007516:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007520:	d119      	bne.n	8007556 <HAL_SPI_Init+0x112>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800752a:	d103      	bne.n	8007534 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10c      	bne.n	8007556 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007544:	d107      	bne.n	8007556 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007554:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00f      	beq.n	8007582 <HAL_SPI_Init+0x13e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b06      	cmp	r3, #6
 8007568:	d90b      	bls.n	8007582 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e007      	b.n	8007592 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007590:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69da      	ldr	r2, [r3, #28]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759a:	431a      	orrs	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a4:	ea42 0103 	orr.w	r1, r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f2:	ea42 0103 	orr.w	r1, r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d113      	bne.n	8007632 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800761c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007630:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0201 	bic.w	r2, r2, #1
 8007640:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40013000 	.word	0x40013000
 8007684:	40003800 	.word	0x40003800
 8007688:	40003c00 	.word	0x40003c00

0800768c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	4613      	mov	r3, r2
 800769a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3320      	adds	r3, #32
 80076a2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a4:	f7fa f9a6 	bl	80019f4 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d001      	beq.n	80076ba <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
 80076b8:	e1d1      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <HAL_SPI_Transmit+0x3a>
 80076c0:	88fb      	ldrh	r3, [r7, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e1c9      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_SPI_Transmit+0x4c>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e1c2      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2203      	movs	r2, #3
 80076e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	88fa      	ldrh	r2, [r7, #6]
 80076fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007730:	d108      	bne.n	8007744 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	e009      	b.n	8007758 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007756:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	4b96      	ldr	r3, [pc, #600]	@ (80079b8 <HAL_SPI_Transmit+0x32c>)
 8007760:	4013      	ands	r3, r2
 8007762:	88f9      	ldrh	r1, [r7, #6]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	430b      	orrs	r3, r1
 800776a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007784:	d107      	bne.n	8007796 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d947      	bls.n	800782e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800779e:	e03f      	b.n	8007820 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d114      	bne.n	80077d8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077d6:	e023      	b.n	8007820 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d8:	f7fa f90c 	bl	80019f4 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d803      	bhi.n	80077f0 <HAL_SPI_Transmit+0x164>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d102      	bne.n	80077f6 <HAL_SPI_Transmit+0x16a>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d114      	bne.n	8007820 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f936 	bl	8007a68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007802:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e11e      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1b9      	bne.n	80077a0 <HAL_SPI_Transmit+0x114>
 800782c:	e0f1      	b.n	8007a12 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	2b07      	cmp	r3, #7
 8007834:	f240 80e6 	bls.w	8007a04 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007838:	e05d      	b.n	80078f6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d132      	bne.n	80078ae <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d918      	bls.n	8007886 <HAL_SPI_Transmit+0x1fa>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d014      	beq.n	8007886 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6812      	ldr	r2, [r2, #0]
 8007866:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b02      	subs	r3, #2
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007884:	e037      	b.n	80078f6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	881a      	ldrh	r2, [r3, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007894:	1c9a      	adds	r2, r3, #2
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078ac:	e023      	b.n	80078f6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ae:	f7fa f8a1 	bl	80019f4 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d803      	bhi.n	80078c6 <HAL_SPI_Transmit+0x23a>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d102      	bne.n	80078cc <HAL_SPI_Transmit+0x240>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d114      	bne.n	80078f6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f8cb 	bl	8007a68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e0b3      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d19b      	bne.n	800783a <HAL_SPI_Transmit+0x1ae>
 8007902:	e086      	b.n	8007a12 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d154      	bne.n	80079bc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d918      	bls.n	8007950 <HAL_SPI_Transmit+0x2c4>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007922:	2b40      	cmp	r3, #64	@ 0x40
 8007924:	d914      	bls.n	8007950 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6812      	ldr	r2, [r2, #0]
 8007930:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b04      	subs	r3, #4
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800794e:	e059      	b.n	8007a04 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d917      	bls.n	800798c <HAL_SPI_Transmit+0x300>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007972:	1c9a      	adds	r2, r3, #2
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b02      	subs	r3, #2
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800798a:	e03b      	b.n	8007a04 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3320      	adds	r3, #32
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079b6:	e025      	b.n	8007a04 <HAL_SPI_Transmit+0x378>
 80079b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079bc:	f7fa f81a 	bl	80019f4 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d803      	bhi.n	80079d4 <HAL_SPI_Transmit+0x348>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d102      	bne.n	80079da <HAL_SPI_Transmit+0x34e>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d114      	bne.n	8007a04 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f844 	bl	8007a68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e02c      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f af79 	bne.w	8007904 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2108      	movs	r1, #8
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f8c3 	bl	8007ba8 <SPI_WaitOnFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f815 	bl	8007a68 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop

08007a68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699a      	ldr	r2, [r3, #24]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0208 	orr.w	r2, r2, #8
 8007a86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0210 	orr.w	r2, r2, #16
 8007a96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6919      	ldr	r1, [r3, #16]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba4 <SPI_CloseTransfer+0x13c>)
 8007ab4:	400b      	ands	r3, r1
 8007ab6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ac6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d014      	beq.n	8007afe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00f      	beq.n	8007afe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0220 	orr.w	r2, r2, #32
 8007afc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d014      	beq.n	8007b34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b1a:	f043 0204 	orr.w	r2, r3, #4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00f      	beq.n	8007b5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b44:	f043 0201 	orr.w	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00f      	beq.n	8007b88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6e:	f043 0208 	orr.w	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	fffffc90 	.word	0xfffffc90

08007ba8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bb8:	e010      	b.n	8007bdc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bba:	f7f9 ff1b 	bl	80019f4 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d803      	bhi.n	8007bd2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d102      	bne.n	8007bd8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e00f      	b.n	8007bfc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	4013      	ands	r3, r2
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d0df      	beq.n	8007bba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	3307      	adds	r3, #7
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	f107 001c 	add.w	r0, r7, #28
 8007c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007c52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007c54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007c56:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8007c5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8007c5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8007c62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <SDMMC_Init+0x50>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	b004      	add	sp, #16
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	ffc02c00 	.word	0xffc02c00

08007c90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f043 0203 	orr.w	r2, r3, #3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
	...

08007d0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007d30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007d36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	4b06      	ldr	r3, [pc, #24]	@ (8007d5c <SDMMC_SendCommand+0x50>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	fffee0c0 	.word	0xfffee0c0

08007d60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	b2db      	uxtb	r3, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3314      	adds	r3, #20
 8007d88:	461a      	mov	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007dc6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007dcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007dd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0

}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e06:	2310      	movs	r3, #16
 8007e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e1a:	f107 0308 	add.w	r3, r7, #8
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff ff73 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa5f 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e34:	69fb      	ldr	r3, [r7, #28]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b088      	sub	sp, #32
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007e4c:	2311      	movs	r3, #17
 8007e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ff50 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e70:	2111      	movs	r1, #17
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa3c 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007e92:	2312      	movs	r3, #18
 8007e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ea6:	f107 0308 	add.w	r3, r7, #8
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ff2d 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb6:	2112      	movs	r1, #18
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa19 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b088      	sub	sp, #32
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007ed8:	2318      	movs	r3, #24
 8007eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eec:	f107 0308 	add.w	r3, r7, #8
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff ff0a 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007efc:	2118      	movs	r1, #24
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9f6 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f06:	69fb      	ldr	r3, [r7, #28]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3720      	adds	r7, #32
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f1e:	2319      	movs	r3, #25
 8007f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f32:	f107 0308 	add.w	r3, r7, #8
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fee7 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f42:	2119      	movs	r1, #25
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9d3 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007f64:	230c      	movs	r3, #12
 8007f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f76:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f90:	f107 0308 	add.w	r3, r7, #8
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff feb8 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007fcc <SDMMC_CmdStopTransfer+0x74>)
 8007f9e:	210c      	movs	r1, #12
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9a5 	bl	80082f0 <SDMMC_GetCmdResp1>
 8007fa6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fba:	d101      	bne.n	8007fc0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	05f5e100 	.word	0x05f5e100

08007fd0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007fde:	2307      	movs	r3, #7
 8007fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe87 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008002:	2107      	movs	r1, #7
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f973 	bl	80082f0 <SDMMC_GetCmdResp1>
 800800a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800800c:	69fb      	ldr	r3, [r7, #28]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b088      	sub	sp, #32
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fe66 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fb97 	bl	8008774 <SDMMC_GetCmdError>
 8008046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800805a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800805e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008060:	2308      	movs	r3, #8
 8008062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800806e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008074:	f107 0308 	add.w	r3, r7, #8
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff fe46 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb29 	bl	80086d8 <SDMMC_GetCmdResp7>
 8008086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008088:	69fb      	ldr	r3, [r7, #28]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b088      	sub	sp, #32
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80080a0:	2337      	movs	r3, #55	@ 0x37
 80080a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fe26 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80080c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c4:	2137      	movs	r1, #55	@ 0x37
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f912 	bl	80082f0 <SDMMC_GetCmdResp1>
 80080cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80080e6:	2329      	movs	r3, #41	@ 0x29
 80080e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe03 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa2e 	bl	8008568 <SDMMC_GetCmdResp3>
 800810c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800810e:	69fb      	ldr	r3, [r7, #28]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008126:	2306      	movs	r3, #6
 8008128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800812a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800812e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008138:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff fde3 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800814a:	2106      	movs	r1, #6
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8cf 	bl	80082f0 <SDMMC_GetCmdResp1>
 8008152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008154:	69fb      	ldr	r3, [r7, #28]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800816a:	2333      	movs	r3, #51	@ 0x33
 800816c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800816e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800817c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800817e:	f107 0308 	add.w	r3, r7, #8
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fdc1 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800818a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818e:	2133      	movs	r1, #51	@ 0x33
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8ad 	bl	80082f0 <SDMMC_GetCmdResp1>
 8008196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008198:	69fb      	ldr	r3, [r7, #28]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b088      	sub	sp, #32
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80081ae:	2302      	movs	r3, #2
 80081b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80081b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80081b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fd9f 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f980 	bl	80084d4 <SDMMC_GetCmdResp2>
 80081d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081d6:	69fb      	ldr	r3, [r7, #28]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80081ee:	2309      	movs	r3, #9
 80081f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80081f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80081f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fd7f 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f960 	bl	80084d4 <SDMMC_GetCmdResp2>
 8008214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008216:	69fb      	ldr	r3, [r7, #28]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800822e:	2303      	movs	r3, #3
 8008230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800823c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fd5f 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	2103      	movs	r1, #3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9c8 	bl	80085e8 <SDMMC_GetCmdResp6>
 8008258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800825a:	69fb      	ldr	r3, [r7, #28]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008272:	230d      	movs	r3, #13
 8008274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800827a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fd3d 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008296:	210d      	movs	r1, #13
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f829 	bl	80082f0 <SDMMC_GetCmdResp1>
 800829e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a0:	69fb      	ldr	r3, [r7, #28]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b088      	sub	sp, #32
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80082b6:	230d      	movs	r3, #13
 80082b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fd1b 	bl	8007d0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80082d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082da:	210d      	movs	r1, #13
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f807 	bl	80082f0 <SDMMC_GetCmdResp1>
 80082e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082e4:	69fb      	ldr	r3, [r7, #28]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3720      	adds	r7, #32
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	460b      	mov	r3, r1
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80082fe:	4b70      	ldr	r3, [pc, #448]	@ (80084c0 <SDMMC_GetCmdResp1+0x1d0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a70      	ldr	r2, [pc, #448]	@ (80084c4 <SDMMC_GetCmdResp1+0x1d4>)
 8008304:	fba2 2303 	umull	r2, r3, r2, r3
 8008308:	0a5a      	lsrs	r2, r3, #9
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	1e5a      	subs	r2, r3, #1
 8008316:	61fa      	str	r2, [r7, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800831c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008320:	e0c9      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008326:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	4b67      	ldr	r3, [pc, #412]	@ (80084c8 <SDMMC_GetCmdResp1+0x1d8>)
 800832c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0ef      	beq.n	8008312 <SDMMC_GetCmdResp1+0x22>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1ea      	bne.n	8008312 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008340:	f003 0304 	and.w	r3, r3, #4
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2204      	movs	r2, #4
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800834e:	2304      	movs	r3, #4
 8008350:	e0b1      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008364:	2301      	movs	r3, #1
 8008366:	e0a6      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a58      	ldr	r2, [pc, #352]	@ (80084cc <SDMMC_GetCmdResp1+0x1dc>)
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fcf6 	bl	8007d60 <SDMMC_GetCommandResponse>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	4293      	cmp	r3, r2
 800837c:	d001      	beq.n	8008382 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800837e:	2301      	movs	r3, #1
 8008380:	e099      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008382:	2100      	movs	r1, #0
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fcf8 	bl	8007d7a <SDMMC_GetResponse>
 800838a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4b50      	ldr	r3, [pc, #320]	@ (80084d0 <SDMMC_GetCmdResp1+0x1e0>)
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008396:	2300      	movs	r3, #0
 8008398:	e08d      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	da02      	bge.n	80083a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80083a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80083a4:	e087      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80083b0:	2340      	movs	r3, #64	@ 0x40
 80083b2:	e080      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	e079      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80083cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80083d0:	e071      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80083dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083e0:	e069      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80083ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083f0:	e061      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80083fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008400:	e059      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800840c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008410:	e051      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800841c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008420:	e049      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800842c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008430:	e041      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800843c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008440:	e039      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800844c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008450:	e031      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800845c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008460:	e029      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800846c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008470:	e021      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800847c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008480:	e019      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800848c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008490:	e011      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800849c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80084a0:	e009      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80084ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80084b0:	e001      	b.n	80084b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3720      	adds	r7, #32
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	24000000 	.word	0x24000000
 80084c4:	10624dd3 	.word	0x10624dd3
 80084c8:	00200045 	.word	0x00200045
 80084cc:	002000c5 	.word	0x002000c5
 80084d0:	fdffe008 	.word	0xfdffe008

080084d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80084dc:	4b1f      	ldr	r3, [pc, #124]	@ (800855c <SDMMC_GetCmdResp2+0x88>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008560 <SDMMC_GetCmdResp2+0x8c>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	0a5b      	lsrs	r3, r3, #9
 80084e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
 80084f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1e5a      	subs	r2, r3, #1
 80084f6:	60fa      	str	r2, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008500:	e026      	b.n	8008550 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008506:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0ef      	beq.n	80084f2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1ea      	bne.n	80084f2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2204      	movs	r2, #4
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800852e:	2304      	movs	r3, #4
 8008530:	e00e      	b.n	8008550 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008544:	2301      	movs	r3, #1
 8008546:	e003      	b.n	8008550 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a06      	ldr	r2, [pc, #24]	@ (8008564 <SDMMC_GetCmdResp2+0x90>)
 800854c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	24000000 	.word	0x24000000
 8008560:	10624dd3 	.word	0x10624dd3
 8008564:	002000c5 	.word	0x002000c5

08008568 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008570:	4b1a      	ldr	r3, [pc, #104]	@ (80085dc <SDMMC_GetCmdResp3+0x74>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a1a      	ldr	r2, [pc, #104]	@ (80085e0 <SDMMC_GetCmdResp3+0x78>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	0a5b      	lsrs	r3, r3, #9
 800857c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008580:	fb02 f303 	mul.w	r3, r2, r3
 8008584:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	1e5a      	subs	r2, r3, #1
 800858a:	60fa      	str	r2, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008590:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008594:	e01b      	b.n	80085ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0ef      	beq.n	8008586 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1ea      	bne.n	8008586 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085c2:	2304      	movs	r3, #4
 80085c4:	e003      	b.n	80085ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a06      	ldr	r2, [pc, #24]	@ (80085e4 <SDMMC_GetCmdResp3+0x7c>)
 80085ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	24000000 	.word	0x24000000
 80085e0:	10624dd3 	.word	0x10624dd3
 80085e4:	002000c5 	.word	0x002000c5

080085e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	460b      	mov	r3, r1
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80085f6:	4b35      	ldr	r3, [pc, #212]	@ (80086cc <SDMMC_GetCmdResp6+0xe4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a35      	ldr	r2, [pc, #212]	@ (80086d0 <SDMMC_GetCmdResp6+0xe8>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	0a5b      	lsrs	r3, r3, #9
 8008602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	61fa      	str	r2, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d102      	bne.n	800861c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008616:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800861a:	e052      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008620:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0ef      	beq.n	800860c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1ea      	bne.n	800860c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2204      	movs	r2, #4
 8008646:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008648:	2304      	movs	r3, #4
 800864a:	e03a      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800865e:	2301      	movs	r3, #1
 8008660:	e02f      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fb7c 	bl	8007d60 <SDMMC_GetCommandResponse>
 8008668:	4603      	mov	r3, r0
 800866a:	461a      	mov	r2, r3
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	4293      	cmp	r3, r2
 8008670:	d001      	beq.n	8008676 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008672:	2301      	movs	r3, #1
 8008674:	e025      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a16      	ldr	r2, [pc, #88]	@ (80086d4 <SDMMC_GetCmdResp6+0xec>)
 800867a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800867c:	2100      	movs	r1, #0
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff fb7b 	bl	8007d7a <SDMMC_GetResponse>
 8008684:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800869a:	2300      	movs	r3, #0
 800869c:	e011      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80086ac:	e009      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086bc:	e001      	b.n	80086c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	24000000 	.word	0x24000000
 80086d0:	10624dd3 	.word	0x10624dd3
 80086d4:	002000c5 	.word	0x002000c5

080086d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80086e0:	4b22      	ldr	r3, [pc, #136]	@ (800876c <SDMMC_GetCmdResp7+0x94>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a22      	ldr	r2, [pc, #136]	@ (8008770 <SDMMC_GetCmdResp7+0x98>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	0a5b      	lsrs	r3, r3, #9
 80086ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	1e5a      	subs	r2, r3, #1
 80086fa:	60fa      	str	r2, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008700:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008704:	e02c      	b.n	8008760 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800870a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0ef      	beq.n	80086f6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ea      	bne.n	80086f6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2204      	movs	r2, #4
 8008730:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008732:	2304      	movs	r3, #4
 8008734:	e014      	b.n	8008760 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008748:	2301      	movs	r3, #1
 800874a:	e009      	b.n	8008760 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2240      	movs	r2, #64	@ 0x40
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800875e:	2300      	movs	r3, #0

}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	24000000 	.word	0x24000000
 8008770:	10624dd3 	.word	0x10624dd3

08008774 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800877c:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <SDMMC_GetCmdError+0x50>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a11      	ldr	r2, [pc, #68]	@ (80087c8 <SDMMC_GetCmdError+0x54>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	0a5b      	lsrs	r3, r3, #9
 8008788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	1e5a      	subs	r2, r3, #1
 8008796:	60fa      	str	r2, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800879c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80087a0:	e009      	b.n	80087b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f1      	beq.n	8008792 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <SDMMC_GetCmdError+0x58>)
 80087b2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	24000000 	.word	0x24000000
 80087c8:	10624dd3 	.word	0x10624dd3
 80087cc:	002000c5 	.word	0x002000c5

080087d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80087d4:	4904      	ldr	r1, [pc, #16]	@ (80087e8 <MX_FATFS_Init+0x18>)
 80087d6:	4805      	ldr	r0, [pc, #20]	@ (80087ec <MX_FATFS_Init+0x1c>)
 80087d8:	f002 fc52 	bl	800b080 <FATFS_LinkDriver>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <MX_FATFS_Init+0x20>)
 80087e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80087e4:	bf00      	nop
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	240005ac 	.word	0x240005ac
 80087ec:	0800b188 	.word	0x0800b188
 80087f0:	240005a8 	.word	0x240005a8

080087f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80087f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800880e:	f000 f885 	bl	800891c <BSP_SD_IsDetected>
 8008812:	4603      	mov	r3, r0
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008818:	2302      	movs	r3, #2
 800881a:	e012      	b.n	8008842 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800881c:	480b      	ldr	r0, [pc, #44]	@ (800884c <BSP_SD_Init+0x48>)
 800881e:	f7fd f9ad 	bl	8005b7c <HAL_SD_Init>
 8008822:	4603      	mov	r3, r0
 8008824:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800882c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008830:	4806      	ldr	r0, [pc, #24]	@ (800884c <BSP_SD_Init+0x48>)
 8008832:	f7fe f863 	bl	80068fc <HAL_SD_ConfigWideBusOperation>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008840:	79fb      	ldrb	r3, [r7, #7]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	240004a0 	.word	0x240004a0

08008850 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	68f9      	ldr	r1, [r7, #12]
 8008866:	4806      	ldr	r0, [pc, #24]	@ (8008880 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008868:	f7fd faa8 	bl	8005dbc <HAL_SD_ReadBlocks_DMA>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	240004a0 	.word	0x240004a0

08008884 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	68f9      	ldr	r1, [r7, #12]
 800889a:	4806      	ldr	r0, [pc, #24]	@ (80088b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800889c:	f7fd fb36 	bl	8005f0c <HAL_SD_WriteBlocks_DMA>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	240004a0 	.word	0x240004a0

080088b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80088bc:	4805      	ldr	r0, [pc, #20]	@ (80088d4 <BSP_SD_GetCardState+0x1c>)
 80088be:	f7fe f92f 	bl	8006b20 <HAL_SD_GetCardState>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	240004a0 	.word	0x240004a0

080088d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4803      	ldr	r0, [pc, #12]	@ (80088f0 <BSP_SD_GetCardInfo+0x18>)
 80088e4:	f7fd ffde 	bl	80068a4 <HAL_SD_GetCardInfo>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	240004a0 	.word	0x240004a0

080088f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80088fc:	f000 f9a0 	bl	8008c40 <BSP_SD_WriteCpltCallback>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008910:	f000 f9a2 	bl	8008c58 <BSP_SD_ReadCpltCallback>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008922:	2301      	movs	r3, #1
 8008924:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008926:	f000 f80b 	bl	8008940 <BSP_PlatformIsDetected>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008930:	2300      	movs	r3, #0
 8008932:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	b2db      	uxtb	r3, r3
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008946:	2301      	movs	r3, #1
 8008948:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800894a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800894e:	4806      	ldr	r0, [pc, #24]	@ (8008968 <BSP_PlatformIsDetected+0x28>)
 8008950:	f7f9 fb4c 	bl	8001fec <HAL_GPIO_ReadPin>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800895a:	2300      	movs	r3, #0
 800895c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800895e:	79fb      	ldrb	r3, [r7, #7]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	58022000 	.word	0x58022000

0800896c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008974:	f7f9 f83e 	bl	80019f4 <HAL_GetTick>
 8008978:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800897a:	e006      	b.n	800898a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800897c:	f7ff ff9c 	bl	80088b8 <BSP_SD_GetCardState>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008986:	2300      	movs	r3, #0
 8008988:	e009      	b.n	800899e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800898a:	f7f9 f833 	bl	80019f4 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d8f0      	bhi.n	800897c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <SD_CheckStatus+0x38>)
 80089b4:	2201      	movs	r2, #1
 80089b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80089b8:	f7ff ff7e 	bl	80088b8 <BSP_SD_GetCardState>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d107      	bne.n	80089d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80089c2:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <SD_CheckStatus+0x38>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	4b04      	ldr	r3, [pc, #16]	@ (80089e0 <SD_CheckStatus+0x38>)
 80089d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80089d2:	4b03      	ldr	r3, [pc, #12]	@ (80089e0 <SD_CheckStatus+0x38>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b2db      	uxtb	r3, r3
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	24000019 	.word	0x24000019

080089e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80089ee:	f7ff ff09 	bl	8008804 <BSP_SD_Init>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff ffd4 	bl	80089a8 <SD_CheckStatus>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b04      	ldr	r3, [pc, #16]	@ (8008a18 <SD_initialize+0x34>)
 8008a06:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008a08:	4b03      	ldr	r3, [pc, #12]	@ (8008a18 <SD_initialize+0x34>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b2db      	uxtb	r3, r3
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	24000019 	.word	0x24000019

08008a1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ffbd 	bl	80089a8 <SD_CheckStatus>
 8008a2e:	4603      	mov	r3, r0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008a4c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008a50:	f7ff ff8c 	bl	800896c <SD_CheckStatusWithTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da01      	bge.n	8008a5e <SD_read+0x26>
  {
    return res;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	e03b      	b.n	8008ad6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f7ff fef4 	bl	8008850 <BSP_SD_ReadBlocks_DMA>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d132      	bne.n	8008ad4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ae0 <SD_read+0xa8>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008a74:	f7f8 ffbe 	bl	80019f4 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008a7a:	bf00      	nop
 8008a7c:	4b18      	ldr	r3, [pc, #96]	@ (8008ae0 <SD_read+0xa8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d108      	bne.n	8008a96 <SD_read+0x5e>
 8008a84:	f7f8 ffb6 	bl	80019f4 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d9f2      	bls.n	8008a7c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008a96:	4b12      	ldr	r3, [pc, #72]	@ (8008ae0 <SD_read+0xa8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d102      	bne.n	8008aa4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e017      	b.n	8008ad4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <SD_read+0xa8>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008aaa:	f7f8 ffa3 	bl	80019f4 <HAL_GetTick>
 8008aae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ab0:	e007      	b.n	8008ac2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ab2:	f7ff ff01 	bl	80088b8 <BSP_SD_GetCardState>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <SD_read+0x8a>
          {
            res = RES_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008ac0:	e008      	b.n	8008ad4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ac2:	f7f8 ff97 	bl	80019f4 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d9ee      	bls.n	8008ab2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	240005b4 	.word	0x240005b4

08008ae4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008af8:	4b24      	ldr	r3, [pc, #144]	@ (8008b8c <SD_write+0xa8>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008afe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008b02:	f7ff ff33 	bl	800896c <SD_CheckStatusWithTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da01      	bge.n	8008b10 <SD_write+0x2c>
  {
    return res;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	e038      	b.n	8008b82 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	68b8      	ldr	r0, [r7, #8]
 8008b16:	f7ff feb5 	bl	8008884 <BSP_SD_WriteBlocks_DMA>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d12f      	bne.n	8008b80 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008b20:	f7f8 ff68 	bl	80019f4 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008b26:	bf00      	nop
 8008b28:	4b18      	ldr	r3, [pc, #96]	@ (8008b8c <SD_write+0xa8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <SD_write+0x5e>
 8008b30:	f7f8 ff60 	bl	80019f4 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d9f2      	bls.n	8008b28 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008b42:	4b12      	ldr	r3, [pc, #72]	@ (8008b8c <SD_write+0xa8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	e017      	b.n	8008b80 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008b50:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <SD_write+0xa8>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008b56:	f7f8 ff4d 	bl	80019f4 <HAL_GetTick>
 8008b5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b5c:	e007      	b.n	8008b6e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b5e:	f7ff feab 	bl	80088b8 <BSP_SD_GetCardState>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <SD_write+0x8a>
          {
            res = RES_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
            break;
 8008b6c:	e008      	b.n	8008b80 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b6e:	f7f8 ff41 	bl	80019f4 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d9ee      	bls.n	8008b5e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	240005b0 	.word	0x240005b0

08008b90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	@ 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	603a      	str	r2, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008ba6:	4b25      	ldr	r3, [pc, #148]	@ (8008c3c <SD_ioctl+0xac>)
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <SD_ioctl+0x28>
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e03c      	b.n	8008c32 <SD_ioctl+0xa2>

  switch (cmd)
 8008bb8:	79bb      	ldrb	r3, [r7, #6]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d834      	bhi.n	8008c28 <SD_ioctl+0x98>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <SD_ioctl+0x34>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bd5 	.word	0x08008bd5
 8008bc8:	08008bdd 	.word	0x08008bdd
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008c0f 	.word	0x08008c0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008bda:	e028      	b.n	8008c2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fe79 	bl	80088d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008be6:	6a3a      	ldr	r2, [r7, #32]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008bf2:	e01c      	b.n	8008c2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008bf4:	f107 0308 	add.w	r3, r7, #8
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff fe6d 	bl	80088d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008c0c:	e00f      	b.n	8008c2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff fe60 	bl	80088d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	0a5a      	lsrs	r2, r3, #9
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008c26:	e002      	b.n	8008c2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3730      	adds	r7, #48	@ 0x30
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	24000019 	.word	0x24000019

08008c40 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008c44:	4b03      	ldr	r3, [pc, #12]	@ (8008c54 <BSP_SD_WriteCpltCallback+0x14>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	601a      	str	r2, [r3, #0]
}
 8008c4a:	bf00      	nop
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	240005b0 	.word	0x240005b0

08008c58 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008c5c:	4b03      	ldr	r3, [pc, #12]	@ (8008c6c <BSP_SD_ReadCpltCallback+0x14>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	240005b4 	.word	0x240005b4

08008c70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	4a08      	ldr	r2, [pc, #32]	@ (8008ca0 <disk_status+0x30>)
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	79fa      	ldrb	r2, [r7, #7]
 8008c88:	4905      	ldr	r1, [pc, #20]	@ (8008ca0 <disk_status+0x30>)
 8008c8a:	440a      	add	r2, r1
 8008c8c:	7a12      	ldrb	r2, [r2, #8]
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4798      	blx	r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	240005e0 	.word	0x240005e0

08008ca4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8008cf0 <disk_initialize+0x4c>)
 8008cb6:	5cd3      	ldrb	r3, [r2, r3]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d114      	bne.n	8008ce6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf0 <disk_initialize+0x4c>)
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	79fa      	ldrb	r2, [r7, #7]
 8008cca:	4909      	ldr	r1, [pc, #36]	@ (8008cf0 <disk_initialize+0x4c>)
 8008ccc:	440a      	add	r2, r1
 8008cce:	7a12      	ldrb	r2, [r2, #8]
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	4a03      	ldr	r2, [pc, #12]	@ (8008cf0 <disk_initialize+0x4c>)
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	240005e0 	.word	0x240005e0

08008cf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	4a0a      	ldr	r2, [pc, #40]	@ (8008d30 <disk_read+0x3c>)
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	689c      	ldr	r4, [r3, #8]
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4a07      	ldr	r2, [pc, #28]	@ (8008d30 <disk_read+0x3c>)
 8008d14:	4413      	add	r3, r2
 8008d16:	7a18      	ldrb	r0, [r3, #8]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	47a0      	blx	r4
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd90      	pop	{r4, r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	240005e0 	.word	0x240005e0

08008d34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4a0a      	ldr	r2, [pc, #40]	@ (8008d70 <disk_write+0x3c>)
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	68dc      	ldr	r4, [r3, #12]
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4a07      	ldr	r2, [pc, #28]	@ (8008d70 <disk_write+0x3c>)
 8008d54:	4413      	add	r3, r2
 8008d56:	7a18      	ldrb	r0, [r3, #8]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	47a0      	blx	r4
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	240005e0 	.word	0x240005e0

08008d74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	b21a      	sxth	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b21b      	sxth	r3, r3
 8008d90:	4313      	orrs	r3, r2
 8008d92:	b21b      	sxth	r3, r3
 8008d94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d96:	89fb      	ldrh	r3, [r7, #14]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3303      	adds	r3, #3
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	3202      	adds	r2, #2
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	3201      	adds	r2, #1
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	887b      	ldrh	r3, [r7, #2]
 8008e04:	0a1b      	lsrs	r3, r3, #8
 8008e06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	887a      	ldrh	r2, [r7, #2]
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	701a      	strb	r2, [r3, #0]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	0a1b      	lsrs	r3, r3, #8
 8008e5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	1c53      	adds	r3, r2, #1
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	1c59      	adds	r1, r3, #1
 8008e9c:	6179      	str	r1, [r7, #20]
 8008e9e:	7812      	ldrb	r2, [r2, #0]
 8008ea0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f1      	bne.n	8008e92 <mem_cpy+0x1a>
	}
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008eba:	b480      	push	{r7}
 8008ebc:	b087      	sub	sp, #28
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	617a      	str	r2, [r7, #20]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f3      	bne.n	8008eca <mem_set+0x10>
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ef0:	b480      	push	{r7}
 8008ef2:	b089      	sub	sp, #36	@ 0x24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	61fa      	str	r2, [r7, #28]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	61ba      	str	r2, [r7, #24]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	1acb      	subs	r3, r1, r3
 8008f1c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <mem_cmp+0x40>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0eb      	beq.n	8008f08 <mem_cmp+0x18>

	return r;
 8008f30:	697b      	ldr	r3, [r7, #20]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3724      	adds	r7, #36	@ 0x24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008f48:	e002      	b.n	8008f50 <chk_chr+0x12>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <chk_chr+0x26>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d1f2      	bne.n	8008f4a <chk_chr+0xc>
	return *str;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	781b      	ldrb	r3, [r3, #0]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e029      	b.n	8008fdc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f88:	4a27      	ldr	r2, [pc, #156]	@ (8009028 <chk_lock+0xb4>)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	4413      	add	r3, r2
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01d      	beq.n	8008fd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f96:	4a24      	ldr	r2, [pc, #144]	@ (8009028 <chk_lock+0xb4>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	4413      	add	r3, r2
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d116      	bne.n	8008fd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <chk_lock+0xb4>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	4413      	add	r3, r2
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d10c      	bne.n	8008fd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8009028 <chk_lock+0xb4>)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d102      	bne.n	8008fd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fd0:	e007      	b.n	8008fe2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d9d2      	bls.n	8008f88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d109      	bne.n	8008ffc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <chk_lock+0x80>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d101      	bne.n	8008ff8 <chk_lock+0x84>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e010      	b.n	800901a <chk_lock+0xa6>
 8008ff8:	2312      	movs	r3, #18
 8008ffa:	e00e      	b.n	800901a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <chk_lock+0xa0>
 8009002:	4a09      	ldr	r2, [pc, #36]	@ (8009028 <chk_lock+0xb4>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	4413      	add	r3, r2
 800900a:	330c      	adds	r3, #12
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009012:	d101      	bne.n	8009018 <chk_lock+0xa4>
 8009014:	2310      	movs	r3, #16
 8009016:	e000      	b.n	800901a <chk_lock+0xa6>
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	240005c0 	.word	0x240005c0

0800902c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009032:	2300      	movs	r3, #0
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	e002      	b.n	800903e <enq_lock+0x12>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3301      	adds	r3, #1
 800903c:	607b      	str	r3, [r7, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d806      	bhi.n	8009052 <enq_lock+0x26>
 8009044:	4a09      	ldr	r2, [pc, #36]	@ (800906c <enq_lock+0x40>)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	4413      	add	r3, r2
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f2      	bne.n	8009038 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b02      	cmp	r3, #2
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	240005c0 	.word	0x240005c0

08009070 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	e01f      	b.n	80090c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009080:	4a41      	ldr	r2, [pc, #260]	@ (8009188 <inc_lock+0x118>)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	4413      	add	r3, r2
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d113      	bne.n	80090ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009092:	4a3d      	ldr	r2, [pc, #244]	@ (8009188 <inc_lock+0x118>)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d109      	bne.n	80090ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80090a6:	4a38      	ldr	r2, [pc, #224]	@ (8009188 <inc_lock+0x118>)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	4413      	add	r3, r2
 80090ae:	3308      	adds	r3, #8
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d006      	beq.n	80090c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d9dc      	bls.n	8009080 <inc_lock+0x10>
 80090c6:	e000      	b.n	80090ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d132      	bne.n	8009136 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <inc_lock+0x6c>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3301      	adds	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d806      	bhi.n	80090f0 <inc_lock+0x80>
 80090e2:	4a29      	ldr	r2, [pc, #164]	@ (8009188 <inc_lock+0x118>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	4413      	add	r3, r2
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1f2      	bne.n	80090d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d101      	bne.n	80090fa <inc_lock+0x8a>
 80090f6:	2300      	movs	r3, #0
 80090f8:	e040      	b.n	800917c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4922      	ldr	r1, [pc, #136]	@ (8009188 <inc_lock+0x118>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	440b      	add	r3, r1
 8009106:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	491e      	ldr	r1, [pc, #120]	@ (8009188 <inc_lock+0x118>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	440b      	add	r3, r1
 8009114:	3304      	adds	r3, #4
 8009116:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	695a      	ldr	r2, [r3, #20]
 800911c:	491a      	ldr	r1, [pc, #104]	@ (8009188 <inc_lock+0x118>)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	440b      	add	r3, r1
 8009124:	3308      	adds	r3, #8
 8009126:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009128:	4a17      	ldr	r2, [pc, #92]	@ (8009188 <inc_lock+0x118>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	4413      	add	r3, r2
 8009130:	330c      	adds	r3, #12
 8009132:	2200      	movs	r2, #0
 8009134:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d009      	beq.n	8009150 <inc_lock+0xe0>
 800913c:	4a12      	ldr	r2, [pc, #72]	@ (8009188 <inc_lock+0x118>)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	011b      	lsls	r3, r3, #4
 8009142:	4413      	add	r3, r2
 8009144:	330c      	adds	r3, #12
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <inc_lock+0xe0>
 800914c:	2300      	movs	r3, #0
 800914e:	e015      	b.n	800917c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d108      	bne.n	8009168 <inc_lock+0xf8>
 8009156:	4a0c      	ldr	r2, [pc, #48]	@ (8009188 <inc_lock+0x118>)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	4413      	add	r3, r2
 800915e:	330c      	adds	r3, #12
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	e001      	b.n	800916c <inc_lock+0xfc>
 8009168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800916c:	4906      	ldr	r1, [pc, #24]	@ (8009188 <inc_lock+0x118>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	440b      	add	r3, r1
 8009174:	330c      	adds	r3, #12
 8009176:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	240005c0 	.word	0x240005c0

0800918c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	e010      	b.n	80091bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800919a:	4a0d      	ldr	r2, [pc, #52]	@ (80091d0 <clear_lock+0x44>)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	4413      	add	r3, r2
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d105      	bne.n	80091b6 <clear_lock+0x2a>
 80091aa:	4a09      	ldr	r2, [pc, #36]	@ (80091d0 <clear_lock+0x44>)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	4413      	add	r3, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d9eb      	bls.n	800919a <clear_lock+0xe>
	}
}
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	240005c0 	.word	0x240005c0

080091d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	78db      	ldrb	r3, [r3, #3]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d034      	beq.n	8009252 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	7858      	ldrb	r0, [r3, #1]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80091f8:	2301      	movs	r3, #1
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	f7ff fd9a 	bl	8008d34 <disk_write>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]
 800920a:	e022      	b.n	8009252 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	1ad2      	subs	r2, r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	429a      	cmp	r2, r3
 8009220:	d217      	bcs.n	8009252 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	789b      	ldrb	r3, [r3, #2]
 8009226:	613b      	str	r3, [r7, #16]
 8009228:	e010      	b.n	800924c <sync_window+0x78>
					wsect += fs->fsize;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7858      	ldrb	r0, [r3, #1]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800923e:	2301      	movs	r3, #1
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	f7ff fd77 	bl	8008d34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3b01      	subs	r3, #1
 800924a:	613b      	str	r3, [r7, #16]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d8eb      	bhi.n	800922a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d01b      	beq.n	80092ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff ffad 	bl	80091d4 <sync_window>
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d113      	bne.n	80092ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7858      	ldrb	r0, [r3, #1]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800928e:	2301      	movs	r3, #1
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	f7ff fd2f 	bl	8008cf4 <disk_read>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	3b02      	subs	r3, #2
 80092c4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	3b02      	subs	r3, #2
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d301      	bcc.n	80092d6 <clust2sect+0x20>
 80092d2:	2300      	movs	r3, #0
 80092d4:	e008      	b.n	80092e8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	895b      	ldrh	r3, [r3, #10]
 80092da:	461a      	mov	r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	fb03 f202 	mul.w	r2, r3, r2
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e6:	4413      	add	r3, r2
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d904      	bls.n	8009314 <get_fat+0x20>
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d302      	bcc.n	800931a <get_fat+0x26>
		val = 1;	/* Internal error */
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e08e      	b.n	8009438 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800931a:	f04f 33ff 	mov.w	r3, #4294967295
 800931e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d061      	beq.n	80093ec <get_fat+0xf8>
 8009328:	2b03      	cmp	r3, #3
 800932a:	dc7b      	bgt.n	8009424 <get_fat+0x130>
 800932c:	2b01      	cmp	r3, #1
 800932e:	d002      	beq.n	8009336 <get_fat+0x42>
 8009330:	2b02      	cmp	r3, #2
 8009332:	d041      	beq.n	80093b8 <get_fat+0xc4>
 8009334:	e076      	b.n	8009424 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	085b      	lsrs	r3, r3, #1
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6a1a      	ldr	r2, [r3, #32]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0a5b      	lsrs	r3, r3, #9
 800934c:	4413      	add	r3, r2
 800934e:	4619      	mov	r1, r3
 8009350:	6938      	ldr	r0, [r7, #16]
 8009352:	f7ff ff83 	bl	800925c <move_window>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d166      	bne.n	800942a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	60fa      	str	r2, [r7, #12]
 8009362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4413      	add	r3, r2
 800936a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800936e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6a1a      	ldr	r2, [r3, #32]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0a5b      	lsrs	r3, r3, #9
 8009378:	4413      	add	r3, r2
 800937a:	4619      	mov	r1, r3
 800937c:	6938      	ldr	r0, [r7, #16]
 800937e:	f7ff ff6d 	bl	800925c <move_window>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d152      	bne.n	800942e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	4313      	orrs	r3, r2
 800939c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <get_fat+0xba>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	091b      	lsrs	r3, r3, #4
 80093ac:	e002      	b.n	80093b4 <get_fat+0xc0>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b4:	617b      	str	r3, [r7, #20]
			break;
 80093b6:	e03f      	b.n	8009438 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	4413      	add	r3, r2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f7ff ff49 	bl	800925c <move_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d130      	bne.n	8009432 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80093de:	4413      	add	r3, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fcc7 	bl	8008d74 <ld_word>
 80093e6:	4603      	mov	r3, r0
 80093e8:	617b      	str	r3, [r7, #20]
			break;
 80093ea:	e025      	b.n	8009438 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6a1a      	ldr	r2, [r3, #32]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	09db      	lsrs	r3, r3, #7
 80093f4:	4413      	add	r3, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	6938      	ldr	r0, [r7, #16]
 80093fa:	f7ff ff2f 	bl	800925c <move_window>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d118      	bne.n	8009436 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009412:	4413      	add	r3, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fcc5 	bl	8008da4 <ld_dword>
 800941a:	4603      	mov	r3, r0
 800941c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009420:	617b      	str	r3, [r7, #20]
			break;
 8009422:	e009      	b.n	8009438 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009424:	2301      	movs	r3, #1
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e006      	b.n	8009438 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800942a:	bf00      	nop
 800942c:	e004      	b.n	8009438 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800942e:	bf00      	nop
 8009430:	e002      	b.n	8009438 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009432:	bf00      	nop
 8009434:	e000      	b.n	8009438 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009436:	bf00      	nop
		}
	}

	return val;
 8009438:	697b      	ldr	r3, [r7, #20]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009442:	b590      	push	{r4, r7, lr}
 8009444:	b089      	sub	sp, #36	@ 0x24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800944e:	2302      	movs	r3, #2
 8009450:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b01      	cmp	r3, #1
 8009456:	f240 80d9 	bls.w	800960c <put_fat+0x1ca>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	f080 80d3 	bcs.w	800960c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b03      	cmp	r3, #3
 800946c:	f000 8096 	beq.w	800959c <put_fat+0x15a>
 8009470:	2b03      	cmp	r3, #3
 8009472:	f300 80cb 	bgt.w	800960c <put_fat+0x1ca>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d002      	beq.n	8009480 <put_fat+0x3e>
 800947a:	2b02      	cmp	r3, #2
 800947c:	d06e      	beq.n	800955c <put_fat+0x11a>
 800947e:	e0c5      	b.n	800960c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	61bb      	str	r3, [r7, #24]
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	4413      	add	r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	0a5b      	lsrs	r3, r3, #9
 8009496:	4413      	add	r3, r2
 8009498:	4619      	mov	r1, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fede 	bl	800925c <move_window>
 80094a0:	4603      	mov	r3, r0
 80094a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094a4:	7ffb      	ldrb	r3, [r7, #31]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f040 80a9 	bne.w	80095fe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	1c59      	adds	r1, r3, #1
 80094b6:	61b9      	str	r1, [r7, #24]
 80094b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094bc:	4413      	add	r3, r2
 80094be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00d      	beq.n	80094e6 <put_fat+0xa4>
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b25b      	sxtb	r3, r3
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	b25a      	sxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	b25b      	sxtb	r3, r3
 80094de:	4313      	orrs	r3, r2
 80094e0:	b25b      	sxtb	r3, r3
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	e001      	b.n	80094ea <put_fat+0xa8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1a      	ldr	r2, [r3, #32]
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	0a5b      	lsrs	r3, r3, #9
 80094fc:	4413      	add	r3, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff feab 	bl	800925c <move_window>
 8009506:	4603      	mov	r3, r0
 8009508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d178      	bne.n	8009602 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951c:	4413      	add	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <put_fat+0xf0>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	091b      	lsrs	r3, r3, #4
 800952e:	b2db      	uxtb	r3, r3
 8009530:	e00e      	b.n	8009550 <put_fat+0x10e>
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b25b      	sxtb	r3, r3
 8009538:	f023 030f 	bic.w	r3, r3, #15
 800953c:	b25a      	sxtb	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0a1b      	lsrs	r3, r3, #8
 8009542:	b25b      	sxtb	r3, r3
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	b25b      	sxtb	r3, r3
 800954a:	4313      	orrs	r3, r2
 800954c:	b25b      	sxtb	r3, r3
 800954e:	b2db      	uxtb	r3, r3
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	70da      	strb	r2, [r3, #3]
			break;
 800955a:	e057      	b.n	800960c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a1a      	ldr	r2, [r3, #32]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	0a1b      	lsrs	r3, r3, #8
 8009564:	4413      	add	r3, r2
 8009566:	4619      	mov	r1, r3
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff fe77 	bl	800925c <move_window>
 800956e:	4603      	mov	r3, r0
 8009570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009572:	7ffb      	ldrb	r3, [r7, #31]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d146      	bne.n	8009606 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009586:	4413      	add	r3, r2
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	b292      	uxth	r2, r2
 800958c:	4611      	mov	r1, r2
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fc2b 	bl	8008dea <st_word>
			fs->wflag = 1;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	70da      	strb	r2, [r3, #3]
			break;
 800959a:	e037      	b.n	800960c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a1a      	ldr	r2, [r3, #32]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	09db      	lsrs	r3, r3, #7
 80095a4:	4413      	add	r3, r2
 80095a6:	4619      	mov	r1, r3
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff fe57 	bl	800925c <move_window>
 80095ae:	4603      	mov	r3, r0
 80095b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095b2:	7ffb      	ldrb	r3, [r7, #31]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d128      	bne.n	800960a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80095cc:	4413      	add	r3, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fbe8 	bl	8008da4 <ld_dword>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80095da:	4323      	orrs	r3, r4
 80095dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80095ec:	4413      	add	r3, r2
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff fc15 	bl	8008e20 <st_dword>
			fs->wflag = 1;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	70da      	strb	r2, [r3, #3]
			break;
 80095fc:	e006      	b.n	800960c <put_fat+0x1ca>
			if (res != FR_OK) break;
 80095fe:	bf00      	nop
 8009600:	e004      	b.n	800960c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009602:	bf00      	nop
 8009604:	e002      	b.n	800960c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009606:	bf00      	nop
 8009608:	e000      	b.n	800960c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800960a:	bf00      	nop
		}
	}
	return res;
 800960c:	7ffb      	ldrb	r3, [r7, #31]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3724      	adds	r7, #36	@ 0x24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd90      	pop	{r4, r7, pc}

08009616 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d904      	bls.n	800963c <remove_chain+0x26>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	429a      	cmp	r2, r3
 800963a:	d301      	bcc.n	8009640 <remove_chain+0x2a>
 800963c:	2302      	movs	r3, #2
 800963e:	e04b      	b.n	80096d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00c      	beq.n	8009660 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009646:	f04f 32ff 	mov.w	r2, #4294967295
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	69b8      	ldr	r0, [r7, #24]
 800964e:	f7ff fef8 	bl	8009442 <put_fat>
 8009652:	4603      	mov	r3, r0
 8009654:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009656:	7ffb      	ldrb	r3, [r7, #31]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <remove_chain+0x4a>
 800965c:	7ffb      	ldrb	r3, [r7, #31]
 800965e:	e03b      	b.n	80096d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7ff fe46 	bl	80092f4 <get_fat>
 8009668:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d031      	beq.n	80096d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d101      	bne.n	800967a <remove_chain+0x64>
 8009676:	2302      	movs	r3, #2
 8009678:	e02e      	b.n	80096d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d101      	bne.n	8009686 <remove_chain+0x70>
 8009682:	2301      	movs	r3, #1
 8009684:	e028      	b.n	80096d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009686:	2200      	movs	r2, #0
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	69b8      	ldr	r0, [r7, #24]
 800968c:	f7ff fed9 	bl	8009442 <put_fat>
 8009690:	4603      	mov	r3, r0
 8009692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009694:	7ffb      	ldrb	r3, [r7, #31]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <remove_chain+0x88>
 800969a:	7ffb      	ldrb	r3, [r7, #31]
 800969c:	e01c      	b.n	80096d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	3b02      	subs	r3, #2
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d20b      	bcs.n	80096c4 <remove_chain+0xae>
			fs->free_clst++;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	791b      	ldrb	r3, [r3, #4]
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d3c6      	bcc.n	8009660 <remove_chain+0x4a>
 80096d2:	e000      	b.n	80096d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3720      	adds	r7, #32
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d004      	beq.n	800970c <create_chain+0x2c>
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	429a      	cmp	r2, r3
 800970a:	d31b      	bcc.n	8009744 <create_chain+0x64>
 800970c:	2301      	movs	r3, #1
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	e018      	b.n	8009744 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff fded 	bl	80092f4 <get_fat>
 800971a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d801      	bhi.n	8009726 <create_chain+0x46>
 8009722:	2301      	movs	r3, #1
 8009724:	e070      	b.n	8009808 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972c:	d101      	bne.n	8009732 <create_chain+0x52>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	e06a      	b.n	8009808 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	429a      	cmp	r2, r3
 800973a:	d201      	bcs.n	8009740 <create_chain+0x60>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	e063      	b.n	8009808 <create_chain+0x128>
		scl = clst;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	3301      	adds	r3, #1
 800974c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	429a      	cmp	r2, r3
 8009756:	d307      	bcc.n	8009768 <create_chain+0x88>
				ncl = 2;
 8009758:	2302      	movs	r3, #2
 800975a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	429a      	cmp	r2, r3
 8009762:	d901      	bls.n	8009768 <create_chain+0x88>
 8009764:	2300      	movs	r3, #0
 8009766:	e04f      	b.n	8009808 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009768:	69f9      	ldr	r1, [r7, #28]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fdc2 	bl	80092f4 <get_fat>
 8009770:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00e      	beq.n	8009796 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d003      	beq.n	8009786 <create_chain+0xa6>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d101      	bne.n	800978a <create_chain+0xaa>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	e03e      	b.n	8009808 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	429a      	cmp	r2, r3
 8009790:	d1da      	bne.n	8009748 <create_chain+0x68>
 8009792:	2300      	movs	r3, #0
 8009794:	e038      	b.n	8009808 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009796:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009798:	f04f 32ff 	mov.w	r2, #4294967295
 800979c:	69f9      	ldr	r1, [r7, #28]
 800979e:	6938      	ldr	r0, [r7, #16]
 80097a0:	f7ff fe4f 	bl	8009442 <put_fat>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <create_chain+0xe2>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d006      	beq.n	80097c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f7ff fe42 	bl	8009442 <put_fat>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d116      	bne.n	80097f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	3b02      	subs	r3, #2
 80097d8:	429a      	cmp	r2, r3
 80097da:	d804      	bhi.n	80097e6 <create_chain+0x106>
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	1e5a      	subs	r2, r3, #1
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	791b      	ldrb	r3, [r3, #4]
 80097ea:	f043 0301 	orr.w	r3, r3, #1
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	711a      	strb	r2, [r3, #4]
 80097f4:	e007      	b.n	8009806 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d102      	bne.n	8009802 <create_chain+0x122>
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	e000      	b.n	8009804 <create_chain+0x124>
 8009802:	2301      	movs	r3, #1
 8009804:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009806:	69fb      	ldr	r3, [r7, #28]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3720      	adds	r7, #32
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	3304      	adds	r3, #4
 8009826:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	0a5b      	lsrs	r3, r3, #9
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	8952      	ldrh	r2, [r2, #10]
 8009830:	fbb3 f3f2 	udiv	r3, r3, r2
 8009834:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1d1a      	adds	r2, r3, #4
 800983a:	613a      	str	r2, [r7, #16]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <clmt_clust+0x3a>
 8009846:	2300      	movs	r3, #0
 8009848:	e010      	b.n	800986c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	d307      	bcc.n	8009862 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3304      	adds	r3, #4
 800985e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009860:	e7e9      	b.n	8009836 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009862:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	4413      	add	r3, r2
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800988e:	d204      	bcs.n	800989a <dir_sdi+0x22>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f003 031f 	and.w	r3, r3, #31
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <dir_sdi+0x26>
		return FR_INT_ERR;
 800989a:	2302      	movs	r3, #2
 800989c:	e063      	b.n	8009966 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <dir_sdi+0x46>
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d902      	bls.n	80098be <dir_sdi+0x46>
		clst = fs->dirbase;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10c      	bne.n	80098de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	8912      	ldrh	r2, [r2, #8]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d301      	bcc.n	80098d4 <dir_sdi+0x5c>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e048      	b.n	8009966 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	61da      	str	r2, [r3, #28]
 80098dc:	e029      	b.n	8009932 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	895b      	ldrh	r3, [r3, #10]
 80098e2:	025b      	lsls	r3, r3, #9
 80098e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098e6:	e019      	b.n	800991c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6979      	ldr	r1, [r7, #20]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fd01 	bl	80092f4 <get_fat>
 80098f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fa:	d101      	bne.n	8009900 <dir_sdi+0x88>
 80098fc:	2301      	movs	r3, #1
 80098fe:	e032      	b.n	8009966 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d904      	bls.n	8009910 <dir_sdi+0x98>
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	429a      	cmp	r2, r3
 800990e:	d301      	bcc.n	8009914 <dir_sdi+0x9c>
 8009910:	2302      	movs	r3, #2
 8009912:	e028      	b.n	8009966 <dir_sdi+0xee>
			ofs -= csz;
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	429a      	cmp	r2, r3
 8009922:	d2e1      	bcs.n	80098e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009924:	6979      	ldr	r1, [r7, #20]
 8009926:	6938      	ldr	r0, [r7, #16]
 8009928:	f7ff fcc5 	bl	80092b6 <clust2sect>
 800992c:	4602      	mov	r2, r0
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <dir_sdi+0xcc>
 8009940:	2302      	movs	r3, #2
 8009942:	e010      	b.n	8009966 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	69da      	ldr	r2, [r3, #28]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	0a5b      	lsrs	r3, r3, #9
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995e:	441a      	add	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	3320      	adds	r3, #32
 8009984:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <dir_next+0x28>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009994:	d301      	bcc.n	800999a <dir_next+0x2c>
 8009996:	2304      	movs	r3, #4
 8009998:	e0aa      	b.n	8009af0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f040 8098 	bne.w	8009ad6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10b      	bne.n	80099d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	8912      	ldrh	r2, [r2, #8]
 80099c0:	4293      	cmp	r3, r2
 80099c2:	f0c0 8088 	bcc.w	8009ad6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	61da      	str	r2, [r3, #28]
 80099cc:	2304      	movs	r3, #4
 80099ce:	e08f      	b.n	8009af0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	0a5b      	lsrs	r3, r3, #9
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	8952      	ldrh	r2, [r2, #10]
 80099d8:	3a01      	subs	r2, #1
 80099da:	4013      	ands	r3, r2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d17a      	bne.n	8009ad6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	4619      	mov	r1, r3
 80099e8:	4610      	mov	r0, r2
 80099ea:	f7ff fc83 	bl	80092f4 <get_fat>
 80099ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d801      	bhi.n	80099fa <dir_next+0x8c>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e07a      	b.n	8009af0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a00:	d101      	bne.n	8009a06 <dir_next+0x98>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e074      	b.n	8009af0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d358      	bcc.n	8009ac2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d104      	bne.n	8009a20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	61da      	str	r2, [r3, #28]
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	e067      	b.n	8009af0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7ff fe59 	bl	80096e0 <create_chain>
 8009a2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <dir_next+0xcc>
 8009a36:	2307      	movs	r3, #7
 8009a38:	e05a      	b.n	8009af0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <dir_next+0xd6>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e055      	b.n	8009af0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d101      	bne.n	8009a50 <dir_next+0xe2>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e04f      	b.n	8009af0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7ff fbbf 	bl	80091d4 <sync_window>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <dir_next+0xf2>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e047      	b.n	8009af0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3330      	adds	r3, #48	@ 0x30
 8009a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fa25 	bl	8008eba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a70:	2300      	movs	r3, #0
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	6979      	ldr	r1, [r7, #20]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff fc1d 	bl	80092b6 <clust2sect>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a82:	e012      	b.n	8009aaa <dir_next+0x13c>
						fs->wflag = 1;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fba2 	bl	80091d4 <sync_window>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <dir_next+0x12c>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e02a      	b.n	8009af0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	895b      	ldrh	r3, [r3, #10]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d3e6      	bcc.n	8009a84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	1ad2      	subs	r2, r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ac8:	6979      	ldr	r1, [r7, #20]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff fbf3 	bl	80092b6 <clust2sect>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae8:	441a      	add	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff feb4 	bl	8009878 <dir_sdi>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d12b      	bne.n	8009b72 <dir_alloc+0x7a>
		n = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	69db      	ldr	r3, [r3, #28]
 8009b22:	4619      	mov	r1, r3
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f7ff fb99 	bl	800925c <move_window>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d11d      	bne.n	8009b70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2be5      	cmp	r3, #229	@ 0xe5
 8009b3c:	d004      	beq.n	8009b48 <dir_alloc+0x50>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d102      	bne.n	8009b5c <dir_alloc+0x64>
 8009b56:	e00c      	b.n	8009b72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b58:	2300      	movs	r3, #0
 8009b5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff ff05 	bl	800996e <dir_next>
 8009b64:	4603      	mov	r3, r0
 8009b66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0d7      	beq.n	8009b1e <dir_alloc+0x26>
 8009b6e:	e000      	b.n	8009b72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d101      	bne.n	8009b7c <dir_alloc+0x84>
 8009b78:	2307      	movs	r3, #7
 8009b7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	331a      	adds	r3, #26
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff f8ed 	bl	8008d74 <ld_word>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d109      	bne.n	8009bba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	3314      	adds	r3, #20
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff f8e2 	bl	8008d74 <ld_word>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bba:	68fb      	ldr	r3, [r7, #12]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	331a      	adds	r3, #26
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff f905 	bl	8008dea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d109      	bne.n	8009bfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f103 0214 	add.w	r2, r3, #20
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7ff f8f7 	bl	8008dea <st_word>
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7ff fe2f 	bl	8009878 <dir_sdi>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <dir_find+0x24>
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	e03e      	b.n	8009ca6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6938      	ldr	r0, [r7, #16]
 8009c30:	f7ff fb14 	bl	800925c <move_window>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d12f      	bne.n	8009c9e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <dir_find+0x4e>
 8009c4c:	2304      	movs	r3, #4
 8009c4e:	75fb      	strb	r3, [r7, #23]
 8009c50:	e028      	b.n	8009ca4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	330b      	adds	r3, #11
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	330b      	adds	r3, #11
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <dir_find+0x86>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a18      	ldr	r0, [r3, #32]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	@ 0x24
 8009c7c:	220b      	movs	r2, #11
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f7ff f936 	bl	8008ef0 <mem_cmp>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fe6e 	bl	800996e <dir_next>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0c5      	beq.n	8009c28 <dir_find+0x24>
 8009c9c:	e002      	b.n	8009ca4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c9e:	bf00      	nop
 8009ca0:	e000      	b.n	8009ca4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ca2:	bf00      	nop

	return res;
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff ff1a 	bl	8009af8 <dir_alloc>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11c      	bne.n	8009d08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f7ff fac1 	bl	800925c <move_window>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d111      	bne.n	8009d08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7ff f8e4 	bl	8008eba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a18      	ldr	r0, [r3, #32]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3324      	adds	r3, #36	@ 0x24
 8009cfa:	220b      	movs	r2, #11
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f7ff f8bb 	bl	8008e78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2201      	movs	r2, #1
 8009d06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3324      	adds	r3, #36	@ 0x24
 8009d28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d2a:	220b      	movs	r2, #11
 8009d2c:	2120      	movs	r1, #32
 8009d2e:	68b8      	ldr	r0, [r7, #8]
 8009d30:	f7ff f8c3 	bl	8008eba <mem_set>
	si = i = 0; ni = 8;
 8009d34:	2300      	movs	r3, #0
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	61fa      	str	r2, [r7, #28]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d4e:	7efb      	ldrb	r3, [r7, #27]
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d94e      	bls.n	8009df2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d54:	7efb      	ldrb	r3, [r7, #27]
 8009d56:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d58:	d006      	beq.n	8009d68 <create_name+0x54>
 8009d5a:	7efb      	ldrb	r3, [r7, #27]
 8009d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d5e:	d110      	bne.n	8009d82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d60:	e002      	b.n	8009d68 <create_name+0x54>
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	3301      	adds	r3, #1
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d72:	d0f6      	beq.n	8009d62 <create_name+0x4e>
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d7e:	d0f0      	beq.n	8009d62 <create_name+0x4e>
			break;
 8009d80:	e038      	b.n	8009df4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009d82:	7efb      	ldrb	r3, [r7, #27]
 8009d84:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d86:	d003      	beq.n	8009d90 <create_name+0x7c>
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d30c      	bcc.n	8009daa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b0b      	cmp	r3, #11
 8009d94:	d002      	beq.n	8009d9c <create_name+0x88>
 8009d96:	7efb      	ldrb	r3, [r7, #27]
 8009d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d9a:	d001      	beq.n	8009da0 <create_name+0x8c>
 8009d9c:	2306      	movs	r3, #6
 8009d9e:	e044      	b.n	8009e2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009da0:	2308      	movs	r3, #8
 8009da2:	613b      	str	r3, [r7, #16]
 8009da4:	230b      	movs	r3, #11
 8009da6:	617b      	str	r3, [r7, #20]
			continue;
 8009da8:	e022      	b.n	8009df0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009daa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da04      	bge.n	8009dbc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009db2:	7efb      	ldrb	r3, [r7, #27]
 8009db4:	3b80      	subs	r3, #128	@ 0x80
 8009db6:	4a1f      	ldr	r2, [pc, #124]	@ (8009e34 <create_name+0x120>)
 8009db8:	5cd3      	ldrb	r3, [r2, r3]
 8009dba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009dbc:	7efb      	ldrb	r3, [r7, #27]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	481d      	ldr	r0, [pc, #116]	@ (8009e38 <create_name+0x124>)
 8009dc2:	f7ff f8bc 	bl	8008f3e <chk_chr>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <create_name+0xbc>
 8009dcc:	2306      	movs	r3, #6
 8009dce:	e02c      	b.n	8009e2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009dd0:	7efb      	ldrb	r3, [r7, #27]
 8009dd2:	2b60      	cmp	r3, #96	@ 0x60
 8009dd4:	d905      	bls.n	8009de2 <create_name+0xce>
 8009dd6:	7efb      	ldrb	r3, [r7, #27]
 8009dd8:	2b7a      	cmp	r3, #122	@ 0x7a
 8009dda:	d802      	bhi.n	8009de2 <create_name+0xce>
 8009ddc:	7efb      	ldrb	r3, [r7, #27]
 8009dde:	3b20      	subs	r3, #32
 8009de0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	613a      	str	r2, [r7, #16]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	4413      	add	r3, r2
 8009dec:	7efa      	ldrb	r2, [r7, #27]
 8009dee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009df0:	e7a6      	b.n	8009d40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009df2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	441a      	add	r2, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <create_name+0xf4>
 8009e04:	2306      	movs	r3, #6
 8009e06:	e010      	b.n	8009e2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2be5      	cmp	r3, #229	@ 0xe5
 8009e0e:	d102      	bne.n	8009e16 <create_name+0x102>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2205      	movs	r2, #5
 8009e14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e16:	7efb      	ldrb	r3, [r7, #27]
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d801      	bhi.n	8009e20 <create_name+0x10c>
 8009e1c:	2204      	movs	r2, #4
 8009e1e:	e000      	b.n	8009e22 <create_name+0x10e>
 8009e20:	2200      	movs	r2, #0
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	330b      	adds	r3, #11
 8009e26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3720      	adds	r7, #32
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	0800b19c 	.word	0x0800b19c
 8009e38:	0800b134 	.word	0x0800b134

08009e3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e50:	e002      	b.n	8009e58 <follow_path+0x1c>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e5e:	d0f8      	beq.n	8009e52 <follow_path+0x16>
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e66:	d0f4      	beq.n	8009e52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b1f      	cmp	r3, #31
 8009e74:	d80a      	bhi.n	8009e8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2280      	movs	r2, #128	@ 0x80
 8009e7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff fcf9 	bl	8009878 <dir_sdi>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
 8009e8a:	e043      	b.n	8009f14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff ff3f 	bl	8009d14 <create_name>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d134      	bne.n	8009f0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff feaf 	bl	8009c04 <dir_find>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009eb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	d127      	bne.n	8009f0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ebe:	7afb      	ldrb	r3, [r7, #11]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d122      	bne.n	8009f0e <follow_path+0xd2>
 8009ec8:	2305      	movs	r3, #5
 8009eca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ecc:	e01f      	b.n	8009f0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11c      	bne.n	8009f12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	799b      	ldrb	r3, [r3, #6]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009ee4:	2305      	movs	r3, #5
 8009ee6:	75fb      	strb	r3, [r7, #23]
 8009ee8:	e014      	b.n	8009f14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef8:	4413      	add	r3, r2
 8009efa:	4619      	mov	r1, r3
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fe42 	bl	8009b86 <ld_clust>
 8009f02:	4602      	mov	r2, r0
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f08:	e7c0      	b.n	8009e8c <follow_path+0x50>
			if (res != FR_OK) break;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <follow_path+0xd8>
				break;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f12:	bf00      	nop
			}
		}
	}

	return res;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b087      	sub	sp, #28
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d031      	beq.n	8009f98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	e002      	b.n	8009f42 <get_ldnumber+0x24>
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d903      	bls.n	8009f52 <get_ldnumber+0x34>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f50:	d1f4      	bne.n	8009f3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f58:	d11c      	bne.n	8009f94 <get_ldnumber+0x76>
			tp = *path;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	60fa      	str	r2, [r7, #12]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	3b30      	subs	r3, #48	@ 0x30
 8009f6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d80e      	bhi.n	8009f90 <get_ldnumber+0x72>
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d10a      	bne.n	8009f90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <get_ldnumber+0x72>
					vol = (int)i;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	3301      	adds	r3, #1
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	e002      	b.n	8009f9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f94:	2300      	movs	r3, #0
 8009f96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f98:	693b      	ldr	r3, [r7, #16]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	70da      	strb	r2, [r3, #3]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff f94a 	bl	800925c <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <check_fs+0x2a>
 8009fce:	2304      	movs	r3, #4
 8009fd0:	e038      	b.n	800a044 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3330      	adds	r3, #48	@ 0x30
 8009fd6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe feca 	bl	8008d74 <ld_word>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d001      	beq.n	8009ff0 <check_fs+0x48>
 8009fec:	2303      	movs	r3, #3
 8009fee:	e029      	b.n	800a044 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ff6:	2be9      	cmp	r3, #233	@ 0xe9
 8009ff8:	d009      	beq.n	800a00e <check_fs+0x66>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a000:	2beb      	cmp	r3, #235	@ 0xeb
 800a002:	d11e      	bne.n	800a042 <check_fs+0x9a>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a00a:	2b90      	cmp	r3, #144	@ 0x90
 800a00c:	d119      	bne.n	800a042 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3330      	adds	r3, #48	@ 0x30
 800a012:	3336      	adds	r3, #54	@ 0x36
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fec5 	bl	8008da4 <ld_dword>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a020:	4a0a      	ldr	r2, [pc, #40]	@ (800a04c <check_fs+0xa4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d101      	bne.n	800a02a <check_fs+0x82>
 800a026:	2300      	movs	r3, #0
 800a028:	e00c      	b.n	800a044 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3330      	adds	r3, #48	@ 0x30
 800a02e:	3352      	adds	r3, #82	@ 0x52
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe feb7 	bl	8008da4 <ld_dword>
 800a036:	4603      	mov	r3, r0
 800a038:	4a05      	ldr	r2, [pc, #20]	@ (800a050 <check_fs+0xa8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d101      	bne.n	800a042 <check_fs+0x9a>
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a042:	2302      	movs	r3, #2
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	00544146 	.word	0x00544146
 800a050:	33544146 	.word	0x33544146

0800a054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b096      	sub	sp, #88	@ 0x58
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff ff58 	bl	8009f1e <get_ldnumber>
 800a06e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a072:	2b00      	cmp	r3, #0
 800a074:	da01      	bge.n	800a07a <find_volume+0x26>
 800a076:	230b      	movs	r3, #11
 800a078:	e22d      	b.n	800a4d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a07a:	4aa1      	ldr	r2, [pc, #644]	@ (800a300 <find_volume+0x2ac>)
 800a07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a082:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <find_volume+0x3a>
 800a08a:	230c      	movs	r3, #12
 800a08c:	e223      	b.n	800a4d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a092:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01a      	beq.n	800a0da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fde1 	bl	8008c70 <disk_status>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <find_volume+0x82>
 800a0c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e1ff      	b.n	800a4d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e1fd      	b.n	800a4d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fdd9 	bl	8008ca4 <disk_initialize>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a104:	2303      	movs	r3, #3
 800a106:	e1e6      	b.n	800a4d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <find_volume+0xca>
 800a10e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a11a:	230a      	movs	r3, #10
 800a11c:	e1db      	b.n	800a4d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a122:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a124:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a126:	f7ff ff3f 	bl	8009fa8 <check_fs>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a134:	2b02      	cmp	r3, #2
 800a136:	d149      	bne.n	800a1cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a138:	2300      	movs	r3, #0
 800a13a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a13c:	e01e      	b.n	800a17c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a14c:	4413      	add	r3, r2
 800a14e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	3304      	adds	r3, #4
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <find_volume+0x114>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	3308      	adds	r3, #8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fe20 	bl	8008da4 <ld_dword>
 800a164:	4602      	mov	r2, r0
 800a166:	e000      	b.n	800a16a <find_volume+0x116>
 800a168:	2200      	movs	r2, #0
 800a16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	3358      	adds	r3, #88	@ 0x58
 800a170:	443b      	add	r3, r7
 800a172:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a178:	3301      	adds	r3, #1
 800a17a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d9dd      	bls.n	800a13e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a182:	2300      	movs	r3, #0
 800a184:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <find_volume+0x13e>
 800a18c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a18e:	3b01      	subs	r3, #1
 800a190:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	3358      	adds	r3, #88	@ 0x58
 800a198:	443b      	add	r3, r7
 800a19a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a19e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <find_volume+0x15e>
 800a1a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1aa:	f7ff fefd 	bl	8009fa8 <check_fs>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	e000      	b.n	800a1b4 <find_volume+0x160>
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d905      	bls.n	800a1cc <find_volume+0x178>
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d9e2      	bls.n	800a192 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a1cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d101      	bne.n	800a1d8 <find_volume+0x184>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e17e      	b.n	800a4d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a1d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d901      	bls.n	800a1e4 <find_volume+0x190>
 800a1e0:	230d      	movs	r3, #13
 800a1e2:	e178      	b.n	800a4d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	3330      	adds	r3, #48	@ 0x30
 800a1e8:	330b      	adds	r3, #11
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fdc2 	bl	8008d74 <ld_word>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1f6:	d001      	beq.n	800a1fc <find_volume+0x1a8>
 800a1f8:	230d      	movs	r3, #13
 800a1fa:	e16c      	b.n	800a4d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	3330      	adds	r3, #48	@ 0x30
 800a200:	3316      	adds	r3, #22
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fdb6 	bl	8008d74 <ld_word>
 800a208:	4603      	mov	r3, r0
 800a20a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a20c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d106      	bne.n	800a220 <find_volume+0x1cc>
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	3330      	adds	r3, #48	@ 0x30
 800a216:	3324      	adds	r3, #36	@ 0x24
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fdc3 	bl	8008da4 <ld_dword>
 800a21e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a224:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a232:	789b      	ldrb	r3, [r3, #2]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d005      	beq.n	800a244 <find_volume+0x1f0>
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	789b      	ldrb	r3, [r3, #2]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d001      	beq.n	800a244 <find_volume+0x1f0>
 800a240:	230d      	movs	r3, #13
 800a242:	e148      	b.n	800a4d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	789b      	ldrb	r3, [r3, #2]
 800a248:	461a      	mov	r2, r3
 800a24a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a24c:	fb02 f303 	mul.w	r3, r2, r3
 800a250:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a258:	461a      	mov	r2, r3
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	895b      	ldrh	r3, [r3, #10]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <find_volume+0x224>
 800a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a268:	895b      	ldrh	r3, [r3, #10]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	895b      	ldrh	r3, [r3, #10]
 800a270:	3b01      	subs	r3, #1
 800a272:	4013      	ands	r3, r2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <find_volume+0x228>
 800a278:	230d      	movs	r3, #13
 800a27a:	e12c      	b.n	800a4d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27e:	3330      	adds	r3, #48	@ 0x30
 800a280:	3311      	adds	r3, #17
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fd76 	bl	8008d74 <ld_word>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	891b      	ldrh	r3, [r3, #8]
 800a294:	f003 030f 	and.w	r3, r3, #15
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <find_volume+0x24e>
 800a29e:	230d      	movs	r3, #13
 800a2a0:	e119      	b.n	800a4d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a4:	3330      	adds	r3, #48	@ 0x30
 800a2a6:	3313      	adds	r3, #19
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe fd63 	bl	8008d74 <ld_word>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <find_volume+0x272>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	3330      	adds	r3, #48	@ 0x30
 800a2bc:	3320      	adds	r3, #32
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fd70 	bl	8008da4 <ld_dword>
 800a2c4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	3330      	adds	r3, #48	@ 0x30
 800a2ca:	330e      	adds	r3, #14
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fd51 	bl	8008d74 <ld_word>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a2d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <find_volume+0x28c>
 800a2dc:	230d      	movs	r3, #13
 800a2de:	e0fa      	b.n	800a4d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a2e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2e4:	4413      	add	r3, r2
 800a2e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2e8:	8912      	ldrh	r2, [r2, #8]
 800a2ea:	0912      	lsrs	r2, r2, #4
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a2f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d204      	bcs.n	800a304 <find_volume+0x2b0>
 800a2fa:	230d      	movs	r3, #13
 800a2fc:	e0eb      	b.n	800a4d6 <find_volume+0x482>
 800a2fe:	bf00      	nop
 800a300:	240005b8 	.word	0x240005b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a30c:	8952      	ldrh	r2, [r2, #10]
 800a30e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a312:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <find_volume+0x2ca>
 800a31a:	230d      	movs	r3, #13
 800a31c:	e0db      	b.n	800a4d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800a31e:	2303      	movs	r3, #3
 800a320:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d802      	bhi.n	800a334 <find_volume+0x2e0>
 800a32e:	2302      	movs	r3, #2
 800a330:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d802      	bhi.n	800a344 <find_volume+0x2f0>
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	1c9a      	adds	r2, r3, #2
 800a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a350:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a352:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a356:	441a      	add	r2, r3
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a35c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	441a      	add	r2, r3
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a366:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d11e      	bne.n	800a3ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a370:	3330      	adds	r3, #48	@ 0x30
 800a372:	332a      	adds	r3, #42	@ 0x2a
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe fcfd 	bl	8008d74 <ld_word>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <find_volume+0x330>
 800a380:	230d      	movs	r3, #13
 800a382:	e0a8      	b.n	800a4d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	891b      	ldrh	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <find_volume+0x33c>
 800a38c:	230d      	movs	r3, #13
 800a38e:	e0a2      	b.n	800a4d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a392:	3330      	adds	r3, #48	@ 0x30
 800a394:	332c      	adds	r3, #44	@ 0x2c
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fd04 	bl	8008da4 <ld_dword>
 800a39c:	4602      	mov	r2, r0
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3aa:	e01f      	b.n	800a3ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	891b      	ldrh	r3, [r3, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <find_volume+0x364>
 800a3b4:	230d      	movs	r3, #13
 800a3b6:	e08e      	b.n	800a4d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	6a1a      	ldr	r2, [r3, #32]
 800a3bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3be:	441a      	add	r2, r3
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d103      	bne.n	800a3d4 <find_volume+0x380>
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	e00a      	b.n	800a3ea <find_volume+0x396>
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	4413      	add	r3, r2
 800a3de:	085a      	lsrs	r2, r3, #1
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a3ea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	699a      	ldr	r2, [r3, #24]
 800a3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a3f6:	0a5b      	lsrs	r3, r3, #9
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d201      	bcs.n	800a400 <find_volume+0x3ac>
 800a3fc:	230d      	movs	r3, #13
 800a3fe:	e06a      	b.n	800a4d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	f04f 32ff 	mov.w	r2, #4294967295
 800a406:	611a      	str	r2, [r3, #16]
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	2280      	movs	r2, #128	@ 0x80
 800a414:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a416:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d149      	bne.n	800a4b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	3330      	adds	r3, #48	@ 0x30
 800a422:	3330      	adds	r3, #48	@ 0x30
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe fca5 	bl	8008d74 <ld_word>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d140      	bne.n	800a4b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a432:	3301      	adds	r3, #1
 800a434:	4619      	mov	r1, r3
 800a436:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a438:	f7fe ff10 	bl	800925c <move_window>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d137      	bne.n	800a4b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a444:	2200      	movs	r2, #0
 800a446:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	3330      	adds	r3, #48	@ 0x30
 800a44c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fc8f 	bl	8008d74 <ld_word>
 800a456:	4603      	mov	r3, r0
 800a458:	461a      	mov	r2, r3
 800a45a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a45e:	429a      	cmp	r2, r3
 800a460:	d127      	bne.n	800a4b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a464:	3330      	adds	r3, #48	@ 0x30
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fc9c 	bl	8008da4 <ld_dword>
 800a46c:	4603      	mov	r3, r0
 800a46e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e0 <find_volume+0x48c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d11e      	bne.n	800a4b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a476:	3330      	adds	r3, #48	@ 0x30
 800a478:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fc91 	bl	8008da4 <ld_dword>
 800a482:	4603      	mov	r3, r0
 800a484:	4a17      	ldr	r2, [pc, #92]	@ (800a4e4 <find_volume+0x490>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d113      	bne.n	800a4b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	3330      	adds	r3, #48	@ 0x30
 800a48e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fc86 	bl	8008da4 <ld_dword>
 800a498:	4602      	mov	r2, r0
 800a49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	3330      	adds	r3, #48	@ 0x30
 800a4a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fc7c 	bl	8008da4 <ld_dword>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a4b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e8 <find_volume+0x494>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	4b09      	ldr	r3, [pc, #36]	@ (800a4e8 <find_volume+0x494>)
 800a4c4:	801a      	strh	r2, [r3, #0]
 800a4c6:	4b08      	ldr	r3, [pc, #32]	@ (800a4e8 <find_volume+0x494>)
 800a4c8:	881a      	ldrh	r2, [r3, #0]
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4d0:	f7fe fe5c 	bl	800918c <clear_lock>
#endif
	return FR_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3758      	adds	r7, #88	@ 0x58
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	41615252 	.word	0x41615252
 800a4e4:	61417272 	.word	0x61417272
 800a4e8:	240005bc 	.word	0x240005bc

0800a4ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a4f6:	2309      	movs	r3, #9
 800a4f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01c      	beq.n	800a53a <validate+0x4e>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d018      	beq.n	800a53a <validate+0x4e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d013      	beq.n	800a53a <validate+0x4e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	889a      	ldrh	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d10c      	bne.n	800a53a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fba2 	bl	8008c70 <disk_status>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <validate+0x4e>
			res = FR_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d102      	bne.n	800a546 <validate+0x5a>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	e000      	b.n	800a548 <validate+0x5c>
 800a546:	2300      	movs	r3, #0
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	6013      	str	r3, [r2, #0]
	return res;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a56a:	f107 0310 	add.w	r3, r7, #16
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fcd5 	bl	8009f1e <get_ldnumber>
 800a574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	da01      	bge.n	800a580 <f_mount+0x28>
 800a57c:	230b      	movs	r3, #11
 800a57e:	e02b      	b.n	800a5d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a580:	4a17      	ldr	r2, [pc, #92]	@ (800a5e0 <f_mount+0x88>)
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a590:	69b8      	ldr	r0, [r7, #24]
 800a592:	f7fe fdfb 	bl	800918c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	490d      	ldr	r1, [pc, #52]	@ (800a5e0 <f_mount+0x88>)
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <f_mount+0x66>
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d001      	beq.n	800a5c2 <f_mount+0x6a>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e00a      	b.n	800a5d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5c2:	f107 010c 	add.w	r1, r7, #12
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7ff fd41 	bl	800a054 <find_volume>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	240005b8 	.word	0x240005b8

0800a5e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b098      	sub	sp, #96	@ 0x60
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <f_open+0x18>
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	e1a9      	b.n	800a950 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a602:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a604:	79fa      	ldrb	r2, [r7, #7]
 800a606:	f107 0110 	add.w	r1, r7, #16
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd20 	bl	800a054 <find_volume>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a61a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f040 818d 	bne.w	800a93e <f_open+0x35a>
		dj.obj.fs = fs;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	f107 0314 	add.w	r3, r7, #20
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fc03 	bl	8009e3c <follow_path>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a63c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a640:	2b00      	cmp	r3, #0
 800a642:	d118      	bne.n	800a676 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a644:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a648:	b25b      	sxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da03      	bge.n	800a656 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a64e:	2306      	movs	r3, #6
 800a650:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a654:	e00f      	b.n	800a676 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	bf8c      	ite	hi
 800a65c:	2301      	movhi	r3, #1
 800a65e:	2300      	movls	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	461a      	mov	r2, r3
 800a664:	f107 0314 	add.w	r3, r7, #20
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fc82 	bl	8008f74 <chk_lock>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	f003 031c 	and.w	r3, r3, #28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d07f      	beq.n	800a780 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a684:	2b00      	cmp	r3, #0
 800a686:	d017      	beq.n	800a6b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a688:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d10e      	bne.n	800a6ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a690:	f7fe fccc 	bl	800902c <enq_lock>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <f_open+0xc4>
 800a69a:	f107 0314 	add.w	r3, r7, #20
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff fb05 	bl	8009cae <dir_register>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	e000      	b.n	800a6aa <f_open+0xc6>
 800a6a8:	2312      	movs	r3, #18
 800a6aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	71fb      	strb	r3, [r7, #7]
 800a6b6:	e010      	b.n	800a6da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a6b8:	7ebb      	ldrb	r3, [r7, #26]
 800a6ba:	f003 0311 	and.w	r3, r3, #17
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d003      	beq.n	800a6ca <f_open+0xe6>
					res = FR_DENIED;
 800a6c2:	2307      	movs	r3, #7
 800a6c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6c8:	e007      	b.n	800a6da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <f_open+0xf6>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a6da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d168      	bne.n	800a7b4 <f_open+0x1d0>
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d063      	beq.n	800a7b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a6ec:	f7fe f882 	bl	80087f4 <get_fattime>
 800a6f0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f4:	330e      	adds	r3, #14
 800a6f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fb91 	bl	8008e20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a700:	3316      	adds	r3, #22
 800a702:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fb8b 	bl	8008e20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70c:	330b      	adds	r3, #11
 800a70e:	2220      	movs	r2, #32
 800a710:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fa34 	bl	8009b86 <ld_clust>
 800a71e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a724:	2200      	movs	r2, #0
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fa4c 	bl	8009bc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72e:	331c      	adds	r3, #28
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fb74 	bl	8008e20 <st_dword>
					fs->wflag = 1;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2201      	movs	r2, #1
 800a73c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a73e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d037      	beq.n	800a7b4 <f_open+0x1d0>
						dw = fs->winsect;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a748:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a74a:	f107 0314 	add.w	r3, r7, #20
 800a74e:	2200      	movs	r2, #0
 800a750:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe ff5f 	bl	8009616 <remove_chain>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a75e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a762:	2b00      	cmp	r3, #0
 800a764:	d126      	bne.n	800a7b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fd76 	bl	800925c <move_window>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a77a:	3a01      	subs	r2, #1
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	e019      	b.n	800a7b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a784:	2b00      	cmp	r3, #0
 800a786:	d115      	bne.n	800a7b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a788:	7ebb      	ldrb	r3, [r7, #26]
 800a78a:	f003 0310 	and.w	r3, r3, #16
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <f_open+0x1b6>
					res = FR_NO_FILE;
 800a792:	2304      	movs	r3, #4
 800a794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a798:	e00c      	b.n	800a7b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d007      	beq.n	800a7b4 <f_open+0x1d0>
 800a7a4:	7ebb      	ldrb	r3, [r7, #26]
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <f_open+0x1d0>
						res = FR_DENIED;
 800a7ae:	2307      	movs	r3, #7
 800a7b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d126      	bne.n	800a80a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a7d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	bf8c      	ite	hi
 800a7e2:	2301      	movhi	r3, #1
 800a7e4:	2300      	movls	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f107 0314 	add.w	r3, r7, #20
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fc3d 	bl	8009070 <inc_lock>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d102      	bne.n	800a80a <f_open+0x226>
 800a804:	2302      	movs	r3, #2
 800a806:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a80a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f040 8095 	bne.w	800a93e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff f9b3 	bl	8009b86 <ld_clust>
 800a820:	4602      	mov	r2, r0
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a828:	331c      	adds	r3, #28
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe faba 	bl	8008da4 <ld_dword>
 800a830:	4602      	mov	r2, r0
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	88da      	ldrh	r2, [r3, #6]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	79fa      	ldrb	r2, [r7, #7]
 800a84e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3330      	adds	r3, #48	@ 0x30
 800a866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fb24 	bl	8008eba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f003 0320 	and.w	r3, r3, #32
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d060      	beq.n	800a93e <f_open+0x35a>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d05c      	beq.n	800a93e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	895b      	ldrh	r3, [r3, #10]
 800a890:	025b      	lsls	r3, r3, #9
 800a892:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8a0:	e016      	b.n	800a8d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe fd24 	bl	80092f4 <get_fat>
 800a8ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a8ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d802      	bhi.n	800a8ba <f_open+0x2d6>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a8ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c0:	d102      	bne.n	800a8c8 <f_open+0x2e4>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d103      	bne.n	800a8e0 <f_open+0x2fc>
 800a8d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d8e0      	bhi.n	800a8a2 <f_open+0x2be>
				}
				fp->clust = clst;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a8e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d127      	bne.n	800a93e <f_open+0x35a>
 800a8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d022      	beq.n	800a93e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fcda 	bl	80092b6 <clust2sect>
 800a902:	6478      	str	r0, [r7, #68]	@ 0x44
 800a904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <f_open+0x32e>
						res = FR_INT_ERR;
 800a90a:	2302      	movs	r3, #2
 800a90c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a910:	e015      	b.n	800a93e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a914:	0a5a      	lsrs	r2, r3, #9
 800a916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a918:	441a      	add	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	7858      	ldrb	r0, [r3, #1]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a1a      	ldr	r2, [r3, #32]
 800a92c:	2301      	movs	r3, #1
 800a92e:	f7fe f9e1 	bl	8008cf4 <disk_read>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <f_open+0x35a>
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a93e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <f_open+0x368>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a94c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a950:	4618      	mov	r0, r3
 800a952:	3760      	adds	r7, #96	@ 0x60
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08e      	sub	sp, #56	@ 0x38
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2200      	movs	r2, #0
 800a96e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f107 0214 	add.w	r2, r7, #20
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fdb7 	bl	800a4ec <validate>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a984:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d107      	bne.n	800a99c <f_read+0x44>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	7d5b      	ldrb	r3, [r3, #21]
 800a990:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a994:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <f_read+0x4a>
 800a99c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a9a0:	e115      	b.n	800abce <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	7d1b      	ldrb	r3, [r3, #20]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <f_read+0x5a>
 800a9ae:	2307      	movs	r3, #7
 800a9b0:	e10d      	b.n	800abce <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	f240 80fe 	bls.w	800abc4 <f_read+0x26c>
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a9cc:	e0fa      	b.n	800abc4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 80c6 	bne.w	800ab68 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	0a5b      	lsrs	r3, r3, #9
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	8952      	ldrh	r2, [r2, #10]
 800a9e6:	3a01      	subs	r2, #1
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d12f      	bne.n	800aa52 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa00:	e013      	b.n	800aa2a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d007      	beq.n	800aa1a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7fe fefd 	bl	8009810 <clmt_clust>
 800aa16:	6338      	str	r0, [r7, #48]	@ 0x30
 800aa18:	e007      	b.n	800aa2a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7fe fc66 	bl	80092f4 <get_fat>
 800aa28:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d804      	bhi.n	800aa3a <f_read+0xe2>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2202      	movs	r2, #2
 800aa34:	755a      	strb	r2, [r3, #21]
 800aa36:	2302      	movs	r3, #2
 800aa38:	e0c9      	b.n	800abce <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa40:	d104      	bne.n	800aa4c <f_read+0xf4>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	755a      	strb	r2, [r3, #21]
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e0c0      	b.n	800abce <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa50:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f7fe fc2b 	bl	80092b6 <clust2sect>
 800aa60:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <f_read+0x11a>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	755a      	strb	r2, [r3, #21]
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e0ad      	b.n	800abce <f_read+0x276>
			sect += csect;
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	4413      	add	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	0a5b      	lsrs	r3, r3, #9
 800aa7e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d039      	beq.n	800aafa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8a:	4413      	add	r3, r2
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	8952      	ldrh	r2, [r2, #10]
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d905      	bls.n	800aaa0 <f_read+0x148>
					cc = fs->csize - csect;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	895b      	ldrh	r3, [r3, #10]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	7858      	ldrb	r0, [r3, #1]
 800aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aaaa:	f7fe f923 	bl	8008cf4 <disk_read>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <f_read+0x166>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2201      	movs	r2, #1
 800aab8:	755a      	strb	r2, [r3, #21]
 800aaba:	2301      	movs	r3, #1
 800aabc:	e087      	b.n	800abce <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	7d1b      	ldrb	r3, [r3, #20]
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da14      	bge.n	800aaf2 <f_read+0x19a>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a1a      	ldr	r2, [r3, #32]
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d90d      	bls.n	800aaf2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a1a      	ldr	r2, [r3, #32]
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	025b      	lsls	r3, r3, #9
 800aae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae2:	18d0      	adds	r0, r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3330      	adds	r3, #48	@ 0x30
 800aae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaec:	4619      	mov	r1, r3
 800aaee:	f7fe f9c3 	bl	8008e78 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf4:	025b      	lsls	r3, r3, #9
 800aaf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800aaf8:	e050      	b.n	800ab9c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d02e      	beq.n	800ab62 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	da18      	bge.n	800ab40 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	7858      	ldrb	r0, [r3, #1]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a1a      	ldr	r2, [r3, #32]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f7fe f909 	bl	8008d34 <disk_write>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <f_read+0x1da>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	755a      	strb	r2, [r3, #21]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e04d      	b.n	800abce <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	7858      	ldrb	r0, [r3, #1]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	f7fe f8d1 	bl	8008cf4 <disk_read>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <f_read+0x20a>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	755a      	strb	r2, [r3, #21]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e035      	b.n	800abce <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab70:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ab74:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d901      	bls.n	800ab82 <f_read+0x22a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab90:	4413      	add	r3, r2
 800ab92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab94:	4619      	mov	r1, r3
 800ab96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab98:	f7fe f96e 	bl	8008e78 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ab9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba0:	4413      	add	r3, r2
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	699a      	ldr	r2, [r3, #24]
 800aba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abaa:	441a      	add	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	619a      	str	r2, [r3, #24]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb6:	441a      	add	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f47f af01 	bne.w	800a9ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3738      	adds	r7, #56	@ 0x38
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b090      	sub	sp, #64	@ 0x40
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f107 0208 	add.w	r2, r7, #8
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff fc7f 	bl	800a4ec <validate>
 800abee:	4603      	mov	r3, r0
 800abf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800abf4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <f_lseek+0x2e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7d5b      	ldrb	r3, [r3, #21]
 800ac00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ac04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <f_lseek+0x3c>
 800ac0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ac10:	e1e6      	b.n	800afe0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 80d1 	beq.w	800adbe <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac22:	d15a      	bne.n	800acda <f_lseek+0x104>
			tbl = fp->cltbl;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac28:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	1d1a      	adds	r2, r3, #4
 800ac2e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	617b      	str	r3, [r7, #20]
 800ac34:	2302      	movs	r3, #2
 800ac36:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d03a      	beq.n	800acba <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ac44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac46:	613b      	str	r3, [r7, #16]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4e:	3302      	adds	r3, #2
 800ac50:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	3301      	adds	r3, #1
 800ac5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fe fb47 	bl	80092f4 <get_fat>
 800ac66:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d804      	bhi.n	800ac78 <f_lseek+0xa2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	755a      	strb	r2, [r3, #21]
 800ac74:	2302      	movs	r3, #2
 800ac76:	e1b3      	b.n	800afe0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d104      	bne.n	800ac8a <f_lseek+0xb4>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	755a      	strb	r2, [r3, #21]
 800ac86:	2301      	movs	r3, #1
 800ac88:	e1aa      	b.n	800afe0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d0de      	beq.n	800ac52 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ac94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d809      	bhi.n	800acb0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	1d1a      	adds	r2, r3, #4
 800aca0:	627a      	str	r2, [r7, #36]	@ 0x24
 800aca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	1d1a      	adds	r2, r3, #4
 800acaa:	627a      	str	r2, [r7, #36]	@ 0x24
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d3c4      	bcc.n	800ac44 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acc0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800acc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d803      	bhi.n	800acd2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	e184      	b.n	800afdc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800acd2:	2311      	movs	r3, #17
 800acd4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800acd8:	e180      	b.n	800afdc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d902      	bls.n	800acea <f_lseek+0x114>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 8172 	beq.w	800afdc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7fe fd86 	bl	8009810 <clmt_clust>
 800ad04:	4602      	mov	r2, r0
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f7fe facf 	bl	80092b6 <clust2sect>
 800ad18:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d104      	bne.n	800ad2a <f_lseek+0x154>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	755a      	strb	r2, [r3, #21]
 800ad26:	2302      	movs	r3, #2
 800ad28:	e15a      	b.n	800afe0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	0a5b      	lsrs	r3, r3, #9
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	8952      	ldrh	r2, [r2, #10]
 800ad34:	3a01      	subs	r2, #1
 800ad36:	4013      	ands	r3, r2
 800ad38:	69ba      	ldr	r2, [r7, #24]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8148 	beq.w	800afdc <f_lseek+0x406>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	f000 8142 	beq.w	800afdc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	b25b      	sxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da18      	bge.n	800ad94 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	7858      	ldrb	r0, [r3, #1]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1a      	ldr	r2, [r3, #32]
 800ad70:	2301      	movs	r3, #1
 800ad72:	f7fd ffdf 	bl	8008d34 <disk_write>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <f_lseek+0x1b0>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	755a      	strb	r2, [r3, #21]
 800ad82:	2301      	movs	r3, #1
 800ad84:	e12c      	b.n	800afe0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7d1b      	ldrb	r3, [r3, #20]
 800ad8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	7858      	ldrb	r0, [r3, #1]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad9e:	2301      	movs	r3, #1
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	f7fd ffa7 	bl	8008cf4 <disk_read>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d004      	beq.n	800adb6 <f_lseek+0x1e0>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	755a      	strb	r2, [r3, #21]
 800adb2:	2301      	movs	r3, #1
 800adb4:	e114      	b.n	800afe0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	621a      	str	r2, [r3, #32]
 800adbc:	e10e      	b.n	800afdc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d908      	bls.n	800adda <f_lseek+0x204>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7d1b      	ldrb	r3, [r3, #20]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ade8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 80a7 	beq.w	800af40 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	895b      	ldrh	r3, [r3, #10]
 800adf6:	025b      	lsls	r3, r3, #9
 800adf8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01b      	beq.n	800ae38 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	1e5a      	subs	r2, r3, #1
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	1e59      	subs	r1, r3, #1
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d30f      	bcc.n	800ae38 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	425b      	negs	r3, r3
 800ae20:	401a      	ands	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae36:	e022      	b.n	800ae7e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d119      	bne.n	800ae78 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2100      	movs	r1, #0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe fc49 	bl	80096e0 <create_chain>
 800ae4e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d104      	bne.n	800ae60 <f_lseek+0x28a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2202      	movs	r2, #2
 800ae5a:	755a      	strb	r2, [r3, #21]
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e0bf      	b.n	800afe0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae66:	d104      	bne.n	800ae72 <f_lseek+0x29c>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	755a      	strb	r2, [r3, #21]
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e0b6      	b.n	800afe0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae76:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae7c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d05d      	beq.n	800af40 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ae84:	e03a      	b.n	800aefc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	603b      	str	r3, [r7, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	441a      	add	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	7d1b      	ldrb	r3, [r3, #20]
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00b      	beq.n	800aebe <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fc18 	bl	80096e0 <create_chain>
 800aeb0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d108      	bne.n	800aeca <f_lseek+0x2f4>
							ofs = 0; break;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	e022      	b.n	800af04 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fa16 	bl	80092f4 <get_fat>
 800aec8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d104      	bne.n	800aedc <f_lseek+0x306>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	755a      	strb	r2, [r3, #21]
 800aed8:	2301      	movs	r3, #1
 800aeda:	e081      	b.n	800afe0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800aedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d904      	bls.n	800aeec <f_lseek+0x316>
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d304      	bcc.n	800aef6 <f_lseek+0x320>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	755a      	strb	r2, [r3, #21]
 800aef2:	2302      	movs	r3, #2
 800aef4:	e074      	b.n	800afe0 <f_lseek+0x40a>
					fp->clust = clst;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aefa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	429a      	cmp	r2, r3
 800af02:	d8c0      	bhi.n	800ae86 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	441a      	add	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	2b00      	cmp	r3, #0
 800af18:	d012      	beq.n	800af40 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe f9c9 	bl	80092b6 <clust2sect>
 800af24:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800af26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <f_lseek+0x360>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	755a      	strb	r2, [r3, #21]
 800af32:	2302      	movs	r3, #2
 800af34:	e054      	b.n	800afe0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	0a5b      	lsrs	r3, r3, #9
 800af3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af3c:	4413      	add	r3, r2
 800af3e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d90a      	bls.n	800af62 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7d1b      	ldrb	r3, [r3, #20]
 800af58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d036      	beq.n	800afdc <f_lseek+0x406>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af74:	429a      	cmp	r2, r3
 800af76:	d031      	beq.n	800afdc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7d1b      	ldrb	r3, [r3, #20]
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da18      	bge.n	800afb4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	7858      	ldrb	r0, [r3, #1]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1a      	ldr	r2, [r3, #32]
 800af90:	2301      	movs	r3, #1
 800af92:	f7fd fecf 	bl	8008d34 <disk_write>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <f_lseek+0x3d0>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	755a      	strb	r2, [r3, #21]
 800afa2:	2301      	movs	r3, #1
 800afa4:	e01c      	b.n	800afe0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	7d1b      	ldrb	r3, [r3, #20]
 800afaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	7858      	ldrb	r0, [r3, #1]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afbe:	2301      	movs	r3, #1
 800afc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afc2:	f7fd fe97 	bl	8008cf4 <disk_read>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d004      	beq.n	800afd6 <f_lseek+0x400>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	755a      	strb	r2, [r3, #21]
 800afd2:	2301      	movs	r3, #1
 800afd4:	e004      	b.n	800afe0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afda:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800afdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3740      	adds	r7, #64	@ 0x40
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800affe:	4b1f      	ldr	r3, [pc, #124]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b000:	7a5b      	ldrb	r3, [r3, #9]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d131      	bne.n	800b06c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b008:	4b1c      	ldr	r3, [pc, #112]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b00a:	7a5b      	ldrb	r3, [r3, #9]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	4b1a      	ldr	r3, [pc, #104]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b012:	2100      	movs	r1, #0
 800b014:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b016:	4b19      	ldr	r3, [pc, #100]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b018:	7a5b      	ldrb	r3, [r3, #9]
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	4a17      	ldr	r2, [pc, #92]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b026:	4b15      	ldr	r3, [pc, #84]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b028:	7a5b      	ldrb	r3, [r3, #9]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	4b13      	ldr	r3, [pc, #76]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b030:	4413      	add	r3, r2
 800b032:	79fa      	ldrb	r2, [r7, #7]
 800b034:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b036:	4b11      	ldr	r3, [pc, #68]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	b2d1      	uxtb	r1, r2
 800b040:	4a0e      	ldr	r2, [pc, #56]	@ (800b07c <FATFS_LinkDriverEx+0x94>)
 800b042:	7251      	strb	r1, [r2, #9]
 800b044:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b046:	7dbb      	ldrb	r3, [r7, #22]
 800b048:	3330      	adds	r3, #48	@ 0x30
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3301      	adds	r3, #1
 800b054:	223a      	movs	r2, #58	@ 0x3a
 800b056:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3302      	adds	r3, #2
 800b05c:	222f      	movs	r2, #47	@ 0x2f
 800b05e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	3303      	adds	r3, #3
 800b064:	2200      	movs	r2, #0
 800b066:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	371c      	adds	r7, #28
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	240005e0 	.word	0x240005e0

0800b080 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b08a:	2200      	movs	r2, #0
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff ffaa 	bl	800afe8 <FATFS_LinkDriverEx>
 800b094:	4603      	mov	r3, r0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <memcmp>:
 800b09e:	b510      	push	{r4, lr}
 800b0a0:	3901      	subs	r1, #1
 800b0a2:	4402      	add	r2, r0
 800b0a4:	4290      	cmp	r0, r2
 800b0a6:	d101      	bne.n	800b0ac <memcmp+0xe>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e005      	b.n	800b0b8 <memcmp+0x1a>
 800b0ac:	7803      	ldrb	r3, [r0, #0]
 800b0ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	d001      	beq.n	800b0ba <memcmp+0x1c>
 800b0b6:	1b18      	subs	r0, r3, r4
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	e7f2      	b.n	800b0a4 <memcmp+0x6>

0800b0be <memset>:
 800b0be:	4402      	add	r2, r0
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d100      	bne.n	800b0c8 <memset+0xa>
 800b0c6:	4770      	bx	lr
 800b0c8:	f803 1b01 	strb.w	r1, [r3], #1
 800b0cc:	e7f9      	b.n	800b0c2 <memset+0x4>
	...

0800b0d0 <__libc_init_array>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4d0d      	ldr	r5, [pc, #52]	@ (800b108 <__libc_init_array+0x38>)
 800b0d4:	4c0d      	ldr	r4, [pc, #52]	@ (800b10c <__libc_init_array+0x3c>)
 800b0d6:	1b64      	subs	r4, r4, r5
 800b0d8:	10a4      	asrs	r4, r4, #2
 800b0da:	2600      	movs	r6, #0
 800b0dc:	42a6      	cmp	r6, r4
 800b0de:	d109      	bne.n	800b0f4 <__libc_init_array+0x24>
 800b0e0:	4d0b      	ldr	r5, [pc, #44]	@ (800b110 <__libc_init_array+0x40>)
 800b0e2:	4c0c      	ldr	r4, [pc, #48]	@ (800b114 <__libc_init_array+0x44>)
 800b0e4:	f000 f818 	bl	800b118 <_init>
 800b0e8:	1b64      	subs	r4, r4, r5
 800b0ea:	10a4      	asrs	r4, r4, #2
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	42a6      	cmp	r6, r4
 800b0f0:	d105      	bne.n	800b0fe <__libc_init_array+0x2e>
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f8:	4798      	blx	r3
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	e7ee      	b.n	800b0dc <__libc_init_array+0xc>
 800b0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b102:	4798      	blx	r3
 800b104:	3601      	adds	r6, #1
 800b106:	e7f2      	b.n	800b0ee <__libc_init_array+0x1e>
 800b108:	0800b21c 	.word	0x0800b21c
 800b10c:	0800b21c 	.word	0x0800b21c
 800b110:	0800b21c 	.word	0x0800b21c
 800b114:	0800b220 	.word	0x0800b220

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
