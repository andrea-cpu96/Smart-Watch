
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb2c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c11c  0800c11c  0000e010  2**0
                  CONTENTS
  4 .ARM          00000000  0800c11c  0800c11c  0000e010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c11c  0800c11c  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c11c  0800c11c  0000d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c120  0800c120  0000d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800c124  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  24000010  0800c134  0000e010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000634  0800c134  0000e634  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017690  00000000  00000000  0000e03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362c  00000000  00000000  000256ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00028d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec1  00000000  00000000  0002a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041a2a  00000000  00000000  0002af39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb96  00000000  00000000  0006c963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019bceb  00000000  00000000  000884f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002241e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  00224228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  002291fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bdac 	.word	0x0800bdac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800bdac 	.word	0x0800bdac

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fb21 	bl	8001a60 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fb1b 	bl	8001a60 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fb07 	bl	8001a60 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fb01 	bl	8001a60 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 faed 	bl	8001a60 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fae7 	bl	8001a60 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f000 ff73 	bl	8001450 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 ff6d 	bl	8001450 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f000 ff67 	bl	8001450 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
    
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
 8000654:	2018      	movs	r0, #24
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x48);
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 fd3f 	bl	8001450 <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f000 fd39 	bl	8001450 <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_spi_tx+0x30>)
 80009fa:	f007 fea9 	bl	8008750 <HAL_SPI_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a04:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
		return;

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000564 	.word	0x24000564
 8000a18:	2400002c 	.word	0x2400002c

08000a1c <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000a20:	f7ff fd9b 	bl	800055a <GC9A01_init>
	sd_init();
 8000a24:	f000 f8aa 	bl	8000b7c <sd_init>

	//bmp_init(bmp, &file, fName, lcd_draw);

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <lcd_process>:


void lcd_process(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	jpeg_demo();
 8000a30:	f000 f842 	bl	8000ab8 <jpeg_demo>

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80bb      	strh	r3, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	807b      	strh	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e022      	b.n	8000aa2 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	e016      	b.n	8000a90 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d108      	bne.n	8000a7c <lcd_draw+0x44>
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d104      	bne.n	8000a7c <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000a72:	2102      	movs	r1, #2
 8000a74:	6a38      	ldr	r0, [r7, #32]
 8000a76:	f7ff fd50 	bl	800051a <GC9A01_write>
 8000a7a:	e003      	b.n	8000a84 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	6a38      	ldr	r0, [r7, #32]
 8000a80:	f7ff fd5b 	bl	800053a <GC9A01_write_continue>

			}

			data += 2;
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	3302      	adds	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	883a      	ldrh	r2, [r7, #0]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbe2      	blt.n	8000a62 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd6      	blt.n	8000a5c <lcd_draw+0x24>

		}

	}

}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <jpeg_demo>:

#define JPEG_BUFFER_SIZE ((uint32_t)(1024 *96))
#define JPEG_AUD_BUFFER_SIZE ((uint32_t)(1024 *16))

void jpeg_demo(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	f5ad 4db4 	sub.w	sp, sp, #23040	@ 0x5a00
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af02      	add	r7, sp, #8
	UINT byteRead;
	uint8_t JPEG_InputBuffer[11527]; // Example size, adjust as needed
	uint8_t JPEG_OutputBuffer[11527]; // Example size, adjust as needed


	hjpeg.Instance = JPEG;
 8000ac2:	4b28      	ldr	r3, [pc, #160]	@ (8000b64 <jpeg_demo+0xac>)
 8000ac4:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <jpeg_demo+0xb0>)
 8000ac6:	601a      	str	r2, [r3, #0]
	HAL_JPEG_Init(&hjpeg);
 8000ac8:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <jpeg_demo+0xac>)
 8000aca:	f001 f811 	bl	8001af0 <HAL_JPEG_Init>

	if(f_open(&file, "image1.bmp", FA_READ) != FR_OK)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4926      	ldr	r1, [pc, #152]	@ (8000b6c <jpeg_demo+0xb4>)
 8000ad2:	4827      	ldr	r0, [pc, #156]	@ (8000b70 <jpeg_demo+0xb8>)
 8000ad4:	f00a fde8 	bl	800b6a8 <f_open>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <jpeg_demo+0x2a>
		while(1);
 8000ade:	bf00      	nop
 8000ae0:	e7fd      	b.n	8000ade <jpeg_demo+0x26>

	if(f_read(&file, JPEG_InputBuffer, 11527, &byteRead) != FR_OK)
 8000ae2:	f645 2314 	movw	r3, #23060	@ 0x5a14
 8000ae6:	443b      	add	r3, r7
 8000ae8:	4922      	ldr	r1, [pc, #136]	@ (8000b74 <jpeg_demo+0xbc>)
 8000aea:	f645 2218 	movw	r2, #23064	@ 0x5a18
 8000aee:	440a      	add	r2, r1
 8000af0:	19d1      	adds	r1, r2, r7
 8000af2:	f642 5207 	movw	r2, #11527	@ 0x2d07
 8000af6:	481e      	ldr	r0, [pc, #120]	@ (8000b70 <jpeg_demo+0xb8>)
 8000af8:	f00a ff90 	bl	800ba1c <f_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <jpeg_demo+0x4e>
		while(1);
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <jpeg_demo+0x4a>


	if(HAL_JPEG_Decode(&hjpeg, JPEG_InputBuffer, 11527, JPEG_OutputBuffer, 11527, HAL_MAX_DELAY) != HAL_OK)
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <jpeg_demo+0xc0>)
 8000b08:	f503 43b4 	add.w	r3, r3, #23040	@ 0x5a00
 8000b0c:	f103 0318 	add.w	r3, r3, #24
 8000b10:	443b      	add	r3, r7
 8000b12:	4918      	ldr	r1, [pc, #96]	@ (8000b74 <jpeg_demo+0xbc>)
 8000b14:	f645 2218 	movw	r2, #23064	@ 0x5a18
 8000b18:	440a      	add	r2, r1
 8000b1a:	19d1      	adds	r1, r2, r7
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	9201      	str	r2, [sp, #4]
 8000b22:	f642 5207 	movw	r2, #11527	@ 0x2d07
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	f642 5207 	movw	r2, #11527	@ 0x2d07
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <jpeg_demo+0xac>)
 8000b2e:	f001 f8f6 	bl	8001d1e <HAL_JPEG_Decode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <jpeg_demo+0x84>
		while(1);
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <jpeg_demo+0x80>

	lcd_draw(0, 0, 240, 240, JPEG_OutputBuffer);
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <jpeg_demo+0xc0>)
 8000b3e:	f503 43b4 	add.w	r3, r3, #23040	@ 0x5a00
 8000b42:	f103 0318 	add.w	r3, r3, #24
 8000b46:	443b      	add	r3, r7
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	23f0      	movs	r3, #240	@ 0xf0
 8000b4c:	22f0      	movs	r2, #240	@ 0xf0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ff71 	bl	8000a38 <lcd_draw>

}
 8000b56:	bf00      	nop
 8000b58:	f507 47b4 	add.w	r7, r7, #23040	@ 0x5a00
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	24000490 	.word	0x24000490
 8000b68:	52003000 	.word	0x52003000
 8000b6c:	0800bdc4 	.word	0x0800bdc4
 8000b70:	24000260 	.word	0x24000260
 8000b74:	ffffd2f4 	.word	0xffffd2f4
 8000b78:	ffffa5ec 	.word	0xffffa5ec

08000b7c <sd_init>:


// SD

static void sd_init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8000b80:	2201      	movs	r2, #1
 8000b82:	4905      	ldr	r1, [pc, #20]	@ (8000b98 <sd_init+0x1c>)
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <sd_init+0x20>)
 8000b86:	f00a fd49 	bl	800b61c <f_mount>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <sd_init+0x18>
    	sd_error_handler();
 8000b90:	f000 f806 	bl	8000ba0 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0800bdd0 	.word	0x0800bdd0
 8000b9c:	24000030 	.word	0x24000030

08000ba0 <sd_error_handler>:


static void sd_error_handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

	while(1);
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <sd_error_handler+0x4>

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <main+0xa8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 f9df 	bl	8000f94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fba9 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f83b 	bl	8000c54 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <main+0xa8>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <main+0xa8>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <main+0xa8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 ff49 	bl	8001a94 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 ff5f 	bl	8001ac8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <main+0xa8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 f9b1 	bl	8000f94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f919 	bl	8000e68 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000c36:	f000 f8c3 	bl	8000dc0 <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8000c3a:	f000 f89d 	bl	8000d78 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000c3e:	f008 fe29 	bl	8009894 <MX_FATFS_Init>
  MX_JPEG_Init();
 8000c42:	f000 f885 	bl	8000d50 <MX_JPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c46:	f7ff fee9 	bl	8000a1c <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000c4a:	f7ff feef 	bl	8000a2c <lcd_process>
 8000c4e:	e7fc      	b.n	8000c4a <main+0xa2>
 8000c50:	58024400 	.word	0x58024400

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	@ 0x70
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	224c      	movs	r2, #76	@ 0x4c
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00b f875 	bl	800bd52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00b f86f 	bl	800bd52 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c74:	2004      	movs	r0, #4
 8000c76:	f002 fa7b 	bl	8003170 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <SystemClock_Config+0xf4>)
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	4a31      	ldr	r2, [pc, #196]	@ (8000d48 <SystemClock_Config+0xf4>)
 8000c84:	f023 0301 	bic.w	r3, r3, #1
 8000c88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <SystemClock_Config+0xf4>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <SystemClock_Config+0xf8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000d4c <SystemClock_Config+0xf8>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <SystemClock_Config+0xf8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb0:	bf00      	nop
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <SystemClock_Config+0xf8>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cbe:	d1f8      	bne.n	8000cb2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000ce0:	230d      	movs	r3, #13
 8000ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fa92 	bl	8003224 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d06:	f000 f945 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	233f      	movs	r3, #63	@ 0x3f
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d1a:	2340      	movs	r3, #64	@ 0x40
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1e:	2340      	movs	r3, #64	@ 0x40
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d28:	2340      	movs	r3, #64	@ 0x40
 8000d2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fed1 	bl	8003ad8 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000d3c:	f000 f92a 	bl	8000f94 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3770      	adds	r7, #112	@ 0x70
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58000400 	.word	0x58000400
 8000d4c:	58024800 	.word	0x58024800

08000d50 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_JPEG_Init+0x20>)
 8000d56:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <MX_JPEG_Init+0x24>)
 8000d58:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_JPEG_Init+0x20>)
 8000d5c:	f000 fec8 	bl	8001af0 <HAL_JPEG_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000d66:	f000 f915 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	24000490 	.word	0x24000490
 8000d74:	52003000 	.word	0x52003000

08000d78 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <MX_SDMMC1_SD_Init+0x44>)
 8000d80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d94:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_SDMMC1_SD_Init+0x40>)
 8000da4:	f005 ff4c 	bl	8006c40 <HAL_SD_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000dae:	f000 f8f1 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	240004e8 	.word	0x240004e8
 8000dbc:	52007000 	.word	0x52007000

08000dc0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dc6:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <MX_SPI5_Init+0xa4>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dd0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dde:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000df0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_SPI5_Init+0xa0>)
 8000e4e:	f007 fb5b 	bl	8008508 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8000e58:	f000 f89c 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	24000564 	.word	0x24000564
 8000e64:	40015000 	.word	0x40015000

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b41      	ldr	r3, [pc, #260]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	4a3f      	ldr	r2, [pc, #252]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	4a38      	ldr	r2, [pc, #224]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eac:	4b35      	ldr	r3, [pc, #212]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	4a30      	ldr	r2, [pc, #192]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a29      	ldr	r2, [pc, #164]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ee0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ef6:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_GPIO_Init+0x11c>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2102      	movs	r1, #2
 8000f18:	481b      	ldr	r0, [pc, #108]	@ (8000f88 <MX_GPIO_Init+0x120>)
 8000f1a:	f000 fda1 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2161      	movs	r1, #97	@ 0x61
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <MX_GPIO_Init+0x124>)
 8000f24:	f000 fd9c 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	@ (8000f90 <MX_GPIO_Init+0x128>)
 8000f3e:	f000 fbc7 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8000f42:	2302      	movs	r3, #2
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <MX_GPIO_Init+0x120>)
 8000f5a:	f000 fbb9 	bl	80016d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 8000f5e:	2361      	movs	r3, #97	@ 0x61
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_GPIO_Init+0x124>)
 8000f76:	f000 fbab 	bl	80016d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58022800 	.word	0x58022800
 8000f8c:	58022400 	.word	0x58022400
 8000f90:	58022000 	.word	0x58022000

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_JPEG_MspInit+0x3c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10e      	bne.n	8001004 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_JPEG_MspInit+0x40>)
 8000fe8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fec:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <HAL_JPEG_MspInit+0x40>)
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <HAL_JPEG_MspInit+0x40>)
 8000ff8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	52003000 	.word	0x52003000
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0be      	sub	sp, #248	@ 0xf8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	22c8      	movs	r2, #200	@ 0xc8
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00a fe8a 	bl	800bd52 <memset>
  if(hsd->Instance==SDMMC1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a3c      	ldr	r2, [pc, #240]	@ (8001134 <HAL_SD_MspInit+0x11c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d171      	bne.n	800112c <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001048:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001054:	2300      	movs	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f8b1 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001068:	f7ff ff94 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <HAL_SD_MspInit+0x120>)
 800106e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001072:	4a31      	ldr	r2, [pc, #196]	@ (8001138 <HAL_SD_MspInit+0x120>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001078:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <HAL_SD_MspInit+0x120>)
 800107e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <HAL_SD_MspInit+0x120>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_SD_MspInit+0x120>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <HAL_SD_MspInit+0x120>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <HAL_SD_MspInit+0x120>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_SD_MspInit+0x120>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_SD_MspInit+0x120>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 80010c6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	@ (800113c <HAL_SD_MspInit+0x124>)
 80010ee:	f000 faef 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800110a:	230c      	movs	r3, #12
 800110c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001114:	4619      	mov	r1, r3
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <HAL_SD_MspInit+0x128>)
 8001118:	f000 fada 	bl	80016d0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2031      	movs	r0, #49	@ 0x31
 8001122:	f000 faa0 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001126:	2031      	movs	r0, #49	@ 0x31
 8001128:	f000 fab7 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	37f8      	adds	r7, #248	@ 0xf8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	52007000 	.word	0x52007000
 8001138:	58024400 	.word	0x58024400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020c00 	.word	0x58020c00

08001144 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0be      	sub	sp, #248	@ 0xf8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	22c8      	movs	r2, #200	@ 0xc8
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00a fdf4 	bl	800bd52 <memset>
  if(hspi->Instance==SPI5)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a39      	ldr	r2, [pc, #228]	@ (8001254 <HAL_SPI_MspInit+0x110>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d16a      	bne.n	800124a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f81a 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001196:	f7ff fefd 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 800119c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_SPI_MspInit+0x114>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800120c:	2305      	movs	r3, #5
 800120e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001216:	4619      	mov	r1, r3
 8001218:	4810      	ldr	r0, [pc, #64]	@ (800125c <HAL_SPI_MspInit+0x118>)
 800121a:	f000 fa59 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 800121e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001238:	2305      	movs	r3, #5
 800123a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800123e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001242:	4619      	mov	r1, r3
 8001244:	4806      	ldr	r0, [pc, #24]	@ (8001260 <HAL_SPI_MspInit+0x11c>)
 8001246:	f000 fa43 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	37f8      	adds	r7, #248	@ 0xf8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40015000 	.word	0x40015000
 8001258:	58024400 	.word	0x58024400
 800125c:	58022800 	.word	0x58022800
 8001260:	58022400 	.word	0x58022400

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 f8a9 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <SDMMC1_IRQHandler+0x10>)
 80012ca:	f005 ff29 	bl	8007120 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240004e8 	.word	0x240004e8

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012dc:	f7fe fffc 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f00a fd2d 	bl	800bd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fc4d 	bl	8000ba8 <main>
  bx  lr
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001314:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001318:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800131c:	0800c124 	.word	0x0800c124
  ldr r2, =_sbss
 8001320:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001324:	24000634 	.word	0x24000634

08001328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC3_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001332:	2003      	movs	r0, #3
 8001334:	f000 f98c 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001338:	f002 fd84 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_Init+0x68>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	4913      	ldr	r1, [pc, #76]	@ (8001398 <HAL_Init+0x6c>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_Init+0x6c>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <HAL_Init+0x70>)
 800136e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_Init+0x74>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f814 	bl	80013a4 <HAL_InitTick>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e002      	b.n	800138c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001386:	f7ff fe0b 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	58024400 	.word	0x58024400
 8001398:	0800be18 	.word	0x0800be18
 800139c:	24000004 	.word	0x24000004
 80013a0:	24000000 	.word	0x24000000

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_InitTick+0x60>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e021      	b.n	80013fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_InitTick+0x64>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f971 	bl	80016b6 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f93b 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_InitTick+0x68>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2400000c 	.word	0x2400000c
 8001408:	24000000 	.word	0x24000000
 800140c:	24000008 	.word	0x24000008

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2400000c 	.word	0x2400000c
 8001434:	240005ec 	.word	0x240005ec

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	240005ec 	.word	0x240005ec

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400000c 	.word	0x2400000c

08001498 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetREVID+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0c1b      	lsrs	r3, r3, #16
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	5c001000 	.word	0x5c001000

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff40 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff33 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa4 	bl	800160c <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016de:	4b89      	ldr	r3, [pc, #548]	@ (8001904 <HAL_GPIO_Init+0x234>)
 80016e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016e2:	e194      	b.n	8001a0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8186 	beq.w	8001a08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_Init+0x44>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d130      	bne.n	8001776 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174a:	2201      	movs	r2, #1
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 0201 	and.w	r2, r3, #1
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b03      	cmp	r3, #3
 8001780:	d017      	beq.n	80017b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d123      	bne.n	8001806 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0203 	and.w	r2, r3, #3
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80e0 	beq.w	8001a08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <HAL_GPIO_Init+0x238>)
 800184a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800184e:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <HAL_GPIO_Init+0x238>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001858:	4b2b      	ldr	r3, [pc, #172]	@ (8001908 <HAL_GPIO_Init+0x238>)
 800185a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a29      	ldr	r2, [pc, #164]	@ (800190c <HAL_GPIO_Init+0x23c>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <HAL_GPIO_Init+0x240>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d052      	beq.n	8001938 <HAL_GPIO_Init+0x268>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <HAL_GPIO_Init+0x244>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d031      	beq.n	80018fe <HAL_GPIO_Init+0x22e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_GPIO_Init+0x248>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d02b      	beq.n	80018fa <HAL_GPIO_Init+0x22a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <HAL_GPIO_Init+0x24c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d025      	beq.n	80018f6 <HAL_GPIO_Init+0x226>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <HAL_GPIO_Init+0x250>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01f      	beq.n	80018f2 <HAL_GPIO_Init+0x222>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001924 <HAL_GPIO_Init+0x254>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d019      	beq.n	80018ee <HAL_GPIO_Init+0x21e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001928 <HAL_GPIO_Init+0x258>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0x21a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <HAL_GPIO_Init+0x25c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_GPIO_Init+0x216>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <HAL_GPIO_Init+0x260>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d007      	beq.n	80018e2 <HAL_GPIO_Init+0x212>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_GPIO_Init+0x264>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_GPIO_Init+0x20e>
 80018da:	2309      	movs	r3, #9
 80018dc:	e02d      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018de:	230a      	movs	r3, #10
 80018e0:	e02b      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018e2:	2308      	movs	r3, #8
 80018e4:	e029      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e027      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018ea:	2306      	movs	r3, #6
 80018ec:	e025      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e023      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e021      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e01f      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e01d      	b.n	800193a <HAL_GPIO_Init+0x26a>
 80018fe:	2301      	movs	r3, #1
 8001900:	e01b      	b.n	800193a <HAL_GPIO_Init+0x26a>
 8001902:	bf00      	nop
 8001904:	58000080 	.word	0x58000080
 8001908:	58024400 	.word	0x58024400
 800190c:	58000400 	.word	0x58000400
 8001910:	58020000 	.word	0x58020000
 8001914:	58020400 	.word	0x58020400
 8001918:	58020800 	.word	0x58020800
 800191c:	58020c00 	.word	0x58020c00
 8001920:	58021000 	.word	0x58021000
 8001924:	58021400 	.word	0x58021400
 8001928:	58021800 	.word	0x58021800
 800192c:	58021c00 	.word	0x58021c00
 8001930:	58022000 	.word	0x58022000
 8001934:	58022400 	.word	0x58022400
 8001938:	2300      	movs	r3, #0
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194a:	4938      	ldr	r1, [pc, #224]	@ (8001a2c <HAL_GPIO_Init+0x35c>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f ae63 	bne.w	80016e4 <HAL_GPIO_Init+0x14>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3724      	adds	r7, #36	@ 0x24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	58000400 	.word	0x58000400

08001a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e001      	b.n	8001a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a7c:	e003      	b.n	8001a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	041a      	lsls	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a9c:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_HSEM_FastTake+0x2c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3320      	adds	r3, #32
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_HSEM_FastTake+0x30>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e000      	b.n	8001ab2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	58026400 	.word	0x58026400
 8001ac4:	80000300 	.word	0x80000300

08001ac8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ad2:	4906      	ldr	r1, [pc, #24]	@ (8001aec <HAL_HSEM_Release+0x24>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	58026400 	.word	0x58026400

08001af0 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e070      	b.n	8001be4 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fa5c 	bl	8000fd4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a19      	ldr	r2, [pc, #100]	@ (8001bec <HAL_JPEG_Init+0xfc>)
 8001b88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a18      	ldr	r2, [pc, #96]	@ (8001bf0 <HAL_JPEG_Init+0x100>)
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fce3 	bl	8002568 <JPEG_Set_HuffEnc_Mem>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e018      	b.n	8001be4 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0800c008 	.word	0x0800c008
 8001bf0:	0800c048 	.word	0x0800c048

08001bf4 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_JPEG_GetInfo+0x16>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e083      	b.n	8001d16 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d103      	bne.n	8001c24 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e017      	b.n	8001c54 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e00c      	b.n	8001c54 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d103      	bne.n	8001c50 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2230      	movs	r2, #48	@ 0x30
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e001      	b.n	8001c54 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e060      	b.n	8001d16 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d003      	beq.n	8001c80 <HAL_JPEG_GetInfo+0x8c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b30      	cmp	r3, #48	@ 0x30
 8001c7e:	d140      	bne.n	8001d02 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d109      	bne.n	8001cc4 <HAL_JPEG_GetInfo+0xd0>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_JPEG_GetInfo+0xd0>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	e01d      	b.n	8001d00 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_JPEG_GetInfo+0xea>
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d106      	bne.n	8001cde <HAL_JPEG_GetInfo+0xea>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	e010      	b.n	8001d00 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d109      	bne.n	8001cf8 <HAL_JPEG_GetInfo+0x104>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_JPEG_GetInfo+0x104>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	e003      	b.n	8001d00 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001cfe:	e003      	b.n	8001d08 <HAL_JPEG_GetInfo+0x114>
 8001d00:	e002      	b.n	8001d08 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 f9d3 	bl	80030b4 <JPEG_GetQuality>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_JPEG_Decode+0x20>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_JPEG_Decode+0x20>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e071      	b.n	8001e26 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_JPEG_Decode+0x32>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e06a      	b.n	8001e26 <HAL_JPEG_Decode+0x108>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fb6e 	bl	8001438 <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d158      	bne.n	8001e1c <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	f023 020f 	bic.w	r2, r3, #15
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d82:	f043 0206 	orr.w	r2, r3, #6
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f023 0203 	bic.w	r2, r3, #3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fe58 	bl	8002a6c <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8001dbc:	e01e      	b.n	8001dfc <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d01a      	beq.n	8001dfc <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001dc6:	f7ff fb37 	bl	8001438 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d302      	bcc.n	8001ddc <HAL_JPEG_Decode+0xbe>
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de0:	f043 0208 	orr.w	r2, r3, #8
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e014      	b.n	8001e26 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fea9 	bl	8002b54 <JPEG_Process>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0da      	beq.n	8001dbe <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e004      	b.n	8001e26 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d116      	bne.n	8001e76 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d033      	beq.n	8001ed0 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e74:	e02c      	b.n	8001ed0 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d126      	bne.n	8001ed0 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f043 0306 	orr.w	r3, r3, #6
 8001e9e:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eae:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001ebc:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b08b      	sub	sp, #44	@ 0x2c
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e020      	b.n	8001fa4 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8001f6c:	6a3a      	ldr	r2, [r7, #32]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	4413      	add	r3, r2
 8001f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f76:	d90f      	bls.n	8001f98 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e055      	b.n	8002028 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	440b      	add	r3, r1
 8001f86:	3201      	adds	r2, #1
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
      p++;
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	623b      	str	r3, [r7, #32]
      i--;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	3b01      	subs	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	d9db      	bls.n	8001f62 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	4413      	add	r3, r2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6a3a      	ldr	r2, [r7, #32]
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
  p = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8001fc8:	e027      	b.n	800201a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	601a      	str	r2, [r3, #0]
      p++;
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	623b      	str	r3, [r7, #32]
      code++;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d0eb      	beq.n	8001fca <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b1f      	cmp	r3, #31
 8001ff6:	d901      	bls.n	8001ffc <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e015      	b.n	8002028 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	429a      	cmp	r2, r3
 8002008:	d301      	bcc.n	800200e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00c      	b.n	8002028 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
    si++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1dd      	bne.n	8001fe2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	372c      	adds	r7, #44	@ 0x2c
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800203a:	af00      	add	r7, sp, #0
 800203c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002040:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002044:	6018      	str	r0, [r3, #0]
 8002046:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800204a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800204e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002050:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002054:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8002066:	f7ff ff70 	bl	8001f4a <JPEG_Bits_To_SizeCodes>
 800206a:	4603      	mov	r3, r0
 800206c:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002070:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002078:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800207c:	e075      	b.n	800216a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8002084:	e067      	b.n	8002156 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002086:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800208a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002094:	4413      	add	r3, r2
 8002096:	3310      	adds	r3, #16
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800209e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80020a6:	23a0      	movs	r3, #160	@ 0xa0
 80020a8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80020ac:	e021      	b.n	80020f2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80020ae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80020b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80020b4:	d103      	bne.n	80020be <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80020b6:	23a1      	movs	r3, #161	@ 0xa1
 80020b8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80020bc:	e019      	b.n	80020f2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80020be:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80020cc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80020d8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	461a      	mov	r2, r3
 80020e6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80020ea:	4413      	add	r3, r2
 80020ec:	3b01      	subs	r3, #1
 80020ee:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80020f2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80020f6:	2ba1      	cmp	r3, #161	@ 0xa1
 80020f8:	d901      	bls.n	80020fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80020fa:	2301      	movs	r3, #1
 80020fc:	e035      	b.n	800216a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80020fe:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002102:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002106:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800210a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800210e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002112:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800211c:	3328      	adds	r3, #40	@ 0x28
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002124:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002128:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800212c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	b2d9      	uxtb	r1, r3
 8002138:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800213c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002146:	4413      	add	r3, r2
 8002148:	460a      	mov	r2, r1
 800214a:	701a      	strb	r2, [r3, #0]
      k++;
 800214c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002150:	3301      	adds	r3, #1
 8002152:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8002156:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800215a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002164:	429a      	cmp	r2, r3
 8002166:	d38e      	bcc.n	8002086 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800217a:	af00      	add	r7, sp, #0
 800217c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002180:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002184:	6018      	str	r0, [r3, #0]
 8002186:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800218a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800218e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002190:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002194:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800219e:	f107 0208 	add.w	r2, r7, #8
 80021a2:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80021a6:	f7ff fed0 	bl	8001f4a <JPEG_Bits_To_SizeCodes>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80021b0:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80021b8:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80021bc:	e048      	b.n	8002250 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80021c4:	e03d      	b.n	8002242 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80021c6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021ca:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80021d4:	4413      	add	r3, r2
 80021d6:	3310      	adds	r3, #16
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80021de:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80021e2:	2b0b      	cmp	r3, #11
 80021e4:	d901      	bls.n	80021ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80021e6:	2301      	movs	r3, #1
 80021e8:	e032      	b.n	8002250 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80021ea:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021ee:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80021f2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80021f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021fa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021fe:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002208:	3302      	adds	r3, #2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002210:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002214:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002218:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	b2d9      	uxtb	r1, r3
 8002224:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002228:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002232:	4413      	add	r3, r2
 8002234:	460a      	mov	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
      k++;
 8002238:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800223c:	3301      	adds	r3, #1
 800223e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8002242:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8002246:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800224a:	429a      	cmp	r2, r3
 800224c:	d3bb      	bcc.n	80021c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b09a      	sub	sp, #104	@ 0x68
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800227c:	3318      	adds	r3, #24
 800227e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002280:	e00f      	b.n	80022a2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d106      	bne.n	800229e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002298:	3318      	adds	r3, #24
 800229a:	663b      	str	r3, [r7, #96]	@ 0x60
 800229c:	e001      	b.n	80022a2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e059      	b.n	8002356 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d055      	beq.n	8002354 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f7ff ff60 	bl	8002174 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80022ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80022c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80022c6:	e046      	b.n	8002356 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80022c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80022cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ce:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80022d2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80022d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d6:	3304      	adds	r3, #4
 80022d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80022da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022dc:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80022e0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80022e2:	230c      	movs	r3, #12
 80022e4:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80022e6:	e032      	b.n	800234e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80022e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ea:	3b01      	subs	r3, #1
 80022ec:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80022ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f0:	3b04      	subs	r3, #4
 80022f2:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80022f4:	f107 0214 	add.w	r2, r7, #20
 80022f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002306:	3302      	adds	r3, #2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	3368      	adds	r3, #104	@ 0x68
 800230c:	443b      	add	r3, r7
 800230e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8002318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231a:	3b01      	subs	r3, #1
 800231c:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800231e:	f107 0214 	add.w	r2, r7, #20
 8002322:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800232e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002330:	3302      	adds	r3, #2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3368      	adds	r3, #104	@ 0x68
 8002336:	443b      	add	r3, r7
 8002338:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002348:	431a      	orrs	r2, r3
 800234a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800234c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800234e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002350:	2b01      	cmp	r3, #1
 8002352:	d8c9      	bhi.n	80022e8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3768      	adds	r7, #104	@ 0x68
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8002366:	af00      	add	r7, sp, #0
 8002368:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800236c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002370:	6018      	str	r0, [r3, #0]
 8002372:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002376:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800237a:	6019      	str	r1, [r3, #0]
 800237c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002380:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002384:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002386:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800238a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002396:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800239a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10c      	bne.n	80023be <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80023a4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023a8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80023b8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80023bc:	e01d      	b.n	80023fa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80023be:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023c2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80023ce:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80023d2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10c      	bne.n	80023f6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80023dc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023e0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80023ec:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80023f0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80023f4:	e001      	b.n	80023fa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0a8      	b.n	800254c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 80023fa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023fe:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a0 	beq.w	800254a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800240a:	f107 0214 	add.w	r2, r7, #20
 800240e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002412:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002416:	4611      	mov	r1, r2
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	f7ff fe0b 	bl	8002034 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800241e:	4603      	mov	r3, r0
 8002420:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002424:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800242c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002430:	e08c      	b.n	800254c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002432:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002436:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002440:	e00e      	b.n	8002460 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8002442:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002446:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800244a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800244c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002450:	3304      	adds	r3, #4
 8002452:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002456:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800245a:	3301      	adds	r3, #1
 800245c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002460:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002464:	2b02      	cmp	r3, #2
 8002466:	d9ec      	bls.n	8002442 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002468:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800246c:	4a3a      	ldr	r2, [pc, #232]	@ (8002558 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800246e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002470:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002474:	3304      	adds	r3, #4
 8002476:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800247a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800247e:	4a37      	ldr	r2, [pc, #220]	@ (800255c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002480:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002482:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002486:	3304      	adds	r3, #4
 8002488:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800248c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002490:	4a33      	ldr	r2, [pc, #204]	@ (8002560 <JPEG_Set_HuffAC_Mem+0x200>)
 8002492:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002494:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002498:	3304      	adds	r3, #4
 800249a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800249e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024a2:	4a30      	ldr	r2, [pc, #192]	@ (8002564 <JPEG_Set_HuffAC_Mem+0x204>)
 80024a4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80024a6:	23a2      	movs	r3, #162	@ 0xa2
 80024a8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80024ac:	e049      	b.n	8002542 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80024ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80024b8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80024bc:	3b04      	subs	r3, #4
 80024be:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80024c2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80024c6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80024ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80024d8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80024dc:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80024e0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024e4:	3328      	adds	r3, #40	@ 0x28
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80024f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024f8:	3b01      	subs	r3, #1
 80024fa:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80024fe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002502:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002506:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002514:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002518:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800251c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002520:	3328      	adds	r3, #40	@ 0x28
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002530:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800253a:	431a      	orrs	r2, r3
 800253c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002540:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002542:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002546:	2b01      	cmp	r3, #1
 8002548:	d8b1      	bhi.n	80024ae <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0fd10fd0 	.word	0x0fd10fd0
 800255c:	0fd30fd2 	.word	0x0fd30fd2
 8002560:	0fd50fd4 	.word	0x0fd50fd4
 8002564:	0fd70fd6 	.word	0x0fd70fd6

08002568 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f84d 	bl	8002610 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800257e:	461a      	mov	r2, r3
 8002580:	491f      	ldr	r1, [pc, #124]	@ (8002600 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff feec 	bl	8002360 <JPEG_Set_HuffAC_Mem>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	e030      	b.n	80025f8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800259e:	461a      	mov	r2, r3
 80025a0:	4918      	ldr	r1, [pc, #96]	@ (8002604 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fedc 	bl	8002360 <JPEG_Set_HuffAC_Mem>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	e020      	b.n	80025f8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80025be:	461a      	mov	r2, r3
 80025c0:	4911      	ldr	r1, [pc, #68]	@ (8002608 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe49 	bl	800225a <JPEG_Set_HuffDC_Mem>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	e010      	b.n	80025f8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80025de:	461a      	mov	r2, r3
 80025e0:	490a      	ldr	r1, [pc, #40]	@ (800260c <JPEG_Set_HuffEnc_Mem+0xa4>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fe39 	bl	800225a <JPEG_Set_HuffDC_Mem>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	e000      	b.n	80025f8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	0800be60 	.word	0x0800be60
 8002604:	0800bf14 	.word	0x0800bf14
 8002608:	0800be28 	.word	0x0800be28
 800260c:	0800be44 	.word	0x0800be44

08002610 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002618:	4b80      	ldr	r3, [pc, #512]	@ (800281c <JPEG_Set_Huff_DHTMem+0x20c>)
 800261a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800261c:	4b80      	ldr	r3, [pc, #512]	@ (8002820 <JPEG_Set_Huff_DHTMem+0x210>)
 800261e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002620:	4b80      	ldr	r3, [pc, #512]	@ (8002824 <JPEG_Set_Huff_DHTMem+0x214>)
 8002622:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002624:	4b80      	ldr	r3, [pc, #512]	@ (8002828 <JPEG_Set_Huff_DHTMem+0x218>)
 8002626:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002630:	330c      	adds	r3, #12
 8002632:	623b      	str	r3, [r7, #32]
  index = 16;
 8002634:	2310      	movs	r3, #16
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002638:	e01d      	b.n	8002676 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	3b01      	subs	r3, #1
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	3b02      	subs	r3, #2
 8002648:	6979      	ldr	r1, [r7, #20]
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800264e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	3b03      	subs	r3, #3
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800265a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800265c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265e:	3a04      	subs	r2, #4
 8002660:	6979      	ldr	r1, [r7, #20]
 8002662:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002664:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	601a      	str	r2, [r3, #0]
    address--;
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	3b04      	subs	r3, #4
 800266e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	3b04      	subs	r3, #4
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	2b03      	cmp	r3, #3
 800267a:	d8de      	bhi.n	800263a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002684:	3318      	adds	r3, #24
 8002686:	623b      	str	r3, [r7, #32]
  index = 12;
 8002688:	230c      	movs	r3, #12
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800268c:	e021      	b.n	80026d2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	3b01      	subs	r3, #1
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4413      	add	r3, r2
 8002696:	7c1b      	ldrb	r3, [r3, #16]
 8002698:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	3b02      	subs	r3, #2
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	440b      	add	r3, r1
 80026a2:	7c1b      	ldrb	r3, [r3, #16]
 80026a4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80026a6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	3b03      	subs	r3, #3
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	440b      	add	r3, r1
 80026b0:	7c1b      	ldrb	r3, [r3, #16]
 80026b2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80026b4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80026b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b8:	3a04      	subs	r2, #4
 80026ba:	6979      	ldr	r1, [r7, #20]
 80026bc:	440a      	add	r2, r1
 80026be:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80026c0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	601a      	str	r2, [r3, #0]
    address--;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	3b04      	subs	r3, #4
 80026ca:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	3b04      	subs	r3, #4
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d8da      	bhi.n	800268e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80026e0:	3328      	adds	r3, #40	@ 0x28
 80026e2:	623b      	str	r3, [r7, #32]
  index = 16;
 80026e4:	2310      	movs	r3, #16
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026e8:	e01d      	b.n	8002726 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	3b01      	subs	r3, #1
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	3b02      	subs	r3, #2
 80026f8:	69f9      	ldr	r1, [r7, #28]
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	3b03      	subs	r3, #3
 8002704:	69f9      	ldr	r1, [r7, #28]
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800270a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800270c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270e:	3a04      	subs	r2, #4
 8002710:	69f9      	ldr	r1, [r7, #28]
 8002712:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002714:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	601a      	str	r2, [r3, #0]
    address--;
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	3b04      	subs	r3, #4
 800271e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	3b04      	subs	r3, #4
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	2b03      	cmp	r3, #3
 800272a:	d8de      	bhi.n	80026ea <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002734:	33cc      	adds	r3, #204	@ 0xcc
 8002736:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <JPEG_Set_Huff_DHTMem+0x21c>)
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	3b04      	subs	r3, #4
 8002762:	623b      	str	r3, [r7, #32]
  index = 160;
 8002764:	23a0      	movs	r3, #160	@ 0xa0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002768:	e021      	b.n	80027ae <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	3b01      	subs	r3, #1
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	7c1b      	ldrb	r3, [r3, #16]
 8002774:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	3b02      	subs	r3, #2
 800277a:	69f9      	ldr	r1, [r7, #28]
 800277c:	440b      	add	r3, r1
 800277e:	7c1b      	ldrb	r3, [r3, #16]
 8002780:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002782:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	3b03      	subs	r3, #3
 8002788:	69f9      	ldr	r1, [r7, #28]
 800278a:	440b      	add	r3, r1
 800278c:	7c1b      	ldrb	r3, [r3, #16]
 800278e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002790:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	3a04      	subs	r2, #4
 8002796:	69f9      	ldr	r1, [r7, #28]
 8002798:	440a      	add	r2, r1
 800279a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800279c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	601a      	str	r2, [r3, #0]
    address--;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	3b04      	subs	r3, #4
 80027a6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	3b04      	subs	r3, #4
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d8da      	bhi.n	800276a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80027bc:	33cc      	adds	r3, #204	@ 0xcc
 80027be:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	061a      	lsls	r2, r3, #24
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  *address = value;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80027ea:	33dc      	adds	r3, #220	@ 0xdc
 80027ec:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <JPEG_Set_Huff_DHTMem+0x21c>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	7bdb      	ldrb	r3, [r3, #15]
 80027fc:	021a      	lsls	r2, r3, #8
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	7b92      	ldrb	r2, [r2, #14]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  *address = value;
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	3b04      	subs	r3, #4
 8002814:	623b      	str	r3, [r7, #32]
  index = 12;
 8002816:	230c      	movs	r3, #12
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800281a:	e027      	b.n	800286c <JPEG_Set_Huff_DHTMem+0x25c>
 800281c:	0800be60 	.word	0x0800be60
 8002820:	0800bf14 	.word	0x0800bf14
 8002824:	0800be28 	.word	0x0800be28
 8002828:	0800be44 	.word	0x0800be44
 800282c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	3301      	adds	r3, #1
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	440b      	add	r3, r1
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002844:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	3b01      	subs	r3, #1
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	5ccb      	ldrb	r3, [r1, r3]
 800284e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002850:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002854:	3a02      	subs	r2, #2
 8002856:	6939      	ldr	r1, [r7, #16]
 8002858:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800285a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	601a      	str	r2, [r3, #0]
    address--;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	3b04      	subs	r3, #4
 8002864:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	3b04      	subs	r3, #4
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286e:	2b03      	cmp	r3, #3
 8002870:	d8de      	bhi.n	8002830 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800287a:	33dc      	adds	r3, #220	@ 0xdc
 800287c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	7c5b      	ldrb	r3, [r3, #17]
 800288a:	061a      	lsls	r2, r3, #24
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	431a      	orrs	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	7c1b      	ldrb	r3, [r3, #16]
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80028a8:	33e8      	adds	r3, #232	@ 0xe8
 80028aa:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <JPEG_Set_Huff_DHTMem+0x458>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	7edb      	ldrb	r3, [r3, #27]
 80028ba:	021a      	lsls	r2, r3, #8
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	7e92      	ldrb	r2, [r2, #26]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	623b      	str	r3, [r7, #32]
  index = 8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028d8:	e021      	b.n	800291e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	7c1b      	ldrb	r3, [r3, #16]
 80028e4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80028e6:	6939      	ldr	r1, [r7, #16]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	440b      	add	r3, r1
 80028ec:	3310      	adds	r3, #16
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80028f2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6939      	ldr	r1, [r7, #16]
 80028fa:	440b      	add	r3, r1
 80028fc:	7c1b      	ldrb	r3, [r3, #16]
 80028fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002900:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002904:	3a02      	subs	r2, #2
 8002906:	6939      	ldr	r1, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800290c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	601a      	str	r2, [r3, #0]
    address--;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	3b04      	subs	r3, #4
 8002916:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	3b04      	subs	r3, #4
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	2b03      	cmp	r3, #3
 8002922:	d8da      	bhi.n	80028da <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800292c:	33e8      	adds	r3, #232	@ 0xe8
 800292e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	061a      	lsls	r2, r3, #24
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	431a      	orrs	r2, r3
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800295a:	33f8      	adds	r3, #248	@ 0xf8
 800295c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <JPEG_Set_Huff_DHTMem+0x458>)
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	7bdb      	ldrb	r3, [r3, #15]
 800296c:	021a      	lsls	r2, r3, #8
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	7b92      	ldrb	r2, [r2, #14]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  *address = value;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	3b04      	subs	r3, #4
 8002984:	623b      	str	r3, [r7, #32]
  index = 12;
 8002986:	230c      	movs	r3, #12
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800298a:	e01d      	b.n	80029c8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	440b      	add	r3, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029a0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	3b01      	subs	r3, #1
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80029ac:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	3a02      	subs	r2, #2
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80029b6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	601a      	str	r2, [r3, #0]
    address--;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	3b04      	subs	r3, #4
 80029c0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	3b04      	subs	r3, #4
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d8de      	bhi.n	800298c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029d6:	33f8      	adds	r3, #248	@ 0xf8
 80029d8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	7c5b      	ldrb	r3, [r3, #17]
 80029e6:	061a      	lsls	r2, r3, #24
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	7c1b      	ldrb	r3, [r3, #16]
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a04:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002a08:	623b      	str	r3, [r7, #32]
  index = 160;
 8002a0a:	23a0      	movs	r3, #160	@ 0xa0
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a0e:	e021      	b.n	8002a54 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	3301      	adds	r3, #1
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	7c1b      	ldrb	r3, [r3, #16]
 8002a1a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a1c:	69b9      	ldr	r1, [r7, #24]
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	440b      	add	r3, r1
 8002a22:	3310      	adds	r3, #16
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a28:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	440b      	add	r3, r1
 8002a32:	7c1b      	ldrb	r3, [r3, #16]
 8002a34:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a36:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	3a02      	subs	r2, #2
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	440a      	add	r2, r1
 8002a40:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002a42:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	601a      	str	r2, [r3, #0]
    address--;
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	3b04      	subs	r3, #4
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d8da      	bhi.n	8002a10 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	372c      	adds	r7, #44	@ 0x2c
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	ffff0000 	.word	0xffff0000

08002a6c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d108      	bne.n	8002a9e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0208 	orr.w	r2, r2, #8
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e007      	b.n	8002aae <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0208 	bic.w	r2, r2, #8
 8002aac:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002afc:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d108      	bne.n	8002b2c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b2a:	e00d      	b.n	8002b48 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d107      	bne.n	8002b48 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d125      	bne.n	8002bb4 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01e      	beq.n	8002bb4 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff f839 	bl	8001bf4 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff f9a5 	bl	8001ede <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002bce:	2108      	movs	r1, #8
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f988 	bl	8002ee6 <JPEG_ReadInputData>
 8002bd6:	e00a      	b.n	8002bee <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002be6:	2101      	movs	r1, #1
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f97c 	bl	8002ee6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c08:	2108      	movs	r1, #8
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f864 	bl	8002cd8 <JPEG_StoreOutputData>
 8002c10:	e00a      	b.n	8002c28 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002c20:	2101      	movs	r1, #1
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f858 	bl	8002cd8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d14b      	bne.n	8002cce <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d107      	bne.n	8002c62 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69d9      	ldr	r1, [r3, #28]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	461a      	mov	r2, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff f954 	bl	8001f32 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d103      	bne.n	8002cc4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff f923 	bl	8001f08 <HAL_JPEG_DecodeCpltCallback>
 8002cc2:	e002      	b.n	8002cca <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff f915 	bl	8001ef4 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d34b      	bcc.n	8002d8c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e031      	b.n	8002d5e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	4413      	add	r3, r2
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0a19      	lsrs	r1, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	b2ca      	uxtb	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0c19      	lsrs	r1, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	3302      	adds	r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	b2ca      	uxtb	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0e19      	lsrs	r1, r3, #24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	3303      	adds	r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	b2ca      	uxtb	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	1d1a      	adds	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3c9      	bcc.n	8002cfa <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f040 80b5 	bne.w	8002ede <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff f8d7 	bl	8001f32 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d8a:	e0a8      	b.n	8002ede <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f240 80a2 	bls.w	8002ede <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e031      	b.n	8002e12 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	4413      	add	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0a19      	lsrs	r1, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0c19      	lsrs	r1, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	3302      	adds	r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	b2ca      	uxtb	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	0e19      	lsrs	r1, r3, #24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	3303      	adds	r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	1d1a      	adds	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3c9      	bcc.n	8002dae <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10b      	bne.n	8002e3e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69d9      	ldr	r1, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff f87e 	bl	8001f32 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e3c:	e04f      	b.n	8002ede <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e015      	b.n	8002e84 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	fa22 f103 	lsr.w	r1, r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2ca      	uxtb	r2, r1
 8002e72:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3301      	adds	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3e5      	bcc.n	8002e58 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	461a      	mov	r2, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f84b 	bl	8001f32 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1c3 0304 	rsb	r3, r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e013      	b.n	8002ed8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	fa22 f103 	lsr.w	r1, r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b2ca      	uxtb	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d9e8      	bls.n	8002eb0 <JPEG_StoreOutputData+0x1d8>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <JPEG_ReadInputData+0x1c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002f02:	2101      	movs	r1, #1
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe ff92 	bl	8001e2e <HAL_JPEG_Pause>
 8002f0a:	e028      	b.n	8002f5e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d906      	bls.n	8002f26 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	e01b      	b.n	8002f5e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d115      	bne.n	8002f5e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fe ffef 	bl	8001f1c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d905      	bls.n	8002f52 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 809f 	bne.w	80030aa <JPEG_ReadInputData+0x1c4>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 809b 	beq.w	80030aa <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d335      	bcc.n	8002fee <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e02d      	b.n	8002fe4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002fa8:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6999      	ldr	r1, [r3, #24]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002fba:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3303      	adds	r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002fd0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	1d1a      	adds	r2, r3, #4
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3cd      	bcc.n	8002f88 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8002fec:	e05d      	b.n	80030aa <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d035      	beq.n	8003060 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e02d      	b.n	8003056 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3301      	adds	r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800301a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6999      	ldr	r1, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3302      	adds	r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800302c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3303      	adds	r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003042:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	3301      	adds	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3cd      	bcc.n	8002ffa <JPEG_ReadInputData+0x114>
}
 800305e:	e024      	b.n	80030aa <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e017      	b.n	800309a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3301      	adds	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d3e3      	bcc.n	800306a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b08b      	sub	sp, #44	@ 0x2c
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3350      	adds	r3, #80	@ 0x50
 80030c6:	61bb      	str	r3, [r7, #24]

  i = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80030cc:	e042      	b.n	8003154 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	e033      	b.n	8003142 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d103      	bne.n	80030f6 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	3364      	adds	r3, #100	@ 0x64
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	e022      	b.n	800313c <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2264      	movs	r2, #100	@ 0x64
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003102:	6a38      	ldr	r0, [r7, #32]
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	4401      	add	r1, r0
 8003108:	4818      	ldr	r0, [pc, #96]	@ (800316c <JPEG_GetQuality+0xb8>)
 800310a:	5c41      	ldrb	r1, [r0, r1]
 800310c:	440a      	add	r2, r1
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	fbb3 f3f2 	udiv	r3, r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b64      	cmp	r3, #100	@ 0x64
 800311a:	d807      	bhi.n	800312c <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003126:	4413      	add	r3, r2
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
 800312a:	e007      	b.n	800313c <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800312c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	4413      	add	r3, r2
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3301      	adds	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d9c8      	bls.n	80030da <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	3304      	adds	r3, #4
 800314c:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	3304      	adds	r3, #4
 8003152:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2b3c      	cmp	r3, #60	@ 0x3c
 8003158:	d9b9      	bls.n	80030ce <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	099b      	lsrs	r3, r3, #6
}
 800315e:	4618      	mov	r0, r3
 8003160:	372c      	adds	r7, #44	@ 0x2c
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	0800bfc8 	.word	0x0800bfc8

08003170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003178:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	2b06      	cmp	r3, #6
 8003182:	d00a      	beq.n	800319a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003184:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e040      	b.n	8003218 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e03e      	b.n	8003218 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800319a:	4b21      	ldr	r3, [pc, #132]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80031a2:	491f      	ldr	r1, [pc, #124]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031aa:	f7fe f945 	bl	8001438 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031b0:	e009      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b2:	f7fe f941 	bl	8001438 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c0:	d901      	bls.n	80031c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e028      	b.n	8003218 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031c6:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d2:	d1ee      	bne.n	80031b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b1e      	cmp	r3, #30
 80031d8:	d008      	beq.n	80031ec <HAL_PWREx_ConfigSupply+0x7c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80031de:	d005      	beq.n	80031ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b1d      	cmp	r3, #29
 80031e4:	d002      	beq.n	80031ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80031ea:	d114      	bne.n	8003216 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031ec:	f7fe f924 	bl	8001438 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031f2:	e009      	b.n	8003208 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031f4:	f7fe f920 	bl	8001438 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003202:	d901      	bls.n	8003208 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_PWREx_ConfigSupply+0xb0>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d1ee      	bne.n	80031f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	58024800 	.word	0x58024800

08003224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	@ 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f000 bc48 	b.w	8003ac8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8088 	beq.w	8003356 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	4b99      	ldr	r3, [pc, #612]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003250:	4b96      	ldr	r3, [pc, #600]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	2b10      	cmp	r3, #16
 800325a:	d007      	beq.n	800326c <HAL_RCC_OscConfig+0x48>
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	2b18      	cmp	r3, #24
 8003260:	d111      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	4b8f      	ldr	r3, [pc, #572]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d06d      	beq.n	8003354 <HAL_RCC_OscConfig+0x130>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d169      	bne.n	8003354 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f000 bc21 	b.w	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x7a>
 8003290:	4b86      	ldr	r3, [pc, #536]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a85      	ldr	r2, [pc, #532]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e02e      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x9c>
 80032a6:	4b81      	ldr	r3, [pc, #516]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a80      	ldr	r2, [pc, #512]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b7e      	ldr	r3, [pc, #504]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0xc0>
 80032ca:	4b78      	ldr	r3, [pc, #480]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a77      	ldr	r2, [pc, #476]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b75      	ldr	r3, [pc, #468]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a74      	ldr	r2, [pc, #464]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xd8>
 80032e4:	4b71      	ldr	r3, [pc, #452]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a70      	ldr	r2, [pc, #448]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b6e      	ldr	r3, [pc, #440]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6d      	ldr	r2, [pc, #436]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f898 	bl	8001438 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe f894 	bl	8001438 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e3d4      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xe8>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe f884 	bl	8001438 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe f880 	bl	8001438 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e3c0      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003346:	4b59      	ldr	r3, [pc, #356]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x110>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80ca 	beq.w	80034f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003364:	4b51      	ldr	r3, [pc, #324]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800336c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800336e:	4b4f      	ldr	r3, [pc, #316]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_RCC_OscConfig+0x166>
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2b18      	cmp	r3, #24
 800337e:	d156      	bne.n	800342e <HAL_RCC_OscConfig+0x20a>
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d151      	bne.n	800342e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338a:	4b48      	ldr	r3, [pc, #288]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e392      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a2:	4b42      	ldr	r3, [pc, #264]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0219 	bic.w	r2, r3, #25
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	493f      	ldr	r1, [pc, #252]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe f840 	bl	8001438 <HAL_GetTick>
 80033b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe f83c 	bl	8001438 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e37c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ce:	4b37      	ldr	r3, [pc, #220]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	f7fe f85d 	bl	8001498 <HAL_GetREVID>
 80033de:	4603      	mov	r3, r0
 80033e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d817      	bhi.n	8003418 <HAL_RCC_OscConfig+0x1f4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b40      	cmp	r3, #64	@ 0x40
 80033ee:	d108      	bne.n	8003402 <HAL_RCC_OscConfig+0x1de>
 80033f0:	4b2e      	ldr	r3, [pc, #184]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80033f8:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003400:	e07a      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b2a      	ldr	r3, [pc, #168]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	031b      	lsls	r3, r3, #12
 8003410:	4926      	ldr	r1, [pc, #152]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003416:	e06f      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003418:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4921      	ldr	r1, [pc, #132]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342c:	e064      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d047      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003436:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0219 	bic.w	r2, r3, #25
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	491a      	ldr	r1, [pc, #104]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd fff6 	bl	8001438 <HAL_GetTick>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fd fff2 	bl	8001438 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e332      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003462:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	f7fe f813 	bl	8001498 <HAL_GetREVID>
 8003472:	4603      	mov	r3, r0
 8003474:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003478:	4293      	cmp	r3, r2
 800347a:	d819      	bhi.n	80034b0 <HAL_RCC_OscConfig+0x28c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b40      	cmp	r3, #64	@ 0x40
 8003482:	d108      	bne.n	8003496 <HAL_RCC_OscConfig+0x272>
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800348c:	4a07      	ldr	r2, [pc, #28]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003492:	6053      	str	r3, [r2, #4]
 8003494:	e030      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
 8003496:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	031b      	lsls	r3, r3, #12
 80034a4:	4901      	ldr	r1, [pc, #4]	@ (80034ac <HAL_RCC_OscConfig+0x288>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e025      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
 80034ac:	58024400 	.word	0x58024400
 80034b0:	4b9a      	ldr	r3, [pc, #616]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	4997      	ldr	r1, [pc, #604]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e018      	b.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b95      	ldr	r3, [pc, #596]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a94      	ldr	r2, [pc, #592]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd ffb1 	bl	8001438 <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fd ffad 	bl	8001438 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e2ed      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034ec:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a9 	beq.w	8003658 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b85      	ldr	r3, [pc, #532]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003510:	4b82      	ldr	r3, [pc, #520]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d007      	beq.n	800352c <HAL_RCC_OscConfig+0x308>
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b18      	cmp	r3, #24
 8003520:	d13a      	bne.n	8003598 <HAL_RCC_OscConfig+0x374>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d135      	bne.n	8003598 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800352c:	4b7b      	ldr	r3, [pc, #492]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x320>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b80      	cmp	r3, #128	@ 0x80
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e2c1      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003544:	f7fd ffa8 	bl	8001498 <HAL_GetREVID>
 8003548:	4603      	mov	r3, r0
 800354a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800354e:	4293      	cmp	r3, r2
 8003550:	d817      	bhi.n	8003582 <HAL_RCC_OscConfig+0x35e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	2b20      	cmp	r3, #32
 8003558:	d108      	bne.n	800356c <HAL_RCC_OscConfig+0x348>
 800355a:	4b70      	ldr	r3, [pc, #448]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003562:	4a6e      	ldr	r2, [pc, #440]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003564:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003568:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800356a:	e075      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800356c:	4b6b      	ldr	r3, [pc, #428]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	4968      	ldr	r1, [pc, #416]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003580:	e06a      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003582:	4b66      	ldr	r3, [pc, #408]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	4962      	ldr	r1, [pc, #392]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003596:	e05f      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d042      	beq.n	8003626 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035a0:	4b5e      	ldr	r3, [pc, #376]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5d      	ldr	r2, [pc, #372]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fd ff44 	bl	8001438 <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035b4:	f7fd ff40 	bl	8001438 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e280      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035c6:	4b55      	ldr	r3, [pc, #340]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035d2:	f7fd ff61 	bl	8001498 <HAL_GetREVID>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035dc:	4293      	cmp	r3, r2
 80035de:	d817      	bhi.n	8003610 <HAL_RCC_OscConfig+0x3ec>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d108      	bne.n	80035fa <HAL_RCC_OscConfig+0x3d6>
 80035e8:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80035f0:	4a4a      	ldr	r2, [pc, #296]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035f6:	6053      	str	r3, [r2, #4]
 80035f8:	e02e      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
 80035fa:	4b48      	ldr	r3, [pc, #288]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	4944      	ldr	r1, [pc, #272]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
 800360e:	e023      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
 8003610:	4b42      	ldr	r3, [pc, #264]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	493f      	ldr	r1, [pc, #252]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
 8003624:	e018      	b.n	8003658 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003626:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a3c      	ldr	r2, [pc, #240]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800362c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd ff01 	bl	8001438 <HAL_GetTick>
 8003636:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800363a:	f7fd fefd 	bl	8001438 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e23d      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800364c:	4b33      	ldr	r3, [pc, #204]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d036      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d019      	beq.n	80036a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003670:	4a2a      	ldr	r2, [pc, #168]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd fede 	bl	8001438 <HAL_GetTick>
 800367c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd feda 	bl	8001438 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e21a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x45c>
 800369e:	e018      	b.n	80036d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a4:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd fec4 	bl	8001438 <HAL_GetTick>
 80036b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fd fec0 	bl	8001438 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e200      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d039      	beq.n	8003752 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01c      	beq.n	8003720 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 80036ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036f2:	f7fd fea1 	bl	8001438 <HAL_GetTick>
 80036f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036fa:	f7fd fe9d 	bl	8001438 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1dd      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <HAL_RCC_OscConfig+0x4f8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x4d6>
 8003718:	e01b      	b.n	8003752 <HAL_RCC_OscConfig+0x52e>
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003720:	4b9b      	ldr	r3, [pc, #620]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a9a      	ldr	r2, [pc, #616]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800372a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800372c:	f7fd fe84 	bl	8001438 <HAL_GetTick>
 8003730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003734:	f7fd fe80 	bl	8001438 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1c0      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003746:	4b92      	ldr	r3, [pc, #584]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8081 	beq.w	8003862 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003760:	4b8c      	ldr	r3, [pc, #560]	@ (8003994 <HAL_RCC_OscConfig+0x770>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a8b      	ldr	r2, [pc, #556]	@ (8003994 <HAL_RCC_OscConfig+0x770>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376c:	f7fd fe64 	bl	8001438 <HAL_GetTick>
 8003770:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fd fe60 	bl	8001438 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1a0      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003786:	4b83      	ldr	r3, [pc, #524]	@ (8003994 <HAL_RCC_OscConfig+0x770>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x584>
 800379a:	4b7d      	ldr	r3, [pc, #500]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	4a7c      	ldr	r2, [pc, #496]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a6:	e02d      	b.n	8003804 <HAL_RCC_OscConfig+0x5e0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x5a6>
 80037b0:	4b77      	ldr	r3, [pc, #476]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a76      	ldr	r2, [pc, #472]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80037bc:	4b74      	ldr	r3, [pc, #464]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4a73      	ldr	r2, [pc, #460]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037c2:	f023 0304 	bic.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x5e0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c8>
 80037d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037de:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x5e0>
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f8:	4b65      	ldr	r3, [pc, #404]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a64      	ldr	r2, [pc, #400]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd fe14 	bl	8001438 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fd fe10 	bl	8001438 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e14e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382a:	4b59      	ldr	r3, [pc, #356]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ee      	beq.n	8003814 <HAL_RCC_OscConfig+0x5f0>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fdfe 	bl	8001438 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd fdfa 	bl	8001438 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e138      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003856:	4b4e      	ldr	r3, [pc, #312]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 812d 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800386c:	4b48      	ldr	r3, [pc, #288]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003874:	2b18      	cmp	r3, #24
 8003876:	f000 80bd 	beq.w	80039f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2b02      	cmp	r3, #2
 8003880:	f040 809e 	bne.w	80039c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003884:	4b42      	ldr	r3, [pc, #264]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a41      	ldr	r2, [pc, #260]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fdd2 	bl	8001438 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd fdce 	bl	8001438 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e10e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038aa:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038ba:	4b37      	ldr	r3, [pc, #220]	@ (8003998 <HAL_RCC_OscConfig+0x774>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	430a      	orrs	r2, r1
 80038ca:	4931      	ldr	r1, [pc, #196]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	3b01      	subs	r3, #1
 80038d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	3b01      	subs	r3, #1
 80038e0:	025b      	lsls	r3, r3, #9
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	3b01      	subs	r3, #1
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003900:	4923      	ldr	r1, [pc, #140]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003906:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003912:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003916:	4b21      	ldr	r3, [pc, #132]	@ (800399c <HAL_RCC_OscConfig+0x778>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	491b      	ldr	r1, [pc, #108]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003926:	4b1a      	ldr	r3, [pc, #104]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	f023 020c 	bic.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	4917      	ldr	r1, [pc, #92]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003934:	4313      	orrs	r3, r2
 8003936:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003938:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	f023 0202 	bic.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003944:	4912      	ldr	r1, [pc, #72]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	4a10      	ldr	r2, [pc, #64]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003956:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	4a0d      	ldr	r2, [pc, #52]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800395c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800396c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	4a07      	ldr	r2, [pc, #28]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397a:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <HAL_RCC_OscConfig+0x76c>)
 8003980:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fd57 	bl	8001438 <HAL_GetTick>
 800398a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800398c:	e011      	b.n	80039b2 <HAL_RCC_OscConfig+0x78e>
 800398e:	bf00      	nop
 8003990:	58024400 	.word	0x58024400
 8003994:	58024800 	.word	0x58024800
 8003998:	fffffc0c 	.word	0xfffffc0c
 800399c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fd4a 	bl	8001438 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e08a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x77c>
 80039be:	e082      	b.n	8003ac6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b43      	ldr	r3, [pc, #268]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a42      	ldr	r2, [pc, #264]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fd34 	bl	8001438 <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fd30 	bl	8001438 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e070      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039e6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x7b0>
 80039f2:	e068      	b.n	8003ac6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039fa:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d031      	beq.n	8003a6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d12a      	bne.n	8003a6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d122      	bne.n	8003a6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d11a      	bne.n	8003a6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0a5b      	lsrs	r3, r3, #9
 8003a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d111      	bne.n	8003a6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	0e1b      	lsrs	r3, r3, #24
 8003a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e02b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a70:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d01f      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	4a11      	ldr	r2, [pc, #68]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a92:	f7fd fcd1 	bl	8001438 <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a98:	bf00      	nop
 8003a9a:	f7fd fccd 	bl	8001438 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d0f9      	beq.n	8003a9a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_RCC_OscConfig+0x8b0>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ab2:	00d2      	lsls	r2, r2, #3
 8003ab4:	4906      	ldr	r1, [pc, #24]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003aba:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <HAL_RCC_OscConfig+0x8ac>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3730      	adds	r7, #48	@ 0x30
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	ffff0007 	.word	0xffff0007

08003ad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e19c      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b8a      	ldr	r3, [pc, #552]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d910      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b87      	ldr	r3, [pc, #540]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 020f 	bic.w	r2, r3, #15
 8003b02:	4985      	ldr	r1, [pc, #532]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b83      	ldr	r3, [pc, #524]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e184      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d908      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b38:	4b78      	ldr	r3, [pc, #480]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4975      	ldr	r1, [pc, #468]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	4b70      	ldr	r3, [pc, #448]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d908      	bls.n	8003b78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b66:	4b6d      	ldr	r3, [pc, #436]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	496a      	ldr	r1, [pc, #424]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	4b64      	ldr	r3, [pc, #400]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d908      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b94:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	495e      	ldr	r1, [pc, #376]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d908      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bc2:	4b56      	ldr	r3, [pc, #344]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	4953      	ldr	r1, [pc, #332]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d908      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f023 020f 	bic.w	r2, r3, #15
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4947      	ldr	r1, [pc, #284]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d055      	beq.n	8003cba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c0e:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4940      	ldr	r1, [pc, #256]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c28:	4b3c      	ldr	r3, [pc, #240]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d121      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0f6      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d115      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0ea      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0de      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c68:	4b2c      	ldr	r3, [pc, #176]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0d6      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c78:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f023 0207 	bic.w	r2, r3, #7
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4925      	ldr	r1, [pc, #148]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8a:	f7fd fbd5 	bl	8001438 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c92:	f7fd fbd1 	bl	8001438 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0be      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d1eb      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d010      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d208      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f023 020f 	bic.w	r2, r3, #15
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	490e      	ldr	r1, [pc, #56]	@ (8003d1c <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d214      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 020f 	bic.w	r2, r3, #15
 8003cfe:	4906      	ldr	r1, [pc, #24]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <HAL_RCC_ClockConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e086      	b.n	8003e26 <HAL_RCC_ClockConfig+0x34e>
 8003d18:	52002000 	.word	0x52002000
 8003d1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	4b3f      	ldr	r3, [pc, #252]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d208      	bcs.n	8003d4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	4939      	ldr	r1, [pc, #228]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d010      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d208      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d6a:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	492e      	ldr	r1, [pc, #184]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	4b28      	ldr	r3, [pc, #160]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d208      	bcs.n	8003daa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4922      	ldr	r1, [pc, #136]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d208      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4917      	ldr	r1, [pc, #92]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dd8:	f000 f834 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	4912      	ldr	r1, [pc, #72]	@ (8003e34 <HAL_RCC_ClockConfig+0x35c>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003df6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_RCC_ClockConfig+0x358>)
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_RCC_ClockConfig+0x35c>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <HAL_RCC_ClockConfig+0x360>)
 8003e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e10:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <HAL_RCC_ClockConfig+0x364>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <HAL_RCC_ClockConfig+0x368>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd fac2 	bl	80013a4 <HAL_InitTick>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	0800be18 	.word	0x0800be18
 8003e38:	24000004 	.word	0x24000004
 8003e3c:	24000000 	.word	0x24000000
 8003e40:	24000008 	.word	0x24000008

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e4a:	4bb3      	ldr	r3, [pc, #716]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e52:	2b18      	cmp	r3, #24
 8003e54:	f200 8155 	bhi.w	8004102 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e58:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08004103 	.word	0x08004103
 8003e68:	08004103 	.word	0x08004103
 8003e6c:	08004103 	.word	0x08004103
 8003e70:	08004103 	.word	0x08004103
 8003e74:	08004103 	.word	0x08004103
 8003e78:	08004103 	.word	0x08004103
 8003e7c:	08004103 	.word	0x08004103
 8003e80:	08003eeb 	.word	0x08003eeb
 8003e84:	08004103 	.word	0x08004103
 8003e88:	08004103 	.word	0x08004103
 8003e8c:	08004103 	.word	0x08004103
 8003e90:	08004103 	.word	0x08004103
 8003e94:	08004103 	.word	0x08004103
 8003e98:	08004103 	.word	0x08004103
 8003e9c:	08004103 	.word	0x08004103
 8003ea0:	08003ef1 	.word	0x08003ef1
 8003ea4:	08004103 	.word	0x08004103
 8003ea8:	08004103 	.word	0x08004103
 8003eac:	08004103 	.word	0x08004103
 8003eb0:	08004103 	.word	0x08004103
 8003eb4:	08004103 	.word	0x08004103
 8003eb8:	08004103 	.word	0x08004103
 8003ebc:	08004103 	.word	0x08004103
 8003ec0:	08003ef7 	.word	0x08003ef7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec4:	4b94      	ldr	r3, [pc, #592]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ed0:	4b91      	ldr	r3, [pc, #580]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	4a90      	ldr	r2, [pc, #576]	@ (800411c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ee2:	e111      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800411c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee6:	61bb      	str	r3, [r7, #24]
      break;
 8003ee8:	e10e      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003eea:	4b8d      	ldr	r3, [pc, #564]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003eec:	61bb      	str	r3, [r7, #24]
      break;
 8003eee:	e10b      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ef2:	61bb      	str	r3, [r7, #24]
      break;
 8003ef4:	e108      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ef6:	4b88      	ldr	r3, [pc, #544]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f00:	4b85      	ldr	r3, [pc, #532]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f0c:	4b82      	ldr	r3, [pc, #520]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f16:	4b80      	ldr	r3, [pc, #512]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80e1 	beq.w	80040fc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f000 8083 	beq.w	8004048 <HAL_RCC_GetSysClockFreq+0x204>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	f200 80a1 	bhi.w	800408c <HAL_RCC_GetSysClockFreq+0x248>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x114>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d056      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f56:	e099      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f58:	4b6f      	ldr	r3, [pc, #444]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f64:	4b6c      	ldr	r3, [pc, #432]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800411c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f8e:	4b62      	ldr	r3, [pc, #392]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fbe:	e087      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800412c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd2:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fe6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004002:	e065      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004130 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004016:	4b40      	ldr	r3, [pc, #256]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004026:	ed97 6a02 	vldr	s12, [r7, #8]
 800402a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800402e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800403a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004046:	e043      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405a:	4b2f      	ldr	r3, [pc, #188]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406a:	ed97 6a02 	vldr	s12, [r7, #8]
 800406e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800407e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800408a:	e021      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800409a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409e:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004128 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	0a5b      	lsrs	r3, r3, #9
 80040d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040da:	3301      	adds	r3, #1
 80040dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f4:	ee17 3a90 	vmov	r3, s15
 80040f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
      break;
 8004100:	e002      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004102:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004104:	61bb      	str	r3, [r7, #24]
      break;
 8004106:	bf00      	nop
  }

  return sysclockfreq;
 8004108:	69bb      	ldr	r3, [r7, #24]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	@ 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	03d09000 	.word	0x03d09000
 8004120:	003d0900 	.word	0x003d0900
 8004124:	017d7840 	.word	0x017d7840
 8004128:	46000000 	.word	0x46000000
 800412c:	4c742400 	.word	0x4c742400
 8004130:	4a742400 	.word	0x4a742400
 8004134:	4bbebc20 	.word	0x4bbebc20

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800413e:	f7ff fe81 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b10      	ldr	r3, [pc, #64]	@ (8004188 <HAL_RCC_GetHCLKFreq+0x50>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490f      	ldr	r1, [pc, #60]	@ (800418c <HAL_RCC_GetHCLKFreq+0x54>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800415c:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <HAL_RCC_GetHCLKFreq+0x50>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	4a09      	ldr	r2, [pc, #36]	@ (800418c <HAL_RCC_GetHCLKFreq+0x54>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <HAL_RCC_GetHCLKFreq+0x58>)
 8004174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004176:	4a07      	ldr	r2, [pc, #28]	@ (8004194 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_RCC_GetHCLKFreq+0x58>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	58024400 	.word	0x58024400
 800418c:	0800be18 	.word	0x0800be18
 8004190:	24000004 	.word	0x24000004
 8004194:	24000000 	.word	0x24000000

08004198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800419c:	f7ff ffcc 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4904      	ldr	r1, [pc, #16]	@ (80041c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	58024400 	.word	0x58024400
 80041c0:	0800be18 	.word	0x0800be18

080041c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b0cc      	sub	sp, #304	@ 0x130
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80041e8:	2500      	movs	r5, #0
 80041ea:	ea54 0305 	orrs.w	r3, r4, r5
 80041ee:	d049      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80041f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041fa:	d02f      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004200:	d828      	bhi.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004206:	d01a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800420c:	d822      	bhi.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004216:	d007      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004218:	e01c      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421a:	4bb8      	ldr	r3, [pc, #736]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	4ab7      	ldr	r2, [pc, #732]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004226:	e01a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800422c:	3308      	adds	r3, #8
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f002 fba1 	bl	8006978 <RCCEx_PLL2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800423c:	e00f      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800423e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004242:	3328      	adds	r3, #40	@ 0x28
 8004244:	2102      	movs	r1, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f002 fc48 	bl	8006adc <RCCEx_PLL3_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800425c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004266:	4ba5      	ldr	r3, [pc, #660]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800426e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004274:	4aa1      	ldr	r2, [pc, #644]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004276:	430b      	orrs	r3, r1
 8004278:	6513      	str	r3, [r2, #80]	@ 0x50
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004280:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004284:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004290:	f04f 0900 	mov.w	r9, #0
 8004294:	ea58 0309 	orrs.w	r3, r8, r9
 8004298:	d047      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800429a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d82a      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042a4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042cf 	.word	0x080042cf
 80042b4:	080042e5 	.word	0x080042e5
 80042b8:	08004303 	.word	0x08004303
 80042bc:	08004303 	.word	0x08004303
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c0:	4b8e      	ldr	r3, [pc, #568]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	4a8d      	ldr	r2, [pc, #564]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042cc:	e01a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042d2:	3308      	adds	r3, #8
 80042d4:	2100      	movs	r1, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 fb4e 	bl	8006978 <RCCEx_PLL2_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042e2:	e00f      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e8:	3328      	adds	r3, #40	@ 0x28
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fbf5 	bl	8006adc <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042f8:	e004      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004304:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800430c:	4b7b      	ldr	r3, [pc, #492]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004310:	f023 0107 	bic.w	r1, r3, #7
 8004314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	4a78      	ldr	r2, [pc, #480]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004326:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800432a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004336:	f04f 0b00 	mov.w	fp, #0
 800433a:	ea5a 030b 	orrs.w	r3, sl, fp
 800433e:	d04c      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434a:	d030      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800434c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004350:	d829      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004352:	2bc0      	cmp	r3, #192	@ 0xc0
 8004354:	d02d      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004356:	2bc0      	cmp	r3, #192	@ 0xc0
 8004358:	d825      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d018      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d821      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	d007      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800436a:	e01c      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436c:	4b63      	ldr	r3, [pc, #396]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	4a62      	ldr	r2, [pc, #392]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004378:	e01c      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800437a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800437e:	3308      	adds	r3, #8
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f002 faf8 	bl	8006978 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004394:	3328      	adds	r3, #40	@ 0x28
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f002 fb9f 	bl	8006adc <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043ac:	e002      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80043b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043bc:	4b4f      	ldr	r3, [pc, #316]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80043c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ca:	4a4c      	ldr	r2, [pc, #304]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80043e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80043ea:	2300      	movs	r3, #0
 80043ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80043f0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d053      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80043fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004406:	d035      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800440c:	d82e      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800440e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004412:	d031      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004414:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004418:	d828      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800441e:	d01a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004424:	d822      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800442a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800442e:	d007      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004430:	e01c      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004432:	4b32      	ldr	r3, [pc, #200]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	4a31      	ldr	r2, [pc, #196]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800443e:	e01c      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004444:	3308      	adds	r3, #8
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f002 fa95 	bl	8006978 <RCCEx_PLL2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004454:	e011      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800445a:	3328      	adds	r3, #40	@ 0x28
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fb3c 	bl	8006adc <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800446a:	e006      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004472:	e002      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004482:	4b1e      	ldr	r3, [pc, #120]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800448a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800448e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004492:	4a1a      	ldr	r2, [pc, #104]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6593      	str	r3, [r2, #88]	@ 0x58
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800449e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80044a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80044ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80044b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80044bc:	460b      	mov	r3, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	d056      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80044c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80044ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ce:	d038      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80044d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d4:	d831      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044da:	d034      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80044dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044e0:	d82b      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e6:	d01d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80044e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044ec:	d825      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80044f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80044f8:	e01f      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80044fa:	bf00      	nop
 80044fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004500:	4ba2      	ldr	r3, [pc, #648]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	4aa1      	ldr	r2, [pc, #644]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800450a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800450c:	e01c      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800450e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004512:	3308      	adds	r3, #8
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f002 fa2e 	bl	8006978 <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004522:	e011      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004528:	3328      	adds	r3, #40	@ 0x28
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f002 fad5 	bl	8006adc <RCCEx_PLL3_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004548:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004550:	4b8e      	ldr	r3, [pc, #568]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004554:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800455c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004560:	4a8a      	ldr	r2, [pc, #552]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004562:	430b      	orrs	r3, r1
 8004564:	6593      	str	r3, [r2, #88]	@ 0x58
 8004566:	e003      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800456c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800457c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004586:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d03a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004596:	2b30      	cmp	r3, #48	@ 0x30
 8004598:	d01f      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800459a:	2b30      	cmp	r3, #48	@ 0x30
 800459c:	d819      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d00c      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d815      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d019      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d111      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ae:	4b77      	ldr	r3, [pc, #476]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b2:	4a76      	ldr	r2, [pc, #472]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80045ba:	e011      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c0:	3308      	adds	r3, #8
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f002 f9d7 	bl	8006978 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80045e8:	4b68      	ldr	r3, [pc, #416]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80045f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004602:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004612:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800461c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d051      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004626:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004630:	d035      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004636:	d82e      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004638:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800463c:	d031      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800463e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004642:	d828      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004648:	d01a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800464a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464e:	d822      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004658:	d007      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800465a:	e01c      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b4b      	ldr	r3, [pc, #300]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	4a4a      	ldr	r2, [pc, #296]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004668:	e01c      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800466a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466e:	3308      	adds	r3, #8
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f002 f980 	bl	8006978 <RCCEx_PLL2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800467e:	e011      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004680:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004684:	3328      	adds	r3, #40	@ 0x28
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fa27 	bl	8006adc <RCCEx_PLL3_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80046a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046ac:	4b37      	ldr	r3, [pc, #220]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80046b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ba:	4a34      	ldr	r2, [pc, #208]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80046d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046da:	2300      	movs	r3, #0
 80046dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d056      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80046ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f4:	d033      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80046f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046fa:	d82c      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004700:	d02f      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004706:	d826      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800470c:	d02b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800470e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004712:	d820      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004718:	d012      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800471a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800471e:	d81a      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d115      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800472a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472e:	3308      	adds	r3, #8
 8004730:	2101      	movs	r1, #1
 8004732:	4618      	mov	r0, r3
 8004734:	f002 f920 	bl	8006978 <RCCEx_PLL2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800473e:	e015      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004744:	3328      	adds	r3, #40	@ 0x28
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f002 f9c7 	bl	8006adc <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004778:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800477c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004782:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6513      	str	r3, [r2, #80]	@ 0x50
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004794:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80047a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047ae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	d055      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80047b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047c4:	d033      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ca:	d82c      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d0:	d02f      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d6:	d826      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047dc:	d02b      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80047de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e2:	d820      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e8:	d012      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ee:	d81a      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d022      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80047f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047f8:	d115      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047fe:	3308      	adds	r3, #8
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f002 f8b8 	bl	8006978 <RCCEx_PLL2_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800480e:	e015      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004814:	3328      	adds	r3, #40	@ 0x28
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f002 f95f 	bl	8006adc <RCCEx_PLL3_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004824:	e00a      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800482e:	bf00      	nop
 8004830:	e004      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004832:	bf00      	nop
 8004834:	e002      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800483a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004844:	4bb6      	ldr	r3, [pc, #728]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800484c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004854:	4ab2      	ldr	r2, [pc, #712]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004856:	430b      	orrs	r3, r1
 8004858:	6593      	str	r3, [r2, #88]	@ 0x58
 800485a:	e003      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004860:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800487a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800487e:	460b      	mov	r3, r1
 8004880:	4313      	orrs	r3, r2
 8004882:	d02a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	d011      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800488e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004892:	d10a      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004898:	3308      	adds	r3, #8
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f002 f86b 	bl	8006978 <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80048a8:	e004      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80048b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80048bc:	4b98      	ldr	r3, [pc, #608]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80048c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ca:	4a95      	ldr	r2, [pc, #596]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048cc:	430b      	orrs	r3, r1
 80048ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d0:	e003      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d037      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80048fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004904:	d00e      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490a:	d816      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004914:	d111      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004916:	4b82      	ldr	r3, [pc, #520]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	4a81      	ldr	r2, [pc, #516]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800491c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004922:	e00f      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004928:	3308      	adds	r3, #8
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f002 f823 	bl	8006978 <RCCEx_PLL2_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004938:	e004      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004944:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800494c:	4b74      	ldr	r3, [pc, #464]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495a:	4a71      	ldr	r2, [pc, #452]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004966:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800496a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004976:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800497a:	2300      	movs	r3, #0
 800497c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004980:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d03a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800498a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800498e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004990:	2b03      	cmp	r3, #3
 8004992:	d81d      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004994:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049ad 	.word	0x080049ad
 80049a4:	080049bb 	.word	0x080049bb
 80049a8:	080049d9 	.word	0x080049d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	4a5b      	ldr	r2, [pc, #364]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049b8:	e00f      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049be:	3308      	adds	r3, #8
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 ffd8 	bl	8006978 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049e2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	f023 0103 	bic.w	r1, r3, #3
 80049ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f000 80a0 	beq.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a22:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc fd03 	bl	8001438 <HAL_GetTick>
 8004a32:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a36:	e00b      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fc fcfe 	bl	8001438 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	@ 0x64
 8004a46:	d903      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a50:	4b34      	ldr	r3, [pc, #208]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ed      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004a5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d17a      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a64:	4b2e      	ldr	r3, [pc, #184]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004a70:	4053      	eors	r3, r2
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7a:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b26      	ldr	r3, [pc, #152]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	4a25      	ldr	r2, [pc, #148]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b23      	ldr	r3, [pc, #140]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a22      	ldr	r2, [pc, #136]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a9e:	4a20      	ldr	r2, [pc, #128]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004aa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab2:	d118      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fcc0 	bl	8001438 <HAL_GetTick>
 8004ab8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004abc:	e00d      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fc fcbb 	bl	8001438 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004ad8:	e005      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ada:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0eb      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004ae6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004af2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004afe:	d115      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b10:	091a      	lsrs	r2, r3, #4
 8004b12:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	4a02      	ldr	r2, [pc, #8]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6113      	str	r3, [r2, #16]
 8004b1c:	e00c      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
 8004b24:	58024800 	.word	0x58024800
 8004b28:	00ffffcf 	.word	0x00ffffcf
 8004b2c:	4bd4      	ldr	r3, [pc, #848]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4ad3      	ldr	r2, [pc, #844]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b36:	6113      	str	r3, [r2, #16]
 8004b38:	4bd1      	ldr	r3, [pc, #836]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	4acd      	ldr	r2, [pc, #820]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f002 0301 	and.w	r3, r2, #1
 8004b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b72:	2300      	movs	r3, #0
 8004b74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f000 808b 	beq.w	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b8c:	2b28      	cmp	r3, #40	@ 0x28
 8004b8e:	d86b      	bhi.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004b90:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004c71 	.word	0x08004c71
 8004b9c:	08004c69 	.word	0x08004c69
 8004ba0:	08004c69 	.word	0x08004c69
 8004ba4:	08004c69 	.word	0x08004c69
 8004ba8:	08004c69 	.word	0x08004c69
 8004bac:	08004c69 	.word	0x08004c69
 8004bb0:	08004c69 	.word	0x08004c69
 8004bb4:	08004c69 	.word	0x08004c69
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c69 	.word	0x08004c69
 8004bc0:	08004c69 	.word	0x08004c69
 8004bc4:	08004c69 	.word	0x08004c69
 8004bc8:	08004c69 	.word	0x08004c69
 8004bcc:	08004c69 	.word	0x08004c69
 8004bd0:	08004c69 	.word	0x08004c69
 8004bd4:	08004c69 	.word	0x08004c69
 8004bd8:	08004c53 	.word	0x08004c53
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c69 	.word	0x08004c69
 8004be4:	08004c69 	.word	0x08004c69
 8004be8:	08004c69 	.word	0x08004c69
 8004bec:	08004c69 	.word	0x08004c69
 8004bf0:	08004c69 	.word	0x08004c69
 8004bf4:	08004c69 	.word	0x08004c69
 8004bf8:	08004c71 	.word	0x08004c71
 8004bfc:	08004c69 	.word	0x08004c69
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004c69 	.word	0x08004c69
 8004c08:	08004c69 	.word	0x08004c69
 8004c0c:	08004c69 	.word	0x08004c69
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c69 	.word	0x08004c69
 8004c18:	08004c71 	.word	0x08004c71
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c69 	.word	0x08004c69
 8004c24:	08004c69 	.word	0x08004c69
 8004c28:	08004c69 	.word	0x08004c69
 8004c2c:	08004c69 	.word	0x08004c69
 8004c30:	08004c69 	.word	0x08004c69
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c71 	.word	0x08004c71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c40:	3308      	adds	r3, #8
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 fe97 	bl	8006978 <RCCEx_PLL2_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c50:	e00f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c56:	3328      	adds	r3, #40	@ 0x28
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 ff3e 	bl	8006adc <RCCEx_PLL3_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c66:	e004      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c7a:	4b81      	ldr	r3, [pc, #516]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8a:	4a7d      	ldr	r2, [pc, #500]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f002 0302 	and.w	r3, r2, #2
 8004ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cb0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d042      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	d825      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d19 	.word	0x08004d19
 8004cd0:	08004ce5 	.word	0x08004ce5
 8004cd4:	08004cfb 	.word	0x08004cfb
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d19 	.word	0x08004d19
 8004ce0:	08004d19 	.word	0x08004d19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ce8:	3308      	adds	r3, #8
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fe43 	bl	8006978 <RCCEx_PLL2_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cfe:	3328      	adds	r3, #40	@ 0x28
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 feea 	bl	8006adc <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d22:	4b57      	ldr	r3, [pc, #348]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	f023 0107 	bic.w	r1, r3, #7
 8004d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d30:	4a53      	ldr	r2, [pc, #332]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 0304 	and.w	r3, r2, #4
 8004d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d044      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	d825      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004dc1 	.word	0x08004dc1
 8004d78:	08004d8d 	.word	0x08004d8d
 8004d7c:	08004da3 	.word	0x08004da3
 8004d80:	08004dc1 	.word	0x08004dc1
 8004d84:	08004dc1 	.word	0x08004dc1
 8004d88:	08004dc1 	.word	0x08004dc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d90:	3308      	adds	r3, #8
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fdef 	bl	8006978 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004da0:	e00f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004da6:	3328      	adds	r3, #40	@ 0x28
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fe96 	bl	8006adc <RCCEx_PLL3_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dca:	4b2d      	ldr	r3, [pc, #180]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dce:	f023 0107 	bic.w	r1, r3, #7
 8004dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dda:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de0:	e003      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004de6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f002 0320 	and.w	r3, r2, #32
 8004df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d057      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e16:	d035      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e1c:	d82c      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d031      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e28:	d826      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004e2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e2e:	d02d      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004e30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e34:	d820      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3a:	d012      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e40:	d81a      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d024      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e4a:	d115      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e50:	3308      	adds	r3, #8
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 fd8f 	bl	8006978 <RCCEx_PLL2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e60:	e017      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e66:	3328      	adds	r3, #40	@ 0x28
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fe36 	bl	8006adc <RCCEx_PLL3_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e76:	e00c      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e7e:	e008      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004e80:	58024400 	.word	0x58024400
        break;
 8004e84:	bf00      	nop
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e9a:	4bc2      	ldr	r3, [pc, #776]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eaa:	4abe      	ldr	r2, [pc, #760]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6553      	str	r3, [r2, #84]	@ 0x54
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004eb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ed0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d055      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ee2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004ee6:	d033      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004ee8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004eec:	d82c      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef2:	d02f      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef8:	d826      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004efa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004efe:	d02b      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f04:	d820      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0a:	d012      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f10:	d81a      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d022      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d115      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f20:	3308      	adds	r3, #8
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fd27 	bl	8006978 <RCCEx_PLL2_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f30:	e015      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f36:	3328      	adds	r3, #40	@ 0x28
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fdce 	bl	8006adc <RCCEx_PLL3_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004f46:	e00a      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004f50:	bf00      	nop
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f66:	4b8f      	ldr	r3, [pc, #572]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f76:	4a8b      	ldr	r2, [pc, #556]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f7c:	e003      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f96:	2300      	movs	r3, #0
 8004f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f9c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	d055      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004fb2:	d033      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004fb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004fb8:	d82c      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fbe:	d02f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc4:	d826      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004fc6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fca:	d02b      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004fcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004fd0:	d820      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd6:	d012      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004fd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fdc:	d81a      	bhi.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d022      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe6:	d115      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fec:	3308      	adds	r3, #8
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 fcc1 	bl	8006978 <RCCEx_PLL2_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ffc:	e015      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005002:	3328      	adds	r3, #40	@ 0x28
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fd68 	bl	8006adc <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005012:	e00a      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800501a:	e006      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800501c:	bf00      	nop
 800501e:	e004      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005020:	bf00      	nop
 8005022:	e002      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005024:	bf00      	nop
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005032:	4b5c      	ldr	r3, [pc, #368]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800503a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800503e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005042:	4a58      	ldr	r2, [pc, #352]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6593      	str	r3, [r2, #88]	@ 0x58
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800504e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f002 0308 	and.w	r3, r2, #8
 800505e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005068:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d01e      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507e:	d10c      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005084:	3328      	adds	r3, #40	@ 0x28
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f001 fd27 	bl	8006adc <RCCEx_PLL3_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800509a:	4b42      	ldr	r3, [pc, #264]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	4a3e      	ldr	r2, [pc, #248]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f002 0310 	and.w	r3, r2, #16
 80050bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d01e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e2:	3328      	adds	r3, #40	@ 0x28
 80050e4:	2102      	movs	r1, #2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fcf8 	bl	8006adc <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050f8:	4b2a      	ldr	r3, [pc, #168]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005108:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800510a:	430b      	orrs	r3, r1
 800510c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800510e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800511a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005124:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005128:	460b      	mov	r3, r1
 800512a:	4313      	orrs	r3, r2
 800512c:	d040      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800512e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005132:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800513a:	d022      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800513c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005140:	d81b      	bhi.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514a:	d00b      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800514c:	e015      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800514e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005152:	3308      	adds	r3, #8
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f001 fc0e 	bl	8006978 <RCCEx_PLL2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005162:	e00f      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005168:	3328      	adds	r3, #40	@ 0x28
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fcb5 	bl	8006adc <RCCEx_PLL3_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005184:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005190:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800519c:	4a01      	ldr	r2, [pc, #4]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a2:	e005      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80051a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80051bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051be:	2300      	movs	r3, #0
 80051c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80051cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051d8:	d01f      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80051da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051de:	d818      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80051e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e4:	d003      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80051e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ea:	d007      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80051ec:	e011      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ee:	4b64      	ldr	r3, [pc, #400]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	4a63      	ldr	r2, [pc, #396]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80051fa:	e00f      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005200:	3328      	adds	r3, #40	@ 0x28
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f001 fc69 	bl	8006adc <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005210:	e004      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800521a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800521c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005224:	4b56      	ldr	r3, [pc, #344]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800522c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005234:	4a52      	ldr	r2, [pc, #328]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005236:	430b      	orrs	r3, r1
 8005238:	6553      	str	r3, [r2, #84]	@ 0x54
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005240:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005250:	673b      	str	r3, [r7, #112]	@ 0x70
 8005252:	2300      	movs	r3, #0
 8005254:	677b      	str	r3, [r7, #116]	@ 0x74
 8005256:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526e:	d007      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005270:	e011      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005272:	4b43      	ldr	r3, [pc, #268]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	4a42      	ldr	r2, [pc, #264]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800527e:	e00e      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005284:	3308      	adds	r3, #8
 8005286:	2102      	movs	r1, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fb75 	bl	8006978 <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800529c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052a6:	4b36      	ldr	r3, [pc, #216]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	4a32      	ldr	r2, [pc, #200]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80052d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052d2:	2300      	movs	r3, #0
 80052d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d00c      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e4:	3328      	adds	r3, #40	@ 0x28
 80052e6:	2102      	movs	r1, #2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fbf7 	bl	8006adc <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005306:	663b      	str	r3, [r7, #96]	@ 0x60
 8005308:	2300      	movs	r3, #0
 800530a:	667b      	str	r3, [r7, #100]	@ 0x64
 800530c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d03a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005322:	d018      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005328:	d811      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800532a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800532e:	d014      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d80b      	bhi.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800533a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533e:	d106      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4a0e      	ldr	r2, [pc, #56]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800534c:	e008      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005354:	e004      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800535e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005360:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005368:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005370:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005378:	4a01      	ldr	r2, [pc, #4]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800537a:	430b      	orrs	r3, r1
 800537c:	6553      	str	r3, [r2, #84]	@ 0x54
 800537e:	e005      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005388:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800538c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800539a:	2300      	movs	r3, #0
 800539c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800539e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053a2:	460b      	mov	r3, r1
 80053a4:	4313      	orrs	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053a8:	4baa      	ldr	r3, [pc, #680]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b6:	4aa7      	ldr	r2, [pc, #668]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80053c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ca:	2300      	movs	r3, #0
 80053cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80053ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80053e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fc:	2300      	movs	r3, #0
 80053fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005400:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800540a:	4b92      	ldr	r3, [pc, #584]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800540c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a8e      	ldr	r2, [pc, #568]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800541e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40
 800542c:	2300      	movs	r3, #0
 800542e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005430:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d00e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800543a:	4b86      	ldr	r3, [pc, #536]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4a85      	ldr	r2, [pc, #532]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005440:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005444:	6113      	str	r3, [r2, #16]
 8005446:	4b83      	ldr	r3, [pc, #524]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005452:	4a80      	ldr	r2, [pc, #512]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005454:	430b      	orrs	r3, r1
 8005456:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005464:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005466:	2300      	movs	r3, #0
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005474:	4b77      	ldr	r3, [pc, #476]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005478:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800547c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	4a74      	ldr	r2, [pc, #464]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005484:	430b      	orrs	r3, r1
 8005486:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005488:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80054ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	4a67      	ldr	r2, [pc, #412]	@ (8005654 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80054ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	2100      	movs	r1, #0
 80054c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d011      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054da:	3308      	adds	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fa4a 	bl	8006978 <RCCEx_PLL2_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80054ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	2100      	movs	r1, #0
 8005504:	6239      	str	r1, [r7, #32]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
 800550c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005510:	460b      	mov	r3, r1
 8005512:	4313      	orrs	r3, r2
 8005514:	d011      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800551a:	3308      	adds	r3, #8
 800551c:	2101      	movs	r1, #1
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fa2a 	bl	8006978 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800552a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005536:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800553a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	2100      	movs	r1, #0
 8005544:	61b9      	str	r1, [r7, #24]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d011      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800555a:	3308      	adds	r3, #8
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fa0a 	bl	8006978 <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800556a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005576:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800557a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	2100      	movs	r1, #0
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005590:	460b      	mov	r3, r1
 8005592:	4313      	orrs	r3, r2
 8005594:	d011      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559a:	3328      	adds	r3, #40	@ 0x28
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fa9c 	bl	8006adc <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80055aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	2100      	movs	r1, #0
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d011      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055da:	3328      	adds	r3, #40	@ 0x28
 80055dc:	2101      	movs	r1, #1
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fa7c 	bl	8006adc <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80055ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	2100      	movs	r1, #0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fa5c 	bl	8006adc <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800562a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005636:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800563a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800564e:	46bd      	mov	sp, r7
 8005650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005654:	58024400 	.word	0x58024400

08005658 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b090      	sub	sp, #64	@ 0x40
 800565c:	af00      	add	r7, sp, #0
 800565e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005666:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800566a:	430b      	orrs	r3, r1
 800566c:	f040 8094 	bne.w	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005670:	4b9e      	ldr	r3, [pc, #632]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	2b04      	cmp	r3, #4
 800567e:	f200 8087 	bhi.w	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	0800569d 	.word	0x0800569d
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056ed 	.word	0x080056ed
 8005694:	08005789 	.word	0x08005789
 8005698:	08005715 	.word	0x08005715
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800569c:	4b93      	ldr	r3, [pc, #588]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056a8:	d108      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 f810 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056b8:	f000 bd45 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c0:	f000 bd41 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056c4:	4b89      	ldr	r3, [pc, #548]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d0:	d108      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d2:	f107 0318 	add.w	r3, r7, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fd54 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056e0:	f000 bd31 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e8:	f000 bd2d 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056ec:	4b7f      	ldr	r3, [pc, #508]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f8:	d108      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fe94 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005708:	f000 bd1d 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005710:	f000 bd19 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005714:	4b75      	ldr	r3, [pc, #468]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005718:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800571e:	4b73      	ldr	r3, [pc, #460]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d10c      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005730:	4b6e      	ldr	r3, [pc, #440]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	4a6d      	ldr	r2, [pc, #436]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005742:	e01f      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005744:	4b69      	ldr	r3, [pc, #420]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005750:	d106      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005758:	d102      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800575a:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800575c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800575e:	e011      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005760:	4b62      	ldr	r3, [pc, #392]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576c:	d106      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005774:	d102      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005776:	4b60      	ldr	r3, [pc, #384]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005780:	f000 bce1 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005784:	f000 bcdf 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005788:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800578c:	f000 bcdb 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005794:	f000 bcd7 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80057a0:	430b      	orrs	r3, r1
 80057a2:	f040 80ad 	bne.w	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80057a6:	4b51      	ldr	r3, [pc, #324]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b6:	d056      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057be:	f200 8090 	bhi.w	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c6:	f000 8088 	beq.w	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80057ce:	f200 8088 	bhi.w	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	2b80      	cmp	r3, #128	@ 0x80
 80057d6:	d032      	beq.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	2b80      	cmp	r3, #128	@ 0x80
 80057dc:	f200 8081 	bhi.w	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d014      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80057ec:	e079      	b.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057ee:	4b3f      	ldr	r3, [pc, #252]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057fa:	d108      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f000 ff67 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800580a:	f000 bc9c 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005812:	f000 bc98 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005816:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800581e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005822:	d108      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005824:	f107 0318 	add.w	r3, r7, #24
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fcab 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005832:	f000 bc88 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800583a:	f000 bc84 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800583e:	4b2b      	ldr	r3, [pc, #172]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800584a:	d108      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fdeb 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585a:	f000 bc74 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005862:	f000 bc70 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005866:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005870:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d10c      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005882:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	08db      	lsrs	r3, r3, #3
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	4a18      	ldr	r2, [pc, #96]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005894:	e01f      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a2:	d106      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058aa:	d102      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80058ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058b0:	e011      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058be:	d106      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80058c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c6:	d102      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80058d2:	f000 bc38 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058d6:	f000 bc36 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80058da:	4b08      	ldr	r3, [pc, #32]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058de:	f000 bc32 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e6:	f000 bc2e 	b.w	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058ea:	bf00      	nop
 80058ec:	58024400 	.word	0x58024400
 80058f0:	03d09000 	.word	0x03d09000
 80058f4:	003d0900 	.word	0x003d0900
 80058f8:	017d7840 	.word	0x017d7840
 80058fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005904:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005908:	430b      	orrs	r3, r1
 800590a:	f040 809c 	bne.w	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800590e:	4b9e      	ldr	r3, [pc, #632]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005912:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005916:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800591e:	d054      	beq.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005926:	f200 808b 	bhi.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005930:	f000 8083 	beq.w	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800593a:	f200 8081 	bhi.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005944:	d02f      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594c:	d878      	bhi.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800595a:	d012      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800595c:	e070      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800595e:	4b8a      	ldr	r3, [pc, #552]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800596a:	d107      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800596c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f000 feaf 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800597a:	e3e4      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005980:	e3e1      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005982:	4b81      	ldr	r3, [pc, #516]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800598a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800598e:	d107      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005990:	f107 0318 	add.w	r3, r7, #24
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fbf5 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800599e:	e3d2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a4:	e3cf      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059a6:	4b78      	ldr	r3, [pc, #480]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059b2:	d107      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fd37 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059c2:	e3c0      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c8:	e3bd      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d10c      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80059e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059e6:	4b68      	ldr	r3, [pc, #416]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	08db      	lsrs	r3, r3, #3
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	4a66      	ldr	r2, [pc, #408]	@ (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059f8:	e01e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059fa:	4b63      	ldr	r3, [pc, #396]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a06:	d106      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0e:	d102      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a10:	4b5f      	ldr	r3, [pc, #380]	@ (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a14:	e010      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a16:	4b5c      	ldr	r3, [pc, #368]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a22:	d106      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a2c:	4b59      	ldr	r3, [pc, #356]	@ (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a36:	e386      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a38:	e385      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a3a:	4b57      	ldr	r3, [pc, #348]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a3e:	e382      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a44:	e37f      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a4a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	f040 80a7 	bne.w	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005a54:	4b4c      	ldr	r3, [pc, #304]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a64:	d055      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a6c:	f200 8096 	bhi.w	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a76:	f000 8084 	beq.w	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a80:	f200 808c 	bhi.w	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a8a:	d030      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a92:	f200 8083 	bhi.w	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aa2:	d012      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005aa4:	e07a      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aa6:	4b38      	ldr	r3, [pc, #224]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fe0b 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac2:	e340      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e33d      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aca:	4b2f      	ldr	r3, [pc, #188]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad8:	f107 0318 	add.w	r3, r7, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fb51 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ae6:	e32e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aec:	e32b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005afa:	d107      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005afc:	f107 030c 	add.w	r3, r7, #12
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fc93 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0a:	e31c      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b10:	e319      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b12:	4b1d      	ldr	r3, [pc, #116]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d10c      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b2e:	4b16      	ldr	r3, [pc, #88]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	08db      	lsrs	r3, r3, #3
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	4a14      	ldr	r2, [pc, #80]	@ (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b40:	e01e      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b42:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b56:	d102      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b58:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b5c:	e010      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b6a:	d106      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b72:	d102      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b74:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b7e:	e2e2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b80:	e2e1      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b82:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b86:	e2de      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b88:	58024400 	.word	0x58024400
 8005b8c:	03d09000 	.word	0x03d09000
 8005b90:	003d0900 	.word	0x003d0900
 8005b94:	017d7840 	.word	0x017d7840
 8005b98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba0:	e2d1      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005baa:	430b      	orrs	r3, r1
 8005bac:	f040 809c 	bne.w	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005bb0:	4b93      	ldr	r3, [pc, #588]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc0:	d054      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc8:	f200 808b 	bhi.w	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bd2:	f000 8083 	beq.w	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bdc:	f200 8081 	bhi.w	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be6:	d02f      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bee:	d878      	bhi.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bfc:	d012      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005bfe:	e070      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c00:	4b7f      	ldr	r3, [pc, #508]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fd5e 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c1c:	e293      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c22:	e290      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c24:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c30:	d107      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c32:	f107 0318 	add.w	r3, r7, #24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 faa4 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c40:	e281      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c46:	e27e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c48:	4b6d      	ldr	r3, [pc, #436]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c54:	d107      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 030c 	add.w	r3, r7, #12
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fbe6 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c64:	e26f      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c6a:	e26c      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c6c:	4b64      	ldr	r3, [pc, #400]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c76:	4b62      	ldr	r3, [pc, #392]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c88:	4b5d      	ldr	r3, [pc, #372]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	4a5c      	ldr	r2, [pc, #368]	@ (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9a:	e01e      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c9c:	4b58      	ldr	r3, [pc, #352]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cb2:	4b55      	ldr	r3, [pc, #340]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb6:	e010      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cb8:	4b51      	ldr	r3, [pc, #324]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc4:	d106      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ccc:	d102      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cce:	4b4f      	ldr	r3, [pc, #316]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cd2:	e002      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cd8:	e235      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cda:	e234      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce0:	e231      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce6:	e22e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	f040 808f 	bne.w	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005cf6:	4b42      	ldr	r3, [pc, #264]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d06:	d06b      	beq.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d0e:	d874      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d16:	d056      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d1e:	d86c      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d26:	d03b      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d2e:	d864      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d36:	d021      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d3e:	d85c      	bhi.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4c:	d004      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005d4e:	e054      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe fa22 	bl	8004198 <HAL_RCC_GetPCLK1Freq>
 8005d54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d56:	e1f6      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d58:	4b29      	ldr	r3, [pc, #164]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d64:	d107      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d66:	f107 0318 	add.w	r3, r7, #24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa0a 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d74:	e1e7      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7a:	e1e4      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d7c:	4b20      	ldr	r3, [pc, #128]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d88:	d107      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d8a:	f107 030c 	add.w	r3, r7, #12
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fb4c 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d98:	e1d5      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d9e:	e1d2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005da0:	4b17      	ldr	r3, [pc, #92]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d109      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dac:	4b14      	ldr	r3, [pc, #80]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	4a13      	ldr	r2, [pc, #76]	@ (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dbe:	e1c2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc4:	e1bf      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd2:	d102      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dd8:	e1b5      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dde:	e1b2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005de0:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dec:	d102      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005dee:	4b07      	ldr	r3, [pc, #28]	@ (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005df2:	e1a8      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df8:	e1a5      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfe:	e1a2      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e00:	58024400 	.word	0x58024400
 8005e04:	03d09000 	.word	0x03d09000
 8005e08:	003d0900 	.word	0x003d0900
 8005e0c:	017d7840 	.word	0x017d7840
 8005e10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	d173      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e20:	4b9c      	ldr	r3, [pc, #624]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e30:	d02f      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e38:	d863      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d012      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005e48:	e05b      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e4a:	4b92      	ldr	r3, [pc, #584]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e56:	d107      	bne.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e58:	f107 0318 	add.w	r3, r7, #24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f991 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e66:	e16e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e16b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e6e:	4b89      	ldr	r3, [pc, #548]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7c:	f107 030c 	add.w	r3, r7, #12
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fad3 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8a:	e15c      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e90:	e159      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e92:	4b80      	ldr	r3, [pc, #512]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e9c:	4b7d      	ldr	r3, [pc, #500]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d10c      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eae:	4b79      	ldr	r3, [pc, #484]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a77      	ldr	r2, [pc, #476]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec0:	e01e      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ec2:	4b74      	ldr	r3, [pc, #464]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ece:	d106      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ed6:	d102      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ed8:	4b70      	ldr	r3, [pc, #448]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005edc:	e010      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ede:	4b6d      	ldr	r3, [pc, #436]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eea:	d106      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005efe:	e122      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f00:	e121      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f06:	e11e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005f10:	430b      	orrs	r3, r1
 8005f12:	d133      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f14:	4b5f      	ldr	r3, [pc, #380]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2a:	d012      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005f2c:	e023      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f2e:	4b59      	ldr	r3, [pc, #356]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fbc7 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f4a:	e0fc      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f50:	e0f9      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f52:	4b50      	ldr	r3, [pc, #320]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5e:	d107      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f60:	f107 0318 	add.w	r3, r7, #24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f90d 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6e:	e0ea      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f74:	e0e7      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7a:	e0e4      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005f84:	430b      	orrs	r3, r1
 8005f86:	f040 808d 	bne.w	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005f8a:	4b42      	ldr	r3, [pc, #264]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005f92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f9a:	d06b      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fa2:	d874      	bhi.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005faa:	d056      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d86c      	bhi.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fba:	d03b      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fc2:	d864      	bhi.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fca:	d021      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd2:	d85c      	bhi.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005fe2:	e054      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005fe4:	f000 f8b8 	bl	8006158 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fe8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fea:	e0ac      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fec:	4b29      	ldr	r3, [pc, #164]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ff8:	d107      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ffa:	f107 0318 	add.w	r3, r7, #24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f8c0 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006008:	e09d      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800600e:	e09a      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006010:	4b20      	ldr	r3, [pc, #128]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601c:	d107      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa02 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800602c:	e08b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006032:	e088      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006034:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b04      	cmp	r3, #4
 800603e:	d109      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006040:	4b14      	ldr	r3, [pc, #80]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	4a13      	ldr	r2, [pc, #76]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006052:	e078      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	e075      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800605a:	4b0e      	ldr	r3, [pc, #56]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006066:	d102      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006068:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606c:	e06b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006072:	e068      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006074:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006080:	d102      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006082:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006086:	e05e      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800608c:	e05b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006092:	e058      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006094:	58024400 	.word	0x58024400
 8006098:	03d09000 	.word	0x03d09000
 800609c:	003d0900 	.word	0x003d0900
 80060a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80060a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80060ac:	430b      	orrs	r3, r1
 80060ae:	d148      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80060b0:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c0:	d02a      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c8:	d838      	bhi.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d00d      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80060d8:	e030      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060da:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060e6:	d102      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80060e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060ec:	e02b      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f2:	e028      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060f4:	4b16      	ldr	r3, [pc, #88]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006100:	d107      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fae4 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006110:	e019      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006116:	e016      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006118:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006124:	d107      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006126:	f107 0318 	add.w	r3, r7, #24
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f82a 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006134:	e007      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613a:	e004      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006140:	e001      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006148:	4618      	mov	r0, r3
 800614a:	3740      	adds	r7, #64	@ 0x40
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	58024400 	.word	0x58024400
 8006154:	017d7840 	.word	0x017d7840

08006158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800615c:	f7fd ffec 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	@ (800617c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4904      	ldr	r1, [pc, #16]	@ (8006180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	0800be18 	.word	0x0800be18

08006184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	@ 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800618c:	4ba1      	ldr	r3, [pc, #644]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006196:	4b9f      	ldr	r3, [pc, #636]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	0b1b      	lsrs	r3, r3, #12
 800619c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80061ae:	4b99      	ldr	r3, [pc, #612]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8111 	beq.w	80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	f000 8083 	beq.w	80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	f200 80a1 	bhi.w	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d056      	beq.n	800629c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061ee:	e099      	b.n	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f0:	4b88      	ldr	r3, [pc, #544]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02d      	beq.n	8006258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061fc:	4b85      	ldr	r3, [pc, #532]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	4a84      	ldr	r2, [pc, #528]	@ (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006226:	4b7b      	ldr	r3, [pc, #492]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006236:	ed97 6a03 	vldr	s12, [r7, #12]
 800623a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800623e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006256:	e087      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626a:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	ed97 6a03 	vldr	s12, [r7, #12]
 800627e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800628e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629a:	e065      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ae:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062be:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062de:	e043      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f2:	4b48      	ldr	r3, [pc, #288]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a03 	vldr	s12, [r7, #12]
 8006306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006322:	e021      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006346:	ed97 6a03 	vldr	s12, [r7, #12]
 800634a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006368:	4b2a      	ldr	r3, [pc, #168]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	0a5b      	lsrs	r3, r3, #9
 800636e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800637e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006382:	edd7 6a07 	vldr	s13, [r7, #28]
 8006386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800638e:	ee17 2a90 	vmov	r2, s15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006396:	4b1f      	ldr	r3, [pc, #124]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063bc:	ee17 2a90 	vmov	r2, s15
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80063c4:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063de:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ea:	ee17 2a90 	vmov	r2, s15
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063f2:	e008      	b.n	8006406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
}
 8006406:	bf00      	nop
 8006408:	3724      	adds	r7, #36	@ 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	58024400 	.word	0x58024400
 8006418:	03d09000 	.word	0x03d09000
 800641c:	46000000 	.word	0x46000000
 8006420:	4c742400 	.word	0x4c742400
 8006424:	4a742400 	.word	0x4a742400
 8006428:	4bbebc20 	.word	0x4bbebc20

0800642c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	@ 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006434:	4ba1      	ldr	r3, [pc, #644]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800643e:	4b9f      	ldr	r3, [pc, #636]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	0d1b      	lsrs	r3, r3, #20
 8006444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800644a:	4b9c      	ldr	r3, [pc, #624]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006456:	4b99      	ldr	r3, [pc, #612]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	08db      	lsrs	r3, r3, #3
 800645c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8111 	beq.w	800669c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b02      	cmp	r3, #2
 800647e:	f000 8083 	beq.w	8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f200 80a1 	bhi.w	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d056      	beq.n	8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006496:	e099      	b.n	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006498:	4b88      	ldr	r3, [pc, #544]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d02d      	beq.n	8006500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a4:	4b85      	ldr	r3, [pc, #532]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	4a84      	ldr	r2, [pc, #528]	@ (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ce:	4b7b      	ldr	r3, [pc, #492]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064fe:	e087      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b6a      	ldr	r3, [pc, #424]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a03 	vldr	s12, [r7, #12]
 8006526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006542:	e065      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b59      	ldr	r3, [pc, #356]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a03 	vldr	s12, [r7, #12]
 800656a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006586:	e043      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b48      	ldr	r3, [pc, #288]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ca:	e021      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065de:	4b37      	ldr	r3, [pc, #220]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800660e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006610:	4b2a      	ldr	r3, [pc, #168]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	0a5b      	lsrs	r3, r3, #9
 8006616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662a:	edd7 6a07 	vldr	s13, [r7, #28]
 800662e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006636:	ee17 2a90 	vmov	r2, s15
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800663e:	4b1f      	ldr	r3, [pc, #124]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006658:	edd7 6a07 	vldr	s13, [r7, #28]
 800665c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006664:	ee17 2a90 	vmov	r2, s15
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800666c:	4b13      	ldr	r3, [pc, #76]	@ (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006686:	edd7 6a07 	vldr	s13, [r7, #28]
 800668a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800668e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006692:	ee17 2a90 	vmov	r2, s15
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	bf00      	nop
 80066b0:	3724      	adds	r7, #36	@ 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	58024400 	.word	0x58024400
 80066c0:	03d09000 	.word	0x03d09000
 80066c4:	46000000 	.word	0x46000000
 80066c8:	4c742400 	.word	0x4c742400
 80066cc:	4a742400 	.word	0x4a742400
 80066d0:	4bbebc20 	.word	0x4bbebc20

080066d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	@ 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80066e6:	4b9e      	ldr	r3, [pc, #632]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066fc:	4b98      	ldr	r3, [pc, #608]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006714:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8111 	beq.w	8006942 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b02      	cmp	r3, #2
 8006724:	f000 8083 	beq.w	800682e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b02      	cmp	r3, #2
 800672c:	f200 80a1 	bhi.w	8006872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d056      	beq.n	80067ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800673c:	e099      	b.n	8006872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800673e:	4b88      	ldr	r3, [pc, #544]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02d      	beq.n	80067a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800674a:	4b85      	ldr	r3, [pc, #532]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	08db      	lsrs	r3, r3, #3
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	4a83      	ldr	r2, [pc, #524]	@ (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006774:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006784:	ed97 6a03 	vldr	s12, [r7, #12]
 8006788:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800678c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067a4:	e087      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b8:	4b69      	ldr	r3, [pc, #420]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067e8:	e065      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006970 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80067f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fc:	4b58      	ldr	r3, [pc, #352]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006810:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006828:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800682c:	e043      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006838:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006974 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006840:	4b47      	ldr	r3, [pc, #284]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006850:	ed97 6a03 	vldr	s12, [r7, #12]
 8006854:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006870:	e021      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006884:	4b36      	ldr	r3, [pc, #216]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	ed97 6a03 	vldr	s12, [r7, #12]
 8006898:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800689c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80068b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	0a5b      	lsrs	r3, r3, #9
 80068bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068dc:	ee17 2a90 	vmov	r2, s15
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80068e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690a:	ee17 2a90 	vmov	r2, s15
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006916:	0e1b      	lsrs	r3, r3, #24
 8006918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006938:	ee17 2a90 	vmov	r2, s15
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	3724      	adds	r7, #36	@ 0x24
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	58024400 	.word	0x58024400
 8006964:	03d09000 	.word	0x03d09000
 8006968:	46000000 	.word	0x46000000
 800696c:	4c742400 	.word	0x4c742400
 8006970:	4a742400 	.word	0x4a742400
 8006974:	4bbebc20 	.word	0x4bbebc20

08006978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006986:	4b53      	ldr	r3, [pc, #332]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d101      	bne.n	8006996 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e099      	b.n	8006aca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006996:	4b4f      	ldr	r3, [pc, #316]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4e      	ldr	r2, [pc, #312]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 800699c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a2:	f7fa fd49 	bl	8001438 <HAL_GetTick>
 80069a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a8:	e008      	b.n	80069bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069aa:	f7fa fd45 	bl	8001438 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e086      	b.n	8006aca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069bc:	4b45      	ldr	r3, [pc, #276]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f0      	bne.n	80069aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069c8:	4b42      	ldr	r3, [pc, #264]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	493f      	ldr	r1, [pc, #252]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	628b      	str	r3, [r1, #40]	@ 0x28
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	025b      	lsls	r3, r3, #9
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	061b      	lsls	r3, r3, #24
 8006a08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a0c:	4931      	ldr	r1, [pc, #196]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a12:	4b30      	ldr	r3, [pc, #192]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	492d      	ldr	r1, [pc, #180]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a24:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	f023 0220 	bic.w	r2, r3, #32
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4928      	ldr	r1, [pc, #160]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a36:	4b27      	ldr	r3, [pc, #156]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3a:	4a26      	ldr	r2, [pc, #152]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a42:	4b24      	ldr	r3, [pc, #144]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a46:	4b24      	ldr	r3, [pc, #144]	@ (8006ad8 <RCCEx_PLL2_Config+0x160>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	69d2      	ldr	r2, [r2, #28]
 8006a4e:	00d2      	lsls	r2, r2, #3
 8006a50:	4920      	ldr	r1, [pc, #128]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a56:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	f043 0310 	orr.w	r3, r3, #16
 8006a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a68:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a74:	e00f      	b.n	8006a96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a7c:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	4a14      	ldr	r2, [pc, #80]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a88:	e005      	b.n	8006a96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a96:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fa fcc9 	bl	8001438 <HAL_GetTick>
 8006aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aa8:	e008      	b.n	8006abc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006aaa:	f7fa fcc5 	bl	8001438 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	ffff0007 	.word	0xffff0007

08006adc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aea:	4b53      	ldr	r3, [pc, #332]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d101      	bne.n	8006afa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e099      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006afa:	4b4f      	ldr	r3, [pc, #316]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4e      	ldr	r2, [pc, #312]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b06:	f7fa fc97 	bl	8001438 <HAL_GetTick>
 8006b0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b0c:	e008      	b.n	8006b20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b0e:	f7fa fc93 	bl	8001438 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e086      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f0      	bne.n	8006b0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b2c:	4b42      	ldr	r3, [pc, #264]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	051b      	lsls	r3, r3, #20
 8006b3a:	493f      	ldr	r1, [pc, #252]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	025b      	lsls	r3, r3, #9
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	061b      	lsls	r3, r3, #24
 8006b6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b70:	4931      	ldr	r1, [pc, #196]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b76:	4b30      	ldr	r3, [pc, #192]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	492d      	ldr	r1, [pc, #180]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b88:	4b2b      	ldr	r3, [pc, #172]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	4928      	ldr	r1, [pc, #160]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b9a:	4b27      	ldr	r3, [pc, #156]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ba6:	4b24      	ldr	r3, [pc, #144]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006baa:	4b24      	ldr	r3, [pc, #144]	@ (8006c3c <RCCEx_PLL3_Config+0x160>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	69d2      	ldr	r2, [r2, #28]
 8006bb2:	00d2      	lsls	r2, r2, #3
 8006bb4:	4920      	ldr	r1, [pc, #128]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bba:	4b1f      	ldr	r3, [pc, #124]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bd8:	e00f      	b.n	8006bfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d106      	bne.n	8006bee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006be0:	4b15      	ldr	r3, [pc, #84]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	4a14      	ldr	r2, [pc, #80]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006be6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006bea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bec:	e005      	b.n	8006bfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bee:	4b12      	ldr	r3, [pc, #72]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf2:	4a11      	ldr	r2, [pc, #68]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fa fc17 	bl	8001438 <HAL_GetTick>
 8006c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c0c:	e008      	b.n	8006c20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c0e:	f7fa fc13 	bl	8001438 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c20:	4b05      	ldr	r3, [pc, #20]	@ (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	ffff0007 	.word	0xffff0007

08006c40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	@ 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e075      	b.n	8006d3e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fa f9d7 	bl	8001018 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f868 	bl	8006d48 <HAL_SD_InitCard>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e05d      	b.n	8006d3e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fdaf 	bl	80077ec <HAL_SD_GetCardStatus>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e052      	b.n	8006d3e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c98:	7e3b      	ldrb	r3, [r7, #24]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006c9e:	7e7b      	ldrb	r3, [r7, #25]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d10a      	bne.n	8006cc2 <HAL_SD_Init+0x82>
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_SD_Init+0x78>
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cc0:	e00b      	b.n	8006cda <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d104      	bne.n	8006cd4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cd2:	e002      	b.n	8006cda <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fe6d 	bl	80079c0 <HAL_SD_ConfigWideBusOperation>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e026      	b.n	8006d3e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006cf0:	f7fa fba2 	bl	8001438 <HAL_GetTick>
 8006cf4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006cf6:	e011      	b.n	8006d1c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cf8:	f7fa fb9e 	bl	8001438 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d109      	bne.n	8006d1c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e010      	b.n	8006d3e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 ff61 	bl	8007be4 <HAL_SD_GetCardState>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d1e7      	bne.n	8006cf8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	@ 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b08d      	sub	sp, #52	@ 0x34
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006d60:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006d64:	f04f 0100 	mov.w	r1, #0
 8006d68:	f7fe fc76 	bl	8005658 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e070      	b.n	8006e6a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	4a39      	ldr	r2, [pc, #228]	@ (8006e74 <HAL_SD_InitCard+0x12c>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681c      	ldr	r4, [r3, #0]
 8006d9a:	466a      	mov	r2, sp
 8006d9c:	f107 0318 	add.w	r3, r7, #24
 8006da0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006da4:	e882 0003 	stmia.w	r2, {r0, r1}
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dae:	4620      	mov	r0, r4
 8006db0:	f001 ffa6 	bl	8008d00 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 ffe9 	bl	8008d90 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006dd6:	4a28      	ldr	r2, [pc, #160]	@ (8006e78 <HAL_SD_InitCard+0x130>)
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	3301      	adds	r3, #1
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fa fb35 	bl	8001450 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ffea 	bl	8007dc0 <SD_PowerON>
 8006dec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e02e      	b.n	8006e6a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 ff09 	bl	8007c24 <SD_InitCard>
 8006e12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e01b      	b.n	8006e6a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 f83e 	bl	8008ebc <SDMMC_CmdBlockLength>
 8006e40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00f      	beq.n	8006e68 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e7c <HAL_SD_InitCard+0x134>)
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	372c      	adds	r7, #44	@ 0x2c
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd90      	pop	{r4, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	014f8b59 	.word	0x014f8b59
 8006e78:	00012110 	.word	0x00012110
 8006e7c:	1fe00fff 	.word	0x1fe00fff

08006e80 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	@ 0x30
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e08d      	b.n	8006fc4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	f040 8086 	bne.w	8006fc2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	441a      	add	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d907      	bls.n	8006eda <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e074      	b.n	8006fc4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	025a      	lsls	r2, r3, #9
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d002      	beq.n	8006f06 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	025b      	lsls	r3, r3, #9
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f06:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	025b      	lsls	r3, r3, #9
 8006f10:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f12:	2390      	movs	r3, #144	@ 0x90
 8006f14:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f16:	2302      	movs	r3, #2
 8006f18:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f107 0210 	add.w	r2, r7, #16
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 ff99 	bl	8008e64 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f40:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d90a      	bls.n	8006f6e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2282      	movs	r2, #130	@ 0x82
 8006f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 ffef 	bl	8008f48 <SDMMC_CmdReadMultiBlock>
 8006f6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006f6c:	e009      	b.n	8006f82 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2281      	movs	r2, #129	@ 0x81
 8006f72:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 ffc1 	bl	8008f02 <SDMMC_CmdReadSingleBlock>
 8006f80:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8006fcc <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e00a      	b.n	8006fc4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006fbc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e000      	b.n	8006fc4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
  }
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3730      	adds	r7, #48	@ 0x30
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	1fe00fff 	.word	0x1fe00fff

08006fd0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08c      	sub	sp, #48	@ 0x30
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d107      	bne.n	8006ff8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e08d      	b.n	8007114 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	f040 8086 	bne.w	8007112 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800700c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007016:	429a      	cmp	r2, r3
 8007018:	d907      	bls.n	800702a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e074      	b.n	8007114 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2203      	movs	r2, #3
 800702e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2200      	movs	r2, #0
 8007038:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	025a      	lsls	r2, r3, #9
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	2b01      	cmp	r3, #1
 800704e:	d002      	beq.n	8007056 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	025b      	lsls	r3, r3, #9
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007056:	f04f 33ff 	mov.w	r3, #4294967295
 800705a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	025b      	lsls	r3, r3, #9
 8007060:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007062:	2390      	movs	r3, #144	@ 0x90
 8007064:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007066:	2300      	movs	r3, #0
 8007068:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800706a:	2300      	movs	r3, #0
 800706c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800706e:	2300      	movs	r3, #0
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f107 0210 	add.w	r2, r7, #16
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fef1 	bl	8008e64 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007090:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2201      	movs	r2, #1
 80070a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d90a      	bls.n	80070be <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	22a0      	movs	r2, #160	@ 0xa0
 80070ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 ff8d 	bl	8008fd4 <SDMMC_CmdWriteMultiBlock>
 80070ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80070bc:	e009      	b.n	80070d2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2290      	movs	r2, #144	@ 0x90
 80070c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 ff5f 	bl	8008f8e <SDMMC_CmdWriteSingleBlock>
 80070d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a0f      	ldr	r2, [pc, #60]	@ (800711c <HAL_SD_WriteBlocks_DMA+0x14c>)
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e6:	431a      	orrs	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e00a      	b.n	8007114 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800710c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3730      	adds	r7, #48	@ 0x30
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	1fe00fff 	.word	0x1fe00fff

08007120 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d008      	beq.n	800714e <HAL_SD_IRQHandler+0x2e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f926 	bl	8008398 <SD_Read_IT>
 800714c:	e19a      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80ac 	beq.w	80072b6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007166:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b59      	ldr	r3, [pc, #356]	@ (80072d8 <HAL_SD_IRQHandler+0x1b8>)
 8007174:	400b      	ands	r3, r1
 8007176:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007186:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007196:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d038      	beq.n	8007214 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <HAL_SD_IRQHandler+0x96>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d011      	beq.n	80071da <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 ff2e 	bl	800901c <SDMMC_CmdStopTransfer>
 80071c0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f95b 	bl	8007490 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3f      	ldr	r2, [pc, #252]	@ (80072dc <HAL_SD_IRQHandler+0x1bc>)
 80071e0:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <HAL_SD_IRQHandler+0xe4>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f002 fbe1 	bl	80099cc <HAL_SD_RxCpltCallback>
 800720a:	e13b      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f002 fbd3 	bl	80099b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007212:	e137      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8132 	beq.w	8007484 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2200      	movs	r2, #0
 800722e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2200      	movs	r2, #0
 8007236:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_SD_IRQHandler+0x12c>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d011      	beq.n	8007270 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f001 fee3 	bl	800901c <SDMMC_CmdStopTransfer>
 8007256:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d008      	beq.n	8007270 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f910 	bl	8007490 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_SD_IRQHandler+0x172>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f002 fb90 	bl	80099b8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d105      	bne.n	80072ae <HAL_SD_IRQHandler+0x18e>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80eb 	beq.w	8007484 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f002 fb8c 	bl	80099cc <HAL_SD_RxCpltCallback>
}
 80072b4:	e0e6      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <HAL_SD_IRQHandler+0x1c0>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d008      	beq.n	80072e0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f8a8 	bl	8008424 <SD_Write_IT>
 80072d4:	e0d6      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
 80072d6:	bf00      	nop
 80072d8:	ffff3ec5 	.word	0xffff3ec5
 80072dc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 809d 	beq.w	800742a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731c:	f043 0208 	orr.w	r2, r3, #8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007336:	f043 0220 	orr.w	r2, r3, #32
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007350:	f043 0210 	orr.w	r2, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4b      	ldr	r2, [pc, #300]	@ (800748c <HAL_SD_IRQHandler+0x36c>)
 800735e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800736e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800737e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800738e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800739e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fe39 	bl	800901c <SDMMC_CmdStopTransfer>
 80073aa:	4602      	mov	r2, r0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073c4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f851 	bl	8007490 <HAL_SD_ErrorCallback>
}
 80073ee:	e049      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d044      	beq.n	8007484 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d040      	beq.n	8007484 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007410:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2200      	movs	r2, #0
 8007418:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f834 	bl	8007490 <HAL_SD_ErrorCallback>
}
 8007428:	e02c      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d025      	beq.n	8007484 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 f84a 	bl	80084f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007460:	e010      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f832 	bl	80084cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007468:	e00c      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f833 	bl	80084e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800747a:	e003      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f81b 	bl	80084b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007482:	e7ff      	b.n	8007484 <HAL_SD_IRQHandler+0x364>
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	18000f3a 	.word	0x18000f3a

08007490 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b2:	0f9b      	lsrs	r3, r3, #30
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074be:	0e9b      	lsrs	r3, r3, #26
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d0:	0e1b      	lsrs	r3, r3, #24
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007504:	0d1b      	lsrs	r3, r3, #20
 8007506:	b29a      	uxth	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	b2da      	uxtb	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007522:	0bdb      	lsrs	r3, r3, #15
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007534:	0b9b      	lsrs	r3, r3, #14
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	b2da      	uxtb	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007546:	0b5b      	lsrs	r3, r3, #13
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	b2da      	uxtb	r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007558:	0b1b      	lsrs	r3, r3, #12
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	b2da      	uxtb	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2200      	movs	r2, #0
 800756a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d163      	bne.n	800763c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007578:	009a      	lsls	r2, r3, #2
 800757a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007584:	0f92      	lsrs	r2, r2, #30
 8007586:	431a      	orrs	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007590:	0edb      	lsrs	r3, r3, #27
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	b2da      	uxtb	r2, r3
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b4:	0d5b      	lsrs	r3, r3, #21
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c6:	0c9b      	lsrs	r3, r3, #18
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075d8:	0bdb      	lsrs	r3, r3, #15
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	7e1b      	ldrb	r3, [r3, #24]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	3302      	adds	r3, #2
 80075fc:	2201      	movs	r2, #1
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007606:	fb03 f202 	mul.w	r2, r3, r2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	7a1b      	ldrb	r3, [r3, #8]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	2201      	movs	r2, #1
 800761a:	409a      	lsls	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007628:	0a52      	lsrs	r2, r2, #9
 800762a:	fb03 f202 	mul.w	r2, r3, r2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007638:	655a      	str	r2, [r3, #84]	@ 0x54
 800763a:	e031      	b.n	80076a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	2b01      	cmp	r3, #1
 8007642:	d11d      	bne.n	8007680 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007652:	0c1b      	lsrs	r3, r3, #16
 8007654:	431a      	orrs	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	3301      	adds	r3, #1
 8007660:	029a      	lsls	r2, r3, #10
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007674:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
 800767e:	e00f      	b.n	80076a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a58      	ldr	r2, [pc, #352]	@ (80077e8 <HAL_SD_GetCardCSD+0x344>)
 8007686:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e09d      	b.n	80077dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076a4:	0b9b      	lsrs	r3, r3, #14
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b6:	09db      	lsrs	r3, r3, #7
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d8:	0fdb      	lsrs	r3, r3, #31
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e4:	0f5b      	lsrs	r3, r3, #29
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f6:	0e9b      	lsrs	r3, r3, #26
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007708:	0d9b      	lsrs	r3, r3, #22
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	b2da      	uxtb	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800771a:	0d5b      	lsrs	r3, r3, #21
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	b2da      	uxtb	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800774a:	0bdb      	lsrs	r3, r3, #15
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800775e:	0b9b      	lsrs	r3, r3, #14
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007772:	0b5b      	lsrs	r3, r3, #13
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007786:	0b1b      	lsrs	r3, r3, #12
 8007788:	b2db      	uxtb	r3, r3
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	b2da      	uxtb	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800779a:	0a9b      	lsrs	r3, r3, #10
 800779c:	b2db      	uxtb	r3, r3
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	1fe00fff 	.word	0x1fe00fff

080077ec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b094      	sub	sp, #80	@ 0x50
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b03      	cmp	r3, #3
 8007806:	d101      	bne.n	800780c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0a7      	b.n	800795c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fb62 	bl	8007edc <SD_SendSDStatus>
 8007818:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	2b00      	cmp	r3, #0
 800781e:	d011      	beq.n	8007844 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a4f      	ldr	r2, [pc, #316]	@ (8007964 <HAL_SD_GetCardStatus+0x178>)
 8007826:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800782c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007842:	e070      	b.n	8007926 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	b2da      	uxtb	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800786e:	b29a      	uxth	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	0e1b      	lsrs	r3, r3, #24
 8007874:	b29b      	uxth	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	061a      	lsls	r2, r3, #24
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800788a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007894:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	0e1b      	lsrs	r3, r3, #24
 800789a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	0d1b      	lsrs	r3, r3, #20
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	0c1b      	lsrs	r3, r3, #16
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	0a9b      	lsrs	r3, r3, #10
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	b2da      	uxtb	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	b2da      	uxtb	r2, r3
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	0e1b      	lsrs	r3, r3, #24
 8007920:	b2da      	uxtb	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fac4 	bl	8008ebc <SDMMC_CmdBlockLength>
 8007934:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00d      	beq.n	8007958 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a08      	ldr	r2, [pc, #32]	@ (8007964 <HAL_SD_GetCardStatus+0x178>)
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007948:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8007958:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800795c:	4618      	mov	r0, r3
 800795e:	3750      	adds	r7, #80	@ 0x50
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	1fe00fff 	.word	0x1fe00fff

08007968 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b08d      	sub	sp, #52	@ 0x34
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2203      	movs	r2, #3
 80079d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d02e      	beq.n	8007a3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e6:	d106      	bne.n	80079f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80079f4:	e029      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079fc:	d10a      	bne.n	8007a14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fb64 	bl	80080cc <SD_WideBus_Enable>
 8007a04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a12:	e01a      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fba1 	bl	8008162 <SD_WideBus_Disable>
 8007a20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a2e:	e00c      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a3c:	e005      	b.n	8007a4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a42:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a5f      	ldr	r2, [pc, #380]	@ (8007bd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a60:	e096      	b.n	8007b90 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a62:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	f7fd fdf5 	bl	8005658 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a6e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8083 	beq.w	8007b7e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4950      	ldr	r1, [pc, #320]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a96:	fba1 1303 	umull	r1, r3, r1, r3
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d303      	bcc.n	8007aa8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e05a      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab0:	d103      	bne.n	8007aba <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e051      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac2:	d126      	bne.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10e      	bne.n	8007aea <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4a43      	ldr	r2, [pc, #268]	@ (8007bdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d906      	bls.n	8007ae2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4a40      	ldr	r2, [pc, #256]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	0e5b      	lsrs	r3, r3, #25
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e03d      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	61bb      	str	r3, [r7, #24]
 8007ae8:	e039      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	4a39      	ldr	r2, [pc, #228]	@ (8007bdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d906      	bls.n	8007b0a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4a36      	ldr	r2, [pc, #216]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	0e5b      	lsrs	r3, r3, #25
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	e029      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	61bb      	str	r3, [r7, #24]
 8007b10:	e025      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10e      	bne.n	8007b38 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4a30      	ldr	r2, [pc, #192]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d906      	bls.n	8007b30 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4a2c      	ldr	r2, [pc, #176]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	0e1b      	lsrs	r3, r3, #24
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	e016      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e012      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	4a26      	ldr	r2, [pc, #152]	@ (8007be0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d906      	bls.n	8007b58 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4a22      	ldr	r2, [pc, #136]	@ (8007bd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	e002      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681c      	ldr	r4, [r3, #0]
 8007b62:	466a      	mov	r2, sp
 8007b64:	f107 0314 	add.w	r3, r7, #20
 8007b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b70:	f107 0308 	add.w	r3, r7, #8
 8007b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b76:	4620      	mov	r0, r4
 8007b78:	f001 f8c2 	bl	8008d00 <SDMMC_Init>
 8007b7c:	e008      	b.n	8007b90 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f98f 	bl	8008ebc <SDMMC_CmdBlockLength>
 8007b9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00c      	beq.n	8007bc0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007bac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	372c      	adds	r7, #44	@ 0x2c
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd90      	pop	{r4, r7, pc}
 8007bd4:	1fe00fff 	.word	0x1fe00fff
 8007bd8:	55e63b89 	.word	0x55e63b89
 8007bdc:	02faf080 	.word	0x02faf080
 8007be0:	017d7840 	.word	0x017d7840

08007be4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007bf0:	f107 030c 	add.w	r3, r7, #12
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa40 	bl	800807c <SD_SendStatus>
 8007bfc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	0a5b      	lsrs	r3, r3, #9
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c1a:	693b      	ldr	r3, [r7, #16]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b090      	sub	sp, #64	@ 0x40
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007c30:	f7f9 fc02 	bl	8001438 <HAL_GetTick>
 8007c34:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f8b9 	bl	8008db2 <SDMMC_GetPowerState>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007c4a:	e0b5      	b.n	8007db8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d02e      	beq.n	8007cb2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fb04 	bl	8009266 <SDMMC_CmdSendCID>
 8007c5e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <SD_InitCard+0x46>
    {
      return errorstate;
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	e0a6      	b.n	8007db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f8e4 	bl	8008e3e <SDMMC_GetResponse>
 8007c76:	4602      	mov	r2, r0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2104      	movs	r1, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f8db 	bl	8008e3e <SDMMC_GetResponse>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2108      	movs	r1, #8
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f8d2 	bl	8008e3e <SDMMC_GetResponse>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	210c      	movs	r1, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 f8c9 	bl	8008e3e <SDMMC_GetResponse>
 8007cac:	4602      	mov	r2, r0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d01d      	beq.n	8007cf6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007cba:	e019      	b.n	8007cf0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f107 020a 	add.w	r2, r7, #10
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fb0c 	bl	80092e4 <SDMMC_CmdSetRelAdd>
 8007ccc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	e06f      	b.n	8007db8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007cd8:	f7f9 fbae 	bl	8001438 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d902      	bls.n	8007cf0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007cea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cee:	e063      	b.n	8007db8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007cf0:	897b      	ldrh	r3, [r7, #10]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0e2      	beq.n	8007cbc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d036      	beq.n	8007d6c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007cfe:	897b      	ldrh	r3, [r7, #10]
 8007d00:	461a      	mov	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f001 fac6 	bl	80092a4 <SDMMC_CmdSendCSD>
 8007d18:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <SD_InitCard+0x100>
    {
      return errorstate;
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	e049      	b.n	8007db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 f887 	bl	8008e3e <SDMMC_GetResponse>
 8007d30:	4602      	mov	r2, r0
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2104      	movs	r1, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 f87e 	bl	8008e3e <SDMMC_GetResponse>
 8007d42:	4602      	mov	r2, r0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2108      	movs	r1, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f875 	bl	8008e3e <SDMMC_GetResponse>
 8007d54:	4602      	mov	r2, r0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	210c      	movs	r1, #12
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f86c 	bl	8008e3e <SDMMC_GetResponse>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2104      	movs	r1, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f863 	bl	8008e3e <SDMMC_GetResponse>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	0d1a      	lsrs	r2, r3, #20
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fb8c 	bl	80074a4 <HAL_SD_GetCardCSD>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d96:	e00f      	b.n	8007db8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f001 f975 	bl	8009094 <SDMMC_CmdSelDesel>
 8007daa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <SD_InitCard+0x192>
  {
    return errorstate;
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	e000      	b.n	8007db8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3740      	adds	r7, #64	@ 0x40
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f97e 	bl	80090da <SDMMC_CmdGoIdleState>
 8007dde:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <SD_PowerON+0x2a>
  {
    return errorstate;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	e072      	b.n	8007ed0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 f991 	bl	8009116 <SDMMC_CmdOperCond>
 8007df4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dfc:	d10d      	bne.n	8007e1a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 f966 	bl	80090da <SDMMC_CmdGoIdleState>
 8007e0e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <SD_PowerON+0x60>
    {
      return errorstate;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e05a      	b.n	8007ed0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d137      	bne.n	8007e98 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f991 	bl	8009156 <SDMMC_CmdAppCommand>
 8007e34:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d02d      	beq.n	8007e98 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e3c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e40:	e046      	b.n	8007ed0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f984 	bl	8009156 <SDMMC_CmdAppCommand>
 8007e4e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	e03a      	b.n	8007ed0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	491e      	ldr	r1, [pc, #120]	@ (8007ed8 <SD_PowerON+0x118>)
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f99b 	bl	800919c <SDMMC_CmdAppOperCommand>
 8007e66:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e72:	e02d      	b.n	8007ed0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ffdf 	bl	8008e3e <SDMMC_GetResponse>
 8007e80:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	0fdb      	lsrs	r3, r3, #31
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <SD_PowerON+0xce>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <SD_PowerON+0xd0>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]

    count++;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d802      	bhi.n	8007ea8 <SD_PowerON+0xe8>
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0cc      	beq.n	8007e42 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d902      	bls.n	8007eb8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007eb6:	e00b      	b.n	8007ed0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	c1100000 	.word	0xc1100000

08007edc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08c      	sub	sp, #48	@ 0x30
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ee6:	f7f9 faa7 	bl	8001438 <HAL_GetTick>
 8007eea:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 ffa1 	bl	8008e3e <SDMMC_GetResponse>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f06:	d102      	bne.n	8007f0e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f0c:	e0b0      	b.n	8008070 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2140      	movs	r1, #64	@ 0x40
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ffd1 	bl	8008ebc <SDMMC_CmdBlockLength>
 8007f1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	e0a0      	b.n	8008070 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f001 f90b 	bl	8009156 <SDMMC_CmdAppCommand>
 8007f40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	e08d      	b.n	8008070 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f54:	f04f 33ff 	mov.w	r3, #4294967295
 8007f58:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007f5a:	2340      	movs	r3, #64	@ 0x40
 8007f5c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f5e:	2360      	movs	r3, #96	@ 0x60
 8007f60:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f62:	2302      	movs	r3, #2
 8007f64:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f107 0208 	add.w	r2, r7, #8
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 ff73 	bl	8008e64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 f9f3 	bl	800936e <SDMMC_CmdStatusRegister>
 8007f88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d02b      	beq.n	8007fe8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	e069      	b.n	8008070 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d013      	beq.n	8007fd2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fae:	e00d      	b.n	8007fcc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fecd 	bl	8008d54 <SDMMC_ReadFIFO>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	601a      	str	r2, [r3, #0]
        pData++;
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	3301      	adds	r3, #1
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fce:	2b07      	cmp	r3, #7
 8007fd0:	d9ee      	bls.n	8007fb0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fd2:	f7f9 fa31 	bl	8001438 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007fe2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fe6:	e043      	b.n	8008070 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0d2      	beq.n	8007f9c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008004:	2308      	movs	r3, #8
 8008006:	e033      	b.n	8008070 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008016:	2302      	movs	r3, #2
 8008018:	e02a      	b.n	8008070 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d017      	beq.n	8008058 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008028:	2320      	movs	r3, #32
 800802a:	e021      	b.n	8008070 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fe8f 	bl	8008d54 <SDMMC_ReadFIFO>
 8008036:	4602      	mov	r2, r0
 8008038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803a:	601a      	str	r2, [r3, #0]
    pData++;
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	3304      	adds	r3, #4
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008042:	f7f9 f9f9 	bl	8001438 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d102      	bne.n	8008058 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008052:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008056:	e00b      	b.n	8008070 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e2      	bne.n	800802c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a03      	ldr	r2, [pc, #12]	@ (8008078 <SD_SendSDStatus+0x19c>)
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3730      	adds	r7, #48	@ 0x30
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	18000f3a 	.word	0x18000f3a

0800807c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800808c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008090:	e018      	b.n	80080c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f001 f942 	bl	8009328 <SDMMC_CmdSendStatus>
 80080a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	e009      	b.n	80080c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2100      	movs	r1, #0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fec1 	bl	8008e3e <SDMMC_GetResponse>
 80080bc:	4602      	mov	r2, r0
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	2300      	movs	r3, #0
 80080da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 feab 	bl	8008e3e <SDMMC_GetResponse>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f2:	d102      	bne.n	80080fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080f8:	e02f      	b.n	800815a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080fa:	f107 030c 	add.w	r3, r7, #12
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f879 	bl	80081f8 <SD_FindSCR>
 8008106:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	e023      	b.n	800815a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01c      	beq.n	8008156 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008124:	041b      	lsls	r3, r3, #16
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f001 f814 	bl	8009156 <SDMMC_CmdAppCommand>
 800812e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	e00f      	b.n	800815a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2102      	movs	r1, #2
 8008140:	4618      	mov	r0, r3
 8008142:	f001 f84b 	bl	80091dc <SDMMC_CmdBusWidth>
 8008146:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	e003      	b.n	800815a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008152:	2300      	movs	r3, #0
 8008154:	e001      	b.n	800815a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008156:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fe60 	bl	8008e3e <SDMMC_GetResponse>
 800817e:	4603      	mov	r3, r0
 8008180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008188:	d102      	bne.n	8008190 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800818a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800818e:	e02f      	b.n	80081f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f82e 	bl	80081f8 <SD_FindSCR>
 800819c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	e023      	b.n	80081f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01c      	beq.n	80081ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f000 ffc9 	bl	8009156 <SDMMC_CmdAppCommand>
 80081c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	e00f      	b.n	80081f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 f800 	bl	80091dc <SDMMC_CmdBusWidth>
 80081dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	e003      	b.n	80081f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e001      	b.n	80081f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08e      	sub	sp, #56	@ 0x38
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008202:	f7f9 f919 	bl	8001438 <HAL_GetTick>
 8008206:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800820c:	2300      	movs	r3, #0
 800820e:	60bb      	str	r3, [r7, #8]
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2108      	movs	r1, #8
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fe4c 	bl	8008ebc <SDMMC_CmdBlockLength>
 8008224:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <SD_FindSCR+0x38>
  {
    return errorstate;
 800822c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822e:	e0ad      	b.n	800838c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008238:	041b      	lsls	r3, r3, #16
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f000 ff8a 	bl	8009156 <SDMMC_CmdAppCommand>
 8008242:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <SD_FindSCR+0x56>
  {
    return errorstate;
 800824a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824c:	e09e      	b.n	800838c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295
 8008252:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008254:	2308      	movs	r3, #8
 8008256:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008258:	2330      	movs	r3, #48	@ 0x30
 800825a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800825c:	2302      	movs	r3, #2
 800825e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008260:	2300      	movs	r3, #0
 8008262:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008264:	2301      	movs	r3, #1
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f107 0210 	add.w	r2, r7, #16
 8008270:	4611      	mov	r1, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fdf6 	bl	8008e64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 ffd0 	bl	8009222 <SDMMC_CmdSendSCR>
 8008282:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d027      	beq.n	80082da <SD_FindSCR+0xe2>
  {
    return errorstate;
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	e07e      	b.n	800838c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008294:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d113      	bne.n	80082c4 <SD_FindSCR+0xcc>
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d110      	bne.n	80082c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fd54 	bl	8008d54 <SDMMC_ReadFIFO>
 80082ac:	4603      	mov	r3, r0
 80082ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fd4d 	bl	8008d54 <SDMMC_ReadFIFO>
 80082ba:	4603      	mov	r3, r0
 80082bc:	60fb      	str	r3, [r7, #12]
      index++;
 80082be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c0:	3301      	adds	r3, #1
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082c4:	f7f9 f8b8 	bl	8001438 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d102      	bne.n	80082da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082d8:	e058      	b.n	800838c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0d1      	beq.n	800828e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2208      	movs	r2, #8
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008300:	2308      	movs	r3, #8
 8008302:	e043      	b.n	800838c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2202      	movs	r2, #2
 8008318:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	e036      	b.n	800838c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2220      	movs	r2, #32
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008334:	2320      	movs	r3, #32
 8008336:	e029      	b.n	800838c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a15      	ldr	r2, [pc, #84]	@ (8008394 <SD_FindSCR+0x19c>)
 800833e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	061a      	lsls	r2, r3, #24
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800834c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008356:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800835e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008360:	601a      	str	r2, [r3, #0]
    scr++;
 8008362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008364:	3304      	adds	r3, #4
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	061a      	lsls	r2, r3, #24
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008374:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800837e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	0e1b      	lsrs	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3738      	adds	r7, #56	@ 0x38
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	18000f3a 	.word	0x18000f3a

08008398 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	2b1f      	cmp	r3, #31
 80083ac:	d936      	bls.n	800841c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	e027      	b.n	8008404 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fccb 	bl	8008d54 <SDMMC_ReadFIFO>
 80083be:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	3301      	adds	r3, #1
 80083cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3301      	adds	r3, #1
 80083ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	0e1b      	lsrs	r3, r3, #24
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3301      	adds	r3, #1
 80083fc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	3301      	adds	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b07      	cmp	r3, #7
 8008408:	d9d4      	bls.n	80083b4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008414:	f1a3 0220 	sub.w	r2, r3, #32
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800841c:	bf00      	nop
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	2b1f      	cmp	r3, #31
 8008438:	d93a      	bls.n	80084b0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e02b      	b.n	8008498 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	021a      	lsls	r2, r3, #8
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3301      	adds	r3, #1
 800845c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	041a      	lsls	r2, r3, #16
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]
      tmp++;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3301      	adds	r3, #1
 800846e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	061a      	lsls	r2, r3, #24
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	3301      	adds	r3, #1
 8008480:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f107 020c 	add.w	r2, r7, #12
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fc6e 	bl	8008d6e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	3301      	adds	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b07      	cmp	r3, #7
 800849c:	d9d0      	bls.n	8008440 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	f1a3 0220 	sub.w	r2, r3, #32
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	621a      	str	r2, [r3, #32]
  }
}
 80084b0:	bf00      	nop
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e10f      	b.n	800873a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a87      	ldr	r2, [pc, #540]	@ (8008744 <HAL_SPI_Init+0x23c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00f      	beq.n	800854a <HAL_SPI_Init+0x42>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a86      	ldr	r2, [pc, #536]	@ (8008748 <HAL_SPI_Init+0x240>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00a      	beq.n	800854a <HAL_SPI_Init+0x42>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a84      	ldr	r2, [pc, #528]	@ (800874c <HAL_SPI_Init+0x244>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d005      	beq.n	800854a <HAL_SPI_Init+0x42>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b0f      	cmp	r3, #15
 8008544:	d901      	bls.n	800854a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e0f7      	b.n	800873a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fbbc 	bl	8008cc8 <SPI_GetPacketSize>
 8008550:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a7b      	ldr	r2, [pc, #492]	@ (8008744 <HAL_SPI_Init+0x23c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00c      	beq.n	8008576 <HAL_SPI_Init+0x6e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a79      	ldr	r2, [pc, #484]	@ (8008748 <HAL_SPI_Init+0x240>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d007      	beq.n	8008576 <HAL_SPI_Init+0x6e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a78      	ldr	r2, [pc, #480]	@ (800874c <HAL_SPI_Init+0x244>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d002      	beq.n	8008576 <HAL_SPI_Init+0x6e>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b08      	cmp	r3, #8
 8008574:	d811      	bhi.n	800859a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800857a:	4a72      	ldr	r2, [pc, #456]	@ (8008744 <HAL_SPI_Init+0x23c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d009      	beq.n	8008594 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a70      	ldr	r2, [pc, #448]	@ (8008748 <HAL_SPI_Init+0x240>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <HAL_SPI_Init+0x8c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a6f      	ldr	r2, [pc, #444]	@ (800874c <HAL_SPI_Init+0x244>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d104      	bne.n	800859e <HAL_SPI_Init+0x96>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b10      	cmp	r3, #16
 8008598:	d901      	bls.n	800859e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0cd      	b.n	800873a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7f8 fdc6 	bl	8001144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0201 	bic.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80085da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e4:	d119      	bne.n	800861a <HAL_SPI_Init+0x112>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085ee:	d103      	bne.n	80085f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10c      	bne.n	800861a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008608:	d107      	bne.n	800861a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008618:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <HAL_SPI_Init+0x13e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	2b06      	cmp	r3, #6
 800862c:	d90b      	bls.n	8008646 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e007      	b.n	8008656 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865e:	431a      	orrs	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008668:	ea42 0103 	orr.w	r1, r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b6:	ea42 0103 	orr.w	r1, r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d113      	bne.n	80086f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0201 	bic.w	r2, r2, #1
 8008704:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40013000 	.word	0x40013000
 8008748:	40003800 	.word	0x40003800
 800874c:	40003c00 	.word	0x40003c00

08008750 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3320      	adds	r3, #32
 8008766:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008768:	f7f8 fe66 	bl	8001438 <HAL_GetTick>
 800876c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
 800877c:	e1d1      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_SPI_Transmit+0x3a>
 8008784:	88fb      	ldrh	r3, [r7, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e1c9      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_SPI_Transmit+0x4c>
 8008798:	2302      	movs	r3, #2
 800879a:	e1c2      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2203      	movs	r2, #3
 80087a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80087f4:	d108      	bne.n	8008808 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	e009      	b.n	800881c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800881a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	4b96      	ldr	r3, [pc, #600]	@ (8008a7c <HAL_SPI_Transmit+0x32c>)
 8008824:	4013      	ands	r3, r2
 8008826:	88f9      	ldrh	r1, [r7, #6]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	430b      	orrs	r3, r1
 800882e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008848:	d107      	bne.n	800885a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b0f      	cmp	r3, #15
 8008860:	d947      	bls.n	80088f2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008862:	e03f      	b.n	80088e4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b02      	cmp	r3, #2
 8008870:	d114      	bne.n	800889c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6812      	ldr	r2, [r2, #0]
 800887c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800889a:	e023      	b.n	80088e4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800889c:	f7f8 fdcc 	bl	8001438 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d803      	bhi.n	80088b4 <HAL_SPI_Transmit+0x164>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d102      	bne.n	80088ba <HAL_SPI_Transmit+0x16a>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d114      	bne.n	80088e4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f936 	bl	8008b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e11e      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1b9      	bne.n	8008864 <HAL_SPI_Transmit+0x114>
 80088f0:	e0f1      	b.n	8008ad6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b07      	cmp	r3, #7
 80088f8:	f240 80e6 	bls.w	8008ac8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80088fc:	e05d      	b.n	80089ba <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b02      	cmp	r3, #2
 800890a:	d132      	bne.n	8008972 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	d918      	bls.n	800894a <HAL_SPI_Transmit+0x1fa>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d014      	beq.n	800894a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b02      	subs	r3, #2
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008948:	e037      	b.n	80089ba <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894e:	881a      	ldrh	r2, [r3, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008958:	1c9a      	adds	r2, r3, #2
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008970:	e023      	b.n	80089ba <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008972:	f7f8 fd61 	bl	8001438 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d803      	bhi.n	800898a <HAL_SPI_Transmit+0x23a>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d102      	bne.n	8008990 <HAL_SPI_Transmit+0x240>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d114      	bne.n	80089ba <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f8cb 	bl	8008b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e0b3      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d19b      	bne.n	80088fe <HAL_SPI_Transmit+0x1ae>
 80089c6:	e086      	b.n	8008ad6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d154      	bne.n	8008a80 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d918      	bls.n	8008a14 <HAL_SPI_Transmit+0x2c4>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e6:	2b40      	cmp	r3, #64	@ 0x40
 80089e8:	d914      	bls.n	8008a14 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089fa:	1d1a      	adds	r2, r3, #4
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b04      	subs	r3, #4
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a12:	e059      	b.n	8008ac8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d917      	bls.n	8008a50 <HAL_SPI_Transmit+0x300>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d013      	beq.n	8008a50 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2c:	881a      	ldrh	r2, [r3, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a36:	1c9a      	adds	r2, r3, #2
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b02      	subs	r3, #2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a4e:	e03b      	b.n	8008ac8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3320      	adds	r3, #32
 8008a5a:	7812      	ldrb	r2, [r2, #0]
 8008a5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008a7a:	e025      	b.n	8008ac8 <HAL_SPI_Transmit+0x378>
 8008a7c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a80:	f7f8 fcda 	bl	8001438 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d803      	bhi.n	8008a98 <HAL_SPI_Transmit+0x348>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d102      	bne.n	8008a9e <HAL_SPI_Transmit+0x34e>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d114      	bne.n	8008ac8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f844 	bl	8008b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e02c      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f47f af79 	bne.w	80089c8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2108      	movs	r1, #8
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f8c3 	bl	8008c6c <SPI_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008af2:	f043 0220 	orr.w	r2, r3, #32
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f815 	bl	8008b2c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e000      	b.n	8008b22 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008b20:	2300      	movs	r3, #0
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0210 	orr.w	r2, r2, #16
 8008b5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0201 	bic.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6919      	ldr	r1, [r3, #16]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b3c      	ldr	r3, [pc, #240]	@ (8008c68 <SPI_CloseTransfer+0x13c>)
 8008b78:	400b      	ands	r3, r1
 8008b7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d014      	beq.n	8008bc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ba8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0220 	orr.w	r2, r2, #32
 8008bc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d014      	beq.n	8008bf8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bde:	f043 0204 	orr.w	r2, r3, #4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00f      	beq.n	8008c22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00f      	beq.n	8008c4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c32:	f043 0208 	orr.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	fffffc90 	.word	0xfffffc90

08008c6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c7c:	e010      	b.n	8008ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7e:	f7f8 fbdb 	bl	8001438 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d803      	bhi.n	8008c96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d102      	bne.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e00f      	b.n	8008cc0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d0df      	beq.n	8008c7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	08db      	lsrs	r3, r3, #3
 8008ce8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008d00:	b084      	sub	sp, #16
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	f107 001c 	add.w	r0, r7, #28
 8008d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008d16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008d18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008d1a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8008d1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8008d22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8008d26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <SDMMC_Init+0x50>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	b004      	add	sp, #16
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	ffc02c00 	.word	0xffc02c00

08008d54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f043 0203 	orr.w	r2, r3, #3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0303 	and.w	r3, r3, #3
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008dee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008df4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008dfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	4b06      	ldr	r3, [pc, #24]	@ (8008e20 <SDMMC_SendCommand+0x50>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	fffee0c0 	.word	0xfffee0c0

08008e24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	b2db      	uxtb	r3, r3
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4413      	add	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e8a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008e90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008e96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0

}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008eca:	2310      	movs	r3, #16
 8008ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008edc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff ff73 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eee:	2110      	movs	r1, #16
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fa5f 	bl	80093b4 <SDMMC_GetCmdResp1>
 8008ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b088      	sub	sp, #32
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008f10:	2311      	movs	r3, #17
 8008f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f24:	f107 0308 	add.w	r3, r7, #8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ff50 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f34:	2111      	movs	r1, #17
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa3c 	bl	80093b4 <SDMMC_GetCmdResp1>
 8008f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008f56:	2312      	movs	r3, #18
 8008f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff2d 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7a:	2112      	movs	r1, #18
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa19 	bl	80093b4 <SDMMC_GetCmdResp1>
 8008f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f9c:	2318      	movs	r3, #24
 8008f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff ff0a 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc0:	2118      	movs	r1, #24
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f9f6 	bl	80093b4 <SDMMC_GetCmdResp1>
 8008fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fca:	69fb      	ldr	r3, [r7, #28]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3720      	adds	r7, #32
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008fe2:	2319      	movs	r3, #25
 8008fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fee7 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009006:	2119      	movs	r1, #25
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9d3 	bl	80093b4 <SDMMC_GetCmdResp1>
 800900e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009010:	69fb      	ldr	r3, [r7, #28]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3720      	adds	r7, #32
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009028:	230c      	movs	r3, #12
 800902a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800902c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800903a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff feb8 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009060:	4a0b      	ldr	r2, [pc, #44]	@ (8009090 <SDMMC_CmdStopTransfer+0x74>)
 8009062:	210c      	movs	r1, #12
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9a5 	bl	80093b4 <SDMMC_GetCmdResp1>
 800906a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800907e:	d101      	bne.n	8009084 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009080:	2300      	movs	r3, #0
 8009082:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009084:	69fb      	ldr	r3, [r7, #28]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	05f5e100 	.word	0x05f5e100

08009094 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80090a2:	2307      	movs	r3, #7
 80090a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ac:	2300      	movs	r3, #0
 80090ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7ff fe87 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80090c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090c6:	2107      	movs	r1, #7
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f973 	bl	80093b4 <SDMMC_GetCmdResp1>
 80090ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d0:	69fb      	ldr	r3, [r7, #28]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3720      	adds	r7, #32
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b088      	sub	sp, #32
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090ee:	2300      	movs	r3, #0
 80090f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fe66 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fb97 	bl	8009838 <SDMMC_GetCmdError>
 800910a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910c:	69fb      	ldr	r3, [r7, #28]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b088      	sub	sp, #32
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800911e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009124:	2308      	movs	r3, #8
 8009126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800912c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fe46 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fb29 	bl	800979c <SDMMC_GetCmdResp7>
 800914a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914c:	69fb      	ldr	r3, [r7, #28]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b088      	sub	sp, #32
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009164:	2337      	movs	r3, #55	@ 0x37
 8009166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800916c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009178:	f107 0308 	add.w	r3, r7, #8
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fe26 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009188:	2137      	movs	r1, #55	@ 0x37
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f912 	bl	80093b4 <SDMMC_GetCmdResp1>
 8009190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009192:	69fb      	ldr	r3, [r7, #28]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3720      	adds	r7, #32
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80091aa:	2329      	movs	r3, #41	@ 0x29
 80091ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fe03 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa2e 	bl	800962c <SDMMC_GetCmdResp3>
 80091d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d2:	69fb      	ldr	r3, [r7, #28]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80091ea:	2306      	movs	r3, #6
 80091ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fde3 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800920a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800920e:	2106      	movs	r1, #6
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f8cf 	bl	80093b4 <SDMMC_GetCmdResp1>
 8009216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009218:	69fb      	ldr	r3, [r7, #28]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b088      	sub	sp, #32
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800922e:	2333      	movs	r3, #51	@ 0x33
 8009230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800923c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009240:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009242:	f107 0308 	add.w	r3, r7, #8
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fdc1 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800924e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009252:	2133      	movs	r1, #51	@ 0x33
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f8ad 	bl	80093b4 <SDMMC_GetCmdResp1>
 800925a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009272:	2302      	movs	r3, #2
 8009274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800927a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff fd9f 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f980 	bl	8009598 <SDMMC_GetCmdResp2>
 8009298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800929a:	69fb      	ldr	r3, [r7, #28]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80092b2:	2309      	movs	r3, #9
 80092b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80092b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80092ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff fd7f 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f960 	bl	8009598 <SDMMC_GetCmdResp2>
 80092d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092da:	69fb      	ldr	r3, [r7, #28]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80092f2:	2303      	movs	r3, #3
 80092f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009306:	f107 0308 	add.w	r3, r7, #8
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fd5f 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	2103      	movs	r1, #3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9c8 	bl	80096ac <SDMMC_GetCmdResp6>
 800931c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931e:	69fb      	ldr	r3, [r7, #28]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009336:	230d      	movs	r3, #13
 8009338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800933a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800933e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800934a:	f107 0308 	add.w	r3, r7, #8
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fd3d 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800935a:	210d      	movs	r1, #13
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f829 	bl	80093b4 <SDMMC_GetCmdResp1>
 8009362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009364:	69fb      	ldr	r3, [r7, #28]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b088      	sub	sp, #32
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800937a:	230d      	movs	r3, #13
 800937c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800937e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800938c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fd1b 	bl	8008dd0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800939a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939e:	210d      	movs	r1, #13
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f807 	bl	80093b4 <SDMMC_GetCmdResp1>
 80093a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a8:	69fb      	ldr	r3, [r7, #28]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	460b      	mov	r3, r1
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80093c2:	4b70      	ldr	r3, [pc, #448]	@ (8009584 <SDMMC_GetCmdResp1+0x1d0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a70      	ldr	r2, [pc, #448]	@ (8009588 <SDMMC_GetCmdResp1+0x1d4>)
 80093c8:	fba2 2303 	umull	r2, r3, r2, r3
 80093cc:	0a5a      	lsrs	r2, r3, #9
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	fb02 f303 	mul.w	r3, r2, r3
 80093d4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	1e5a      	subs	r2, r3, #1
 80093da:	61fa      	str	r2, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093e4:	e0c9      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4b67      	ldr	r3, [pc, #412]	@ (800958c <SDMMC_GetCmdResp1+0x1d8>)
 80093f0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <SDMMC_GetCmdResp1+0x22>
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1ea      	bne.n	80093d6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2204      	movs	r2, #4
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009412:	2304      	movs	r3, #4
 8009414:	e0b1      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009428:	2301      	movs	r3, #1
 800942a:	e0a6      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a58      	ldr	r2, [pc, #352]	@ (8009590 <SDMMC_GetCmdResp1+0x1dc>)
 8009430:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fcf6 	bl	8008e24 <SDMMC_GetCommandResponse>
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	4293      	cmp	r3, r2
 8009440:	d001      	beq.n	8009446 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009442:	2301      	movs	r3, #1
 8009444:	e099      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009446:	2100      	movs	r1, #0
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff fcf8 	bl	8008e3e <SDMMC_GetResponse>
 800944e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4b50      	ldr	r3, [pc, #320]	@ (8009594 <SDMMC_GetCmdResp1+0x1e0>)
 8009454:	4013      	ands	r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800945a:	2300      	movs	r3, #0
 800945c:	e08d      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da02      	bge.n	800946a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009464:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009468:	e087      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009474:	2340      	movs	r3, #64	@ 0x40
 8009476:	e080      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009482:	2380      	movs	r3, #128	@ 0x80
 8009484:	e079      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009494:	e071      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80094a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094a4:	e069      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80094b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094b4:	e061      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80094c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094c4:	e059      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094d4:	e051      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094e4:	e049      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80094f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80094f4:	e041      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009504:	e039      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009514:	e031      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009520:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009524:	e029      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009530:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009534:	e021      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009540:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009544:	e019      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009550:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009554:	e011      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009560:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009564:	e009      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009570:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009574:	e001      	b.n	800957a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009576:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	24000000 	.word	0x24000000
 8009588:	10624dd3 	.word	0x10624dd3
 800958c:	00200045 	.word	0x00200045
 8009590:	002000c5 	.word	0x002000c5
 8009594:	fdffe008 	.word	0xfdffe008

08009598 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009620 <SDMMC_GetCmdResp2+0x88>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009624 <SDMMC_GetCmdResp2+0x8c>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	0a5b      	lsrs	r3, r3, #9
 80095ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095b0:	fb02 f303 	mul.w	r3, r2, r3
 80095b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	60fa      	str	r2, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095c4:	e026      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ef      	beq.n	80095b6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ea      	bne.n	80095b6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d004      	beq.n	80095f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2204      	movs	r2, #4
 80095f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095f2:	2304      	movs	r3, #4
 80095f4:	e00e      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009608:	2301      	movs	r3, #1
 800960a:	e003      	b.n	8009614 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a06      	ldr	r2, [pc, #24]	@ (8009628 <SDMMC_GetCmdResp2+0x90>)
 8009610:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	24000000 	.word	0x24000000
 8009624:	10624dd3 	.word	0x10624dd3
 8009628:	002000c5 	.word	0x002000c5

0800962c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009634:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <SDMMC_GetCmdResp3+0x74>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1a      	ldr	r2, [pc, #104]	@ (80096a4 <SDMMC_GetCmdResp3+0x78>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	0a5b      	lsrs	r3, r3, #9
 8009640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009644:	fb02 f303 	mul.w	r3, r2, r3
 8009648:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1e5a      	subs	r2, r3, #1
 800964e:	60fa      	str	r2, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d102      	bne.n	800965a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009654:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009658:	e01b      	b.n	8009692 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0ef      	beq.n	800964a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ea      	bne.n	800964a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	d004      	beq.n	800968a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2204      	movs	r2, #4
 8009684:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009686:	2304      	movs	r3, #4
 8009688:	e003      	b.n	8009692 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a06      	ldr	r2, [pc, #24]	@ (80096a8 <SDMMC_GetCmdResp3+0x7c>)
 800968e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	24000000 	.word	0x24000000
 80096a4:	10624dd3 	.word	0x10624dd3
 80096a8:	002000c5 	.word	0x002000c5

080096ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	460b      	mov	r3, r1
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80096ba:	4b35      	ldr	r3, [pc, #212]	@ (8009790 <SDMMC_GetCmdResp6+0xe4>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a35      	ldr	r2, [pc, #212]	@ (8009794 <SDMMC_GetCmdResp6+0xe8>)
 80096c0:	fba2 2303 	umull	r2, r3, r2, r3
 80096c4:	0a5b      	lsrs	r3, r3, #9
 80096c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ca:	fb02 f303 	mul.w	r3, r2, r3
 80096ce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	1e5a      	subs	r2, r3, #1
 80096d4:	61fa      	str	r2, [r7, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096de:	e052      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0ef      	beq.n	80096d0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1ea      	bne.n	80096d0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2204      	movs	r2, #4
 800970a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800970c:	2304      	movs	r3, #4
 800970e:	e03a      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009722:	2301      	movs	r3, #1
 8009724:	e02f      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff fb7c 	bl	8008e24 <SDMMC_GetCommandResponse>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	4293      	cmp	r3, r2
 8009734:	d001      	beq.n	800973a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009736:	2301      	movs	r3, #1
 8009738:	e025      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <SDMMC_GetCmdResp6+0xec>)
 800973e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009740:	2100      	movs	r1, #0
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fb7b 	bl	8008e3e <SDMMC_GetResponse>
 8009748:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	b29a      	uxth	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800975e:	2300      	movs	r3, #0
 8009760:	e011      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800976c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009770:	e009      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800977c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009780:	e001      	b.n	8009786 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009786:	4618      	mov	r0, r3
 8009788:	3720      	adds	r7, #32
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	24000000 	.word	0x24000000
 8009794:	10624dd3 	.word	0x10624dd3
 8009798:	002000c5 	.word	0x002000c5

0800979c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80097a4:	4b22      	ldr	r3, [pc, #136]	@ (8009830 <SDMMC_GetCmdResp7+0x94>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a22      	ldr	r2, [pc, #136]	@ (8009834 <SDMMC_GetCmdResp7+0x98>)
 80097aa:	fba2 2303 	umull	r2, r3, r2, r3
 80097ae:	0a5b      	lsrs	r3, r3, #9
 80097b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
 80097b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	60fa      	str	r2, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097c8:	e02c      	b.n	8009824 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0ef      	beq.n	80097ba <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1ea      	bne.n	80097ba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2204      	movs	r2, #4
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097f6:	2304      	movs	r3, #4
 80097f8:	e014      	b.n	8009824 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800980c:	2301      	movs	r3, #1
 800980e:	e009      	b.n	8009824 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2240      	movs	r2, #64	@ 0x40
 8009820:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009822:	2300      	movs	r3, #0

}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	24000000 	.word	0x24000000
 8009834:	10624dd3 	.word	0x10624dd3

08009838 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009840:	4b11      	ldr	r3, [pc, #68]	@ (8009888 <SDMMC_GetCmdError+0x50>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a11      	ldr	r2, [pc, #68]	@ (800988c <SDMMC_GetCmdError+0x54>)
 8009846:	fba2 2303 	umull	r2, r3, r2, r3
 800984a:	0a5b      	lsrs	r3, r3, #9
 800984c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009850:	fb02 f303 	mul.w	r3, r2, r3
 8009854:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	1e5a      	subs	r2, r3, #1
 800985a:	60fa      	str	r2, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009860:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009864:	e009      	b.n	800987a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0f1      	beq.n	8009856 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a06      	ldr	r2, [pc, #24]	@ (8009890 <SDMMC_GetCmdError+0x58>)
 8009876:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	24000000 	.word	0x24000000
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	002000c5 	.word	0x002000c5

08009894 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009898:	4904      	ldr	r1, [pc, #16]	@ (80098ac <MX_FATFS_Init+0x18>)
 800989a:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <MX_FATFS_Init+0x1c>)
 800989c:	f002 fa4a 	bl	800bd34 <FATFS_LinkDriver>
 80098a0:	4603      	mov	r3, r0
 80098a2:	461a      	mov	r2, r3
 80098a4:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <MX_FATFS_Init+0x20>)
 80098a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	240005f4 	.word	0x240005f4
 80098b0:	0800c088 	.word	0x0800c088
 80098b4:	240005f0 	.word	0x240005f0

080098b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80098bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80098be:	4618      	mov	r0, r3
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80098d2:	f000 f885 	bl	80099e0 <BSP_SD_IsDetected>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d001      	beq.n	80098e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80098dc:	2302      	movs	r3, #2
 80098de:	e012      	b.n	8009906 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80098e0:	480b      	ldr	r0, [pc, #44]	@ (8009910 <BSP_SD_Init+0x48>)
 80098e2:	f7fd f9ad 	bl	8006c40 <HAL_SD_Init>
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80098f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098f4:	4806      	ldr	r0, [pc, #24]	@ (8009910 <BSP_SD_Init+0x48>)
 80098f6:	f7fe f863 	bl	80079c0 <HAL_SD_ConfigWideBusOperation>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009904:	79fb      	ldrb	r3, [r7, #7]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	240004e8 	.word	0x240004e8

08009914 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	4806      	ldr	r0, [pc, #24]	@ (8009944 <BSP_SD_ReadBlocks_DMA+0x30>)
 800992c:	f7fd faa8 	bl	8006e80 <HAL_SD_ReadBlocks_DMA>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800993a:	7dfb      	ldrb	r3, [r7, #23]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	240004e8 	.word	0x240004e8

08009948 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	68f9      	ldr	r1, [r7, #12]
 800995e:	4806      	ldr	r0, [pc, #24]	@ (8009978 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009960:	f7fd fb36 	bl	8006fd0 <HAL_SD_WriteBlocks_DMA>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	240004e8 	.word	0x240004e8

0800997c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009980:	4805      	ldr	r0, [pc, #20]	@ (8009998 <BSP_SD_GetCardState+0x1c>)
 8009982:	f7fe f92f 	bl	8007be4 <HAL_SD_GetCardState>
 8009986:	4603      	mov	r3, r0
 8009988:	2b04      	cmp	r3, #4
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
}
 8009992:	4618      	mov	r0, r3
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	240004e8 	.word	0x240004e8

0800999c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4803      	ldr	r0, [pc, #12]	@ (80099b4 <BSP_SD_GetCardInfo+0x18>)
 80099a8:	f7fd ffde 	bl	8007968 <HAL_SD_GetCardInfo>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	240004e8 	.word	0x240004e8

080099b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80099c0:	f000 f9a0 	bl	8009d04 <BSP_SD_WriteCpltCallback>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80099d4:	f000 f9a2 	bl	8009d1c <BSP_SD_ReadCpltCallback>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80099e6:	2301      	movs	r3, #1
 80099e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80099ea:	f000 f80b 	bl	8009a04 <BSP_PlatformIsDetected>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80099f4:	2300      	movs	r3, #0
 80099f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	b2db      	uxtb	r3, r3
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009a12:	4806      	ldr	r0, [pc, #24]	@ (8009a2c <BSP_PlatformIsDetected+0x28>)
 8009a14:	f7f8 f80c 	bl	8001a30 <HAL_GPIO_ReadPin>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009a22:	79fb      	ldrb	r3, [r7, #7]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	58022000 	.word	0x58022000

08009a30 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009a38:	f7f7 fcfe 	bl	8001438 <HAL_GetTick>
 8009a3c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009a3e:	e006      	b.n	8009a4e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a40:	f7ff ff9c 	bl	800997c <BSP_SD_GetCardState>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e009      	b.n	8009a62 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009a4e:	f7f7 fcf3 	bl	8001438 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d8f0      	bhi.n	8009a40 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <SD_CheckStatus+0x38>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009a7c:	f7ff ff7e 	bl	800997c <BSP_SD_GetCardState>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d107      	bne.n	8009a96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009a86:	4b07      	ldr	r3, [pc, #28]	@ (8009aa4 <SD_CheckStatus+0x38>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <SD_CheckStatus+0x38>)
 8009a94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a96:	4b03      	ldr	r3, [pc, #12]	@ (8009aa4 <SD_CheckStatus+0x38>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b2db      	uxtb	r3, r3
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	2400000d 	.word	0x2400000d

08009aa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009ab2:	f7ff ff09 	bl	80098c8 <BSP_SD_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d107      	bne.n	8009acc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff ffd4 	bl	8009a6c <SD_CheckStatus>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b04      	ldr	r3, [pc, #16]	@ (8009adc <SD_initialize+0x34>)
 8009aca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009acc:	4b03      	ldr	r3, [pc, #12]	@ (8009adc <SD_initialize+0x34>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	2400000d 	.word	0x2400000d

08009ae0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff ffbd 	bl	8009a6c <SD_CheckStatus>
 8009af2:	4603      	mov	r3, r0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b10:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009b14:	f7ff ff8c 	bl	8009a30 <SD_CheckStatusWithTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da01      	bge.n	8009b22 <SD_read+0x26>
  {
    return res;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	e03b      	b.n	8009b9a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	68b8      	ldr	r0, [r7, #8]
 8009b28:	f7ff fef4 	bl	8009914 <BSP_SD_ReadBlocks_DMA>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d132      	bne.n	8009b98 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009b32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba4 <SD_read+0xa8>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009b38:	f7f7 fc7e 	bl	8001438 <HAL_GetTick>
 8009b3c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b3e:	bf00      	nop
 8009b40:	4b18      	ldr	r3, [pc, #96]	@ (8009ba4 <SD_read+0xa8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <SD_read+0x5e>
 8009b48:	f7f7 fc76 	bl	8001438 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d9f2      	bls.n	8009b40 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009b5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ba4 <SD_read+0xa8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	e017      	b.n	8009b98 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009b68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba4 <SD_read+0xa8>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b6e:	f7f7 fc63 	bl	8001438 <HAL_GetTick>
 8009b72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b74:	e007      	b.n	8009b86 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b76:	f7ff ff01 	bl	800997c <BSP_SD_GetCardState>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <SD_read+0x8a>
          {
            res = RES_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009b84:	e008      	b.n	8009b98 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b86:	f7f7 fc57 	bl	8001438 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d9ee      	bls.n	8009b76 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	240005fc 	.word	0x240005fc

08009ba8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009bbc:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <SD_write+0xa8>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009bc2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009bc6:	f7ff ff33 	bl	8009a30 <SD_CheckStatusWithTimeout>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da01      	bge.n	8009bd4 <SD_write+0x2c>
  {
    return res;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	e038      	b.n	8009c46 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f7ff feb5 	bl	8009948 <BSP_SD_WriteBlocks_DMA>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d12f      	bne.n	8009c44 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009be4:	f7f7 fc28 	bl	8001438 <HAL_GetTick>
 8009be8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009bea:	bf00      	nop
 8009bec:	4b18      	ldr	r3, [pc, #96]	@ (8009c50 <SD_write+0xa8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d108      	bne.n	8009c06 <SD_write+0x5e>
 8009bf4:	f7f7 fc20 	bl	8001438 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d9f2      	bls.n	8009bec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009c06:	4b12      	ldr	r3, [pc, #72]	@ (8009c50 <SD_write+0xa8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	75fb      	strb	r3, [r7, #23]
 8009c12:	e017      	b.n	8009c44 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009c14:	4b0e      	ldr	r3, [pc, #56]	@ (8009c50 <SD_write+0xa8>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009c1a:	f7f7 fc0d 	bl	8001438 <HAL_GetTick>
 8009c1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c20:	e007      	b.n	8009c32 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c22:	f7ff feab 	bl	800997c <BSP_SD_GetCardState>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <SD_write+0x8a>
          {
            res = RES_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8009c30:	e008      	b.n	8009c44 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c32:	f7f7 fc01 	bl	8001438 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d9ee      	bls.n	8009c22 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	240005f8 	.word	0x240005f8

08009c54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08c      	sub	sp, #48	@ 0x30
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	603a      	str	r2, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
 8009c60:	460b      	mov	r3, r1
 8009c62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c6a:	4b25      	ldr	r3, [pc, #148]	@ (8009d00 <SD_ioctl+0xac>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <SD_ioctl+0x28>
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e03c      	b.n	8009cf6 <SD_ioctl+0xa2>

  switch (cmd)
 8009c7c:	79bb      	ldrb	r3, [r7, #6]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d834      	bhi.n	8009cec <SD_ioctl+0x98>
 8009c82:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <SD_ioctl+0x34>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009c99 	.word	0x08009c99
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cd3 	.word	0x08009cd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009c9e:	e028      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ca0:	f107 0308 	add.w	r3, r7, #8
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe79 	bl	800999c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009caa:	6a3a      	ldr	r2, [r7, #32]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009cb6:	e01c      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fe6d 	bl	800999c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009cd0:	e00f      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fe60 	bl	800999c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	0a5a      	lsrs	r2, r3, #9
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009cea:	e002      	b.n	8009cf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009cec:	2304      	movs	r3, #4
 8009cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3730      	adds	r7, #48	@ 0x30
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	2400000d 	.word	0x2400000d

08009d04 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009d08:	4b03      	ldr	r3, [pc, #12]	@ (8009d18 <BSP_SD_WriteCpltCallback+0x14>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	240005f8 	.word	0x240005f8

08009d1c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009d20:	4b03      	ldr	r3, [pc, #12]	@ (8009d30 <BSP_SD_ReadCpltCallback+0x14>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	240005fc 	.word	0x240005fc

08009d34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	4a08      	ldr	r2, [pc, #32]	@ (8009d64 <disk_status+0x30>)
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	79fa      	ldrb	r2, [r7, #7]
 8009d4c:	4905      	ldr	r1, [pc, #20]	@ (8009d64 <disk_status+0x30>)
 8009d4e:	440a      	add	r2, r1
 8009d50:	7a12      	ldrb	r2, [r2, #8]
 8009d52:	4610      	mov	r0, r2
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	24000628 	.word	0x24000628

08009d68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d76:	79fb      	ldrb	r3, [r7, #7]
 8009d78:	4a0e      	ldr	r2, [pc, #56]	@ (8009db4 <disk_initialize+0x4c>)
 8009d7a:	5cd3      	ldrb	r3, [r2, r3]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d114      	bne.n	8009daa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	4a0c      	ldr	r2, [pc, #48]	@ (8009db4 <disk_initialize+0x4c>)
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	79fa      	ldrb	r2, [r7, #7]
 8009d8e:	4909      	ldr	r1, [pc, #36]	@ (8009db4 <disk_initialize+0x4c>)
 8009d90:	440a      	add	r2, r1
 8009d92:	7a12      	ldrb	r2, [r2, #8]
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	4a03      	ldr	r2, [pc, #12]	@ (8009db4 <disk_initialize+0x4c>)
 8009da6:	2101      	movs	r1, #1
 8009da8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	24000628 	.word	0x24000628

08009db8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009db8:	b590      	push	{r4, r7, lr}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	4a0a      	ldr	r2, [pc, #40]	@ (8009df4 <disk_read+0x3c>)
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	689c      	ldr	r4, [r3, #8]
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	4a07      	ldr	r2, [pc, #28]	@ (8009df4 <disk_read+0x3c>)
 8009dd8:	4413      	add	r3, r2
 8009dda:	7a18      	ldrb	r0, [r3, #8]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	47a0      	blx	r4
 8009de4:	4603      	mov	r3, r0
 8009de6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd90      	pop	{r4, r7, pc}
 8009df2:	bf00      	nop
 8009df4:	24000628 	.word	0x24000628

08009df8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009df8:	b590      	push	{r4, r7, lr}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	4603      	mov	r3, r0
 8009e06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e34 <disk_write+0x3c>)
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68dc      	ldr	r4, [r3, #12]
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4a07      	ldr	r2, [pc, #28]	@ (8009e34 <disk_write+0x3c>)
 8009e18:	4413      	add	r3, r2
 8009e1a:	7a18      	ldrb	r0, [r3, #8]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	47a0      	blx	r4
 8009e24:	4603      	mov	r3, r0
 8009e26:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	371c      	adds	r7, #28
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd90      	pop	{r4, r7, pc}
 8009e32:	bf00      	nop
 8009e34:	24000628 	.word	0x24000628

08009e38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3301      	adds	r3, #1
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	b21a      	sxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3303      	adds	r3, #3
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	3202      	adds	r2, #2
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	887a      	ldrh	r2, [r7, #2]
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	887b      	ldrh	r3, [r7, #2]
 8009ec8:	0a1b      	lsrs	r3, r3, #8
 8009eca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	887a      	ldrh	r2, [r7, #2]
 8009ed4:	b2d2      	uxtb	r2, r2
 8009ed6:	701a      	strb	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	701a      	strb	r2, [r3, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00d      	beq.n	8009f72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	1c53      	adds	r3, r2, #1
 8009f5a:	613b      	str	r3, [r7, #16]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	6179      	str	r1, [r7, #20]
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f1      	bne.n	8009f56 <mem_cpy+0x1a>
	}
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f7e:	b480      	push	{r7}
 8009f80:	b087      	sub	sp, #28
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	617a      	str	r2, [r7, #20]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1f3      	bne.n	8009f8e <mem_set+0x10>
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009fb4:	b480      	push	{r7}
 8009fb6:	b089      	sub	sp, #36	@ 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	61fb      	str	r3, [r7, #28]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	61fa      	str	r2, [r7, #28]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	61ba      	str	r2, [r7, #24]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	1acb      	subs	r3, r1, r3
 8009fe0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <mem_cmp+0x40>
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0eb      	beq.n	8009fcc <mem_cmp+0x18>

	return r;
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3724      	adds	r7, #36	@ 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a00c:	e002      	b.n	800a014 <chk_chr+0x12>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3301      	adds	r3, #1
 800a012:	607b      	str	r3, [r7, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <chk_chr+0x26>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	4293      	cmp	r3, r2
 800a026:	d1f2      	bne.n	800a00e <chk_chr+0xc>
	return *str;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	781b      	ldrb	r3, [r3, #0]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a042:	2300      	movs	r3, #0
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	e029      	b.n	800a0a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a04c:	4a27      	ldr	r2, [pc, #156]	@ (800a0ec <chk_lock+0xb4>)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	011b      	lsls	r3, r3, #4
 800a052:	4413      	add	r3, r2
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d01d      	beq.n	800a096 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a05a:	4a24      	ldr	r2, [pc, #144]	@ (800a0ec <chk_lock+0xb4>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	4413      	add	r3, r2
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d116      	bne.n	800a09a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a06c:	4a1f      	ldr	r2, [pc, #124]	@ (800a0ec <chk_lock+0xb4>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d10c      	bne.n	800a09a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a080:	4a1a      	ldr	r2, [pc, #104]	@ (800a0ec <chk_lock+0xb4>)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	3308      	adds	r3, #8
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a090:	429a      	cmp	r2, r3
 800a092:	d102      	bne.n	800a09a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a094:	e007      	b.n	800a0a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a096:	2301      	movs	r3, #1
 800a098:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d9d2      	bls.n	800a04c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d109      	bne.n	800a0c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <chk_lock+0x80>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d101      	bne.n	800a0bc <chk_lock+0x84>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e010      	b.n	800a0de <chk_lock+0xa6>
 800a0bc:	2312      	movs	r3, #18
 800a0be:	e00e      	b.n	800a0de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d108      	bne.n	800a0d8 <chk_lock+0xa0>
 800a0c6:	4a09      	ldr	r2, [pc, #36]	@ (800a0ec <chk_lock+0xb4>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	4413      	add	r3, r2
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0d6:	d101      	bne.n	800a0dc <chk_lock+0xa4>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	e000      	b.n	800a0de <chk_lock+0xa6>
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	24000608 	.word	0x24000608

0800a0f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	607b      	str	r3, [r7, #4]
 800a0fa:	e002      	b.n	800a102 <enq_lock+0x12>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d806      	bhi.n	800a116 <enq_lock+0x26>
 800a108:	4a09      	ldr	r2, [pc, #36]	@ (800a130 <enq_lock+0x40>)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	4413      	add	r3, r2
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f2      	bne.n	800a0fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	24000608 	.word	0x24000608

0800a134 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	e01f      	b.n	800a184 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a144:	4a41      	ldr	r2, [pc, #260]	@ (800a24c <inc_lock+0x118>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	011b      	lsls	r3, r3, #4
 800a14a:	4413      	add	r3, r2
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d113      	bne.n	800a17e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a156:	4a3d      	ldr	r2, [pc, #244]	@ (800a24c <inc_lock+0x118>)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a166:	429a      	cmp	r2, r3
 800a168:	d109      	bne.n	800a17e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a16a:	4a38      	ldr	r2, [pc, #224]	@ (800a24c <inc_lock+0x118>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	011b      	lsls	r3, r3, #4
 800a170:	4413      	add	r3, r2
 800a172:	3308      	adds	r3, #8
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d006      	beq.n	800a18c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d9dc      	bls.n	800a144 <inc_lock+0x10>
 800a18a:	e000      	b.n	800a18e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a18c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d132      	bne.n	800a1fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e002      	b.n	800a1a0 <inc_lock+0x6c>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d806      	bhi.n	800a1b4 <inc_lock+0x80>
 800a1a6:	4a29      	ldr	r2, [pc, #164]	@ (800a24c <inc_lock+0x118>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f2      	bne.n	800a19a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d101      	bne.n	800a1be <inc_lock+0x8a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e040      	b.n	800a240 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4922      	ldr	r1, [pc, #136]	@ (800a24c <inc_lock+0x118>)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	440b      	add	r3, r1
 800a1ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	491e      	ldr	r1, [pc, #120]	@ (800a24c <inc_lock+0x118>)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3304      	adds	r3, #4
 800a1da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	695a      	ldr	r2, [r3, #20]
 800a1e0:	491a      	ldr	r1, [pc, #104]	@ (800a24c <inc_lock+0x118>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	440b      	add	r3, r1
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1ec:	4a17      	ldr	r2, [pc, #92]	@ (800a24c <inc_lock+0x118>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	4413      	add	r3, r2
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d009      	beq.n	800a214 <inc_lock+0xe0>
 800a200:	4a12      	ldr	r2, [pc, #72]	@ (800a24c <inc_lock+0x118>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	4413      	add	r3, r2
 800a208:	330c      	adds	r3, #12
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <inc_lock+0xe0>
 800a210:	2300      	movs	r3, #0
 800a212:	e015      	b.n	800a240 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d108      	bne.n	800a22c <inc_lock+0xf8>
 800a21a:	4a0c      	ldr	r2, [pc, #48]	@ (800a24c <inc_lock+0x118>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	4413      	add	r3, r2
 800a222:	330c      	adds	r3, #12
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	e001      	b.n	800a230 <inc_lock+0xfc>
 800a22c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a230:	4906      	ldr	r1, [pc, #24]	@ (800a24c <inc_lock+0x118>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	440b      	add	r3, r1
 800a238:	330c      	adds	r3, #12
 800a23a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3301      	adds	r3, #1
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	24000608 	.word	0x24000608

0800a250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e010      	b.n	800a280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a25e:	4a0d      	ldr	r2, [pc, #52]	@ (800a294 <clear_lock+0x44>)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	011b      	lsls	r3, r3, #4
 800a264:	4413      	add	r3, r2
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d105      	bne.n	800a27a <clear_lock+0x2a>
 800a26e:	4a09      	ldr	r2, [pc, #36]	@ (800a294 <clear_lock+0x44>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	4413      	add	r3, r2
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d9eb      	bls.n	800a25e <clear_lock+0xe>
	}
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	24000608 	.word	0x24000608

0800a298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	78db      	ldrb	r3, [r3, #3]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d034      	beq.n	800a316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7858      	ldrb	r0, [r3, #1]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2bc:	2301      	movs	r3, #1
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	f7ff fd9a 	bl	8009df8 <disk_write>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	73fb      	strb	r3, [r7, #15]
 800a2ce:	e022      	b.n	800a316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	1ad2      	subs	r2, r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d217      	bcs.n	800a316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	789b      	ldrb	r3, [r3, #2]
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	e010      	b.n	800a310 <sync_window+0x78>
					wsect += fs->fsize;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7858      	ldrb	r0, [r3, #1]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a302:	2301      	movs	r3, #1
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	f7ff fd77 	bl	8009df8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d8eb      	bhi.n	800a2ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d01b      	beq.n	800a370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff ffad 	bl	800a298 <sync_window>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d113      	bne.n	800a370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7858      	ldrb	r0, [r3, #1]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a352:	2301      	movs	r3, #1
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	f7ff fd2f 	bl	8009db8 <disk_read>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3b02      	subs	r3, #2
 800a388:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	3b02      	subs	r3, #2
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d301      	bcc.n	800a39a <clust2sect+0x20>
 800a396:	2300      	movs	r3, #0
 800a398:	e008      	b.n	800a3ac <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	895b      	ldrh	r3, [r3, #10]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	fb03 f202 	mul.w	r2, r3, r2
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3aa:	4413      	add	r3, r2
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d904      	bls.n	800a3d8 <get_fat+0x20>
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d302      	bcc.n	800a3de <get_fat+0x26>
		val = 1;	/* Internal error */
 800a3d8:	2301      	movs	r3, #1
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	e08e      	b.n	800a4fc <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a3de:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d061      	beq.n	800a4b0 <get_fat+0xf8>
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	dc7b      	bgt.n	800a4e8 <get_fat+0x130>
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d002      	beq.n	800a3fa <get_fat+0x42>
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d041      	beq.n	800a47c <get_fat+0xc4>
 800a3f8:	e076      	b.n	800a4e8 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	4413      	add	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6a1a      	ldr	r2, [r3, #32]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	0a5b      	lsrs	r3, r3, #9
 800a410:	4413      	add	r3, r2
 800a412:	4619      	mov	r1, r3
 800a414:	6938      	ldr	r0, [r7, #16]
 800a416:	f7ff ff83 	bl	800a320 <move_window>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d166      	bne.n	800a4ee <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	60fa      	str	r2, [r7, #12]
 800a426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	4413      	add	r3, r2
 800a42e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a432:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	6a1a      	ldr	r2, [r3, #32]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0a5b      	lsrs	r3, r3, #9
 800a43c:	4413      	add	r3, r2
 800a43e:	4619      	mov	r1, r3
 800a440:	6938      	ldr	r0, [r7, #16]
 800a442:	f7ff ff6d 	bl	800a320 <move_window>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d152      	bne.n	800a4f2 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4413      	add	r3, r2
 800a456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a45a:	021b      	lsls	r3, r3, #8
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <get_fat+0xba>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	091b      	lsrs	r3, r3, #4
 800a470:	e002      	b.n	800a478 <get_fat+0xc0>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a478:	617b      	str	r3, [r7, #20]
			break;
 800a47a:	e03f      	b.n	800a4fc <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	6a1a      	ldr	r2, [r3, #32]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	0a1b      	lsrs	r3, r3, #8
 800a484:	4413      	add	r3, r2
 800a486:	4619      	mov	r1, r3
 800a488:	6938      	ldr	r0, [r7, #16]
 800a48a:	f7ff ff49 	bl	800a320 <move_window>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d130      	bne.n	800a4f6 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fcc7 	bl	8009e38 <ld_word>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	617b      	str	r3, [r7, #20]
			break;
 800a4ae:	e025      	b.n	800a4fc <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	6a1a      	ldr	r2, [r3, #32]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	09db      	lsrs	r3, r3, #7
 800a4b8:	4413      	add	r3, r2
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6938      	ldr	r0, [r7, #16]
 800a4be:	f7ff ff2f 	bl	800a320 <move_window>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d118      	bne.n	800a4fa <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a4d6:	4413      	add	r3, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fcc5 	bl	8009e68 <ld_dword>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a4e4:	617b      	str	r3, [r7, #20]
			break;
 800a4e6:	e009      	b.n	800a4fc <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e006      	b.n	800a4fc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4ee:	bf00      	nop
 800a4f0:	e004      	b.n	800a4fc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4f2:	bf00      	nop
 800a4f4:	e002      	b.n	800a4fc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4f6:	bf00      	nop
 800a4f8:	e000      	b.n	800a4fc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4fa:	bf00      	nop
		}
	}

	return val;
 800a4fc:	697b      	ldr	r3, [r7, #20]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a506:	b590      	push	{r4, r7, lr}
 800a508:	b089      	sub	sp, #36	@ 0x24
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a512:	2302      	movs	r3, #2
 800a514:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f240 80d9 	bls.w	800a6d0 <put_fat+0x1ca>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	429a      	cmp	r2, r3
 800a526:	f080 80d3 	bcs.w	800a6d0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b03      	cmp	r3, #3
 800a530:	f000 8096 	beq.w	800a660 <put_fat+0x15a>
 800a534:	2b03      	cmp	r3, #3
 800a536:	f300 80cb 	bgt.w	800a6d0 <put_fat+0x1ca>
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d002      	beq.n	800a544 <put_fat+0x3e>
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d06e      	beq.n	800a620 <put_fat+0x11a>
 800a542:	e0c5      	b.n	800a6d0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	61bb      	str	r3, [r7, #24]
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	69ba      	ldr	r2, [r7, #24]
 800a54e:	4413      	add	r3, r2
 800a550:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1a      	ldr	r2, [r3, #32]
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	0a5b      	lsrs	r3, r3, #9
 800a55a:	4413      	add	r3, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fede 	bl	800a320 <move_window>
 800a564:	4603      	mov	r3, r0
 800a566:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a568:	7ffb      	ldrb	r3, [r7, #31]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 80a9 	bne.w	800a6c2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	1c59      	adds	r1, r3, #1
 800a57a:	61b9      	str	r1, [r7, #24]
 800a57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a580:	4413      	add	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00d      	beq.n	800a5aa <put_fat+0xa4>
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	b25b      	sxtb	r3, r3
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	b25a      	sxtb	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	e001      	b.n	800a5ae <put_fat+0xa8>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	0a5b      	lsrs	r3, r3, #9
 800a5c0:	4413      	add	r3, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff feab 	bl	800a320 <move_window>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ce:	7ffb      	ldrb	r3, [r7, #31]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d178      	bne.n	800a6c6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e0:	4413      	add	r3, r2
 800a5e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <put_fat+0xf0>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	091b      	lsrs	r3, r3, #4
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	e00e      	b.n	800a614 <put_fat+0x10e>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	b25b      	sxtb	r3, r3
 800a5fc:	f023 030f 	bic.w	r3, r3, #15
 800a600:	b25a      	sxtb	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0a1b      	lsrs	r3, r3, #8
 800a606:	b25b      	sxtb	r3, r3
 800a608:	f003 030f 	and.w	r3, r3, #15
 800a60c:	b25b      	sxtb	r3, r3
 800a60e:	4313      	orrs	r3, r2
 800a610:	b25b      	sxtb	r3, r3
 800a612:	b2db      	uxtb	r3, r3
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	70da      	strb	r2, [r3, #3]
			break;
 800a61e:	e057      	b.n	800a6d0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a1a      	ldr	r2, [r3, #32]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	0a1b      	lsrs	r3, r3, #8
 800a628:	4413      	add	r3, r2
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fe77 	bl	800a320 <move_window>
 800a632:	4603      	mov	r3, r0
 800a634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a636:	7ffb      	ldrb	r3, [r7, #31]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d146      	bne.n	800a6ca <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a64a:	4413      	add	r3, r2
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	b292      	uxth	r2, r2
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fc2b 	bl	8009eae <st_word>
			fs->wflag = 1;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2201      	movs	r2, #1
 800a65c:	70da      	strb	r2, [r3, #3]
			break;
 800a65e:	e037      	b.n	800a6d0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6a1a      	ldr	r2, [r3, #32]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	09db      	lsrs	r3, r3, #7
 800a668:	4413      	add	r3, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7ff fe57 	bl	800a320 <move_window>
 800a672:	4603      	mov	r3, r0
 800a674:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a676:	7ffb      	ldrb	r3, [r7, #31]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d128      	bne.n	800a6ce <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a690:	4413      	add	r3, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fbe8 	bl	8009e68 <ld_dword>
 800a698:	4603      	mov	r3, r0
 800a69a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a69e:	4323      	orrs	r3, r4
 800a6a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a6b0:	4413      	add	r3, r2
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7ff fc15 	bl	8009ee4 <st_dword>
			fs->wflag = 1;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	70da      	strb	r2, [r3, #3]
			break;
 800a6c0:	e006      	b.n	800a6d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a6c2:	bf00      	nop
 800a6c4:	e004      	b.n	800a6d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a6c6:	bf00      	nop
 800a6c8:	e002      	b.n	800a6d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a6ca:	bf00      	nop
 800a6cc:	e000      	b.n	800a6d0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a6ce:	bf00      	nop
		}
	}
	return res;
 800a6d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3724      	adds	r7, #36	@ 0x24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd90      	pop	{r4, r7, pc}

0800a6da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b088      	sub	sp, #32
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	60f8      	str	r0, [r7, #12]
 800a6e2:	60b9      	str	r1, [r7, #8]
 800a6e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d904      	bls.n	800a700 <remove_chain+0x26>
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d301      	bcc.n	800a704 <remove_chain+0x2a>
 800a700:	2302      	movs	r3, #2
 800a702:	e04b      	b.n	800a79c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00c      	beq.n	800a724 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a70a:	f04f 32ff 	mov.w	r2, #4294967295
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	69b8      	ldr	r0, [r7, #24]
 800a712:	f7ff fef8 	bl	800a506 <put_fat>
 800a716:	4603      	mov	r3, r0
 800a718:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a71a:	7ffb      	ldrb	r3, [r7, #31]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <remove_chain+0x4a>
 800a720:	7ffb      	ldrb	r3, [r7, #31]
 800a722:	e03b      	b.n	800a79c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fe46 	bl	800a3b8 <get_fat>
 800a72c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d031      	beq.n	800a798 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d101      	bne.n	800a73e <remove_chain+0x64>
 800a73a:	2302      	movs	r3, #2
 800a73c:	e02e      	b.n	800a79c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d101      	bne.n	800a74a <remove_chain+0x70>
 800a746:	2301      	movs	r3, #1
 800a748:	e028      	b.n	800a79c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a74a:	2200      	movs	r2, #0
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	69b8      	ldr	r0, [r7, #24]
 800a750:	f7ff fed9 	bl	800a506 <put_fat>
 800a754:	4603      	mov	r3, r0
 800a756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a758:	7ffb      	ldrb	r3, [r7, #31]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <remove_chain+0x88>
 800a75e:	7ffb      	ldrb	r3, [r7, #31]
 800a760:	e01c      	b.n	800a79c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	3b02      	subs	r3, #2
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d20b      	bcs.n	800a788 <remove_chain+0xae>
			fs->free_clst++;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	791b      	ldrb	r3, [r3, #4]
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	d3c6      	bcc.n	800a724 <remove_chain+0x4a>
 800a796:	e000      	b.n	800a79a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a798:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10d      	bne.n	800a7d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d004      	beq.n	800a7d0 <create_chain+0x2c>
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d31b      	bcc.n	800a808 <create_chain+0x64>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e018      	b.n	800a808 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff fded 	bl	800a3b8 <get_fat>
 800a7de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d801      	bhi.n	800a7ea <create_chain+0x46>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e070      	b.n	800a8cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d101      	bne.n	800a7f6 <create_chain+0x52>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	e06a      	b.n	800a8cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d201      	bcs.n	800a804 <create_chain+0x60>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	e063      	b.n	800a8cc <create_chain+0x128>
		scl = clst;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	3301      	adds	r3, #1
 800a810:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	69fa      	ldr	r2, [r7, #28]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d307      	bcc.n	800a82c <create_chain+0x88>
				ncl = 2;
 800a81c:	2302      	movs	r3, #2
 800a81e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a820:	69fa      	ldr	r2, [r7, #28]
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	429a      	cmp	r2, r3
 800a826:	d901      	bls.n	800a82c <create_chain+0x88>
 800a828:	2300      	movs	r3, #0
 800a82a:	e04f      	b.n	800a8cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a82c:	69f9      	ldr	r1, [r7, #28]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fdc2 	bl	800a3b8 <get_fat>
 800a834:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d003      	beq.n	800a84a <create_chain+0xa6>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a848:	d101      	bne.n	800a84e <create_chain+0xaa>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	e03e      	b.n	800a8cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	429a      	cmp	r2, r3
 800a854:	d1da      	bne.n	800a80c <create_chain+0x68>
 800a856:	2300      	movs	r3, #0
 800a858:	e038      	b.n	800a8cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a85a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	69f9      	ldr	r1, [r7, #28]
 800a862:	6938      	ldr	r0, [r7, #16]
 800a864:	f7ff fe4f 	bl	800a506 <put_fat>
 800a868:	4603      	mov	r3, r0
 800a86a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <create_chain+0xe2>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6938      	ldr	r0, [r7, #16]
 800a87e:	f7ff fe42 	bl	800a506 <put_fat>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d116      	bne.n	800a8ba <create_chain+0x116>
		fs->last_clst = ncl;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	3b02      	subs	r3, #2
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d804      	bhi.n	800a8aa <create_chain+0x106>
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	1e5a      	subs	r2, r3, #1
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	791b      	ldrb	r3, [r3, #4]
 800a8ae:	f043 0301 	orr.w	r3, r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	711a      	strb	r2, [r3, #4]
 800a8b8:	e007      	b.n	800a8ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d102      	bne.n	800a8c6 <create_chain+0x122>
 800a8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c4:	e000      	b.n	800a8c8 <create_chain+0x124>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a8ca:	69fb      	ldr	r3, [r7, #28]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3720      	adds	r7, #32
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	8952      	ldrh	r2, [r2, #10]
 800a8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	613a      	str	r2, [r7, #16]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <clmt_clust+0x3a>
 800a90a:	2300      	movs	r3, #0
 800a90c:	e010      	b.n	800a930 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	429a      	cmp	r2, r3
 800a914:	d307      	bcc.n	800a926 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3304      	adds	r3, #4
 800a922:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a924:	e7e9      	b.n	800a8fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a926:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	4413      	add	r3, r2
}
 800a930:	4618      	mov	r0, r3
 800a932:	371c      	adds	r7, #28
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a952:	d204      	bcs.n	800a95e <dir_sdi+0x22>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a95e:	2302      	movs	r3, #2
 800a960:	e063      	b.n	800aa2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d106      	bne.n	800a982 <dir_sdi+0x46>
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d902      	bls.n	800a982 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a980:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10c      	bne.n	800a9a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	8912      	ldrh	r2, [r2, #8]
 800a990:	4293      	cmp	r3, r2
 800a992:	d301      	bcc.n	800a998 <dir_sdi+0x5c>
 800a994:	2302      	movs	r3, #2
 800a996:	e048      	b.n	800aa2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	61da      	str	r2, [r3, #28]
 800a9a0:	e029      	b.n	800a9f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	895b      	ldrh	r3, [r3, #10]
 800a9a6:	025b      	lsls	r3, r3, #9
 800a9a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9aa:	e019      	b.n	800a9e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6979      	ldr	r1, [r7, #20]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff fd01 	bl	800a3b8 <get_fat>
 800a9b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d101      	bne.n	800a9c4 <dir_sdi+0x88>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e032      	b.n	800aa2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d904      	bls.n	800a9d4 <dir_sdi+0x98>
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d301      	bcc.n	800a9d8 <dir_sdi+0x9c>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e028      	b.n	800aa2a <dir_sdi+0xee>
			ofs -= csz;
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d2e1      	bcs.n	800a9ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a9e8:	6979      	ldr	r1, [r7, #20]
 800a9ea:	6938      	ldr	r0, [r7, #16]
 800a9ec:	f7ff fcc5 	bl	800a37a <clust2sect>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <dir_sdi+0xcc>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e010      	b.n	800aa2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	69da      	ldr	r2, [r3, #28]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	0a5b      	lsrs	r3, r3, #9
 800aa10:	441a      	add	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa22:	441a      	add	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b086      	sub	sp, #24
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	3320      	adds	r3, #32
 800aa48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <dir_next+0x28>
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa58:	d301      	bcc.n	800aa5e <dir_next+0x2c>
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	e0aa      	b.n	800abb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 8098 	bne.w	800ab9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10b      	bne.n	800aa94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	095b      	lsrs	r3, r3, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	8912      	ldrh	r2, [r2, #8]
 800aa84:	4293      	cmp	r3, r2
 800aa86:	f0c0 8088 	bcc.w	800ab9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	61da      	str	r2, [r3, #28]
 800aa90:	2304      	movs	r3, #4
 800aa92:	e08f      	b.n	800abb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	0a5b      	lsrs	r3, r3, #9
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	8952      	ldrh	r2, [r2, #10]
 800aa9c:	3a01      	subs	r2, #1
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d17a      	bne.n	800ab9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4610      	mov	r0, r2
 800aaae:	f7ff fc83 	bl	800a3b8 <get_fat>
 800aab2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d801      	bhi.n	800aabe <dir_next+0x8c>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e07a      	b.n	800abb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac4:	d101      	bne.n	800aaca <dir_next+0x98>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e074      	b.n	800abb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d358      	bcc.n	800ab86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d104      	bne.n	800aae4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	61da      	str	r2, [r3, #28]
 800aae0:	2304      	movs	r3, #4
 800aae2:	e067      	b.n	800abb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f7ff fe59 	bl	800a7a4 <create_chain>
 800aaf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <dir_next+0xcc>
 800aafa:	2307      	movs	r3, #7
 800aafc:	e05a      	b.n	800abb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d101      	bne.n	800ab08 <dir_next+0xd6>
 800ab04:	2302      	movs	r3, #2
 800ab06:	e055      	b.n	800abb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d101      	bne.n	800ab14 <dir_next+0xe2>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e04f      	b.n	800abb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7ff fbbf 	bl	800a298 <sync_window>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <dir_next+0xf2>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e047      	b.n	800abb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3330      	adds	r3, #48	@ 0x30
 800ab28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff fa25 	bl	8009f7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab34:	2300      	movs	r3, #0
 800ab36:	613b      	str	r3, [r7, #16]
 800ab38:	6979      	ldr	r1, [r7, #20]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fc1d 	bl	800a37a <clust2sect>
 800ab40:	4602      	mov	r2, r0
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab46:	e012      	b.n	800ab6e <dir_next+0x13c>
						fs->wflag = 1;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fba2 	bl	800a298 <sync_window>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <dir_next+0x12c>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e02a      	b.n	800abb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3301      	adds	r3, #1
 800ab62:	613b      	str	r3, [r7, #16]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	895b      	ldrh	r3, [r3, #10]
 800ab72:	461a      	mov	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d3e6      	bcc.n	800ab48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	1ad2      	subs	r2, r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab8c:	6979      	ldr	r1, [r7, #20]
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff fbf3 	bl	800a37a <clust2sect>
 800ab94:	4602      	mov	r2, r0
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abac:	441a      	add	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800abcc:	2100      	movs	r1, #0
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff feb4 	bl	800a93c <dir_sdi>
 800abd4:	4603      	mov	r3, r0
 800abd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d12b      	bne.n	800ac36 <dir_alloc+0x7a>
		n = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fb99 	bl	800a320 <move_window>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11d      	bne.n	800ac34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2be5      	cmp	r3, #229	@ 0xe5
 800ac00:	d004      	beq.n	800ac0c <dir_alloc+0x50>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d107      	bne.n	800ac1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d102      	bne.n	800ac20 <dir_alloc+0x64>
 800ac1a:	e00c      	b.n	800ac36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ac20:	2101      	movs	r1, #1
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff ff05 	bl	800aa32 <dir_next>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0d7      	beq.n	800abe2 <dir_alloc+0x26>
 800ac32:	e000      	b.n	800ac36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ac34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d101      	bne.n	800ac40 <dir_alloc+0x84>
 800ac3c:	2307      	movs	r3, #7
 800ac3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	331a      	adds	r3, #26
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff f8ed 	bl	8009e38 <ld_word>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d109      	bne.n	800ac7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3314      	adds	r3, #20
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff f8e2 	bl	8009e38 <ld_word>
 800ac74:	4603      	mov	r3, r0
 800ac76:	041b      	lsls	r3, r3, #16
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	331a      	adds	r3, #26
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	b292      	uxth	r2, r2
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff f905 	bl	8009eae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d109      	bne.n	800acc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f103 0214 	add.w	r2, r3, #20
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	0c1b      	lsrs	r3, r3, #16
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	4610      	mov	r0, r2
 800acbc:	f7ff f8f7 	bl	8009eae <st_word>
	}
}
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800acd6:	2100      	movs	r1, #0
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff fe2f 	bl	800a93c <dir_sdi>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <dir_find+0x24>
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
 800acea:	e03e      	b.n	800ad6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	4619      	mov	r1, r3
 800acf2:	6938      	ldr	r0, [r7, #16]
 800acf4:	f7ff fb14 	bl	800a320 <move_window>
 800acf8:	4603      	mov	r3, r0
 800acfa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d12f      	bne.n	800ad62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d102      	bne.n	800ad16 <dir_find+0x4e>
 800ad10:	2304      	movs	r3, #4
 800ad12:	75fb      	strb	r3, [r7, #23]
 800ad14:	e028      	b.n	800ad68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	330b      	adds	r3, #11
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	330b      	adds	r3, #11
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 0308 	and.w	r3, r3, #8
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <dir_find+0x86>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a18      	ldr	r0, [r3, #32]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3324      	adds	r3, #36	@ 0x24
 800ad40:	220b      	movs	r2, #11
 800ad42:	4619      	mov	r1, r3
 800ad44:	f7ff f936 	bl	8009fb4 <mem_cmp>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00b      	beq.n	800ad66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ad4e:	2100      	movs	r1, #0
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fe6e 	bl	800aa32 <dir_next>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0c5      	beq.n	800acec <dir_find+0x24>
 800ad60:	e002      	b.n	800ad68 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ad62:	bf00      	nop
 800ad64:	e000      	b.n	800ad68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ad66:	bf00      	nop

	return res;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ad80:	2101      	movs	r1, #1
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff ff1a 	bl	800abbc <dir_alloc>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d11c      	bne.n	800adcc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	4619      	mov	r1, r3
 800ad98:	68b8      	ldr	r0, [r7, #8]
 800ad9a:	f7ff fac1 	bl	800a320 <move_window>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d111      	bne.n	800adcc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	2220      	movs	r2, #32
 800adae:	2100      	movs	r1, #0
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff f8e4 	bl	8009f7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a18      	ldr	r0, [r3, #32]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3324      	adds	r3, #36	@ 0x24
 800adbe:	220b      	movs	r2, #11
 800adc0:	4619      	mov	r1, r3
 800adc2:	f7ff f8bb 	bl	8009f3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2201      	movs	r2, #1
 800adca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3324      	adds	r3, #36	@ 0x24
 800adec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800adee:	220b      	movs	r2, #11
 800adf0:	2120      	movs	r1, #32
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f7ff f8c3 	bl	8009f7e <mem_set>
	si = i = 0; ni = 8;
 800adf8:	2300      	movs	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	2308      	movs	r3, #8
 800ae02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	61fa      	str	r2, [r7, #28]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ae12:	7efb      	ldrb	r3, [r7, #27]
 800ae14:	2b20      	cmp	r3, #32
 800ae16:	d94e      	bls.n	800aeb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ae18:	7efb      	ldrb	r3, [r7, #27]
 800ae1a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae1c:	d006      	beq.n	800ae2c <create_name+0x54>
 800ae1e:	7efb      	ldrb	r3, [r7, #27]
 800ae20:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae22:	d110      	bne.n	800ae46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ae24:	e002      	b.n	800ae2c <create_name+0x54>
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	4413      	add	r3, r2
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae36:	d0f6      	beq.n	800ae26 <create_name+0x4e>
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae42:	d0f0      	beq.n	800ae26 <create_name+0x4e>
			break;
 800ae44:	e038      	b.n	800aeb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ae46:	7efb      	ldrb	r3, [r7, #27]
 800ae48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae4a:	d003      	beq.n	800ae54 <create_name+0x7c>
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d30c      	bcc.n	800ae6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b0b      	cmp	r3, #11
 800ae58:	d002      	beq.n	800ae60 <create_name+0x88>
 800ae5a:	7efb      	ldrb	r3, [r7, #27]
 800ae5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae5e:	d001      	beq.n	800ae64 <create_name+0x8c>
 800ae60:	2306      	movs	r3, #6
 800ae62:	e044      	b.n	800aeee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ae64:	2308      	movs	r3, #8
 800ae66:	613b      	str	r3, [r7, #16]
 800ae68:	230b      	movs	r3, #11
 800ae6a:	617b      	str	r3, [r7, #20]
			continue;
 800ae6c:	e022      	b.n	800aeb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ae6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	da04      	bge.n	800ae80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ae76:	7efb      	ldrb	r3, [r7, #27]
 800ae78:	3b80      	subs	r3, #128	@ 0x80
 800ae7a:	4a1f      	ldr	r2, [pc, #124]	@ (800aef8 <create_name+0x120>)
 800ae7c:	5cd3      	ldrb	r3, [r2, r3]
 800ae7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ae80:	7efb      	ldrb	r3, [r7, #27]
 800ae82:	4619      	mov	r1, r3
 800ae84:	481d      	ldr	r0, [pc, #116]	@ (800aefc <create_name+0x124>)
 800ae86:	f7ff f8bc 	bl	800a002 <chk_chr>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <create_name+0xbc>
 800ae90:	2306      	movs	r3, #6
 800ae92:	e02c      	b.n	800aeee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ae94:	7efb      	ldrb	r3, [r7, #27]
 800ae96:	2b60      	cmp	r3, #96	@ 0x60
 800ae98:	d905      	bls.n	800aea6 <create_name+0xce>
 800ae9a:	7efb      	ldrb	r3, [r7, #27]
 800ae9c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ae9e:	d802      	bhi.n	800aea6 <create_name+0xce>
 800aea0:	7efb      	ldrb	r3, [r7, #27]
 800aea2:	3b20      	subs	r3, #32
 800aea4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	613a      	str	r2, [r7, #16]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	4413      	add	r3, r2
 800aeb0:	7efa      	ldrb	r2, [r7, #27]
 800aeb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aeb4:	e7a6      	b.n	800ae04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aeb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	441a      	add	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <create_name+0xf4>
 800aec8:	2306      	movs	r3, #6
 800aeca:	e010      	b.n	800aeee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2be5      	cmp	r3, #229	@ 0xe5
 800aed2:	d102      	bne.n	800aeda <create_name+0x102>
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2205      	movs	r2, #5
 800aed8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aeda:	7efb      	ldrb	r3, [r7, #27]
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d801      	bhi.n	800aee4 <create_name+0x10c>
 800aee0:	2204      	movs	r2, #4
 800aee2:	e000      	b.n	800aee6 <create_name+0x10e>
 800aee4:	2200      	movs	r2, #0
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	330b      	adds	r3, #11
 800aeea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aeec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3720      	adds	r7, #32
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	0800c09c 	.word	0x0800c09c
 800aefc:	0800bdd4 	.word	0x0800bdd4

0800af00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800af14:	e002      	b.n	800af1c <follow_path+0x1c>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	3301      	adds	r3, #1
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b2f      	cmp	r3, #47	@ 0x2f
 800af22:	d0f8      	beq.n	800af16 <follow_path+0x16>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b5c      	cmp	r3, #92	@ 0x5c
 800af2a:	d0f4      	beq.n	800af16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2200      	movs	r2, #0
 800af30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b1f      	cmp	r3, #31
 800af38:	d80a      	bhi.n	800af50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2280      	movs	r2, #128	@ 0x80
 800af3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800af42:	2100      	movs	r1, #0
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff fcf9 	bl	800a93c <dir_sdi>
 800af4a:	4603      	mov	r3, r0
 800af4c:	75fb      	strb	r3, [r7, #23]
 800af4e:	e043      	b.n	800afd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af50:	463b      	mov	r3, r7
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff ff3f 	bl	800add8 <create_name>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d134      	bne.n	800afce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff feaf 	bl	800acc8 <dir_find>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d127      	bne.n	800afd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d122      	bne.n	800afd2 <follow_path+0xd2>
 800af8c:	2305      	movs	r3, #5
 800af8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800af90:	e01f      	b.n	800afd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d11c      	bne.n	800afd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	799b      	ldrb	r3, [r3, #6]
 800afa0:	f003 0310 	and.w	r3, r3, #16
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d102      	bne.n	800afae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800afa8:	2305      	movs	r3, #5
 800afaa:	75fb      	strb	r3, [r7, #23]
 800afac:	e014      	b.n	800afd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbc:	4413      	add	r3, r2
 800afbe:	4619      	mov	r1, r3
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff fe42 	bl	800ac4a <ld_clust>
 800afc6:	4602      	mov	r2, r0
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800afcc:	e7c0      	b.n	800af50 <follow_path+0x50>
			if (res != FR_OK) break;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <follow_path+0xd8>
				break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afd6:	bf00      	nop
			}
		}
	}

	return res;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d031      	beq.n	800b05c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	e002      	b.n	800b006 <get_ldnumber+0x24>
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3301      	adds	r3, #1
 800b004:	617b      	str	r3, [r7, #20]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	d903      	bls.n	800b016 <get_ldnumber+0x34>
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b3a      	cmp	r3, #58	@ 0x3a
 800b014:	d1f4      	bne.n	800b000 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b01c:	d11c      	bne.n	800b058 <get_ldnumber+0x76>
			tp = *path;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	60fa      	str	r2, [r7, #12]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	3b30      	subs	r3, #48	@ 0x30
 800b02e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b09      	cmp	r3, #9
 800b034:	d80e      	bhi.n	800b054 <get_ldnumber+0x72>
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d10a      	bne.n	800b054 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d107      	bne.n	800b054 <get_ldnumber+0x72>
					vol = (int)i;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	3301      	adds	r3, #1
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	e002      	b.n	800b05e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b058:	2300      	movs	r3, #0
 800b05a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b05c:	693b      	ldr	r3, [r7, #16]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
	...

0800b06c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	70da      	strb	r2, [r3, #3]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff f94a 	bl	800a320 <move_window>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <check_fs+0x2a>
 800b092:	2304      	movs	r3, #4
 800b094:	e038      	b.n	800b108 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3330      	adds	r3, #48	@ 0x30
 800b09a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe feca 	bl	8009e38 <ld_word>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d001      	beq.n	800b0b4 <check_fs+0x48>
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e029      	b.n	800b108 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0ba:	2be9      	cmp	r3, #233	@ 0xe9
 800b0bc:	d009      	beq.n	800b0d2 <check_fs+0x66>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0c4:	2beb      	cmp	r3, #235	@ 0xeb
 800b0c6:	d11e      	bne.n	800b106 <check_fs+0x9a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b0ce:	2b90      	cmp	r3, #144	@ 0x90
 800b0d0:	d119      	bne.n	800b106 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3330      	adds	r3, #48	@ 0x30
 800b0d6:	3336      	adds	r3, #54	@ 0x36
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fec5 	bl	8009e68 <ld_dword>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b110 <check_fs+0xa4>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d101      	bne.n	800b0ee <check_fs+0x82>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e00c      	b.n	800b108 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3330      	adds	r3, #48	@ 0x30
 800b0f2:	3352      	adds	r3, #82	@ 0x52
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fe feb7 	bl	8009e68 <ld_dword>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	4a05      	ldr	r2, [pc, #20]	@ (800b114 <check_fs+0xa8>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d101      	bne.n	800b106 <check_fs+0x9a>
 800b102:	2300      	movs	r3, #0
 800b104:	e000      	b.n	800b108 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b106:	2302      	movs	r3, #2
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	00544146 	.word	0x00544146
 800b114:	33544146 	.word	0x33544146

0800b118 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b096      	sub	sp, #88	@ 0x58
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7ff ff58 	bl	800afe2 <get_ldnumber>
 800b132:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b136:	2b00      	cmp	r3, #0
 800b138:	da01      	bge.n	800b13e <find_volume+0x26>
 800b13a:	230b      	movs	r3, #11
 800b13c:	e22d      	b.n	800b59a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b13e:	4aa1      	ldr	r2, [pc, #644]	@ (800b3c4 <find_volume+0x2ac>)
 800b140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b146:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <find_volume+0x3a>
 800b14e:	230c      	movs	r3, #12
 800b150:	e223      	b.n	800b59a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b156:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	f023 0301 	bic.w	r3, r3, #1
 800b15e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01a      	beq.n	800b19e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	785b      	ldrb	r3, [r3, #1]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fe fde1 	bl	8009d34 <disk_status>
 800b172:	4603      	mov	r3, r0
 800b174:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b178:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10c      	bne.n	800b19e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d007      	beq.n	800b19a <find_volume+0x82>
 800b18a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b18e:	f003 0304 	and.w	r3, r3, #4
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b196:	230a      	movs	r3, #10
 800b198:	e1ff      	b.n	800b59a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b19a:	2300      	movs	r3, #0
 800b19c:	e1fd      	b.n	800b59a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fdd9 	bl	8009d68 <disk_initialize>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b1bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e1e6      	b.n	800b59a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <find_volume+0xca>
 800b1d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b1de:	230a      	movs	r3, #10
 800b1e0:	e1db      	b.n	800b59a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b1e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1ea:	f7ff ff3f 	bl	800b06c <check_fs>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d149      	bne.n	800b290 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800b200:	e01e      	b.n	800b240 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b20a:	011b      	lsls	r3, r3, #4
 800b20c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b210:	4413      	add	r3, r2
 800b212:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b216:	3304      	adds	r3, #4
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d006      	beq.n	800b22c <find_volume+0x114>
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	3308      	adds	r3, #8
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe fe20 	bl	8009e68 <ld_dword>
 800b228:	4602      	mov	r2, r0
 800b22a:	e000      	b.n	800b22e <find_volume+0x116>
 800b22c:	2200      	movs	r2, #0
 800b22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	3358      	adds	r3, #88	@ 0x58
 800b234:	443b      	add	r3, r7
 800b236:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b23c:	3301      	adds	r3, #1
 800b23e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b242:	2b03      	cmp	r3, #3
 800b244:	d9dd      	bls.n	800b202 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b246:	2300      	movs	r3, #0
 800b248:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <find_volume+0x13e>
 800b250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b252:	3b01      	subs	r3, #1
 800b254:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	3358      	adds	r3, #88	@ 0x58
 800b25c:	443b      	add	r3, r7
 800b25e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b262:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <find_volume+0x15e>
 800b26a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b26c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b26e:	f7ff fefd 	bl	800b06c <check_fs>
 800b272:	4603      	mov	r3, r0
 800b274:	e000      	b.n	800b278 <find_volume+0x160>
 800b276:	2303      	movs	r3, #3
 800b278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b27c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b280:	2b01      	cmp	r3, #1
 800b282:	d905      	bls.n	800b290 <find_volume+0x178>
 800b284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b286:	3301      	adds	r3, #1
 800b288:	643b      	str	r3, [r7, #64]	@ 0x40
 800b28a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d9e2      	bls.n	800b256 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b290:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b294:	2b04      	cmp	r3, #4
 800b296:	d101      	bne.n	800b29c <find_volume+0x184>
 800b298:	2301      	movs	r3, #1
 800b29a:	e17e      	b.n	800b59a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b29c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d901      	bls.n	800b2a8 <find_volume+0x190>
 800b2a4:	230d      	movs	r3, #13
 800b2a6:	e178      	b.n	800b59a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2aa:	3330      	adds	r3, #48	@ 0x30
 800b2ac:	330b      	adds	r3, #11
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fdc2 	bl	8009e38 <ld_word>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ba:	d001      	beq.n	800b2c0 <find_volume+0x1a8>
 800b2bc:	230d      	movs	r3, #13
 800b2be:	e16c      	b.n	800b59a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c2:	3330      	adds	r3, #48	@ 0x30
 800b2c4:	3316      	adds	r3, #22
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe fdb6 	bl	8009e38 <ld_word>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b2d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <find_volume+0x1cc>
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d8:	3330      	adds	r3, #48	@ 0x30
 800b2da:	3324      	adds	r3, #36	@ 0x24
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe fdc3 	bl	8009e68 <ld_dword>
 800b2e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ec:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f6:	789b      	ldrb	r3, [r3, #2]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d005      	beq.n	800b308 <find_volume+0x1f0>
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	789b      	ldrb	r3, [r3, #2]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d001      	beq.n	800b308 <find_volume+0x1f0>
 800b304:	230d      	movs	r3, #13
 800b306:	e148      	b.n	800b59a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	789b      	ldrb	r3, [r3, #2]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b310:	fb02 f303 	mul.w	r3, r2, r3
 800b314:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b31c:	461a      	mov	r2, r3
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	895b      	ldrh	r3, [r3, #10]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d008      	beq.n	800b33c <find_volume+0x224>
 800b32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32c:	895b      	ldrh	r3, [r3, #10]
 800b32e:	461a      	mov	r2, r3
 800b330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b332:	895b      	ldrh	r3, [r3, #10]
 800b334:	3b01      	subs	r3, #1
 800b336:	4013      	ands	r3, r2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <find_volume+0x228>
 800b33c:	230d      	movs	r3, #13
 800b33e:	e12c      	b.n	800b59a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b342:	3330      	adds	r3, #48	@ 0x30
 800b344:	3311      	adds	r3, #17
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fd76 	bl	8009e38 <ld_word>
 800b34c:	4603      	mov	r3, r0
 800b34e:	461a      	mov	r2, r3
 800b350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b352:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b356:	891b      	ldrh	r3, [r3, #8]
 800b358:	f003 030f 	and.w	r3, r3, #15
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <find_volume+0x24e>
 800b362:	230d      	movs	r3, #13
 800b364:	e119      	b.n	800b59a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b368:	3330      	adds	r3, #48	@ 0x30
 800b36a:	3313      	adds	r3, #19
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fd63 	bl	8009e38 <ld_word>
 800b372:	4603      	mov	r3, r0
 800b374:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <find_volume+0x272>
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	3330      	adds	r3, #48	@ 0x30
 800b380:	3320      	adds	r3, #32
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fd70 	bl	8009e68 <ld_dword>
 800b388:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38c:	3330      	adds	r3, #48	@ 0x30
 800b38e:	330e      	adds	r3, #14
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe fd51 	bl	8009e38 <ld_word>
 800b396:	4603      	mov	r3, r0
 800b398:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b39a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <find_volume+0x28c>
 800b3a0:	230d      	movs	r3, #13
 800b3a2:	e0fa      	b.n	800b59a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b3a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b3a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a8:	4413      	add	r3, r2
 800b3aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3ac:	8912      	ldrh	r2, [r2, #8]
 800b3ae:	0912      	lsrs	r2, r2, #4
 800b3b0:	b292      	uxth	r2, r2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d204      	bcs.n	800b3c8 <find_volume+0x2b0>
 800b3be:	230d      	movs	r3, #13
 800b3c0:	e0eb      	b.n	800b59a <find_volume+0x482>
 800b3c2:	bf00      	nop
 800b3c4:	24000600 	.word	0x24000600
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b3c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3d0:	8952      	ldrh	r2, [r2, #10]
 800b3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <find_volume+0x2ca>
 800b3de:	230d      	movs	r3, #13
 800b3e0:	e0db      	b.n	800b59a <find_volume+0x482>
		fmt = FS_FAT32;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d802      	bhi.n	800b3f8 <find_volume+0x2e0>
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d802      	bhi.n	800b408 <find_volume+0x2f0>
 800b402:	2301      	movs	r3, #1
 800b404:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	1c9a      	adds	r2, r3, #2
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b414:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b416:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b41a:	441a      	add	r2, r3
 800b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b420:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	441a      	add	r2, r3
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b42a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d11e      	bne.n	800b470 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b434:	3330      	adds	r3, #48	@ 0x30
 800b436:	332a      	adds	r3, #42	@ 0x2a
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fcfd 	bl	8009e38 <ld_word>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <find_volume+0x330>
 800b444:	230d      	movs	r3, #13
 800b446:	e0a8      	b.n	800b59a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44a:	891b      	ldrh	r3, [r3, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <find_volume+0x33c>
 800b450:	230d      	movs	r3, #13
 800b452:	e0a2      	b.n	800b59a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b456:	3330      	adds	r3, #48	@ 0x30
 800b458:	332c      	adds	r3, #44	@ 0x2c
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fd04 	bl	8009e68 <ld_dword>
 800b460:	4602      	mov	r2, r0
 800b462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b464:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b46e:	e01f      	b.n	800b4b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	891b      	ldrh	r3, [r3, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <find_volume+0x364>
 800b478:	230d      	movs	r3, #13
 800b47a:	e08e      	b.n	800b59a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47e:	6a1a      	ldr	r2, [r3, #32]
 800b480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b482:	441a      	add	r2, r3
 800b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b486:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d103      	bne.n	800b498 <find_volume+0x380>
 800b490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	e00a      	b.n	800b4ae <find_volume+0x396>
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	695a      	ldr	r2, [r3, #20]
 800b49c:	4613      	mov	r3, r2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	4413      	add	r3, r2
 800b4a2:	085a      	lsrs	r2, r3, #1
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b4ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	699a      	ldr	r2, [r3, #24]
 800b4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b4ba:	0a5b      	lsrs	r3, r3, #9
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d201      	bcs.n	800b4c4 <find_volume+0x3ac>
 800b4c0:	230d      	movs	r3, #13
 800b4c2:	e06a      	b.n	800b59a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ca:	611a      	str	r2, [r3, #16]
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	691a      	ldr	r2, [r3, #16]
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	2280      	movs	r2, #128	@ 0x80
 800b4d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b4da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d149      	bne.n	800b576 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	3330      	adds	r3, #48	@ 0x30
 800b4e6:	3330      	adds	r3, #48	@ 0x30
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe fca5 	bl	8009e38 <ld_word>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d140      	bne.n	800b576 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4fc:	f7fe ff10 	bl	800a320 <move_window>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d137      	bne.n	800b576 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	2200      	movs	r2, #0
 800b50a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50e:	3330      	adds	r3, #48	@ 0x30
 800b510:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fc8f 	bl	8009e38 <ld_word>
 800b51a:	4603      	mov	r3, r0
 800b51c:	461a      	mov	r2, r3
 800b51e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b522:	429a      	cmp	r2, r3
 800b524:	d127      	bne.n	800b576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b528:	3330      	adds	r3, #48	@ 0x30
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fc9c 	bl	8009e68 <ld_dword>
 800b530:	4603      	mov	r3, r0
 800b532:	4a1c      	ldr	r2, [pc, #112]	@ (800b5a4 <find_volume+0x48c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d11e      	bne.n	800b576 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	3330      	adds	r3, #48	@ 0x30
 800b53c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fc91 	bl	8009e68 <ld_dword>
 800b546:	4603      	mov	r3, r0
 800b548:	4a17      	ldr	r2, [pc, #92]	@ (800b5a8 <find_volume+0x490>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b550:	3330      	adds	r3, #48	@ 0x30
 800b552:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fc86 	bl	8009e68 <ld_dword>
 800b55c:	4602      	mov	r2, r0
 800b55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b560:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	3330      	adds	r3, #48	@ 0x30
 800b566:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fc7c 	bl	8009e68 <ld_dword>
 800b570:	4602      	mov	r2, r0
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b57c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b57e:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ac <find_volume+0x494>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	b29a      	uxth	r2, r3
 800b586:	4b09      	ldr	r3, [pc, #36]	@ (800b5ac <find_volume+0x494>)
 800b588:	801a      	strh	r2, [r3, #0]
 800b58a:	4b08      	ldr	r3, [pc, #32]	@ (800b5ac <find_volume+0x494>)
 800b58c:	881a      	ldrh	r2, [r3, #0]
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b592:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b594:	f7fe fe5c 	bl	800a250 <clear_lock>
#endif
	return FR_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3758      	adds	r7, #88	@ 0x58
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	41615252 	.word	0x41615252
 800b5a8:	61417272 	.word	0x61417272
 800b5ac:	24000604 	.word	0x24000604

0800b5b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b5ba:	2309      	movs	r3, #9
 800b5bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01c      	beq.n	800b5fe <validate+0x4e>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d018      	beq.n	800b5fe <validate+0x4e>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d013      	beq.n	800b5fe <validate+0x4e>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	889a      	ldrh	r2, [r3, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	88db      	ldrh	r3, [r3, #6]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d10c      	bne.n	800b5fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fba2 	bl	8009d34 <disk_status>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <validate+0x4e>
			res = FR_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <validate+0x5a>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	e000      	b.n	800b60c <validate+0x5c>
 800b60a:	2300      	movs	r3, #0
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	6013      	str	r3, [r2, #0]
	return res;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4613      	mov	r3, r2
 800b628:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b62e:	f107 0310 	add.w	r3, r7, #16
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff fcd5 	bl	800afe2 <get_ldnumber>
 800b638:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da01      	bge.n	800b644 <f_mount+0x28>
 800b640:	230b      	movs	r3, #11
 800b642:	e02b      	b.n	800b69c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b644:	4a17      	ldr	r2, [pc, #92]	@ (800b6a4 <f_mount+0x88>)
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b64c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d005      	beq.n	800b660 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b654:	69b8      	ldr	r0, [r7, #24]
 800b656:	f7fe fdfb 	bl	800a250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	490d      	ldr	r1, [pc, #52]	@ (800b6a4 <f_mount+0x88>)
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <f_mount+0x66>
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d001      	beq.n	800b686 <f_mount+0x6a>
 800b682:	2300      	movs	r3, #0
 800b684:	e00a      	b.n	800b69c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b686:	f107 010c 	add.w	r1, r7, #12
 800b68a:	f107 0308 	add.w	r3, r7, #8
 800b68e:	2200      	movs	r2, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f7ff fd41 	bl	800b118 <find_volume>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	24000600 	.word	0x24000600

0800b6a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b098      	sub	sp, #96	@ 0x60
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <f_open+0x18>
 800b6bc:	2309      	movs	r3, #9
 800b6be:	e1a9      	b.n	800ba14 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b6c8:	79fa      	ldrb	r2, [r7, #7]
 800b6ca:	f107 0110 	add.w	r1, r7, #16
 800b6ce:	f107 0308 	add.w	r3, r7, #8
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fd20 	bl	800b118 <find_volume>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b6de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f040 818d 	bne.w	800ba02 <f_open+0x35a>
		dj.obj.fs = fs;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	f107 0314 	add.w	r3, r7, #20
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fc03 	bl	800af00 <follow_path>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b700:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b704:	2b00      	cmp	r3, #0
 800b706:	d118      	bne.n	800b73a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b708:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	da03      	bge.n	800b71a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b712:	2306      	movs	r3, #6
 800b714:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b718:	e00f      	b.n	800b73a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	bf8c      	ite	hi
 800b720:	2301      	movhi	r3, #1
 800b722:	2300      	movls	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	f107 0314 	add.w	r3, r7, #20
 800b72c:	4611      	mov	r1, r2
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fc82 	bl	800a038 <chk_lock>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	f003 031c 	and.w	r3, r3, #28
 800b740:	2b00      	cmp	r3, #0
 800b742:	d07f      	beq.n	800b844 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d017      	beq.n	800b77c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b74c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b750:	2b04      	cmp	r3, #4
 800b752:	d10e      	bne.n	800b772 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b754:	f7fe fccc 	bl	800a0f0 <enq_lock>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d006      	beq.n	800b76c <f_open+0xc4>
 800b75e:	f107 0314 	add.w	r3, r7, #20
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff fb05 	bl	800ad72 <dir_register>
 800b768:	4603      	mov	r3, r0
 800b76a:	e000      	b.n	800b76e <f_open+0xc6>
 800b76c:	2312      	movs	r3, #18
 800b76e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	f043 0308 	orr.w	r3, r3, #8
 800b778:	71fb      	strb	r3, [r7, #7]
 800b77a:	e010      	b.n	800b79e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b77c:	7ebb      	ldrb	r3, [r7, #26]
 800b77e:	f003 0311 	and.w	r3, r3, #17
 800b782:	2b00      	cmp	r3, #0
 800b784:	d003      	beq.n	800b78e <f_open+0xe6>
					res = FR_DENIED;
 800b786:	2307      	movs	r3, #7
 800b788:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b78c:	e007      	b.n	800b79e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <f_open+0xf6>
 800b798:	2308      	movs	r3, #8
 800b79a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d168      	bne.n	800b878 <f_open+0x1d0>
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d063      	beq.n	800b878 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b7b0:	f7fe f882 	bl	80098b8 <get_fattime>
 800b7b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b8:	330e      	adds	r3, #14
 800b7ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fe fb91 	bl	8009ee4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c4:	3316      	adds	r3, #22
 800b7c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe fb8b 	bl	8009ee4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d0:	330b      	adds	r3, #11
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff fa34 	bl	800ac4a <ld_clust>
 800b7e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7ff fa4c 	bl	800ac88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f2:	331c      	adds	r3, #28
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fe fb74 	bl	8009ee4 <st_dword>
					fs->wflag = 1;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2201      	movs	r2, #1
 800b800:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d037      	beq.n	800b878 <f_open+0x1d0>
						dw = fs->winsect;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b80e:	f107 0314 	add.w	r3, r7, #20
 800b812:	2200      	movs	r2, #0
 800b814:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe ff5f 	bl	800a6da <remove_chain>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b826:	2b00      	cmp	r3, #0
 800b828:	d126      	bne.n	800b878 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fd76 	bl	800a320 <move_window>
 800b834:	4603      	mov	r3, r0
 800b836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b83e:	3a01      	subs	r2, #1
 800b840:	60da      	str	r2, [r3, #12]
 800b842:	e019      	b.n	800b878 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d115      	bne.n	800b878 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b84c:	7ebb      	ldrb	r3, [r7, #26]
 800b84e:	f003 0310 	and.w	r3, r3, #16
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <f_open+0x1b6>
					res = FR_NO_FILE;
 800b856:	2304      	movs	r3, #4
 800b858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b85c:	e00c      	b.n	800b878 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	f003 0302 	and.w	r3, r3, #2
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <f_open+0x1d0>
 800b868:	7ebb      	ldrb	r3, [r7, #26]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <f_open+0x1d0>
						res = FR_DENIED;
 800b872:	2307      	movs	r3, #7
 800b874:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b878:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d126      	bne.n	800b8ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b890:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b89a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	bf8c      	ite	hi
 800b8a6:	2301      	movhi	r3, #1
 800b8a8:	2300      	movls	r3, #0
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe fc3d 	bl	800a134 <inc_lock>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <f_open+0x226>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f040 8095 	bne.w	800ba02 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8dc:	4611      	mov	r1, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff f9b3 	bl	800ac4a <ld_clust>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	331c      	adds	r3, #28
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe faba 	bl	8009e68 <ld_dword>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	88da      	ldrh	r2, [r3, #6]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	79fa      	ldrb	r2, [r7, #7]
 800b912:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3330      	adds	r3, #48	@ 0x30
 800b92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b92e:	2100      	movs	r1, #0
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe fb24 	bl	8009f7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d060      	beq.n	800ba02 <f_open+0x35a>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d05c      	beq.n	800ba02 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	895b      	ldrh	r3, [r3, #10]
 800b954:	025b      	lsls	r3, r3, #9
 800b956:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	657b      	str	r3, [r7, #84]	@ 0x54
 800b964:	e016      	b.n	800b994 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fd24 	bl	800a3b8 <get_fat>
 800b970:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b974:	2b01      	cmp	r3, #1
 800b976:	d802      	bhi.n	800b97e <f_open+0x2d6>
 800b978:	2302      	movs	r3, #2
 800b97a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b97e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d102      	bne.n	800b98c <f_open+0x2e4>
 800b986:	2301      	movs	r3, #1
 800b988:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b98c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b98e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	657b      	str	r3, [r7, #84]	@ 0x54
 800b994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <f_open+0x2fc>
 800b99c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b99e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d8e0      	bhi.n	800b966 <f_open+0x2be>
				}
				fp->clust = clst;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b9aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d127      	bne.n	800ba02 <f_open+0x35a>
 800b9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d022      	beq.n	800ba02 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fcda 	bl	800a37a <clust2sect>
 800b9c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800b9c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d103      	bne.n	800b9d6 <f_open+0x32e>
						res = FR_INT_ERR;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b9d4:	e015      	b.n	800ba02 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9d8:	0a5a      	lsrs	r2, r3, #9
 800b9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	7858      	ldrb	r0, [r3, #1]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a1a      	ldr	r2, [r3, #32]
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	f7fe f9e1 	bl	8009db8 <disk_read>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <f_open+0x35a>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ba02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <f_open+0x368>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ba10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3760      	adds	r7, #96	@ 0x60
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08e      	sub	sp, #56	@ 0x38
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f107 0214 	add.w	r2, r7, #20
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fdb7 	bl	800b5b0 <validate>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d107      	bne.n	800ba60 <f_read+0x44>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	7d5b      	ldrb	r3, [r3, #21]
 800ba54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ba58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <f_read+0x4a>
 800ba60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba64:	e115      	b.n	800bc92 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	7d1b      	ldrb	r3, [r3, #20]
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <f_read+0x5a>
 800ba72:	2307      	movs	r3, #7
 800ba74:	e10d      	b.n	800bc92 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	f240 80fe 	bls.w	800bc88 <f_read+0x26c>
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ba90:	e0fa      	b.n	800bc88 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f040 80c6 	bne.w	800bc2c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	8952      	ldrh	r2, [r2, #10]
 800baaa:	3a01      	subs	r2, #1
 800baac:	4013      	ands	r3, r2
 800baae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d12f      	bne.n	800bb16 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d103      	bne.n	800bac6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bac4:	e013      	b.n	800baee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	4619      	mov	r1, r3
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7fe fefd 	bl	800a8d4 <clmt_clust>
 800bada:	6338      	str	r0, [r7, #48]	@ 0x30
 800badc:	e007      	b.n	800baee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	69db      	ldr	r3, [r3, #28]
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7fe fc66 	bl	800a3b8 <get_fat>
 800baec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800baee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d804      	bhi.n	800bafe <f_read+0xe2>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2202      	movs	r2, #2
 800baf8:	755a      	strb	r2, [r3, #21]
 800bafa:	2302      	movs	r3, #2
 800bafc:	e0c9      	b.n	800bc92 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb04:	d104      	bne.n	800bb10 <f_read+0xf4>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	755a      	strb	r2, [r3, #21]
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e0c0      	b.n	800bc92 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fe fc2b 	bl	800a37a <clust2sect>
 800bb24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d104      	bne.n	800bb36 <f_read+0x11a>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2202      	movs	r2, #2
 800bb30:	755a      	strb	r2, [r3, #21]
 800bb32:	2302      	movs	r3, #2
 800bb34:	e0ad      	b.n	800bc92 <f_read+0x276>
			sect += csect;
 800bb36:	69ba      	ldr	r2, [r7, #24]
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	0a5b      	lsrs	r3, r3, #9
 800bb42:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d039      	beq.n	800bbbe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4e:	4413      	add	r3, r2
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	8952      	ldrh	r2, [r2, #10]
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d905      	bls.n	800bb64 <f_read+0x148>
					cc = fs->csize - csect;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	7858      	ldrb	r0, [r3, #1]
 800bb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb6e:	f7fe f923 	bl	8009db8 <disk_read>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <f_read+0x166>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	755a      	strb	r2, [r3, #21]
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e087      	b.n	800bc92 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7d1b      	ldrb	r3, [r3, #20]
 800bb86:	b25b      	sxtb	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	da14      	bge.n	800bbb6 <f_read+0x19a>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6a1a      	ldr	r2, [r3, #32]
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d90d      	bls.n	800bbb6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6a1a      	ldr	r2, [r3, #32]
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	025b      	lsls	r3, r3, #9
 800bba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bba6:	18d0      	adds	r0, r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3330      	adds	r3, #48	@ 0x30
 800bbac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f7fe f9c3 	bl	8009f3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	025b      	lsls	r3, r3, #9
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bbbc:	e050      	b.n	800bc60 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	69ba      	ldr	r2, [r7, #24]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d02e      	beq.n	800bc26 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	7d1b      	ldrb	r3, [r3, #20]
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da18      	bge.n	800bc04 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	7858      	ldrb	r0, [r3, #1]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a1a      	ldr	r2, [r3, #32]
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f7fe f909 	bl	8009df8 <disk_write>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <f_read+0x1da>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	755a      	strb	r2, [r3, #21]
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e04d      	b.n	800bc92 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	7d1b      	ldrb	r3, [r3, #20]
 800bbfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	7858      	ldrb	r0, [r3, #1]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc0e:	2301      	movs	r3, #1
 800bc10:	69ba      	ldr	r2, [r7, #24]
 800bc12:	f7fe f8d1 	bl	8009db8 <disk_read>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <f_read+0x20a>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	755a      	strb	r2, [r3, #21]
 800bc22:	2301      	movs	r3, #1
 800bc24:	e035      	b.n	800bc92 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc34:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bc38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bc3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d901      	bls.n	800bc46 <f_read+0x22a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc54:	4413      	add	r3, r2
 800bc56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc5c:	f7fe f96e 	bl	8009f3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bc60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	4413      	add	r3, r2
 800bc66:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6e:	441a      	add	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	619a      	str	r2, [r3, #24]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	441a      	add	r2, r3
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f47f af01 	bne.w	800ba92 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3738      	adds	r7, #56	@ 0x38
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	4613      	mov	r3, r2
 800bca8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bcb2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcb4:	7a5b      	ldrb	r3, [r3, #9]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d131      	bne.n	800bd20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bcbc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcbe:	7a5b      	ldrb	r3, [r3, #9]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcca:	4b19      	ldr	r3, [pc, #100]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bccc:	7a5b      	ldrb	r3, [r3, #9]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	4a17      	ldr	r2, [pc, #92]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bcda:	4b15      	ldr	r3, [pc, #84]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcdc:	7a5b      	ldrb	r3, [r3, #9]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	461a      	mov	r2, r3
 800bce2:	4b13      	ldr	r3, [pc, #76]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bce4:	4413      	add	r3, r2
 800bce6:	79fa      	ldrb	r2, [r7, #7]
 800bce8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcea:	4b11      	ldr	r3, [pc, #68]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcec:	7a5b      	ldrb	r3, [r3, #9]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	b2d1      	uxtb	r1, r2
 800bcf4:	4a0e      	ldr	r2, [pc, #56]	@ (800bd30 <FATFS_LinkDriverEx+0x94>)
 800bcf6:	7251      	strb	r1, [r2, #9]
 800bcf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcfa:	7dbb      	ldrb	r3, [r7, #22]
 800bcfc:	3330      	adds	r3, #48	@ 0x30
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3301      	adds	r3, #1
 800bd08:	223a      	movs	r2, #58	@ 0x3a
 800bd0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3302      	adds	r3, #2
 800bd10:	222f      	movs	r2, #47	@ 0x2f
 800bd12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3303      	adds	r3, #3
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	24000628 	.word	0x24000628

0800bd34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff ffaa 	bl	800bc9c <FATFS_LinkDriverEx>
 800bd48:	4603      	mov	r3, r0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <memset>:
 800bd52:	4402      	add	r2, r0
 800bd54:	4603      	mov	r3, r0
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d100      	bne.n	800bd5c <memset+0xa>
 800bd5a:	4770      	bx	lr
 800bd5c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd60:	e7f9      	b.n	800bd56 <memset+0x4>
	...

0800bd64 <__libc_init_array>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4d0d      	ldr	r5, [pc, #52]	@ (800bd9c <__libc_init_array+0x38>)
 800bd68:	4c0d      	ldr	r4, [pc, #52]	@ (800bda0 <__libc_init_array+0x3c>)
 800bd6a:	1b64      	subs	r4, r4, r5
 800bd6c:	10a4      	asrs	r4, r4, #2
 800bd6e:	2600      	movs	r6, #0
 800bd70:	42a6      	cmp	r6, r4
 800bd72:	d109      	bne.n	800bd88 <__libc_init_array+0x24>
 800bd74:	4d0b      	ldr	r5, [pc, #44]	@ (800bda4 <__libc_init_array+0x40>)
 800bd76:	4c0c      	ldr	r4, [pc, #48]	@ (800bda8 <__libc_init_array+0x44>)
 800bd78:	f000 f818 	bl	800bdac <_init>
 800bd7c:	1b64      	subs	r4, r4, r5
 800bd7e:	10a4      	asrs	r4, r4, #2
 800bd80:	2600      	movs	r6, #0
 800bd82:	42a6      	cmp	r6, r4
 800bd84:	d105      	bne.n	800bd92 <__libc_init_array+0x2e>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8c:	4798      	blx	r3
 800bd8e:	3601      	adds	r6, #1
 800bd90:	e7ee      	b.n	800bd70 <__libc_init_array+0xc>
 800bd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd96:	4798      	blx	r3
 800bd98:	3601      	adds	r6, #1
 800bd9a:	e7f2      	b.n	800bd82 <__libc_init_array+0x1e>
 800bd9c:	0800c11c 	.word	0x0800c11c
 800bda0:	0800c11c 	.word	0x0800c11c
 800bda4:	0800c11c 	.word	0x0800c11c
 800bda8:	0800c120 	.word	0x0800c120

0800bdac <_init>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	bf00      	nop
 800bdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb2:	bc08      	pop	{r3}
 800bdb4:	469e      	mov	lr, r3
 800bdb6:	4770      	bx	lr

0800bdb8 <_fini>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr
