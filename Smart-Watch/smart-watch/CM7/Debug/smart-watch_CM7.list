
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005508  08005508  00006508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080056f0  080056f0  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056f0  080056f0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080056f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  24000010  08005708  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000bc  08005708  000070bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0f1  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9f  00000000  00000000  0001312f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00014fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cb  00000000  00000000  00015a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e465  00000000  00000000  00016213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbfe  00000000  00000000  00054678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019149c  00000000  00000000  00062276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f3712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  001f3758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001f6258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080054f0 	.word	0x080054f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080054f0 	.word	0x080054f0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fa99 	bl	8001950 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fa93 	bl	8001950 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fa7f 	bl	8001950 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fa79 	bl	8001950 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 fa65 	bl	8001950 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fa5f 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f000 ff2f 	bl	80013c8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 ff29 	bl	80013c8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f000 ff23 	bl	80013c8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000654:	2048      	movs	r0, #72	@ 0x48
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__18_BIT);
 8000660:	2006      	movs	r0, #6
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 fcfb 	bl	80013c8 <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f000 fcf5 	bl	80013c8 <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS


static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]

	HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <GC9A01_spi_tx+0x24>)
 80009fa:	f003 fca7 	bl	800434c <HAL_SPI_Transmit>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	24000030 	.word	0x24000030

08000a0c <lcd_init>:

uint8_t color[3];


void lcd_init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000a10:	f7ff fda3 	bl	800055a <GC9A01_init>

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <lcd_process>:


void lcd_process(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	lcd_demo();
 8000a1c:	f000 f802 	bl	8000a24 <lcd_demo>

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <lcd_demo>:


void lcd_demo(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

    // Triangle //

	triangle_ex();
 8000a28:	f000 f81c 	bl	8000a64 <triangle_ex>

    //setPWM(1);

    HAL_Delay(1000);
 8000a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a30:	f000 fcca 	bl	80013c8 <HAL_Delay>

    // setPWM(0);

    // Rainbow //

    rainbow_ex();
 8000a34:	f000 f854 	bl	8000ae0 <rainbow_ex>

    // setPWM(1);

    HAL_Delay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3c:	f000 fcc4 	bl	80013c8 <HAL_Delay>

    // setPWM(0);

    // Checkerboard //

    checkboard_ex();
 8000a40:	f000 f8f8 	bl	8000c34 <checkboard_ex>

    // setPWM(1);

    HAL_Delay(1000);
 8000a44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a48:	f000 fcbe 	bl	80013c8 <HAL_Delay>

    // setPWM(0);

    // Swiss flag //

    swissFlag_ex();
 8000a4c:	f000 f94e 	bl	8000cec <swissFlag_ex>

    // setPWM(1);

    GC9A01_write_command(0x20);
 8000a50:	2020      	movs	r0, #32
 8000a52:	f7ff fd25 	bl	80004a0 <GC9A01_write_command>

    HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a5a:	f000 fcb5 	bl	80013c8 <HAL_Delay>

    // setPWM(0);

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <triangle_ex>:




static void triangle_ex(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

	color[0] = 0xFF;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <triangle_ex+0x74>)
 8000a6c:	22ff      	movs	r2, #255	@ 0xff
 8000a6e:	701a      	strb	r2, [r3, #0]
	color[1] = 0xFF;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <triangle_ex+0x74>)
 8000a72:	22ff      	movs	r2, #255	@ 0xff
 8000a74:	705a      	strb	r2, [r3, #1]

	for(int x = 0; x < 240; x++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e025      	b.n	8000ac8 <triangle_ex+0x64>
	{

		for(int y = 0; y < 240; y++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	e01c      	b.n	8000abc <triangle_ex+0x58>
		{

			if(x < y)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	da03      	bge.n	8000a92 <triangle_ex+0x2e>
			{

				color[2] = 0xFF;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <triangle_ex+0x74>)
 8000a8c:	22ff      	movs	r2, #255	@ 0xff
 8000a8e:	709a      	strb	r2, [r3, #2]
 8000a90:	e002      	b.n	8000a98 <triangle_ex+0x34>

			}
			else
			{

				color[2] = 0x00;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <triangle_ex+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	709a      	strb	r2, [r3, #2]

			}

			if(x == 0 && y == 0)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d107      	bne.n	8000aae <triangle_ex+0x4a>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <triangle_ex+0x4a>
			{

				GC9A01_write(color, sizeof(color));
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <triangle_ex+0x74>)
 8000aa8:	f7ff fd37 	bl	800051a <GC9A01_write>
 8000aac:	e003      	b.n	8000ab6 <triangle_ex+0x52>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000aae:	2103      	movs	r1, #3
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <triangle_ex+0x74>)
 8000ab2:	f7ff fd42 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2bef      	cmp	r3, #239	@ 0xef
 8000ac0:	dddf      	ble.n	8000a82 <triangle_ex+0x1e>
	for(int x = 0; x < 240; x++)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2bef      	cmp	r3, #239	@ 0xef
 8000acc:	ddd6      	ble.n	8000a7c <triangle_ex+0x18>

		}

	}

}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2400002c 	.word	0x2400002c
 8000adc:	00000000 	.word	0x00000000

08000ae0 <rainbow_ex>:


static void rainbow_ex(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

	float frequency = 0.026;
 8000ae6:	4b50      	ldr	r3, [pc, #320]	@ (8000c28 <rainbow_ex+0x148>)
 8000ae8:	60fb      	str	r3, [r7, #12]

	for(int x = 0; x < 240; x++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e089      	b.n	8000c04 <rainbow_ex+0x124>
	{

		color[0] = sin(frequency*x + 0) * 127 + 128;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b02:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000c2c <rainbow_ex+0x14c>
 8000b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b0e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b12:	f003 ff21 	bl	8004958 <sin>
 8000b16:	eeb0 7b40 	vmov.f64	d7, d0
 8000b1a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8000c18 <rainbow_ex+0x138>
 8000b1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b22:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8000c20 <rainbow_ex+0x140>
 8000b26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <rainbow_ex+0x150>)
 8000b38:	701a      	strb	r2, [r3, #0]
		color[1] = sin(frequency*x + 2) * 127 + 128;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b58:	eeb0 0b47 	vmov.f64	d0, d7
 8000b5c:	f003 fefc 	bl	8004958 <sin>
 8000b60:	eeb0 7b40 	vmov.f64	d7, d0
 8000b64:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8000c18 <rainbow_ex+0x138>
 8000b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b6c:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8000c20 <rainbow_ex+0x140>
 8000b70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <rainbow_ex+0x150>)
 8000b82:	705a      	strb	r2, [r3, #1]
		color[2] = sin(frequency*x + 4) * 127 + 128;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b96:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba2:	eeb0 0b47 	vmov.f64	d0, d7
 8000ba6:	f003 fed7 	bl	8004958 <sin>
 8000baa:	eeb0 7b40 	vmov.f64	d7, d0
 8000bae:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000c18 <rainbow_ex+0x138>
 8000bb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bb6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000c20 <rainbow_ex+0x140>
 8000bba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bc6:	793b      	ldrb	r3, [r7, #4]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <rainbow_ex+0x150>)
 8000bcc:	709a      	strb	r2, [r3, #2]
		for(int y = 0; y < 240; y++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	e011      	b.n	8000bf8 <rainbow_ex+0x118>
		{

			if (x == 0 && y == 0)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d107      	bne.n	8000bea <rainbow_ex+0x10a>
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <rainbow_ex+0x10a>
			{

				GC9A01_write(color, sizeof(color));
 8000be0:	2103      	movs	r1, #3
 8000be2:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <rainbow_ex+0x150>)
 8000be4:	f7ff fc99 	bl	800051a <GC9A01_write>
 8000be8:	e003      	b.n	8000bf2 <rainbow_ex+0x112>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000bea:	2103      	movs	r1, #3
 8000bec:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <rainbow_ex+0x150>)
 8000bee:	f7ff fca4 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	2bef      	cmp	r3, #239	@ 0xef
 8000bfc:	ddea      	ble.n	8000bd4 <rainbow_ex+0xf4>
	for(int x = 0; x < 240; x++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	2bef      	cmp	r3, #239	@ 0xef
 8000c08:	f77f af72 	ble.w	8000af0 <rainbow_ex+0x10>

		}

	}

}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	405fc000 	.word	0x405fc000
 8000c20:	00000000 	.word	0x00000000
 8000c24:	40600000 	.word	0x40600000
 8000c28:	3cd4fdf4 	.word	0x3cd4fdf4
 8000c2c:	00000000 	.word	0x00000000
 8000c30:	2400002c 	.word	0x2400002c

08000c34 <checkboard_ex>:


static void checkboard_ex(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

	for(int x = 0; x < 240; x++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e048      	b.n	8000cd2 <checkboard_ex+0x9e>
	{

		for(int y = 0; y < 240; y++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	e03f      	b.n	8000cc6 <checkboard_ex+0x92>
		{

			if((x / 10) % 2 ==  (y / 10) % 2)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <checkboard_ex+0xb0>)
 8000c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4e:	1092      	asrs	r2, r2, #2
 8000c50:	17db      	asrs	r3, r3, #31
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	bfb8      	it	lt
 8000c5c:	425b      	neglt	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	4920      	ldr	r1, [pc, #128]	@ (8000ce4 <checkboard_ex+0xb0>)
 8000c64:	fb81 0103 	smull	r0, r1, r1, r3
 8000c68:	1089      	asrs	r1, r1, #2
 8000c6a:	17db      	asrs	r3, r3, #31
 8000c6c:	1acb      	subs	r3, r1, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d109      	bne.n	8000c90 <checkboard_ex+0x5c>
			{

				color[0] = 0xFF;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c7e:	22ff      	movs	r2, #255	@ 0xff
 8000c80:	701a      	strb	r2, [r3, #0]
				color[1] = 0xFF;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c84:	22ff      	movs	r2, #255	@ 0xff
 8000c86:	705a      	strb	r2, [r3, #1]
				color[2] = 0xFF;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c8a:	22ff      	movs	r2, #255	@ 0xff
 8000c8c:	709a      	strb	r2, [r3, #2]
 8000c8e:	e008      	b.n	8000ca2 <checkboard_ex+0x6e>

			}
			else
			{

				color[0] = 0x00;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
				color[1] = 0x00;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	705a      	strb	r2, [r3, #1]
				color[2] = 0x00;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	709a      	strb	r2, [r3, #2]

			}
			if(x == 0 && y == 0)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d107      	bne.n	8000cb8 <checkboard_ex+0x84>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <checkboard_ex+0x84>
			{

				GC9A01_write(color, sizeof(color));
 8000cae:	2103      	movs	r1, #3
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000cb2:	f7ff fc32 	bl	800051a <GC9A01_write>
 8000cb6:	e003      	b.n	8000cc0 <checkboard_ex+0x8c>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000cb8:	2103      	movs	r1, #3
 8000cba:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <checkboard_ex+0xb4>)
 8000cbc:	f7ff fc3d 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2bef      	cmp	r3, #239	@ 0xef
 8000cca:	ddbc      	ble.n	8000c46 <checkboard_ex+0x12>
	for(int x = 0; x < 240; x++)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2bef      	cmp	r3, #239	@ 0xef
 8000cd6:	ddb3      	ble.n	8000c40 <checkboard_ex+0xc>

		}

	}

}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	66666667 	.word	0x66666667
 8000ce8:	2400002c 	.word	0x2400002c

08000cec <swissFlag_ex>:


static void swissFlag_ex(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

	color[0] = 0xFF;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000cf4:	22ff      	movs	r2, #255	@ 0xff
 8000cf6:	701a      	strb	r2, [r3, #0]

	for(int x = 0; x < 240; x++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	e03f      	b.n	8000d7e <swissFlag_ex+0x92>
	{

		for(int y = 0; y < 240; y++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	e036      	b.n	8000d72 <swissFlag_ex+0x86>
		{

			if((x >= 1*48 && x < 4*48 && y >= 2*48 && y < 3*48) ||
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d08:	dd08      	ble.n	8000d1c <swissFlag_ex+0x30>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2bbf      	cmp	r3, #191	@ 0xbf
 8000d0e:	dc05      	bgt.n	8000d1c <swissFlag_ex+0x30>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d14:	dd02      	ble.n	8000d1c <swissFlag_ex+0x30>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b8f      	cmp	r3, #143	@ 0x8f
 8000d1a:	dd0b      	ble.n	8000d34 <swissFlag_ex+0x48>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000d20:	dd0f      	ble.n	8000d42 <swissFlag_ex+0x56>
				(x >= 2*48 && x < 3*48 && y >= 1*48 && y < 4*48))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b8f      	cmp	r3, #143	@ 0x8f
 8000d26:	dc0c      	bgt.n	8000d42 <swissFlag_ex+0x56>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d2c:	dd09      	ble.n	8000d42 <swissFlag_ex+0x56>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2bbf      	cmp	r3, #191	@ 0xbf
 8000d32:	dc06      	bgt.n	8000d42 <swissFlag_ex+0x56>
			{

				color[1] = 0xFF;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d36:	22ff      	movs	r2, #255	@ 0xff
 8000d38:	705a      	strb	r2, [r3, #1]
				color[2] = 0xFF;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d3c:	22ff      	movs	r2, #255	@ 0xff
 8000d3e:	709a      	strb	r2, [r3, #2]
 8000d40:	e005      	b.n	8000d4e <swissFlag_ex+0x62>

			}
			else
			{

				color[1] = 0x00;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	705a      	strb	r2, [r3, #1]
				color[2] = 0x00;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	709a      	strb	r2, [r3, #2]

			}
			if(x == 0 && y == 0)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d107      	bne.n	8000d64 <swissFlag_ex+0x78>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d104      	bne.n	8000d64 <swissFlag_ex+0x78>
			{

				GC9A01_write(color, sizeof(color));
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d5e:	f7ff fbdc 	bl	800051a <GC9A01_write>
 8000d62:	e003      	b.n	8000d6c <swissFlag_ex+0x80>

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));
 8000d64:	2103      	movs	r1, #3
 8000d66:	480a      	ldr	r0, [pc, #40]	@ (8000d90 <swissFlag_ex+0xa4>)
 8000d68:	f7ff fbe7 	bl	800053a <GC9A01_write_continue>
		for(int y = 0; y < 240; y++)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2bef      	cmp	r3, #239	@ 0xef
 8000d76:	ddc5      	ble.n	8000d04 <swissFlag_ex+0x18>
	for(int x = 0; x < 240; x++)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2bef      	cmp	r3, #239	@ 0xef
 8000d82:	ddbc      	ble.n	8000cfe <swissFlag_ex+0x12>

		}

	}

}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2400002c 	.word	0x2400002c

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d9e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000da0:	bf00      	nop
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <main+0x9c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <main+0x24>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	dcf4      	bgt.n	8000da2 <main+0xe>
  if ( timeout < 0 )
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da01      	bge.n	8000dc2 <main+0x2e>
  {
  Error_Handler();
 8000dbe:	f000 f967 	bl	8001090 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fa6f 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f835 	bl	8000e34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <main+0x9c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <main+0x9c>)
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <main+0x9c>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 fdcb 	bl	8001984 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fde1 	bl	80019b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000df6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dfa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dfc:	bf00      	nop
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <main+0x9c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d104      	bne.n	8000e14 <main+0x80>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dcf4      	bgt.n	8000dfe <main+0x6a>
if ( timeout < 0 )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da01      	bge.n	8000e1e <main+0x8a>
{
Error_Handler();
 8000e1a:	f000 f939 	bl	8001090 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f000 f8dd 	bl	8000fdc <MX_GPIO_Init>
  MX_SPI5_Init();
 8000e22:	f000 f885 	bl	8000f30 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e26:	f7ff fdf1 	bl	8000a0c <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	lcd_process();
 8000e2a:	f7ff fdf5 	bl	8000a18 <lcd_process>
 8000e2e:	e7fc      	b.n	8000e2a <main+0x96>
 8000e30:	58024400 	.word	0x58024400

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09c      	sub	sp, #112	@ 0x70
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	224c      	movs	r2, #76	@ 0x4c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fd59 	bl	80048fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fd53 	bl	80048fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e54:	2004      	movs	r0, #4
 8000e56:	f000 fdc3 	bl	80019e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <SystemClock_Config+0xf4>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e62:	4a31      	ldr	r2, [pc, #196]	@ (8000f28 <SystemClock_Config+0xf4>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <SystemClock_Config+0xf4>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <SystemClock_Config+0xf8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f2c <SystemClock_Config+0xf8>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <SystemClock_Config+0xf8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e90:	bf00      	nop
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <SystemClock_Config+0xf8>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e9e:	d1f8      	bne.n	8000e92 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2340      	movs	r3, #64	@ 0x40
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000ec0:	230d      	movs	r3, #13
 8000ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fdda 	bl	8001a94 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ee6:	f000 f8d3 	bl	8001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	233f      	movs	r3, #63	@ 0x3f
 8000eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000efe:	2340      	movs	r3, #64	@ 0x40
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f08:	2340      	movs	r3, #64	@ 0x40
 8000f0a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fa19 	bl	8002348 <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000f1c:	f000 f8b8 	bl	8001090 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3770      	adds	r7, #112	@ 0x70
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	58000400 	.word	0x58000400
 8000f2c:	58024800 	.word	0x58024800

08000f30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <MX_SPI5_Init+0xa8>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_SPI5_Init+0xa4>)
 8000fc0:	f003 f8a0 	bl	8004104 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000fca:	f000 f861 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24000030 	.word	0x24000030
 8000fd8:	40015000 	.word	0x40015000

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8000ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8001018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_GPIO_Init+0xa8>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <MX_GPIO_Init+0xac>)
 8001034:	f000 fc8c 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2161      	movs	r1, #97	@ 0x61
 800103c:	4813      	ldr	r0, [pc, #76]	@ (800108c <MX_GPIO_Init+0xb0>)
 800103e:	f000 fc87 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001042:	2302      	movs	r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <MX_GPIO_Init+0xac>)
 800105a:	f000 fac9 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800105e:	2361      	movs	r3, #97	@ 0x61
 8001060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_GPIO_Init+0xb0>)
 8001076:	f000 fabb 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	58024400 	.word	0x58024400
 8001088:	58022800 	.word	0x58022800
 800108c:	58022400 	.word	0x58022400

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <Error_Handler+0x8>

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_MspInit+0x30>)
 80010a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a8:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_MspInit+0x30>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_MspInit+0x30>)
 80010b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	58024400 	.word	0x58024400

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0be      	sub	sp, #248	@ 0xf8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	22c8      	movs	r2, #200	@ 0xc8
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 fc02 	bl	80048fa <memset>
  if(hspi->Instance==SPI5)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a39      	ldr	r2, [pc, #228]	@ (80011e0 <HAL_SPI_MspInit+0x110>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d16a      	bne.n	80011d6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fc46 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001122:	f7ff ffb5 	bl	8001090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001126:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800112c:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 800112e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800113c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 800114c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <HAL_SPI_MspInit+0x114>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 8001180:	2301      	movs	r3, #1
 8001182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001198:	2305      	movs	r3, #5
 800119a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4810      	ldr	r0, [pc, #64]	@ (80011e8 <HAL_SPI_MspInit+0x118>)
 80011a6:	f000 fa23 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 80011aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011c4:	2305      	movs	r3, #5
 80011c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011ca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_SPI_MspInit+0x11c>)
 80011d2:	f000 fa0d 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	37f8      	adds	r7, #248	@ 0xf8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40015000 	.word	0x40015000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58022800 	.word	0x58022800
 80011ec:	58022400 	.word	0x58022400

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 f89f 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff f840 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f003 fb45 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fd87 	bl	8000d94 <main>
  bx  lr
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800128c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001290:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001294:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8001298:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800129c:	240000bc 	.word	0x240000bc

080012a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC3_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012aa:	2003      	movs	r0, #3
 80012ac:	f000 f96e 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b0:	f001 fa00 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_Init+0x68>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	4913      	ldr	r1, [pc, #76]	@ (8001310 <HAL_Init+0x6c>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_Init+0x68>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <HAL_Init+0x6c>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_Init+0x70>)
 80012e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_Init+0x74>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f814 	bl	800131c <HAL_InitTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e002      	b.n	8001304 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012fe:	f7ff fecd 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	58024400 	.word	0x58024400
 8001310:	08005508 	.word	0x08005508
 8001314:	24000004 	.word	0x24000004
 8001318:	24000000 	.word	0x24000000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e021      	b.n	8001374 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_InitTick+0x64>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_InitTick+0x60>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f945 	bl	80015d6 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f91d 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_InitTick+0x68>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2400000c 	.word	0x2400000c
 8001380:	24000000 	.word	0x24000000
 8001384:	24000008 	.word	0x24000008

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2400000c 	.word	0x2400000c
 80013ac:	240000b8 	.word	0x240000b8

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	240000b8 	.word	0x240000b8

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2400000c 	.word	0x2400000c

08001410 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_GetREVID+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0c1b      	lsrs	r3, r3, #16
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	5c001000 	.word	0x5c001000

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <__NVIC_SetPriorityGrouping+0x40>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	4313      	orrs	r3, r2
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x40>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	05fa0000 	.word	0x05fa0000

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	@ (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff8e 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff47 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff5e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffb2 	bl	8001548 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015fe:	4b89      	ldr	r3, [pc, #548]	@ (8001824 <HAL_GPIO_Init+0x234>)
 8001600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001602:	e194      	b.n	800192e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8186 	beq.w	8001928 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d005      	beq.n	8001634 <HAL_GPIO_Init+0x44>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d130      	bne.n	8001696 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166a:	2201      	movs	r2, #1
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 0201 	and.w	r2, r3, #1
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d017      	beq.n	80016d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d123      	bne.n	8001726 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	69b9      	ldr	r1, [r7, #24]
 8001722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0203 	and.w	r2, r3, #3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80e0 	beq.w	8001928 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001768:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <HAL_GPIO_Init+0x238>)
 800176a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800176e:	4a2e      	ldr	r2, [pc, #184]	@ (8001828 <HAL_GPIO_Init+0x238>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <HAL_GPIO_Init+0x238>)
 800177a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001786:	4a29      	ldr	r2, [pc, #164]	@ (800182c <HAL_GPIO_Init+0x23c>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a20      	ldr	r2, [pc, #128]	@ (8001830 <HAL_GPIO_Init+0x240>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d052      	beq.n	8001858 <HAL_GPIO_Init+0x268>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001834 <HAL_GPIO_Init+0x244>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d031      	beq.n	800181e <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <HAL_GPIO_Init+0x248>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d02b      	beq.n	800181a <HAL_GPIO_Init+0x22a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	@ (800183c <HAL_GPIO_Init+0x24c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d025      	beq.n	8001816 <HAL_GPIO_Init+0x226>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <HAL_GPIO_Init+0x250>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01f      	beq.n	8001812 <HAL_GPIO_Init+0x222>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <HAL_GPIO_Init+0x254>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0x21e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_GPIO_Init+0x258>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0x21a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a19      	ldr	r2, [pc, #100]	@ (800184c <HAL_GPIO_Init+0x25c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00d      	beq.n	8001806 <HAL_GPIO_Init+0x216>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <HAL_GPIO_Init+0x260>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <HAL_GPIO_Init+0x212>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_GPIO_Init+0x264>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_Init+0x20e>
 80017fa:	2309      	movs	r3, #9
 80017fc:	e02d      	b.n	800185a <HAL_GPIO_Init+0x26a>
 80017fe:	230a      	movs	r3, #10
 8001800:	e02b      	b.n	800185a <HAL_GPIO_Init+0x26a>
 8001802:	2308      	movs	r3, #8
 8001804:	e029      	b.n	800185a <HAL_GPIO_Init+0x26a>
 8001806:	2307      	movs	r3, #7
 8001808:	e027      	b.n	800185a <HAL_GPIO_Init+0x26a>
 800180a:	2306      	movs	r3, #6
 800180c:	e025      	b.n	800185a <HAL_GPIO_Init+0x26a>
 800180e:	2305      	movs	r3, #5
 8001810:	e023      	b.n	800185a <HAL_GPIO_Init+0x26a>
 8001812:	2304      	movs	r3, #4
 8001814:	e021      	b.n	800185a <HAL_GPIO_Init+0x26a>
 8001816:	2303      	movs	r3, #3
 8001818:	e01f      	b.n	800185a <HAL_GPIO_Init+0x26a>
 800181a:	2302      	movs	r3, #2
 800181c:	e01d      	b.n	800185a <HAL_GPIO_Init+0x26a>
 800181e:	2301      	movs	r3, #1
 8001820:	e01b      	b.n	800185a <HAL_GPIO_Init+0x26a>
 8001822:	bf00      	nop
 8001824:	58000080 	.word	0x58000080
 8001828:	58024400 	.word	0x58024400
 800182c:	58000400 	.word	0x58000400
 8001830:	58020000 	.word	0x58020000
 8001834:	58020400 	.word	0x58020400
 8001838:	58020800 	.word	0x58020800
 800183c:	58020c00 	.word	0x58020c00
 8001840:	58021000 	.word	0x58021000
 8001844:	58021400 	.word	0x58021400
 8001848:	58021800 	.word	0x58021800
 800184c:	58021c00 	.word	0x58021c00
 8001850:	58022000 	.word	0x58022000
 8001854:	58022400 	.word	0x58022400
 8001858:	2300      	movs	r3, #0
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186a:	4938      	ldr	r1, [pc, #224]	@ (800194c <HAL_GPIO_Init+0x35c>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800189e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae63 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	3724      	adds	r7, #36	@ 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	58000400 	.word	0x58000400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800198c:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_HSEM_FastTake+0x2c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3320      	adds	r3, #32
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_HSEM_FastTake+0x30>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	58026400 	.word	0x58026400
 80019b4:	80000300 	.word	0x80000300

080019b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019c2:	4906      	ldr	r1, [pc, #24]	@ (80019dc <HAL_HSEM_Release+0x24>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	58026400 	.word	0x58026400

080019e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d00a      	beq.n	8001a0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e040      	b.n	8001a88 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e03e      	b.n	8001a88 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a0a:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a12:	491f      	ldr	r1, [pc, #124]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a1a:	f7ff fcc9 	bl	80013b0 <HAL_GetTick>
 8001a1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a20:	e009      	b.n	8001a36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a22:	f7ff fcc5 	bl	80013b0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	d901      	bls.n	8001a36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e028      	b.n	8001a88 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a42:	d1ee      	bne.n	8001a22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b1e      	cmp	r3, #30
 8001a48:	d008      	beq.n	8001a5c <HAL_PWREx_ConfigSupply+0x7c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a4e:	d005      	beq.n	8001a5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b1d      	cmp	r3, #29
 8001a54:	d002      	beq.n	8001a5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a5a:	d114      	bne.n	8001a86 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a5c:	f7ff fca8 	bl	80013b0 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a62:	e009      	b.n	8001a78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a64:	f7ff fca4 	bl	80013b0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a72:	d901      	bls.n	8001a78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e007      	b.n	8001a88 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a84:	d1ee      	bne.n	8001a64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58024800 	.word	0x58024800

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	@ 0x30
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f000 bc48 	b.w	8002338 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8088 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4b99      	ldr	r3, [pc, #612]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ac0:	4b96      	ldr	r3, [pc, #600]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d007      	beq.n	8001adc <HAL_RCC_OscConfig+0x48>
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	2b18      	cmp	r3, #24
 8001ad0:	d111      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62>
 8001ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4b8f      	ldr	r3, [pc, #572]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d06d      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x130>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d169      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f000 bc21 	b.w	8002338 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x7a>
 8001b00:	4b86      	ldr	r3, [pc, #536]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a85      	ldr	r2, [pc, #532]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x9c>
 8001b16:	4b81      	ldr	r3, [pc, #516]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a80      	ldr	r2, [pc, #512]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b7e      	ldr	r3, [pc, #504]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7d      	ldr	r2, [pc, #500]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xc0>
 8001b3a:	4b78      	ldr	r3, [pc, #480]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b75      	ldr	r3, [pc, #468]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a74      	ldr	r2, [pc, #464]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd8>
 8001b54:	4b71      	ldr	r3, [pc, #452]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a70      	ldr	r2, [pc, #448]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b6e      	ldr	r3, [pc, #440]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6d      	ldr	r2, [pc, #436]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc1c 	bl	80013b0 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fc18 	bl	80013b0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	@ 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e3d4      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe8>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc08 	bl	80013b0 <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fc04 	bl	80013b0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	@ 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e3c0      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bb6:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x110>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80ca 	beq.w	8001d68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd4:	4b51      	ldr	r3, [pc, #324]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bde:	4b4f      	ldr	r3, [pc, #316]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_RCC_OscConfig+0x166>
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2b18      	cmp	r3, #24
 8001bee:	d156      	bne.n	8001c9e <HAL_RCC_OscConfig+0x20a>
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d151      	bne.n	8001c9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfa:	4b48      	ldr	r3, [pc, #288]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x17e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e392      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c12:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0219 	bic.w	r2, r3, #25
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	493f      	ldr	r1, [pc, #252]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fbc4 	bl	80013b0 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fbc0 	bl	80013b0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e37c      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	f7ff fbe1 	bl	8001410 <HAL_GetREVID>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d817      	bhi.n	8001c88 <HAL_RCC_OscConfig+0x1f4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b40      	cmp	r3, #64	@ 0x40
 8001c5e:	d108      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1de>
 8001c60:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c68:	4a2c      	ldr	r2, [pc, #176]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c70:	e07a      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	031b      	lsls	r3, r3, #12
 8001c80:	4926      	ldr	r1, [pc, #152]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c86:	e06f      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	4921      	ldr	r1, [pc, #132]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	e064      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d047      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0219 	bic.w	r2, r3, #25
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	491a      	ldr	r1, [pc, #104]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb7a 	bl	80013b0 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb76 	bl	80013b0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e332      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	f7ff fb97 	bl	8001410 <HAL_GetREVID>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d819      	bhi.n	8001d20 <HAL_RCC_OscConfig+0x28c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b40      	cmp	r3, #64	@ 0x40
 8001cf2:	d108      	bne.n	8001d06 <HAL_RCC_OscConfig+0x272>
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d02:	6053      	str	r3, [r2, #4]
 8001d04:	e030      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	031b      	lsls	r3, r3, #12
 8001d14:	4901      	ldr	r1, [pc, #4]	@ (8001d1c <HAL_RCC_OscConfig+0x288>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
 8001d1a:	e025      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	4b9a      	ldr	r3, [pc, #616]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	4997      	ldr	r1, [pc, #604]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b95      	ldr	r3, [pc, #596]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a94      	ldr	r2, [pc, #592]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fb35 	bl	80013b0 <HAL_GetTick>
 8001d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fb31 	bl	80013b0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e2ed      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a9 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b85      	ldr	r3, [pc, #532]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d80:	4b82      	ldr	r3, [pc, #520]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_OscConfig+0x308>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	d13a      	bne.n	8001e08 <HAL_RCC_OscConfig+0x374>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d135      	bne.n	8001e08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d9c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x320>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b80      	cmp	r3, #128	@ 0x80
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e2c1      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001db4:	f7ff fb2c 	bl	8001410 <HAL_GetREVID>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d817      	bhi.n	8001df2 <HAL_RCC_OscConfig+0x35e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x348>
 8001dca:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dda:	e075      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	069b      	lsls	r3, r3, #26
 8001dea:	4968      	ldr	r1, [pc, #416]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001df0:	e06a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001df2:	4b66      	ldr	r3, [pc, #408]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	061b      	lsls	r3, r3, #24
 8001e00:	4962      	ldr	r1, [pc, #392]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e06:	e05f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d042      	beq.n	8001e96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e10:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5d      	ldr	r2, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fac8 	bl	80013b0 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e24:	f7ff fac4 	bl	80013b0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e280      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e36:	4b55      	ldr	r3, [pc, #340]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e42:	f7ff fae5 	bl	8001410 <HAL_GetREVID>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d817      	bhi.n	8001e80 <HAL_RCC_OscConfig+0x3ec>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d108      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3d6>
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e60:	4a4a      	ldr	r2, [pc, #296]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e66:	6053      	str	r3, [r2, #4]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
 8001e6a:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	069b      	lsls	r3, r3, #26
 8001e78:	4944      	ldr	r1, [pc, #272]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
 8001e7e:	e023      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
 8001e80:	4b42      	ldr	r3, [pc, #264]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	493f      	ldr	r1, [pc, #252]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	e018      	b.n	8001ec8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fa85 	bl	80013b0 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fa81 	bl	80013b0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e23d      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ebc:	4b33      	ldr	r3, [pc, #204]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d036      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d019      	beq.n	8001f10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fa62 	bl	80013b0 <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fa5e 	bl	80013b0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e21a      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x45c>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fa48 	bl	80013b0 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fa44 	bl	80013b0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e200      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d039      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fa25 	bl	80013b0 <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6a:	f7ff fa21 	bl	80013b0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1dd      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4d6>
 8001f88:	e01b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
 8001f8a:	bf00      	nop
 8001f8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f90:	4b9b      	ldr	r3, [pc, #620]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a9a      	ldr	r2, [pc, #616]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8001f96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fa08 	bl	80013b0 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa4:	f7ff fa04 	bl	80013b0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1c0      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fb6:	4b92      	ldr	r3, [pc, #584]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8081 	beq.w	80020d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002204 <HAL_RCC_OscConfig+0x770>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a8b      	ldr	r2, [pc, #556]	@ (8002204 <HAL_RCC_OscConfig+0x770>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f9e8 	bl	80013b0 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7ff f9e4 	bl	80013b0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1a0      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ff6:	4b83      	ldr	r3, [pc, #524]	@ (8002204 <HAL_RCC_OscConfig+0x770>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x584>
 800200a:	4b7d      	ldr	r3, [pc, #500]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	4a7c      	ldr	r2, [pc, #496]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6713      	str	r3, [r2, #112]	@ 0x70
 8002016:	e02d      	b.n	8002074 <HAL_RCC_OscConfig+0x5e0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x5a6>
 8002020:	4b77      	ldr	r3, [pc, #476]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a76      	ldr	r2, [pc, #472]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	4b74      	ldr	r3, [pc, #464]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a73      	ldr	r2, [pc, #460]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x5e0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x5c8>
 8002042:	4b6f      	ldr	r3, [pc, #444]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a6e      	ldr	r2, [pc, #440]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	4b6c      	ldr	r3, [pc, #432]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a6b      	ldr	r2, [pc, #428]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x5e0>
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a67      	ldr	r2, [pc, #412]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
 8002068:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a64      	ldr	r2, [pc, #400]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f998 	bl	80013b0 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7ff f994 	bl	80013b0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e14e      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800209a:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ee      	beq.n	8002084 <HAL_RCC_OscConfig+0x5f0>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f982 	bl	80013b0 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7ff f97e 	bl	80013b0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e138      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ee      	bne.n	80020b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 812d 	beq.w	8002336 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e4:	2b18      	cmp	r3, #24
 80020e6:	f000 80bd 	beq.w	8002264 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	f040 809e 	bne.w	8002230 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b42      	ldr	r3, [pc, #264]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a41      	ldr	r2, [pc, #260]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80020fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f956 	bl	80013b0 <HAL_GetTick>
 8002104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f952 	bl	80013b0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e10e      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800211a:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002126:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_OscConfig+0x774>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	430a      	orrs	r2, r1
 800213a:	4931      	ldr	r1, [pc, #196]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	3b01      	subs	r3, #1
 8002146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	3b01      	subs	r3, #1
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	b29b      	uxth	r3, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	3b01      	subs	r3, #1
 800216a:	061b      	lsls	r3, r3, #24
 800216c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002170:	4923      	ldr	r1, [pc, #140]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002172:	4313      	orrs	r3, r2
 8002174:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002182:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCC_OscConfig+0x778>)
 8002188:	4013      	ands	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800218e:	00d2      	lsls	r2, r2, #3
 8002190:	491b      	ldr	r1, [pc, #108]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	4917      	ldr	r1, [pc, #92]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f023 0202 	bic.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	4912      	ldr	r1, [pc, #72]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4a10      	ldr	r2, [pc, #64]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f8db 	bl	80013b0 <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021fc:	e011      	b.n	8002222 <HAL_RCC_OscConfig+0x78e>
 80021fe:	bf00      	nop
 8002200:	58024400 	.word	0x58024400
 8002204:	58024800 	.word	0x58024800
 8002208:	fffffc0c 	.word	0xfffffc0c
 800220c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff f8ce 	bl	80013b0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e08a      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x77c>
 800222e:	e082      	b.n	8002336 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b43      	ldr	r3, [pc, #268]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a42      	ldr	r2, [pc, #264]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff f8b8 	bl	80013b0 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f8b4 	bl	80013b0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e070      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002256:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x7b0>
 8002262:	e068      	b.n	8002336 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800226a:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	d031      	beq.n	80022dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0203 	and.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d12a      	bne.n	80022dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d122      	bne.n	80022dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11a      	bne.n	80022dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0a5b      	lsrs	r3, r3, #9
 80022aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d111      	bne.n	80022dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d108      	bne.n	80022dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0e1b      	lsrs	r3, r3, #24
 80022ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e02b      	b.n	8002338 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 80022e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d01f      	beq.n	8002336 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	4a11      	ldr	r2, [pc, #68]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002302:	f7ff f855 	bl	80013b0 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002308:	bf00      	nop
 800230a:	f7ff f851 	bl	80013b0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	4293      	cmp	r3, r2
 8002314:	d0f9      	beq.n	800230a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_RCC_OscConfig+0x8b0>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002322:	00d2      	lsls	r2, r2, #3
 8002324:	4906      	ldr	r1, [pc, #24]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002326:	4313      	orrs	r3, r2
 8002328:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_RCC_OscConfig+0x8ac>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3730      	adds	r7, #48	@ 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	58024400 	.word	0x58024400
 8002344:	ffff0007 	.word	0xffff0007

08002348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e19c      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b8a      	ldr	r3, [pc, #552]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d910      	bls.n	800238c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b87      	ldr	r3, [pc, #540]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 020f 	bic.w	r2, r3, #15
 8002372:	4985      	ldr	r1, [pc, #532]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b83      	ldr	r3, [pc, #524]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e184      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	4b7b      	ldr	r3, [pc, #492]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d908      	bls.n	80023ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023a8:	4b78      	ldr	r3, [pc, #480]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	4975      	ldr	r1, [pc, #468]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	4b70      	ldr	r3, [pc, #448]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023d6:	4b6d      	ldr	r3, [pc, #436]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	496a      	ldr	r1, [pc, #424]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	4b64      	ldr	r3, [pc, #400]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002400:	429a      	cmp	r2, r3
 8002402:	d908      	bls.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002404:	4b61      	ldr	r3, [pc, #388]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	495e      	ldr	r1, [pc, #376]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002412:	4313      	orrs	r3, r2
 8002414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	4b59      	ldr	r3, [pc, #356]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800242e:	429a      	cmp	r2, r3
 8002430:	d908      	bls.n	8002444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002432:	4b56      	ldr	r3, [pc, #344]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4953      	ldr	r1, [pc, #332]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002440:	4313      	orrs	r3, r2
 8002442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4b4d      	ldr	r3, [pc, #308]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	429a      	cmp	r2, r3
 800245e:	d908      	bls.n	8002472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b4a      	ldr	r3, [pc, #296]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f023 020f 	bic.w	r2, r3, #15
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4947      	ldr	r1, [pc, #284]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800246e:	4313      	orrs	r3, r2
 8002470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d055      	beq.n	800252a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800247e:	4b43      	ldr	r3, [pc, #268]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4940      	ldr	r1, [pc, #256]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800248c:	4313      	orrs	r3, r2
 800248e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002498:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d121      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0f6      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b0:	4b36      	ldr	r3, [pc, #216]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d115      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0ea      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024c8:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0de      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d8:	4b2c      	ldr	r3, [pc, #176]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d6      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e8:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4925      	ldr	r1, [pc, #148]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fa:	f7fe ff59 	bl	80013b0 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002500:	e00a      	b.n	8002518 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002502:	f7fe ff55 	bl	80013b0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0be      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	429a      	cmp	r2, r3
 8002528:	d1eb      	bne.n	8002502 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	429a      	cmp	r2, r3
 8002544:	d208      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	490e      	ldr	r1, [pc, #56]	@ (800258c <HAL_RCC_ClockConfig+0x244>)
 8002554:	4313      	orrs	r3, r2
 8002556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d214      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 020f 	bic.w	r2, r3, #15
 800256e:	4906      	ldr	r1, [pc, #24]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <HAL_RCC_ClockConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e086      	b.n	8002696 <HAL_RCC_ClockConfig+0x34e>
 8002588:	52002000 	.word	0x52002000
 800258c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d208      	bcs.n	80025be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025ac:	4b3c      	ldr	r3, [pc, #240]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4939      	ldr	r1, [pc, #228]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d208      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025da:	4b31      	ldr	r3, [pc, #196]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	492e      	ldr	r1, [pc, #184]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002604:	429a      	cmp	r2, r3
 8002606:	d208      	bcs.n	800261a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4922      	ldr	r1, [pc, #136]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 8002616:	4313      	orrs	r3, r2
 8002618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d010      	beq.n	8002648 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002632:	429a      	cmp	r2, r3
 8002634:	d208      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4917      	ldr	r1, [pc, #92]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 8002644:	4313      	orrs	r3, r2
 8002646:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002648:	f000 f834 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	4912      	ldr	r1, [pc, #72]	@ (80026a4 <HAL_RCC_ClockConfig+0x35c>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <HAL_RCC_ClockConfig+0x358>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	4a0d      	ldr	r2, [pc, #52]	@ (80026a4 <HAL_RCC_ClockConfig+0x35c>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x360>)
 800267e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <HAL_RCC_ClockConfig+0x364>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_RCC_ClockConfig+0x368>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fe46 	bl	800131c <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	58024400 	.word	0x58024400
 80026a4:	08005508 	.word	0x08005508
 80026a8:	24000004 	.word	0x24000004
 80026ac:	24000000 	.word	0x24000000
 80026b0:	24000008 	.word	0x24000008

080026b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	@ 0x24
 80026b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ba:	4bb3      	ldr	r3, [pc, #716]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026c2:	2b18      	cmp	r3, #24
 80026c4:	f200 8155 	bhi.w	8002972 <HAL_RCC_GetSysClockFreq+0x2be>
 80026c8:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	08002735 	.word	0x08002735
 80026d4:	08002973 	.word	0x08002973
 80026d8:	08002973 	.word	0x08002973
 80026dc:	08002973 	.word	0x08002973
 80026e0:	08002973 	.word	0x08002973
 80026e4:	08002973 	.word	0x08002973
 80026e8:	08002973 	.word	0x08002973
 80026ec:	08002973 	.word	0x08002973
 80026f0:	0800275b 	.word	0x0800275b
 80026f4:	08002973 	.word	0x08002973
 80026f8:	08002973 	.word	0x08002973
 80026fc:	08002973 	.word	0x08002973
 8002700:	08002973 	.word	0x08002973
 8002704:	08002973 	.word	0x08002973
 8002708:	08002973 	.word	0x08002973
 800270c:	08002973 	.word	0x08002973
 8002710:	08002761 	.word	0x08002761
 8002714:	08002973 	.word	0x08002973
 8002718:	08002973 	.word	0x08002973
 800271c:	08002973 	.word	0x08002973
 8002720:	08002973 	.word	0x08002973
 8002724:	08002973 	.word	0x08002973
 8002728:	08002973 	.word	0x08002973
 800272c:	08002973 	.word	0x08002973
 8002730:	08002767 	.word	0x08002767
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002734:	4b94      	ldr	r3, [pc, #592]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002740:	4b91      	ldr	r3, [pc, #580]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	4a90      	ldr	r2, [pc, #576]	@ (800298c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002752:	e111      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002754:	4b8d      	ldr	r3, [pc, #564]	@ (800298c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002756:	61bb      	str	r3, [r7, #24]
      break;
 8002758:	e10e      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800275a:	4b8d      	ldr	r3, [pc, #564]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800275c:	61bb      	str	r3, [r7, #24]
      break;
 800275e:	e10b      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002760:	4b8c      	ldr	r3, [pc, #560]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002762:	61bb      	str	r3, [r7, #24]
      break;
 8002764:	e108      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002766:	4b88      	ldr	r3, [pc, #544]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002770:	4b85      	ldr	r3, [pc, #532]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800277a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800277c:	4b82      	ldr	r3, [pc, #520]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002786:	4b80      	ldr	r3, [pc, #512]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80e1 	beq.w	800296c <HAL_RCC_GetSysClockFreq+0x2b8>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	f000 8083 	beq.w	80028b8 <HAL_RCC_GetSysClockFreq+0x204>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f200 80a1 	bhi.w	80028fc <HAL_RCC_GetSysClockFreq+0x248>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x114>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d056      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027c6:	e099      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02d      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	4a6b      	ldr	r2, [pc, #428]	@ (800298c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fe:	4b62      	ldr	r3, [pc, #392]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002812:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800282e:	e087      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800299c <HAL_RCC_GetSysClockFreq+0x2e8>
 800283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002842:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002852:	ed97 6a02 	vldr	s12, [r7, #8]
 8002856:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002872:	e065      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002886:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002896:	ed97 6a02 	vldr	s12, [r7, #8]
 800289a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800289e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028b6:	e043      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80029a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028da:	ed97 6a02 	vldr	s12, [r7, #8]
 80028de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028fa:	e021      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002906:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80029a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800290a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002922:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800292e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800293e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	0a5b      	lsrs	r3, r3, #9
 8002946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800294a:	3301      	adds	r3, #1
 800294c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002958:	edd7 6a07 	vldr	s13, [r7, #28]
 800295c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002964:	ee17 3a90 	vmov	r3, s15
 8002968:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800296a:	e005      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
      break;
 8002970:	e002      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002974:	61bb      	str	r3, [r7, #24]
      break;
 8002976:	bf00      	nop
  }

  return sysclockfreq;
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
 800298c:	03d09000 	.word	0x03d09000
 8002990:	003d0900 	.word	0x003d0900
 8002994:	017d7840 	.word	0x017d7840
 8002998:	46000000 	.word	0x46000000
 800299c:	4c742400 	.word	0x4c742400
 80029a0:	4a742400 	.word	0x4a742400
 80029a4:	4bbebc20 	.word	0x4bbebc20

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b0cc      	sub	sp, #304	@ 0x130
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029cc:	2500      	movs	r5, #0
 80029ce:	ea54 0305 	orrs.w	r3, r4, r5
 80029d2:	d049      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029de:	d02f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029e4:	d828      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ea:	d01a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f0:	d822      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029fa:	d007      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029fc:	e01c      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fe:	4bb8      	ldr	r3, [pc, #736]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	4ab7      	ldr	r2, [pc, #732]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a0a:	e01a      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a10:	3308      	adds	r3, #8
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fa11 	bl	8003e3c <RCCEx_PLL2_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a20:	e00f      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a26:	3328      	adds	r3, #40	@ 0x28
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fab8 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a36:	e004      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a58:	4aa1      	ldr	r2, [pc, #644]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a5e:	e003      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a74:	f04f 0900 	mov.w	r9, #0
 8002a78:	ea58 0309 	orrs.w	r3, r8, r9
 8002a7c:	d047      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d82a      	bhi.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa5 	.word	0x08002aa5
 8002a94:	08002ab3 	.word	0x08002ab3
 8002a98:	08002ac9 	.word	0x08002ac9
 8002a9c:	08002ae7 	.word	0x08002ae7
 8002aa0:	08002ae7 	.word	0x08002ae7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	4a8d      	ldr	r2, [pc, #564]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab0:	e01a      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f9be 	bl	8003e3c <RCCEx_PLL2_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac6:	e00f      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002acc:	3328      	adds	r3, #40	@ 0x28
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fa65 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002adc:	e004      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af4:	f023 0107 	bic.w	r1, r3, #7
 8002af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	4a78      	ldr	r2, [pc, #480]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b1a:	f04f 0b00 	mov.w	fp, #0
 8002b1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b22:	d04c      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2e:	d030      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b34:	d829      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b38:	d02d      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b3c:	d825      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b3e:	2b80      	cmp	r3, #128	@ 0x80
 8002b40:	d018      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b42:	2b80      	cmp	r3, #128	@ 0x80
 8002b44:	d821      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d007      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b4e:	e01c      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b50:	4b63      	ldr	r3, [pc, #396]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a62      	ldr	r2, [pc, #392]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b62:	3308      	adds	r3, #8
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f968 	bl	8003e3c <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b72:	e011      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b78:	3328      	adds	r3, #40	@ 0x28
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fa0f 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bae:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bb4:	e003      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002bca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002bd4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	d053      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002be6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bea:	d035      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002bec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bf0:	d82e      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bf6:	d031      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002bf8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bfc:	d828      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c02:	d01a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c08:	d822      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c12:	d007      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c14:	e01c      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c16:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	4a31      	ldr	r2, [pc, #196]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c22:	e01c      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c28:	3308      	adds	r3, #8
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 f905 	bl	8003e3c <RCCEx_PLL2_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c38:	e011      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c3e:	3328      	adds	r3, #40	@ 0x28
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f9ac 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c4e:	e006      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c56:	e002      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7c:	e003      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	d056      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cb2:	d038      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cb8:	d831      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cbe:	d034      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cc4:	d82b      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cca:	d01d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cd0:	d825      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002cd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cdc:	e01f      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce4:	4ba2      	ldr	r3, [pc, #648]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	4aa1      	ldr	r2, [pc, #644]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f89e 	bl	8003e3c <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d06:	e011      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0c:	3328      	adds	r3, #40	@ 0x28
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f945 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d34:	4b8e      	ldr	r3, [pc, #568]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d44:	4a8a      	ldr	r2, [pc, #552]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4a:	e003      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d6a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d03a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	2b30      	cmp	r3, #48	@ 0x30
 8002d7c:	d01f      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d7e:	2b30      	cmp	r3, #48	@ 0x30
 8002d80:	d819      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d815      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d111      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4b77      	ldr	r3, [pc, #476]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a76      	ldr	r2, [pc, #472]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d9e:	e011      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da4:	3308      	adds	r3, #8
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 f847 	bl	8003e3c <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002db4:	e006      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dbc:	e002      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002dcc:	4b68      	ldr	r3, [pc, #416]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	4a65      	ldr	r2, [pc, #404]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002de6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002df6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e00:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e04:	460b      	mov	r3, r1
 8002e06:	4313      	orrs	r3, r2
 8002e08:	d051      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e14:	d035      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e1a:	d82e      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e20:	d031      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e26:	d828      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e2c:	d01a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e32:	d822      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3c:	d007      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	4a4a      	ldr	r2, [pc, #296]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e52:	3308      	adds	r3, #8
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fff0 	bl	8003e3c <RCCEx_PLL2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e62:	e011      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e68:	3328      	adds	r3, #40	@ 0x28
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 f897 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e90:	4b37      	ldr	r3, [pc, #220]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	4a34      	ldr	r2, [pc, #208]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ea4:	e003      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eaa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	d056      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed8:	d033      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ede:	d82c      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ee4:	d02f      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eea:	d826      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002eec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ef0:	d02b      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002ef2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ef6:	d820      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002efc:	d012      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f02:	d81a      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d022      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f12:	3308      	adds	r3, #8
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ff90 	bl	8003e3c <RCCEx_PLL2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f22:	e015      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f28:	3328      	adds	r3, #40	@ 0x28
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f837 	bl	8003fa0 <RCCEx_PLL3_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f38:	e00a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f40:	e006      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f66:	4a02      	ldr	r2, [pc, #8]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f6e:	bf00      	nop
 8002f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f92:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f96:	460b      	mov	r3, r1
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	d055      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa8:	d033      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fae:	d82c      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d02f      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d826      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fc0:	d02b      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002fc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fc6:	d820      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fcc:	d012      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd2:	d81a      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d022      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fdc:	d115      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ff28 	bl	8003e3c <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ff2:	e015      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff8:	3328      	adds	r3, #40	@ 0x28
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 ffcf 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003008:	e00a      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003010:	e006      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800301e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003028:	4bb6      	ldr	r3, [pc, #728]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003038:	4ab2      	ldr	r2, [pc, #712]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800303a:	430b      	orrs	r3, r1
 800303c:	6593      	str	r3, [r2, #88]	@ 0x58
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800305e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d02a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003076:	d10a      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800307c:	3308      	adds	r3, #8
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fedb 	bl	8003e3c <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003098:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80030a0:	4b98      	ldr	r3, [pc, #608]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80030a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ae:	4a95      	ldr	r2, [pc, #596]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80030d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030d8:	460b      	mov	r3, r1
 80030da:	4313      	orrs	r3, r2
 80030dc:	d037      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80030de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e8:	d00e      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80030ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ee:	d816      	bhi.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x776>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80030f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030f8:	d111      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fa:	4b82      	ldr	r3, [pc, #520]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	4a81      	ldr	r2, [pc, #516]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003106:	e00f      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800310c:	3308      	adds	r3, #8
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fe93 	bl	8003e3c <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003130:	4b74      	ldr	r3, [pc, #464]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003134:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800313c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313e:	4a71      	ldr	r2, [pc, #452]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003140:	430b      	orrs	r3, r1
 8003142:	6513      	str	r3, [r2, #80]	@ 0x50
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003146:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800314a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800314e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800315a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003164:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003168:	460b      	mov	r3, r1
 800316a:	4313      	orrs	r3, r2
 800316c:	d03a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800316e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003174:	2b03      	cmp	r3, #3
 8003176:	d81d      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003178:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031bd 	.word	0x080031bd
 8003184:	08003191 	.word	0x08003191
 8003188:	0800319f 	.word	0x0800319f
 800318c:	080031bd 	.word	0x080031bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003190:	4b5c      	ldr	r3, [pc, #368]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4a5b      	ldr	r2, [pc, #364]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800319c:	e00f      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800319e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031a2:	3308      	adds	r3, #8
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fe48 	bl	8003e3c <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80031b2:	e004      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80031bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	f023 0103 	bic.w	r1, r3, #3
 80031ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031d6:	430b      	orrs	r3, r1
 80031d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3f      	ldr	r2, [pc, #252]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003212:	f7fe f8cd 	bl	80013b0 <HAL_GetTick>
 8003216:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800321a:	e00b      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe f8c8 	bl	80013b0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	@ 0x64
 800322a:	d903      	bls.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003232:	e005      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003234:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ed      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003240:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003244:	2b00      	cmp	r3, #0
 8003246:	d17a      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003248:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800324a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800324c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003254:	4053      	eors	r3, r2
 8003256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d015      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325e:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800326a:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003276:	4b23      	ldr	r3, [pc, #140]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a22      	ldr	r2, [pc, #136]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800327c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003282:	4a20      	ldr	r2, [pc, #128]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003284:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003288:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800328a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003296:	d118      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe f88a 	bl	80013b0 <HAL_GetTick>
 800329c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a0:	e00d      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f885 	bl	80013b0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032ac:	1ad2      	subs	r2, r2, r3
 80032ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d903      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80032bc:	e005      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0eb      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80032ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d130      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e2:	d115      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80032e4:	4b07      	ldr	r3, [pc, #28]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032f4:	091a      	lsrs	r2, r3, #4
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	4a02      	ldr	r2, [pc, #8]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6113      	str	r3, [r2, #16]
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
 8003308:	58024800 	.word	0x58024800
 800330c:	00ffffcf 	.word	0x00ffffcf
 8003310:	4bd4      	ldr	r3, [pc, #848]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4ad3      	ldr	r2, [pc, #844]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003316:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800331a:	6113      	str	r3, [r2, #16]
 800331c:	4bd1      	ldr	r3, [pc, #836]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800331e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003320:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	4acd      	ldr	r2, [pc, #820]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800332e:	430b      	orrs	r3, r1
 8003330:	6713      	str	r3, [r2, #112]	@ 0x70
 8003332:	e008      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003334:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003338:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800333c:	e003      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003342:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f002 0301 	and.w	r3, r2, #1
 8003352:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800335c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003360:	460b      	mov	r3, r1
 8003362:	4313      	orrs	r3, r2
 8003364:	f000 808b 	beq.w	800347e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003370:	2b28      	cmp	r3, #40	@ 0x28
 8003372:	d86b      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	08003455 	.word	0x08003455
 8003380:	0800344d 	.word	0x0800344d
 8003384:	0800344d 	.word	0x0800344d
 8003388:	0800344d 	.word	0x0800344d
 800338c:	0800344d 	.word	0x0800344d
 8003390:	0800344d 	.word	0x0800344d
 8003394:	0800344d 	.word	0x0800344d
 8003398:	0800344d 	.word	0x0800344d
 800339c:	08003421 	.word	0x08003421
 80033a0:	0800344d 	.word	0x0800344d
 80033a4:	0800344d 	.word	0x0800344d
 80033a8:	0800344d 	.word	0x0800344d
 80033ac:	0800344d 	.word	0x0800344d
 80033b0:	0800344d 	.word	0x0800344d
 80033b4:	0800344d 	.word	0x0800344d
 80033b8:	0800344d 	.word	0x0800344d
 80033bc:	08003437 	.word	0x08003437
 80033c0:	0800344d 	.word	0x0800344d
 80033c4:	0800344d 	.word	0x0800344d
 80033c8:	0800344d 	.word	0x0800344d
 80033cc:	0800344d 	.word	0x0800344d
 80033d0:	0800344d 	.word	0x0800344d
 80033d4:	0800344d 	.word	0x0800344d
 80033d8:	0800344d 	.word	0x0800344d
 80033dc:	08003455 	.word	0x08003455
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	0800344d 	.word	0x0800344d
 80033ec:	0800344d 	.word	0x0800344d
 80033f0:	0800344d 	.word	0x0800344d
 80033f4:	0800344d 	.word	0x0800344d
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	08003455 	.word	0x08003455
 8003400:	0800344d 	.word	0x0800344d
 8003404:	0800344d 	.word	0x0800344d
 8003408:	0800344d 	.word	0x0800344d
 800340c:	0800344d 	.word	0x0800344d
 8003410:	0800344d 	.word	0x0800344d
 8003414:	0800344d 	.word	0x0800344d
 8003418:	0800344d 	.word	0x0800344d
 800341c:	08003455 	.word	0x08003455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003424:	3308      	adds	r3, #8
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fd07 	bl	8003e3c <RCCEx_PLL2_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003434:	e00f      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800343a:	3328      	adds	r3, #40	@ 0x28
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fdae 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800344a:	e004      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800345e:	4b81      	ldr	r3, [pc, #516]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346e:	4a7d      	ldr	r2, [pc, #500]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003470:	430b      	orrs	r3, r1
 8003472:	6553      	str	r3, [r2, #84]	@ 0x54
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003476:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800347a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800347e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f002 0302 	and.w	r3, r2, #2
 800348a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003494:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003498:	460b      	mov	r3, r1
 800349a:	4313      	orrs	r3, r2
 800349c:	d042      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800349e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d825      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034fd 	.word	0x080034fd
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034df 	.word	0x080034df
 80034bc:	080034fd 	.word	0x080034fd
 80034c0:	080034fd 	.word	0x080034fd
 80034c4:	080034fd 	.word	0x080034fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034cc:	3308      	adds	r3, #8
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fcb3 	bl	8003e3c <RCCEx_PLL2_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034dc:	e00f      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e2:	3328      	adds	r3, #40	@ 0x28
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fd5a 	bl	8003fa0 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034f2:	e004      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003506:	4b57      	ldr	r3, [pc, #348]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f023 0107 	bic.w	r1, r3, #7
 800350e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003514:	4a53      	ldr	r2, [pc, #332]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6553      	str	r3, [r2, #84]	@ 0x54
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003520:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f002 0304 	and.w	r3, r2, #4
 8003530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800353a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	d044      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800354c:	2b05      	cmp	r3, #5
 800354e:	d825      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	080035a5 	.word	0x080035a5
 800355c:	08003571 	.word	0x08003571
 8003560:	08003587 	.word	0x08003587
 8003564:	080035a5 	.word	0x080035a5
 8003568:	080035a5 	.word	0x080035a5
 800356c:	080035a5 	.word	0x080035a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003574:	3308      	adds	r3, #8
 8003576:	2101      	movs	r1, #1
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc5f 	bl	8003e3c <RCCEx_PLL2_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003584:	e00f      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800358a:	3328      	adds	r3, #40	@ 0x28
 800358c:	2101      	movs	r1, #1
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fd06 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800359a:	e004      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80035a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b2:	f023 0107 	bic.w	r1, r3, #7
 80035b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035be:	4a29      	ldr	r2, [pc, #164]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f002 0320 	and.w	r3, r2, #32
 80035da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d057      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80035ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035fa:	d035      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80035fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003600:	d82c      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d031      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d826      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800360e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003612:	d02d      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003618:	d820      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800361a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800361e:	d012      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003624:	d81a      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d024      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800362a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800362e:	d115      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003634:	3308      	adds	r3, #8
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fbff 	bl	8003e3c <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003644:	e017      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800364a:	3328      	adds	r3, #40	@ 0x28
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fca6 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800365a:	e00c      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003662:	e008      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003664:	58024400 	.word	0x58024400
        break;
 8003668:	bf00      	nop
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003676:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367e:	4bc2      	ldr	r3, [pc, #776]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368e:	4abe      	ldr	r2, [pc, #760]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6553      	str	r3, [r2, #84]	@ 0x54
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800369a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80036aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80036b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d055      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80036be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036ca:	d033      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80036cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80036d0:	d82c      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	d02f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d826      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e2:	d02b      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80036e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e8:	d820      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ee:	d012      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80036f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f4:	d81a      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d115      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003704:	3308      	adds	r3, #8
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fb97 	bl	8003e3c <RCCEx_PLL2_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003714:	e015      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800371a:	3328      	adds	r3, #40	@ 0x28
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fc3e 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800372a:	e00a      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003732:	e006      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003734:	bf00      	nop
 8003736:	e004      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800374a:	4b8f      	ldr	r3, [pc, #572]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800375a:	4a8b      	ldr	r2, [pc, #556]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003766:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003776:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003780:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003784:	460b      	mov	r3, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	d055      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800378a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003792:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003796:	d033      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800379c:	d82c      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800379e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a2:	d02f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a8:	d826      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037ae:	d02b      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80037b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80037b4:	d820      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ba:	d012      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037c0:	d81a      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d022      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ca:	d115      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d0:	3308      	adds	r3, #8
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fb31 	bl	8003e3c <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037e0:	e015      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fbd8 	bl	8003fa0 <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037f6:	e00a      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037fe:	e006      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003800:	bf00      	nop
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003804:	bf00      	nop
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003816:	4b5c      	ldr	r3, [pc, #368]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800381e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003826:	4a58      	ldr	r2, [pc, #352]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	@ 0x58
 800382c:	e003      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003832:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f002 0308 	and.w	r3, r2, #8
 8003842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003846:	2300      	movs	r3, #0
 8003848:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800384c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003850:	460b      	mov	r3, r1
 8003852:	4313      	orrs	r3, r2
 8003854:	d01e      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003862:	d10c      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003868:	3328      	adds	r3, #40	@ 0x28
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fb97 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800387e:	4b42      	ldr	r3, [pc, #264]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388e:	4a3e      	ldr	r2, [pc, #248]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003894:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f002 0310 	and.w	r3, r2, #16
 80038a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038ae:	460b      	mov	r3, r1
 80038b0:	4313      	orrs	r3, r2
 80038b2:	d01e      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80038b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c6:	3328      	adds	r3, #40	@ 0x28
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fb68 	bl	8003fa0 <RCCEx_PLL3_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ec:	4a26      	ldr	r2, [pc, #152]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038ee:	430b      	orrs	r3, r1
 80038f0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003908:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d040      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800391a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800391e:	d022      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003924:	d81b      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003930:	e015      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003936:	3308      	adds	r3, #8
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fa7e 	bl	8003e3c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003946:	e00f      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800394c:	3328      	adds	r3, #40	@ 0x28
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb25 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800395c:	e004      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800397c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003980:	4a01      	ldr	r2, [pc, #4]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003982:	430b      	orrs	r3, r1
 8003984:	6593      	str	r3, [r2, #88]	@ 0x58
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003990:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80039a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039a2:	2300      	movs	r3, #0
 80039a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039aa:	460b      	mov	r3, r1
 80039ac:	4313      	orrs	r3, r2
 80039ae:	d03b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80039b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039bc:	d01f      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80039be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039c2:	d818      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80039c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c8:	d003      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80039ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039ce:	d007      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80039d0:	e011      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d2:	4b64      	ldr	r3, [pc, #400]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	4a63      	ldr	r2, [pc, #396]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80039de:	e00f      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e4:	3328      	adds	r3, #40	@ 0x28
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fad9 	bl	8003fa0 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80039f4:	e004      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a08:	4b56      	ldr	r3, [pc, #344]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a18:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a24:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a36:	2300      	movs	r3, #0
 8003a38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a3a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d031      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a52:	d007      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003a54:	e011      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a62:	e00e      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a68:	3308      	adds	r3, #8
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f9e5 	bl	8003e3c <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a8a:	4b36      	ldr	r3, [pc, #216]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a98:	4a32      	ldr	r2, [pc, #200]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003aa4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac8:	3328      	adds	r3, #40	@ 0x28
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa67 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aec:	2300      	movs	r3, #0
 8003aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8003af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d03a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b06:	d018      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0c:	d811      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b12:	d014      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b18:	d80b      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b22:	d106      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	4a0e      	ldr	r2, [pc, #56]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003b30:	e008      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b3a:	bf00      	nop
 8003b3c:	e002      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b3e:	bf00      	nop
 8003b40:	e000      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5c:	4a01      	ldr	r2, [pc, #4]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b7e:	2300      	movs	r3, #0
 8003b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b8c:	4baa      	ldr	r3, [pc, #680]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9a:	4aa7      	ldr	r2, [pc, #668]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003bac:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bae:	2300      	movs	r3, #0
 8003bb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003bbc:	4b9e      	ldr	r3, [pc, #632]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bcc:	4a9a      	ldr	r2, [pc, #616]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be0:	2300      	movs	r3, #0
 8003be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bee:	4b92      	ldr	r3, [pc, #584]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c10:	2300      	movs	r3, #0
 8003c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c1e:	4b86      	ldr	r3, [pc, #536]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4a85      	ldr	r2, [pc, #532]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c28:	6113      	str	r3, [r2, #16]
 8003c2a:	4b83      	ldr	r3, [pc, #524]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c36:	4a80      	ldr	r2, [pc, #512]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c52:	460b      	mov	r3, r1
 8003c54:	4313      	orrs	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c58:	4b77      	ldr	r3, [pc, #476]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	4a74      	ldr	r2, [pc, #464]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c88:	4b6b      	ldr	r3, [pc, #428]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	4a67      	ldr	r2, [pc, #412]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d011      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f8ba 	bl	8003e3c <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003cce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6239      	str	r1, [r7, #32]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d011      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cfe:	3308      	adds	r3, #8
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f89a 	bl	8003e3c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003d1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	2100      	movs	r1, #0
 8003d28:	61b9      	str	r1, [r7, #24]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d011      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d3e:	3308      	adds	r3, #8
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f87a 	bl	8003e3c <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	2100      	movs	r1, #0
 8003d68:	6139      	str	r1, [r7, #16]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d011      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d7e:	3328      	adds	r3, #40	@ 0x28
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f90c 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	2100      	movs	r1, #0
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003db4:	460b      	mov	r3, r1
 8003db6:	4313      	orrs	r3, r2
 8003db8:	d011      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dbe:	3328      	adds	r3, #40	@ 0x28
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f8ec 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	2100      	movs	r1, #0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d011      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dfe:	3328      	adds	r3, #40	@ 0x28
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f8cc 	bl	8003fa0 <RCCEx_PLL3_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003e1e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003e32:	46bd      	mov	sp, r7
 8003e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e38:	58024400 	.word	0x58024400

08003e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e4a:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d101      	bne.n	8003e5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e099      	b.n	8003f8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e66:	f7fd faa3 	bl	80013b0 <HAL_GetTick>
 8003e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e6e:	f7fd fa9f 	bl	80013b0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e086      	b.n	8003f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e80:	4b45      	ldr	r3, [pc, #276]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e8c:	4b42      	ldr	r3, [pc, #264]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	493f      	ldr	r1, [pc, #252]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ed0:	4931      	ldr	r1, [pc, #196]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ed6:	4b30      	ldr	r3, [pc, #192]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	f023 0220 	bic.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4928      	ldr	r1, [pc, #160]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003efa:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	4a26      	ldr	r2, [pc, #152]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f00:	f023 0310 	bic.w	r3, r3, #16
 8003f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f06:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f0a:	4b24      	ldr	r3, [pc, #144]	@ (8003f9c <RCCEx_PLL2_Config+0x160>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	69d2      	ldr	r2, [r2, #28]
 8003f12:	00d2      	lsls	r2, r2, #3
 8003f14:	4920      	ldr	r1, [pc, #128]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f20:	f043 0310 	orr.w	r3, r3, #16
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	4a19      	ldr	r2, [pc, #100]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f38:	e00f      	b.n	8003f5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f4c:	e005      	b.n	8003f5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f4e:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f66:	f7fd fa23 	bl	80013b0 <HAL_GetTick>
 8003f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f6c:	e008      	b.n	8003f80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f6e:	f7fd fa1f 	bl	80013b0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e006      	b.n	8003f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <RCCEx_PLL2_Config+0x15c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	58024400 	.word	0x58024400
 8003f9c:	ffff0007 	.word	0xffff0007

08003fa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fae:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d101      	bne.n	8003fbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e099      	b.n	80040f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fd f9f1 	bl	80013b0 <HAL_GetTick>
 8003fce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fd2:	f7fd f9ed 	bl	80013b0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e086      	b.n	80040f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fe4:	4b45      	ldr	r3, [pc, #276]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ff0:	4b42      	ldr	r3, [pc, #264]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	493f      	ldr	r1, [pc, #252]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	628b      	str	r3, [r1, #40]	@ 0x28
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	025b      	lsls	r3, r3, #9
 8004016:	b29b      	uxth	r3, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	3b01      	subs	r3, #1
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004034:	4931      	ldr	r1, [pc, #196]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800403a:	4b30      	ldr	r3, [pc, #192]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	492d      	ldr	r1, [pc, #180]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800404c:	4b2b      	ldr	r3, [pc, #172]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4928      	ldr	r1, [pc, #160]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800405e:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	4a26      	ldr	r2, [pc, #152]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800406a:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 800406c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800406e:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <RCCEx_PLL3_Config+0x160>)
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	69d2      	ldr	r2, [r2, #28]
 8004076:	00d2      	lsls	r2, r2, #3
 8004078:	4920      	ldr	r1, [pc, #128]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800407e:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004090:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 8004096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800409a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800409c:	e00f      	b.n	80040be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4a14      	ldr	r2, [pc, #80]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040b0:	e005      	b.n	80040be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040b2:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	4a11      	ldr	r2, [pc, #68]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040be:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0e      	ldr	r2, [pc, #56]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ca:	f7fd f971 	bl	80013b0 <HAL_GetTick>
 80040ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040d0:	e008      	b.n	80040e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040d2:	f7fd f96d 	bl	80013b0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e006      	b.n	80040f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <RCCEx_PLL3_Config+0x15c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	58024400 	.word	0x58024400
 8004100:	ffff0007 	.word	0xffff0007

08004104 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e10f      	b.n	8004336 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a87      	ldr	r2, [pc, #540]	@ (8004340 <HAL_SPI_Init+0x23c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <HAL_SPI_Init+0x42>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a86      	ldr	r2, [pc, #536]	@ (8004344 <HAL_SPI_Init+0x240>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00a      	beq.n	8004146 <HAL_SPI_Init+0x42>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a84      	ldr	r2, [pc, #528]	@ (8004348 <HAL_SPI_Init+0x244>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d005      	beq.n	8004146 <HAL_SPI_Init+0x42>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d901      	bls.n	8004146 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0f7      	b.n	8004336 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fbbc 	bl	80048c4 <SPI_GetPacketSize>
 800414c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a7b      	ldr	r2, [pc, #492]	@ (8004340 <HAL_SPI_Init+0x23c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00c      	beq.n	8004172 <HAL_SPI_Init+0x6e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a79      	ldr	r2, [pc, #484]	@ (8004344 <HAL_SPI_Init+0x240>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <HAL_SPI_Init+0x6e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a78      	ldr	r2, [pc, #480]	@ (8004348 <HAL_SPI_Init+0x244>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d002      	beq.n	8004172 <HAL_SPI_Init+0x6e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d811      	bhi.n	8004196 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004176:	4a72      	ldr	r2, [pc, #456]	@ (8004340 <HAL_SPI_Init+0x23c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a70      	ldr	r2, [pc, #448]	@ (8004344 <HAL_SPI_Init+0x240>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_SPI_Init+0x8c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6f      	ldr	r2, [pc, #444]	@ (8004348 <HAL_SPI_Init+0x244>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d104      	bne.n	800419a <HAL_SPI_Init+0x96>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b10      	cmp	r3, #16
 8004194:	d901      	bls.n	800419a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0cd      	b.n	8004336 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc ff8e 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80041d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041e0:	d119      	bne.n	8004216 <HAL_SPI_Init+0x112>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ea:	d103      	bne.n	80041f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004204:	d107      	bne.n	8004216 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00f      	beq.n	8004242 <HAL_SPI_Init+0x13e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b06      	cmp	r3, #6
 8004228:	d90b      	bls.n	8004242 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e007      	b.n	8004252 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	431a      	orrs	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	ea42 0103 	orr.w	r1, r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b2:	ea42 0103 	orr.w	r1, r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d113      	bne.n	80042f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40013000 	.word	0x40013000
 8004344:	40003800 	.word	0x40003800
 8004348:	40003c00 	.word	0x40003c00

0800434c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3320      	adds	r3, #32
 8004362:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fd f824 	bl	80013b0 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
 8004378:	e1d1      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_SPI_Transmit+0x3a>
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1c9      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_SPI_Transmit+0x4c>
 8004394:	2302      	movs	r3, #2
 8004396:	e1c2      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2203      	movs	r2, #3
 80043a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e009      	b.n	8004418 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004416:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b96      	ldr	r3, [pc, #600]	@ (8004678 <HAL_SPI_Transmit+0x32c>)
 8004420:	4013      	ands	r3, r2
 8004422:	88f9      	ldrh	r1, [r7, #6]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	430b      	orrs	r3, r1
 800442a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004444:	d107      	bne.n	8004456 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d947      	bls.n	80044ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800445e:	e03f      	b.n	80044e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d114      	bne.n	8004498 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004496:	e023      	b.n	80044e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004498:	f7fc ff8a 	bl	80013b0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d803      	bhi.n	80044b0 <HAL_SPI_Transmit+0x164>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x16a>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d114      	bne.n	80044e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f936 	bl	8004728 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e11e      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1b9      	bne.n	8004460 <HAL_SPI_Transmit+0x114>
 80044ec:	e0f1      	b.n	80046d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b07      	cmp	r3, #7
 80044f4:	f240 80e6 	bls.w	80046c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80044f8:	e05d      	b.n	80045b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d132      	bne.n	800456e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d918      	bls.n	8004546 <HAL_SPI_Transmit+0x1fa>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d014      	beq.n	8004546 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452c:	1d1a      	adds	r2, r3, #4
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b02      	subs	r3, #2
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004544:	e037      	b.n	80045b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	881a      	ldrh	r2, [r3, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	1c9a      	adds	r2, r3, #2
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800456c:	e023      	b.n	80045b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456e:	f7fc ff1f 	bl	80013b0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d803      	bhi.n	8004586 <HAL_SPI_Transmit+0x23a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d102      	bne.n	800458c <HAL_SPI_Transmit+0x240>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f8cb 	bl	8004728 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0b3      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d19b      	bne.n	80044fa <HAL_SPI_Transmit+0x1ae>
 80045c2:	e086      	b.n	80046d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d154      	bne.n	800467c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d918      	bls.n	8004610 <HAL_SPI_Transmit+0x2c4>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	d914      	bls.n	8004610 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b04      	subs	r3, #4
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800460e:	e059      	b.n	80046c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d917      	bls.n	800464c <HAL_SPI_Transmit+0x300>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b02      	subs	r3, #2
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800464a:	e03b      	b.n	80046c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3320      	adds	r3, #32
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004676:	e025      	b.n	80046c4 <HAL_SPI_Transmit+0x378>
 8004678:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467c:	f7fc fe98 	bl	80013b0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d803      	bhi.n	8004694 <HAL_SPI_Transmit+0x348>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d102      	bne.n	800469a <HAL_SPI_Transmit+0x34e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d114      	bne.n	80046c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f844 	bl	8004728 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e02c      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f af79 	bne.w	80045c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	2108      	movs	r1, #8
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f8c3 	bl	8004868 <SPI_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f815 	bl	8004728 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop

08004728 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0210 	orr.w	r2, r2, #16
 8004756:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6919      	ldr	r1, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <SPI_CloseTransfer+0x13c>)
 8004774:	400b      	ands	r3, r1
 8004776:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004786:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b04      	cmp	r3, #4
 8004792:	d014      	beq.n	80047be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00f      	beq.n	80047be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0220 	orr.w	r2, r2, #32
 80047bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d014      	beq.n	80047f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047da:	f043 0204 	orr.w	r2, r3, #4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004804:	f043 0201 	orr.w	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	f043 0208 	orr.w	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004846:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	fffffc90 	.word	0xfffffc90

08004868 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004878:	e010      	b.n	800489c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487a:	f7fc fd99 	bl	80013b0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d803      	bhi.n	8004892 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d102      	bne.n	8004898 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e00f      	b.n	80048bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d0df      	beq.n	800487a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3307      	adds	r3, #7
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <memset>:
 80048fa:	4402      	add	r2, r0
 80048fc:	4603      	mov	r3, r0
 80048fe:	4293      	cmp	r3, r2
 8004900:	d100      	bne.n	8004904 <memset+0xa>
 8004902:	4770      	bx	lr
 8004904:	f803 1b01 	strb.w	r1, [r3], #1
 8004908:	e7f9      	b.n	80048fe <memset+0x4>
	...

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	@ (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	@ (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	@ (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	@ (8004950 <__libc_init_array+0x44>)
 8004920:	f000 fde6 	bl	80054f0 <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	080056f0 	.word	0x080056f0
 8004948:	080056f0 	.word	0x080056f0
 800494c:	080056f0 	.word	0x080056f0
 8004950:	080056f4 	.word	0x080056f4
 8004954:	00000000 	.word	0x00000000

08004958 <sin>:
 8004958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800495a:	eeb0 7b40 	vmov.f64	d7, d0
 800495e:	ee17 3a90 	vmov	r3, s15
 8004962:	4a21      	ldr	r2, [pc, #132]	@ (80049e8 <sin+0x90>)
 8004964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004968:	4293      	cmp	r3, r2
 800496a:	d807      	bhi.n	800497c <sin+0x24>
 800496c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80049e0 <sin+0x88>
 8004970:	2000      	movs	r0, #0
 8004972:	b005      	add	sp, #20
 8004974:	f85d eb04 	ldr.w	lr, [sp], #4
 8004978:	f000 b8a2 	b.w	8004ac0 <__kernel_sin>
 800497c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ec <sin+0x94>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d904      	bls.n	800498c <sin+0x34>
 8004982:	ee30 0b40 	vsub.f64	d0, d0, d0
 8004986:	b005      	add	sp, #20
 8004988:	f85d fb04 	ldr.w	pc, [sp], #4
 800498c:	4668      	mov	r0, sp
 800498e:	f000 f8ef 	bl	8004b70 <__ieee754_rem_pio2>
 8004992:	f000 0003 	and.w	r0, r0, #3
 8004996:	2801      	cmp	r0, #1
 8004998:	d00a      	beq.n	80049b0 <sin+0x58>
 800499a:	2802      	cmp	r0, #2
 800499c:	d00f      	beq.n	80049be <sin+0x66>
 800499e:	b9c0      	cbnz	r0, 80049d2 <sin+0x7a>
 80049a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049a4:	ed9d 0b00 	vldr	d0, [sp]
 80049a8:	2001      	movs	r0, #1
 80049aa:	f000 f889 	bl	8004ac0 <__kernel_sin>
 80049ae:	e7ea      	b.n	8004986 <sin+0x2e>
 80049b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049b4:	ed9d 0b00 	vldr	d0, [sp]
 80049b8:	f000 f81a 	bl	80049f0 <__kernel_cos>
 80049bc:	e7e3      	b.n	8004986 <sin+0x2e>
 80049be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049c2:	ed9d 0b00 	vldr	d0, [sp]
 80049c6:	2001      	movs	r0, #1
 80049c8:	f000 f87a 	bl	8004ac0 <__kernel_sin>
 80049cc:	eeb1 0b40 	vneg.f64	d0, d0
 80049d0:	e7d9      	b.n	8004986 <sin+0x2e>
 80049d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80049d6:	ed9d 0b00 	vldr	d0, [sp]
 80049da:	f000 f809 	bl	80049f0 <__kernel_cos>
 80049de:	e7f5      	b.n	80049cc <sin+0x74>
	...
 80049e8:	3fe921fb 	.word	0x3fe921fb
 80049ec:	7fefffff 	.word	0x7fefffff

080049f0 <__kernel_cos>:
 80049f0:	eeb0 5b40 	vmov.f64	d5, d0
 80049f4:	ee15 1a90 	vmov	r1, s11
 80049f8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80049fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004a00:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8004a04:	d204      	bcs.n	8004a10 <__kernel_cos+0x20>
 8004a06:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8004a0a:	ee17 3a90 	vmov	r3, s15
 8004a0e:	b343      	cbz	r3, 8004a62 <__kernel_cos+0x72>
 8004a10:	ee25 6b05 	vmul.f64	d6, d5, d5
 8004a14:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8004a18:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8004a88 <__kernel_cos+0x98>
 8004a1c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8004a90 <__kernel_cos+0xa0>
 8004a20:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004a24:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8004a98 <__kernel_cos+0xa8>
 8004a28:	eea4 7b06 	vfma.f64	d7, d4, d6
 8004a2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8004aa0 <__kernel_cos+0xb0>
 8004a30:	eea7 4b06 	vfma.f64	d4, d7, d6
 8004a34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8004aa8 <__kernel_cos+0xb8>
 8004a38:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <__kernel_cos+0xc8>)
 8004a3a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8004a3e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8004ab0 <__kernel_cos+0xc0>
 8004a42:	4299      	cmp	r1, r3
 8004a44:	eea7 4b06 	vfma.f64	d4, d7, d6
 8004a48:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8004a4c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8004a50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a54:	eea6 1b04 	vfma.f64	d1, d6, d4
 8004a58:	d804      	bhi.n	8004a64 <__kernel_cos+0x74>
 8004a5a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8004a5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8004a62:	4770      	bx	lr
 8004a64:	4b15      	ldr	r3, [pc, #84]	@ (8004abc <__kernel_cos+0xcc>)
 8004a66:	4299      	cmp	r1, r3
 8004a68:	d809      	bhi.n	8004a7e <__kernel_cos+0x8e>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8004a70:	ec43 2b16 	vmov	d6, r2, r3
 8004a74:	ee30 0b46 	vsub.f64	d0, d0, d6
 8004a78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a7c:	e7ed      	b.n	8004a5a <__kernel_cos+0x6a>
 8004a7e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8004a82:	e7f7      	b.n	8004a74 <__kernel_cos+0x84>
 8004a84:	f3af 8000 	nop.w
 8004a88:	be8838d4 	.word	0xbe8838d4
 8004a8c:	bda8fae9 	.word	0xbda8fae9
 8004a90:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a94:	3e21ee9e 	.word	0x3e21ee9e
 8004a98:	809c52ad 	.word	0x809c52ad
 8004a9c:	be927e4f 	.word	0xbe927e4f
 8004aa0:	19cb1590 	.word	0x19cb1590
 8004aa4:	3efa01a0 	.word	0x3efa01a0
 8004aa8:	16c15177 	.word	0x16c15177
 8004aac:	bf56c16c 	.word	0xbf56c16c
 8004ab0:	5555554c 	.word	0x5555554c
 8004ab4:	3fa55555 	.word	0x3fa55555
 8004ab8:	3fd33332 	.word	0x3fd33332
 8004abc:	3fe90000 	.word	0x3fe90000

08004ac0 <__kernel_sin>:
 8004ac0:	ee10 3a90 	vmov	r3, s1
 8004ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ac8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004acc:	d204      	bcs.n	8004ad8 <__kernel_sin+0x18>
 8004ace:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8004ad2:	ee17 3a90 	vmov	r3, s15
 8004ad6:	b35b      	cbz	r3, 8004b30 <__kernel_sin+0x70>
 8004ad8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8004adc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8004ae0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8004b38 <__kernel_sin+0x78>
 8004ae4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8004b40 <__kernel_sin+0x80>
 8004ae8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004aec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004b48 <__kernel_sin+0x88>
 8004af0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8004af4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8004b50 <__kernel_sin+0x90>
 8004af8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8004afc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004b58 <__kernel_sin+0x98>
 8004b00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8004b04:	b930      	cbnz	r0, 8004b14 <__kernel_sin+0x54>
 8004b06:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8004b60 <__kernel_sin+0xa0>
 8004b0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8004b0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8004b12:	4770      	bx	lr
 8004b14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8004b18:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8004b1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8004b20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8004b24:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8004b68 <__kernel_sin+0xa8>
 8004b28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8004b2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	f3af 8000 	nop.w
 8004b38:	5acfd57c 	.word	0x5acfd57c
 8004b3c:	3de5d93a 	.word	0x3de5d93a
 8004b40:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b44:	be5ae5e6 	.word	0xbe5ae5e6
 8004b48:	57b1fe7d 	.word	0x57b1fe7d
 8004b4c:	3ec71de3 	.word	0x3ec71de3
 8004b50:	19c161d5 	.word	0x19c161d5
 8004b54:	bf2a01a0 	.word	0xbf2a01a0
 8004b58:	1110f8a6 	.word	0x1110f8a6
 8004b5c:	3f811111 	.word	0x3f811111
 8004b60:	55555549 	.word	0x55555549
 8004b64:	bfc55555 	.word	0xbfc55555
 8004b68:	55555549 	.word	0x55555549
 8004b6c:	3fc55555 	.word	0x3fc55555

08004b70 <__ieee754_rem_pio2>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	eeb0 7b40 	vmov.f64	d7, d0
 8004b76:	ee17 5a90 	vmov	r5, s15
 8004b7a:	4b99      	ldr	r3, [pc, #612]	@ (8004de0 <__ieee754_rem_pio2+0x270>)
 8004b7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004b80:	429e      	cmp	r6, r3
 8004b82:	b088      	sub	sp, #32
 8004b84:	4604      	mov	r4, r0
 8004b86:	d807      	bhi.n	8004b98 <__ieee754_rem_pio2+0x28>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	ed84 0b00 	vstr	d0, [r4]
 8004b90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004b94:	2000      	movs	r0, #0
 8004b96:	e01b      	b.n	8004bd0 <__ieee754_rem_pio2+0x60>
 8004b98:	4b92      	ldr	r3, [pc, #584]	@ (8004de4 <__ieee754_rem_pio2+0x274>)
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	d83b      	bhi.n	8004c16 <__ieee754_rem_pio2+0xa6>
 8004b9e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8004da0 <__ieee754_rem_pio2+0x230>
 8004ba8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8004bac:	dd19      	ble.n	8004be2 <__ieee754_rem_pio2+0x72>
 8004bae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004bb2:	429e      	cmp	r6, r3
 8004bb4:	d00e      	beq.n	8004bd4 <__ieee754_rem_pio2+0x64>
 8004bb6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8004da8 <__ieee754_rem_pio2+0x238>
 8004bba:	ee37 6b45 	vsub.f64	d6, d7, d5
 8004bbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bc2:	ed84 6b00 	vstr	d6, [r4]
 8004bc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004bca:	ed84 7b02 	vstr	d7, [r4, #8]
 8004bce:	2001      	movs	r0, #1
 8004bd0:	b008      	add	sp, #32
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8004db0 <__ieee754_rem_pio2+0x240>
 8004bd8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8004db8 <__ieee754_rem_pio2+0x248>
 8004bdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004be0:	e7eb      	b.n	8004bba <__ieee754_rem_pio2+0x4a>
 8004be2:	429e      	cmp	r6, r3
 8004be4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8004be8:	d00e      	beq.n	8004c08 <__ieee754_rem_pio2+0x98>
 8004bea:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8004da8 <__ieee754_rem_pio2+0x238>
 8004bee:	ee37 6b05 	vadd.f64	d6, d7, d5
 8004bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bf6:	ed84 6b00 	vstr	d6, [r4]
 8004bfa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004c02:	ed84 7b02 	vstr	d7, [r4, #8]
 8004c06:	e7e3      	b.n	8004bd0 <__ieee754_rem_pio2+0x60>
 8004c08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8004db0 <__ieee754_rem_pio2+0x240>
 8004c0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8004db8 <__ieee754_rem_pio2+0x248>
 8004c10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c14:	e7eb      	b.n	8004bee <__ieee754_rem_pio2+0x7e>
 8004c16:	4b74      	ldr	r3, [pc, #464]	@ (8004de8 <__ieee754_rem_pio2+0x278>)
 8004c18:	429e      	cmp	r6, r3
 8004c1a:	d870      	bhi.n	8004cfe <__ieee754_rem_pio2+0x18e>
 8004c1c:	f000 f8ec 	bl	8004df8 <fabs>
 8004c20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8004c24:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004dc0 <__ieee754_rem_pio2+0x250>
 8004c28:	eea0 7b06 	vfma.f64	d7, d0, d6
 8004c2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004c30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004c34:	ee17 0a90 	vmov	r0, s15
 8004c38:	eeb1 4b45 	vneg.f64	d4, d5
 8004c3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8004da0 <__ieee754_rem_pio2+0x230>
 8004c40:	eea5 0b47 	vfms.f64	d0, d5, d7
 8004c44:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8004da8 <__ieee754_rem_pio2+0x238>
 8004c48:	281f      	cmp	r0, #31
 8004c4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c4e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004c52:	dc05      	bgt.n	8004c60 <__ieee754_rem_pio2+0xf0>
 8004c54:	4b65      	ldr	r3, [pc, #404]	@ (8004dec <__ieee754_rem_pio2+0x27c>)
 8004c56:	1e42      	subs	r2, r0, #1
 8004c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5c:	42b3      	cmp	r3, r6
 8004c5e:	d109      	bne.n	8004c74 <__ieee754_rem_pio2+0x104>
 8004c60:	ee16 3a90 	vmov	r3, s13
 8004c64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004c68:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8004c72:	dc02      	bgt.n	8004c7a <__ieee754_rem_pio2+0x10a>
 8004c74:	ed84 6b00 	vstr	d6, [r4]
 8004c78:	e01a      	b.n	8004cb0 <__ieee754_rem_pio2+0x140>
 8004c7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8004db0 <__ieee754_rem_pio2+0x240>
 8004c7e:	eeb0 6b40 	vmov.f64	d6, d0
 8004c82:	eea4 6b03 	vfma.f64	d6, d4, d3
 8004c86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8004c8a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8004c8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8004db8 <__ieee754_rem_pio2+0x248>
 8004c92:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8004c96:	ee36 3b47 	vsub.f64	d3, d6, d7
 8004c9a:	ee13 3a90 	vmov	r3, s7
 8004c9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b31      	cmp	r3, #49	@ 0x31
 8004ca6:	dc17      	bgt.n	8004cd8 <__ieee754_rem_pio2+0x168>
 8004ca8:	eeb0 0b46 	vmov.f64	d0, d6
 8004cac:	ed84 3b00 	vstr	d3, [r4]
 8004cb0:	ed94 6b00 	vldr	d6, [r4]
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8004cba:	ee30 0b47 	vsub.f64	d0, d0, d7
 8004cbe:	ed84 0b02 	vstr	d0, [r4, #8]
 8004cc2:	da85      	bge.n	8004bd0 <__ieee754_rem_pio2+0x60>
 8004cc4:	eeb1 6b46 	vneg.f64	d6, d6
 8004cc8:	eeb1 0b40 	vneg.f64	d0, d0
 8004ccc:	ed84 6b00 	vstr	d6, [r4]
 8004cd0:	ed84 0b02 	vstr	d0, [r4, #8]
 8004cd4:	4240      	negs	r0, r0
 8004cd6:	e77b      	b.n	8004bd0 <__ieee754_rem_pio2+0x60>
 8004cd8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8004dc8 <__ieee754_rem_pio2+0x258>
 8004cdc:	eeb0 0b46 	vmov.f64	d0, d6
 8004ce0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8004ce4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8004ce8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8004cec:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8004dd0 <__ieee754_rem_pio2+0x260>
 8004cf0:	eeb0 7b46 	vmov.f64	d7, d6
 8004cf4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8004cf8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8004cfc:	e7ba      	b.n	8004c74 <__ieee754_rem_pio2+0x104>
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <__ieee754_rem_pio2+0x280>)
 8004d00:	429e      	cmp	r6, r3
 8004d02:	d906      	bls.n	8004d12 <__ieee754_rem_pio2+0x1a2>
 8004d04:	ee30 7b40 	vsub.f64	d7, d0, d0
 8004d08:	ed80 7b02 	vstr	d7, [r0, #8]
 8004d0c:	ed80 7b00 	vstr	d7, [r0]
 8004d10:	e740      	b.n	8004b94 <__ieee754_rem_pio2+0x24>
 8004d12:	ee10 3a10 	vmov	r3, s0
 8004d16:	1532      	asrs	r2, r6, #20
 8004d18:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8004d22:	ec41 0b17 	vmov	d7, r0, r1
 8004d26:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004d2a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8004dd8 <__ieee754_rem_pio2+0x268>
 8004d2e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004d32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d36:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004d3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004d3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8004d42:	a808      	add	r0, sp, #32
 8004d44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8004d48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d4c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8004d50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004d54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d58:	2103      	movs	r1, #3
 8004d5a:	ed30 7b02 	vldmdb	r0!, {d7}
 8004d5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	460b      	mov	r3, r1
 8004d68:	f101 31ff 	add.w	r1, r1, #4294967295
 8004d6c:	d0f5      	beq.n	8004d5a <__ieee754_rem_pio2+0x1ea>
 8004d6e:	4921      	ldr	r1, [pc, #132]	@ (8004df4 <__ieee754_rem_pio2+0x284>)
 8004d70:	9101      	str	r1, [sp, #4]
 8004d72:	2102      	movs	r1, #2
 8004d74:	9100      	str	r1, [sp, #0]
 8004d76:	a802      	add	r0, sp, #8
 8004d78:	4621      	mov	r1, r4
 8004d7a:	f000 f845 	bl	8004e08 <__kernel_rem_pio2>
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	f6bf af26 	bge.w	8004bd0 <__ieee754_rem_pio2+0x60>
 8004d84:	ed94 7b00 	vldr	d7, [r4]
 8004d88:	eeb1 7b47 	vneg.f64	d7, d7
 8004d8c:	ed84 7b00 	vstr	d7, [r4]
 8004d90:	ed94 7b02 	vldr	d7, [r4, #8]
 8004d94:	eeb1 7b47 	vneg.f64	d7, d7
 8004d98:	ed84 7b02 	vstr	d7, [r4, #8]
 8004d9c:	e79a      	b.n	8004cd4 <__ieee754_rem_pio2+0x164>
 8004d9e:	bf00      	nop
 8004da0:	54400000 	.word	0x54400000
 8004da4:	3ff921fb 	.word	0x3ff921fb
 8004da8:	1a626331 	.word	0x1a626331
 8004dac:	3dd0b461 	.word	0x3dd0b461
 8004db0:	1a600000 	.word	0x1a600000
 8004db4:	3dd0b461 	.word	0x3dd0b461
 8004db8:	2e037073 	.word	0x2e037073
 8004dbc:	3ba3198a 	.word	0x3ba3198a
 8004dc0:	6dc9c883 	.word	0x6dc9c883
 8004dc4:	3fe45f30 	.word	0x3fe45f30
 8004dc8:	2e000000 	.word	0x2e000000
 8004dcc:	3ba3198a 	.word	0x3ba3198a
 8004dd0:	252049c1 	.word	0x252049c1
 8004dd4:	397b839a 	.word	0x397b839a
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	41700000 	.word	0x41700000
 8004de0:	3fe921fb 	.word	0x3fe921fb
 8004de4:	4002d97b 	.word	0x4002d97b
 8004de8:	413921fb 	.word	0x413921fb
 8004dec:	08005518 	.word	0x08005518
 8004df0:	7fefffff 	.word	0x7fefffff
 8004df4:	08005598 	.word	0x08005598

08004df8 <fabs>:
 8004df8:	ec51 0b10 	vmov	r0, r1, d0
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e02:	ec43 2b10 	vmov	d0, r2, r3
 8004e06:	4770      	bx	lr

08004e08 <__kernel_rem_pio2>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	ed2d 8b06 	vpush	{d8-d10}
 8004e10:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8004e14:	469b      	mov	fp, r3
 8004e16:	9001      	str	r0, [sp, #4]
 8004e18:	4bbb      	ldr	r3, [pc, #748]	@ (8005108 <__kernel_rem_pio2+0x300>)
 8004e1a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8004e1c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8004e20:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8004e24:	f112 0f14 	cmn.w	r2, #20
 8004e28:	bfa8      	it	ge
 8004e2a:	1ed3      	subge	r3, r2, #3
 8004e2c:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004e30:	bfb8      	it	lt
 8004e32:	2300      	movlt	r3, #0
 8004e34:	f06f 0517 	mvn.w	r5, #23
 8004e38:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80050f0 <__kernel_rem_pio2+0x2e8>
 8004e3c:	bfa4      	itt	ge
 8004e3e:	2018      	movge	r0, #24
 8004e40:	fb93 f3f0 	sdivge	r3, r3, r0
 8004e44:	fb03 5505 	mla	r5, r3, r5, r5
 8004e48:	eba3 040a 	sub.w	r4, r3, sl
 8004e4c:	4415      	add	r5, r2
 8004e4e:	460f      	mov	r7, r1
 8004e50:	eb09 060a 	add.w	r6, r9, sl
 8004e54:	a81a      	add	r0, sp, #104	@ 0x68
 8004e56:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	42b2      	cmp	r2, r6
 8004e5e:	dd0e      	ble.n	8004e7e <__kernel_rem_pio2+0x76>
 8004e60:	aa1a      	add	r2, sp, #104	@ 0x68
 8004e62:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8004e66:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	454e      	cmp	r6, r9
 8004e6e:	dc25      	bgt.n	8004ebc <__kernel_rem_pio2+0xb4>
 8004e70:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80050f0 <__kernel_rem_pio2+0x2e8>
 8004e74:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004e78:	4614      	mov	r4, r2
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e015      	b.n	8004eaa <__kernel_rem_pio2+0xa2>
 8004e7e:	42d4      	cmn	r4, r2
 8004e80:	d409      	bmi.n	8004e96 <__kernel_rem_pio2+0x8e>
 8004e82:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8004e86:	ee07 1a90 	vmov	s15, r1
 8004e8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e8e:	eca0 7b02 	vstmia	r0!, {d7}
 8004e92:	3201      	adds	r2, #1
 8004e94:	e7e2      	b.n	8004e5c <__kernel_rem_pio2+0x54>
 8004e96:	eeb0 7b46 	vmov.f64	d7, d6
 8004e9a:	e7f8      	b.n	8004e8e <__kernel_rem_pio2+0x86>
 8004e9c:	ecbc 5b02 	vldmia	ip!, {d5}
 8004ea0:	ed94 6b00 	vldr	d6, [r4]
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004eaa:	4550      	cmp	r0, sl
 8004eac:	f1a4 0408 	sub.w	r4, r4, #8
 8004eb0:	ddf4      	ble.n	8004e9c <__kernel_rem_pio2+0x94>
 8004eb2:	ecae 7b02 	vstmia	lr!, {d7}
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	3208      	adds	r2, #8
 8004eba:	e7d7      	b.n	8004e6c <__kernel_rem_pio2+0x64>
 8004ebc:	aa06      	add	r2, sp, #24
 8004ebe:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80050f8 <__kernel_rem_pio2+0x2f0>
 8004ec2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8005100 <__kernel_rem_pio2+0x2f8>
 8004ec6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8004eca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8004ece:	9203      	str	r2, [sp, #12]
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	464c      	mov	r4, r9
 8004ed4:	00e3      	lsls	r3, r4, #3
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	ab92      	add	r3, sp, #584	@ 0x248
 8004eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ede:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8004ee2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8004ee4:	ab06      	add	r3, sp, #24
 8004ee6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004eea:	461e      	mov	r6, r3
 8004eec:	4620      	mov	r0, r4
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f1a2 0208 	sub.w	r2, r2, #8
 8004ef4:	dc4a      	bgt.n	8004f8c <__kernel_rem_pio2+0x184>
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	9305      	str	r3, [sp, #20]
 8004efa:	f000 fa01 	bl	8005300 <scalbn>
 8004efe:	eeb0 8b40 	vmov.f64	d8, d0
 8004f02:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8004f06:	ee28 0b00 	vmul.f64	d0, d8, d0
 8004f0a:	f000 fa79 	bl	8005400 <floor>
 8004f0e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8004f12:	eea0 8b47 	vfms.f64	d8, d0, d7
 8004f16:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	ee17 8a90 	vmov	r8, s15
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f26:	ee38 8b47 	vsub.f64	d8, d8, d7
 8004f2a:	dd41      	ble.n	8004fb0 <__kernel_rem_pio2+0x1a8>
 8004f2c:	1e60      	subs	r0, r4, #1
 8004f2e:	aa06      	add	r2, sp, #24
 8004f30:	f1c5 0c18 	rsb	ip, r5, #24
 8004f34:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004f38:	fa46 f20c 	asr.w	r2, r6, ip
 8004f3c:	4490      	add	r8, r2
 8004f3e:	fa02 f20c 	lsl.w	r2, r2, ip
 8004f42:	1ab6      	subs	r6, r6, r2
 8004f44:	aa06      	add	r2, sp, #24
 8004f46:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8004f4a:	f1c5 0217 	rsb	r2, r5, #23
 8004f4e:	4116      	asrs	r6, r2
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	dd3c      	ble.n	8004fce <__kernel_rem_pio2+0x1c6>
 8004f54:	f04f 0c00 	mov.w	ip, #0
 8004f58:	f108 0801 	add.w	r8, r8, #1
 8004f5c:	4660      	mov	r0, ip
 8004f5e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8004f62:	4564      	cmp	r4, ip
 8004f64:	dc66      	bgt.n	8005034 <__kernel_rem_pio2+0x22c>
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	dd03      	ble.n	8004f72 <__kernel_rem_pio2+0x16a>
 8004f6a:	2d01      	cmp	r5, #1
 8004f6c:	d072      	beq.n	8005054 <__kernel_rem_pio2+0x24c>
 8004f6e:	2d02      	cmp	r5, #2
 8004f70:	d07a      	beq.n	8005068 <__kernel_rem_pio2+0x260>
 8004f72:	2e02      	cmp	r6, #2
 8004f74:	d12b      	bne.n	8004fce <__kernel_rem_pio2+0x1c6>
 8004f76:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8004f7a:	ee30 8b48 	vsub.f64	d8, d0, d8
 8004f7e:	b330      	cbz	r0, 8004fce <__kernel_rem_pio2+0x1c6>
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 f9bd 	bl	8005300 <scalbn>
 8004f86:	ee38 8b40 	vsub.f64	d8, d8, d0
 8004f8a:	e020      	b.n	8004fce <__kernel_rem_pio2+0x1c6>
 8004f8c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8004f90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8004f94:	3801      	subs	r0, #1
 8004f96:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8004f9a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8004f9e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8004fa2:	eca6 0a01 	vstmia	r6!, {s0}
 8004fa6:	ed92 0b00 	vldr	d0, [r2]
 8004faa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8004fae:	e79e      	b.n	8004eee <__kernel_rem_pio2+0xe6>
 8004fb0:	d105      	bne.n	8004fbe <__kernel_rem_pio2+0x1b6>
 8004fb2:	1e62      	subs	r2, r4, #1
 8004fb4:	a906      	add	r1, sp, #24
 8004fb6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8004fba:	15f6      	asrs	r6, r6, #23
 8004fbc:	e7c8      	b.n	8004f50 <__kernel_rem_pio2+0x148>
 8004fbe:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8004fc2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	da31      	bge.n	8005030 <__kernel_rem_pio2+0x228>
 8004fcc:	2600      	movs	r6, #0
 8004fce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd6:	f040 809b 	bne.w	8005110 <__kernel_rem_pio2+0x308>
 8004fda:	1e62      	subs	r2, r4, #1
 8004fdc:	2000      	movs	r0, #0
 8004fde:	454a      	cmp	r2, r9
 8004fe0:	da49      	bge.n	8005076 <__kernel_rem_pio2+0x26e>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d062      	beq.n	80050ac <__kernel_rem_pio2+0x2a4>
 8004fe6:	3c01      	subs	r4, #1
 8004fe8:	ab06      	add	r3, sp, #24
 8004fea:	3d18      	subs	r5, #24
 8004fec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f8      	beq.n	8004fe6 <__kernel_rem_pio2+0x1de>
 8004ff4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 f981 	bl	8005300 <scalbn>
 8004ffe:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80050f8 <__kernel_rem_pio2+0x2f0>
 8005002:	1c62      	adds	r2, r4, #1
 8005004:	a96a      	add	r1, sp, #424	@ 0x1a8
 8005006:	00d3      	lsls	r3, r2, #3
 8005008:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800500c:	4622      	mov	r2, r4
 800500e:	2a00      	cmp	r2, #0
 8005010:	f280 80a8 	bge.w	8005164 <__kernel_rem_pio2+0x35c>
 8005014:	4622      	mov	r2, r4
 8005016:	2a00      	cmp	r2, #0
 8005018:	f2c0 80c6 	blt.w	80051a8 <__kernel_rem_pio2+0x3a0>
 800501c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800501e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005022:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80050f0 <__kernel_rem_pio2+0x2e8>
 8005026:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800510c <__kernel_rem_pio2+0x304>
 800502a:	2000      	movs	r0, #0
 800502c:	1aa1      	subs	r1, r4, r2
 800502e:	e0b0      	b.n	8005192 <__kernel_rem_pio2+0x38a>
 8005030:	2602      	movs	r6, #2
 8005032:	e78f      	b.n	8004f54 <__kernel_rem_pio2+0x14c>
 8005034:	f853 2b04 	ldr.w	r2, [r3], #4
 8005038:	b948      	cbnz	r0, 800504e <__kernel_rem_pio2+0x246>
 800503a:	b122      	cbz	r2, 8005046 <__kernel_rem_pio2+0x23e>
 800503c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8005040:	f843 2c04 	str.w	r2, [r3, #-4]
 8005044:	2201      	movs	r2, #1
 8005046:	f10c 0c01 	add.w	ip, ip, #1
 800504a:	4610      	mov	r0, r2
 800504c:	e789      	b.n	8004f62 <__kernel_rem_pio2+0x15a>
 800504e:	ebae 0202 	sub.w	r2, lr, r2
 8005052:	e7f5      	b.n	8005040 <__kernel_rem_pio2+0x238>
 8005054:	1e62      	subs	r2, r4, #1
 8005056:	ab06      	add	r3, sp, #24
 8005058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005060:	a906      	add	r1, sp, #24
 8005062:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005066:	e784      	b.n	8004f72 <__kernel_rem_pio2+0x16a>
 8005068:	1e62      	subs	r2, r4, #1
 800506a:	ab06      	add	r3, sp, #24
 800506c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005070:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005074:	e7f4      	b.n	8005060 <__kernel_rem_pio2+0x258>
 8005076:	ab06      	add	r3, sp, #24
 8005078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507c:	3a01      	subs	r2, #1
 800507e:	4318      	orrs	r0, r3
 8005080:	e7ad      	b.n	8004fde <__kernel_rem_pio2+0x1d6>
 8005082:	3301      	adds	r3, #1
 8005084:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8005088:	2800      	cmp	r0, #0
 800508a:	d0fa      	beq.n	8005082 <__kernel_rem_pio2+0x27a>
 800508c:	9a04      	ldr	r2, [sp, #16]
 800508e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8005092:	446a      	add	r2, sp
 8005094:	eb04 000b 	add.w	r0, r4, fp
 8005098:	a91a      	add	r1, sp, #104	@ 0x68
 800509a:	1c66      	adds	r6, r4, #1
 800509c:	3a98      	subs	r2, #152	@ 0x98
 800509e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80050a2:	4423      	add	r3, r4
 80050a4:	42b3      	cmp	r3, r6
 80050a6:	da04      	bge.n	80050b2 <__kernel_rem_pio2+0x2aa>
 80050a8:	461c      	mov	r4, r3
 80050aa:	e713      	b.n	8004ed4 <__kernel_rem_pio2+0xcc>
 80050ac:	9a03      	ldr	r2, [sp, #12]
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7e8      	b.n	8005084 <__kernel_rem_pio2+0x27c>
 80050b2:	9902      	ldr	r1, [sp, #8]
 80050b4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80050b8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80050bc:	9104      	str	r1, [sp, #16]
 80050be:	ee07 1a90 	vmov	s15, r1
 80050c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80050c6:	2400      	movs	r4, #0
 80050c8:	eca0 7b02 	vstmia	r0!, {d7}
 80050cc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80050f0 <__kernel_rem_pio2+0x2e8>
 80050d0:	4686      	mov	lr, r0
 80050d2:	4554      	cmp	r4, sl
 80050d4:	dd03      	ble.n	80050de <__kernel_rem_pio2+0x2d6>
 80050d6:	eca2 7b02 	vstmia	r2!, {d7}
 80050da:	3601      	adds	r6, #1
 80050dc:	e7e2      	b.n	80050a4 <__kernel_rem_pio2+0x29c>
 80050de:	ecbc 5b02 	vldmia	ip!, {d5}
 80050e2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80050e6:	3401      	adds	r4, #1
 80050e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80050ec:	e7f1      	b.n	80050d2 <__kernel_rem_pio2+0x2ca>
 80050ee:	bf00      	nop
	...
 80050fc:	3e700000 	.word	0x3e700000
 8005100:	00000000 	.word	0x00000000
 8005104:	41700000 	.word	0x41700000
 8005108:	080056e0 	.word	0x080056e0
 800510c:	080056a0 	.word	0x080056a0
 8005110:	4268      	negs	r0, r5
 8005112:	eeb0 0b48 	vmov.f64	d0, d8
 8005116:	f000 f8f3 	bl	8005300 <scalbn>
 800511a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80052e8 <__kernel_rem_pio2+0x4e0>
 800511e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	db17      	blt.n	8005158 <__kernel_rem_pio2+0x350>
 8005128:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80052f0 <__kernel_rem_pio2+0x4e8>
 800512c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005130:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8005134:	aa06      	add	r2, sp, #24
 8005136:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800513a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800513e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005142:	3518      	adds	r5, #24
 8005144:	ee10 3a10 	vmov	r3, s0
 8005148:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800514c:	ee17 3a10 	vmov	r3, s14
 8005150:	3401      	adds	r4, #1
 8005152:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005156:	e74d      	b.n	8004ff4 <__kernel_rem_pio2+0x1ec>
 8005158:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800515c:	aa06      	add	r2, sp, #24
 800515e:	ee10 3a10 	vmov	r3, s0
 8005162:	e7f6      	b.n	8005152 <__kernel_rem_pio2+0x34a>
 8005164:	a806      	add	r0, sp, #24
 8005166:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800516a:	9001      	str	r0, [sp, #4]
 800516c:	ee07 0a90 	vmov	s15, r0
 8005170:	3a01      	subs	r2, #1
 8005172:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005176:	ee27 7b00 	vmul.f64	d7, d7, d0
 800517a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800517e:	ed21 7b02 	vstmdb	r1!, {d7}
 8005182:	e744      	b.n	800500e <__kernel_rem_pio2+0x206>
 8005184:	ecbc 5b02 	vldmia	ip!, {d5}
 8005188:	ecb5 6b02 	vldmia	r5!, {d6}
 800518c:	3001      	adds	r0, #1
 800518e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005192:	4548      	cmp	r0, r9
 8005194:	dc01      	bgt.n	800519a <__kernel_rem_pio2+0x392>
 8005196:	4281      	cmp	r1, r0
 8005198:	daf4      	bge.n	8005184 <__kernel_rem_pio2+0x37c>
 800519a:	a842      	add	r0, sp, #264	@ 0x108
 800519c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80051a0:	ed81 7b00 	vstr	d7, [r1]
 80051a4:	3a01      	subs	r2, #1
 80051a6:	e736      	b.n	8005016 <__kernel_rem_pio2+0x20e>
 80051a8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80051aa:	2a02      	cmp	r2, #2
 80051ac:	dc0a      	bgt.n	80051c4 <__kernel_rem_pio2+0x3bc>
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	dc2d      	bgt.n	800520e <__kernel_rem_pio2+0x406>
 80051b2:	d046      	beq.n	8005242 <__kernel_rem_pio2+0x43a>
 80051b4:	f008 0007 	and.w	r0, r8, #7
 80051b8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80051bc:	ecbd 8b06 	vpop	{d8-d10}
 80051c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80051c6:	2a03      	cmp	r2, #3
 80051c8:	d1f4      	bne.n	80051b4 <__kernel_rem_pio2+0x3ac>
 80051ca:	a942      	add	r1, sp, #264	@ 0x108
 80051cc:	f1a3 0208 	sub.w	r2, r3, #8
 80051d0:	440a      	add	r2, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4620      	mov	r0, r4
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f1a1 0108 	sub.w	r1, r1, #8
 80051dc:	dc52      	bgt.n	8005284 <__kernel_rem_pio2+0x47c>
 80051de:	4621      	mov	r1, r4
 80051e0:	2901      	cmp	r1, #1
 80051e2:	f1a2 0208 	sub.w	r2, r2, #8
 80051e6:	dc5d      	bgt.n	80052a4 <__kernel_rem_pio2+0x49c>
 80051e8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80052f8 <__kernel_rem_pio2+0x4f0>
 80051ec:	aa42      	add	r2, sp, #264	@ 0x108
 80051ee:	4413      	add	r3, r2
 80051f0:	2c01      	cmp	r4, #1
 80051f2:	dc67      	bgt.n	80052c4 <__kernel_rem_pio2+0x4bc>
 80051f4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80051f8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	d167      	bne.n	80052d0 <__kernel_rem_pio2+0x4c8>
 8005200:	ed87 5b00 	vstr	d5, [r7]
 8005204:	ed87 6b02 	vstr	d6, [r7, #8]
 8005208:	ed87 7b04 	vstr	d7, [r7, #16]
 800520c:	e7d2      	b.n	80051b4 <__kernel_rem_pio2+0x3ac>
 800520e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80052f8 <__kernel_rem_pio2+0x4f0>
 8005212:	aa42      	add	r2, sp, #264	@ 0x108
 8005214:	4413      	add	r3, r2
 8005216:	4622      	mov	r2, r4
 8005218:	2a00      	cmp	r2, #0
 800521a:	da24      	bge.n	8005266 <__kernel_rem_pio2+0x45e>
 800521c:	b34e      	cbz	r6, 8005272 <__kernel_rem_pio2+0x46a>
 800521e:	eeb1 7b46 	vneg.f64	d7, d6
 8005222:	ed87 7b00 	vstr	d7, [r7]
 8005226:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800522a:	aa44      	add	r2, sp, #272	@ 0x110
 800522c:	2301      	movs	r3, #1
 800522e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005232:	429c      	cmp	r4, r3
 8005234:	da20      	bge.n	8005278 <__kernel_rem_pio2+0x470>
 8005236:	b10e      	cbz	r6, 800523c <__kernel_rem_pio2+0x434>
 8005238:	eeb1 7b47 	vneg.f64	d7, d7
 800523c:	ed87 7b02 	vstr	d7, [r7, #8]
 8005240:	e7b8      	b.n	80051b4 <__kernel_rem_pio2+0x3ac>
 8005242:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80052f8 <__kernel_rem_pio2+0x4f0>
 8005246:	aa42      	add	r2, sp, #264	@ 0x108
 8005248:	4413      	add	r3, r2
 800524a:	2c00      	cmp	r4, #0
 800524c:	da05      	bge.n	800525a <__kernel_rem_pio2+0x452>
 800524e:	b10e      	cbz	r6, 8005254 <__kernel_rem_pio2+0x44c>
 8005250:	eeb1 7b47 	vneg.f64	d7, d7
 8005254:	ed87 7b00 	vstr	d7, [r7]
 8005258:	e7ac      	b.n	80051b4 <__kernel_rem_pio2+0x3ac>
 800525a:	ed33 6b02 	vldmdb	r3!, {d6}
 800525e:	3c01      	subs	r4, #1
 8005260:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005264:	e7f1      	b.n	800524a <__kernel_rem_pio2+0x442>
 8005266:	ed33 7b02 	vldmdb	r3!, {d7}
 800526a:	3a01      	subs	r2, #1
 800526c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005270:	e7d2      	b.n	8005218 <__kernel_rem_pio2+0x410>
 8005272:	eeb0 7b46 	vmov.f64	d7, d6
 8005276:	e7d4      	b.n	8005222 <__kernel_rem_pio2+0x41a>
 8005278:	ecb2 6b02 	vldmia	r2!, {d6}
 800527c:	3301      	adds	r3, #1
 800527e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005282:	e7d6      	b.n	8005232 <__kernel_rem_pio2+0x42a>
 8005284:	ed91 7b00 	vldr	d7, [r1]
 8005288:	ed91 5b02 	vldr	d5, [r1, #8]
 800528c:	3801      	subs	r0, #1
 800528e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005292:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005296:	ed81 6b00 	vstr	d6, [r1]
 800529a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800529e:	ed81 7b02 	vstr	d7, [r1, #8]
 80052a2:	e798      	b.n	80051d6 <__kernel_rem_pio2+0x3ce>
 80052a4:	ed92 7b00 	vldr	d7, [r2]
 80052a8:	ed92 5b02 	vldr	d5, [r2, #8]
 80052ac:	3901      	subs	r1, #1
 80052ae:	ee37 6b05 	vadd.f64	d6, d7, d5
 80052b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052b6:	ed82 6b00 	vstr	d6, [r2]
 80052ba:	ee37 7b05 	vadd.f64	d7, d7, d5
 80052be:	ed82 7b02 	vstr	d7, [r2, #8]
 80052c2:	e78d      	b.n	80051e0 <__kernel_rem_pio2+0x3d8>
 80052c4:	ed33 6b02 	vldmdb	r3!, {d6}
 80052c8:	3c01      	subs	r4, #1
 80052ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052ce:	e78f      	b.n	80051f0 <__kernel_rem_pio2+0x3e8>
 80052d0:	eeb1 5b45 	vneg.f64	d5, d5
 80052d4:	eeb1 6b46 	vneg.f64	d6, d6
 80052d8:	ed87 5b00 	vstr	d5, [r7]
 80052dc:	eeb1 7b47 	vneg.f64	d7, d7
 80052e0:	ed87 6b02 	vstr	d6, [r7, #8]
 80052e4:	e790      	b.n	8005208 <__kernel_rem_pio2+0x400>
 80052e6:	bf00      	nop
 80052e8:	00000000 	.word	0x00000000
 80052ec:	41700000 	.word	0x41700000
 80052f0:	00000000 	.word	0x00000000
 80052f4:	3e700000 	.word	0x3e700000
	...

08005300 <scalbn>:
 8005300:	ee10 1a90 	vmov	r1, s1
 8005304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005308:	b98b      	cbnz	r3, 800532e <scalbn+0x2e>
 800530a:	ee10 3a10 	vmov	r3, s0
 800530e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005312:	4319      	orrs	r1, r3
 8005314:	d00a      	beq.n	800532c <scalbn+0x2c>
 8005316:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80053c8 <scalbn+0xc8>
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <scalbn+0xf8>)
 800531c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005320:	4298      	cmp	r0, r3
 8005322:	da0b      	bge.n	800533c <scalbn+0x3c>
 8005324:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80053d0 <scalbn+0xd0>
 8005328:	ee20 0b07 	vmul.f64	d0, d0, d7
 800532c:	4770      	bx	lr
 800532e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005332:	4293      	cmp	r3, r2
 8005334:	d107      	bne.n	8005346 <scalbn+0x46>
 8005336:	ee30 0b00 	vadd.f64	d0, d0, d0
 800533a:	4770      	bx	lr
 800533c:	ee10 1a90 	vmov	r1, s1
 8005340:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005344:	3b36      	subs	r3, #54	@ 0x36
 8005346:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800534a:	4290      	cmp	r0, r2
 800534c:	dd0d      	ble.n	800536a <scalbn+0x6a>
 800534e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80053d8 <scalbn+0xd8>
 8005352:	ee10 3a90 	vmov	r3, s1
 8005356:	eeb0 6b47 	vmov.f64	d6, d7
 800535a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80053e0 <scalbn+0xe0>
 800535e:	2b00      	cmp	r3, #0
 8005360:	fe27 7b05 	vselge.f64	d7, d7, d5
 8005364:	ee27 0b06 	vmul.f64	d0, d7, d6
 8005368:	4770      	bx	lr
 800536a:	4418      	add	r0, r3
 800536c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8005370:	4298      	cmp	r0, r3
 8005372:	dcec      	bgt.n	800534e <scalbn+0x4e>
 8005374:	2800      	cmp	r0, #0
 8005376:	dd0a      	ble.n	800538e <scalbn+0x8e>
 8005378:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800537c:	ec53 2b10 	vmov	r2, r3, d0
 8005380:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8005384:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8005388:	ec43 2b10 	vmov	d0, r2, r3
 800538c:	4770      	bx	lr
 800538e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8005392:	da09      	bge.n	80053a8 <scalbn+0xa8>
 8005394:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80053d0 <scalbn+0xd0>
 8005398:	ee10 3a90 	vmov	r3, s1
 800539c:	eeb0 6b47 	vmov.f64	d6, d7
 80053a0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80053e8 <scalbn+0xe8>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	e7db      	b.n	8005360 <scalbn+0x60>
 80053a8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80053ac:	ec53 2b10 	vmov	r2, r3, d0
 80053b0:	3036      	adds	r0, #54	@ 0x36
 80053b2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80053b6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80053ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80053f0 <scalbn+0xf0>
 80053be:	ec43 2b10 	vmov	d0, r2, r3
 80053c2:	e7b1      	b.n	8005328 <scalbn+0x28>
 80053c4:	f3af 8000 	nop.w
 80053c8:	00000000 	.word	0x00000000
 80053cc:	43500000 	.word	0x43500000
 80053d0:	c2f8f359 	.word	0xc2f8f359
 80053d4:	01a56e1f 	.word	0x01a56e1f
 80053d8:	8800759c 	.word	0x8800759c
 80053dc:	7e37e43c 	.word	0x7e37e43c
 80053e0:	8800759c 	.word	0x8800759c
 80053e4:	fe37e43c 	.word	0xfe37e43c
 80053e8:	c2f8f359 	.word	0xc2f8f359
 80053ec:	81a56e1f 	.word	0x81a56e1f
 80053f0:	00000000 	.word	0x00000000
 80053f4:	3c900000 	.word	0x3c900000
 80053f8:	ffff3cb0 	.word	0xffff3cb0
 80053fc:	00000000 	.word	0x00000000

08005400 <floor>:
 8005400:	ee10 3a90 	vmov	r3, s1
 8005404:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8005408:	ee10 2a10 	vmov	r2, s0
 800540c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8005410:	2913      	cmp	r1, #19
 8005412:	b530      	push	{r4, r5, lr}
 8005414:	4615      	mov	r5, r2
 8005416:	dc33      	bgt.n	8005480 <floor+0x80>
 8005418:	2900      	cmp	r1, #0
 800541a:	da18      	bge.n	800544e <floor+0x4e>
 800541c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80054e0 <floor+0xe0>
 8005420:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005424:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	dd0a      	ble.n	8005444 <floor+0x44>
 800542e:	2b00      	cmp	r3, #0
 8005430:	da50      	bge.n	80054d4 <floor+0xd4>
 8005432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005436:	4313      	orrs	r3, r2
 8005438:	2200      	movs	r2, #0
 800543a:	4293      	cmp	r3, r2
 800543c:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <floor+0xe8>)
 800543e:	bf08      	it	eq
 8005440:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	ec41 0b10 	vmov	d0, r0, r1
 800544c:	e01f      	b.n	800548e <floor+0x8e>
 800544e:	4827      	ldr	r0, [pc, #156]	@ (80054ec <floor+0xec>)
 8005450:	4108      	asrs	r0, r1
 8005452:	ea03 0400 	and.w	r4, r3, r0
 8005456:	4314      	orrs	r4, r2
 8005458:	d019      	beq.n	800548e <floor+0x8e>
 800545a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80054e0 <floor+0xe0>
 800545e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005462:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	ddeb      	ble.n	8005444 <floor+0x44>
 800546c:	2b00      	cmp	r3, #0
 800546e:	bfbe      	ittt	lt
 8005470:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8005474:	410a      	asrlt	r2, r1
 8005476:	189b      	addlt	r3, r3, r2
 8005478:	ea23 0300 	bic.w	r3, r3, r0
 800547c:	2200      	movs	r2, #0
 800547e:	e7e1      	b.n	8005444 <floor+0x44>
 8005480:	2933      	cmp	r1, #51	@ 0x33
 8005482:	dd05      	ble.n	8005490 <floor+0x90>
 8005484:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005488:	d101      	bne.n	800548e <floor+0x8e>
 800548a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800548e:	bd30      	pop	{r4, r5, pc}
 8005490:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	40e0      	lsrs	r0, r4
 800549a:	4210      	tst	r0, r2
 800549c:	d0f7      	beq.n	800548e <floor+0x8e>
 800549e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80054e0 <floor+0xe0>
 80054a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80054a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	ddc9      	ble.n	8005444 <floor+0x44>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da02      	bge.n	80054ba <floor+0xba>
 80054b4:	2914      	cmp	r1, #20
 80054b6:	d103      	bne.n	80054c0 <floor+0xc0>
 80054b8:	3301      	adds	r3, #1
 80054ba:	ea22 0200 	bic.w	r2, r2, r0
 80054be:	e7c1      	b.n	8005444 <floor+0x44>
 80054c0:	2401      	movs	r4, #1
 80054c2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80054c6:	fa04 f101 	lsl.w	r1, r4, r1
 80054ca:	440a      	add	r2, r1
 80054cc:	42aa      	cmp	r2, r5
 80054ce:	bf38      	it	cc
 80054d0:	191b      	addcc	r3, r3, r4
 80054d2:	e7f2      	b.n	80054ba <floor+0xba>
 80054d4:	2200      	movs	r2, #0
 80054d6:	4613      	mov	r3, r2
 80054d8:	e7b4      	b.n	8005444 <floor+0x44>
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w
 80054e0:	8800759c 	.word	0x8800759c
 80054e4:	7e37e43c 	.word	0x7e37e43c
 80054e8:	bff00000 	.word	0xbff00000
 80054ec:	000fffff 	.word	0x000fffff

080054f0 <_init>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr

080054fc <_fini>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr
