
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d47c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800d714  0800d714  0000e714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd6c  0800dd6c  0000f018  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd6c  0800dd6c  0000f018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd6c  0800dd6c  0000f018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd6c  0800dd6c  0000ed6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  24000000  0800dd74  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012750  24000018  0800dd8c  0000f018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24012768  0800dd8c  0000f768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad09  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cde  00000000  00000000  00029d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103d  00000000  00000000  0002ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004285b  00000000  00000000  0002ffcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5bb  00000000  00000000  00072828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019de0a  00000000  00000000  00091de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022fbed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  0022fc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  002353fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d6fc 	.word	0x0800d6fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800d6fc 	.word	0x0800d6fc

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f002 f807 	bl	800242c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f002 f801 	bl	800242c <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 ffed 	bl	800242c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 ffe7 	bl	800242c <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 ffd3 	bl	800242c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 ffcd 	bl	800242c <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f001 f98d 	bl	8001884 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f001 f987 	bl	8001884 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f001 f981 	bl	8001884 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000654:	2048      	movs	r0, #72	@ 0x48
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 ff59 	bl	8001884 <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f000 ff53 	bl	8001884 <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_spi_tx+0x30>)
 80009fa:	f008 fb87 	bl	800910c <HAL_SPI_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a04:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
		return;

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24011658 	.word	0x24011658
 8000a18:	24000034 	.word	0x24000034

08000a1c <JPEG_DecodePolling>:
  * @param  file   : pointer to file object
  * @param  DestAddress : ARGB destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_DecodePolling(JPEG_HandleTypeDef *hjpeg, FIL *file, uint32_t DestAddress)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  pFile = file;
 8000a28:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <JPEG_DecodePolling+0x64>)
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8000a2e:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <JPEG_DecodePolling+0x68>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]

  /* Read from JPG file and fill the input buffer */
  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) != FR_OK)
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <JPEG_DecodePolling+0x64>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <JPEG_DecodePolling+0x6c>)
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <JPEG_DecodePolling+0x70>)
 8000a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a42:	f00b fcc9 	bl	800c3d8 <f_read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <JPEG_DecodePolling+0x34>
  {
    while(1);
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <JPEG_DecodePolling+0x30>
  }

  /* Update the file Offset*/
  Inputfile_Offset = JPEG_InBuffer.DataBufferSize;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <JPEG_DecodePolling+0x6c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <JPEG_DecodePolling+0x74>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* Start JPEG decoding with polling (Blocking) method */
  HAL_JPEG_Decode(hjpeg ,JPEG_InBuffer.DataBuffer ,JPEG_InBuffer.DataBufferSize ,MCU_Data_OutBuffer ,CHUNK_SIZE_OUT,HAL_MAX_DELAY);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <JPEG_DecodePolling+0x6c>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <JPEG_DecodePolling+0x6c>)
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <JPEG_DecodePolling+0x78>)
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f001 fe3b 	bl	80026ea <HAL_JPEG_Decode>

  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2400003c 	.word	0x2400003c
 8000a84:	24011050 	.word	0x24011050
 8000a88:	24000008 	.word	0x24000008
 8000a8c:	2400000c 	.word	0x2400000c
 8000a90:	24011048 	.word	0x24011048
 8000a94:	24000040 	.word	0x24000040

08000a98 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d11b      	bne.n	8000ae2 <HAL_JPEG_InfoReadyCallback+0x4a>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <HAL_JPEG_InfoReadyCallback+0x2e>
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	f023 030f 	bic.w	r3, r3, #15
 8000abe:	f103 0210 	add.w	r2, r3, #16
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <HAL_JPEG_InfoReadyCallback+0x4a>
    pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f023 030f 	bic.w	r3, r3, #15
 8000ada:	f103 0210 	add.w	r2, r3, #16
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	609a      	str	r2, [r3, #8]
  }

  if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d11b      	bne.n	8000b22 <HAL_JPEG_InfoReadyCallback+0x8a>
  {
    if((pInfo->ImageWidth % 16) != 0)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <HAL_JPEG_InfoReadyCallback+0x6e>
    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f023 030f 	bic.w	r3, r3, #15
 8000afe:	f103 0210 	add.w	r2, r3, #16
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 8) != 0)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <HAL_JPEG_InfoReadyCallback+0x8a>
    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f023 0307 	bic.w	r3, r3, #7
 8000b1a:	f103 0208 	add.w	r2, r3, #8
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	609a      	str	r2, [r3, #8]
  }

  if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d11b      	bne.n	8000b62 <HAL_JPEG_InfoReadyCallback+0xca>
  {
    if((pInfo->ImageWidth % 8) != 0)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d007      	beq.n	8000b46 <HAL_JPEG_InfoReadyCallback+0xae>
    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	f023 0307 	bic.w	r3, r3, #7
 8000b3e:	f103 0208 	add.w	r2, r3, #8
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 8) != 0)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <HAL_JPEG_InfoReadyCallback+0xca>
    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f023 0307 	bic.w	r3, r3, #7
 8000b5a:	f103 0208 	add.w	r2, r3, #8
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	609a      	str	r2, [r3, #8]
  }

  if(JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb) != HAL_OK)
 8000b62:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <HAL_JPEG_InfoReadyCallback+0xe8>)
 8000b64:	4907      	ldr	r1, [pc, #28]	@ (8000b84 <HAL_JPEG_InfoReadyCallback+0xec>)
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f00c fc40 	bl	800d3ec <JPEG_GetDecodeColorConvertFunc>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_JPEG_InfoReadyCallback+0xde>
  {
    while(1);
 8000b72:	bf00      	nop
 8000b74:	e7fd      	b.n	8000b72 <HAL_JPEG_InfoReadyCallback+0xda>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24011040 	.word	0x24011040
 8000b84:	24000038 	.word	0x24000038

08000b88 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  if(NbDecodedData != JPEG_InBuffer.DataBufferSize)
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d010      	beq.n	8000bbe <HAL_JPEG_GetDataCallback+0x36>
  {
    Inputfile_Offset = Inputfile_Offset - JPEG_InBuffer.DataBufferSize + NbDecodedData;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_JPEG_GetDataCallback+0x7c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a16      	ldr	r2, [pc, #88]	@ (8000c04 <HAL_JPEG_GetDataCallback+0x7c>)
 8000bac:	6013      	str	r3, [r2, #0]
    f_lseek(pFile,Inputfile_Offset);
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_JPEG_GetDataCallback+0x80>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <HAL_JPEG_GetDataCallback+0x7c>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00b fd4c 	bl	800c656 <f_lseek>
  }

  if(f_read (pFile, JPEG_InBuffer.DataBuffer , CHUNK_SIZE_IN, (UINT*)(&JPEG_InBuffer.DataBufferSize)) == FR_OK)
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_JPEG_GetDataCallback+0x80>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_JPEG_GetDataCallback+0x84>)
 8000bc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bcc:	f00b fc04 	bl	800c3d8 <f_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_JPEG_GetDataCallback+0x6e>
  {
    Inputfile_Offset += JPEG_InBuffer.DataBufferSize;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_JPEG_GetDataCallback+0x7c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_JPEG_GetDataCallback+0x7c>)
 8000be2:	6013      	str	r3, [r2, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg, JPEG_InBuffer.DataBuffer, JPEG_InBuffer.DataBufferSize);
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <HAL_JPEG_GetDataCallback+0x78>)
 8000bea:	6852      	ldr	r2, [r2, #4]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f001 fe5b 	bl	80028aa <HAL_JPEG_ConfigInputBuffer>
  }
  else
  {
    while(1);
  }
}
 8000bf4:	e000      	b.n	8000bf8 <HAL_JPEG_GetDataCallback+0x70>
    while(1);
 8000bf6:	e7fe      	b.n	8000bf6 <HAL_JPEG_GetDataCallback+0x6e>
}
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000008 	.word	0x24000008
 8000c04:	24011048 	.word	0x24011048
 8000c08:	2400003c 	.word	0x2400003c
 8000c0c:	2400000c 	.word	0x2400000c

08000c10 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t ConvertedDataCount;

  MCU_BlockIndex += pConvert_Function(pDataOut, (uint8_t *)FrameBufferAddress, MCU_BlockIndex, OutDataLength, &ConvertedDataCount);
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_JPEG_DataReadyCallback+0x48>)
 8000c1e:	681c      	ldr	r4, [r3, #0]
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_JPEG_DataReadyCallback+0x4c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_JPEG_DataReadyCallback+0x50>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68b8      	ldr	r0, [r7, #8]
 8000c34:	47a0      	blx	r4
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_JPEG_DataReadyCallback+0x50>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_JPEG_DataReadyCallback+0x50>)
 8000c40:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, MCU_Data_OutBuffer, CHUNK_SIZE_OUT);
 8000c42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c46:	4907      	ldr	r1, [pc, #28]	@ (8000c64 <HAL_JPEG_DataReadyCallback+0x54>)
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f001 fe40 	bl	80028ce <HAL_JPEG_ConfigOutputBuffer>
}
 8000c4e:	bf00      	nop
 8000c50:	371c      	adds	r7, #28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000038 	.word	0x24000038
 8000c5c:	24011050 	.word	0x24011050
 8000c60:	24011044 	.word	0x24011044
 8000c64:	24000040 	.word	0x24000040

08000c68 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  Jpeg_Decoding_End = 1;
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2401104c 	.word	0x2401104c

08000c88 <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000c8c:	f7ff fc65 	bl	800055a <GC9A01_init>
	sd_init();
 8000c90:	f000 f8ce 	bl	8000e30 <sd_init>

	//bmp_init(bmp, &file, fName, lcd_draw);

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <lcd_process>:


void lcd_process(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	jpeg_demo();
 8000c9c:	f000 f842 	bl	8000d24 <jpeg_demo>

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	807b      	strh	r3, [r7, #2]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e022      	b.n	8000d0e <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	e016      	b.n	8000cfc <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d108      	bne.n	8000ce8 <lcd_draw+0x44>
 8000cd6:	88bb      	ldrh	r3, [r7, #4]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d104      	bne.n	8000ce8 <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000cde:	2102      	movs	r1, #2
 8000ce0:	6a38      	ldr	r0, [r7, #32]
 8000ce2:	f7ff fc1a 	bl	800051a <GC9A01_write>
 8000ce6:	e003      	b.n	8000cf0 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8000ce8:	2102      	movs	r1, #2
 8000cea:	6a38      	ldr	r0, [r7, #32]
 8000cec:	f7ff fc25 	bl	800053a <GC9A01_write_continue>

			}

			data += 2;
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbe2      	blt.n	8000cce <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	4413      	add	r3, r2
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dbd6      	blt.n	8000cc8 <lcd_draw+0x24>

		}

	}

}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}

08000d24 <jpeg_demo>:


void jpeg_demo(void)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	f5ad 3d61 	sub.w	sp, sp, #230400	@ 0x38400
 8000d2a:	b08d      	sub	sp, #52	@ 0x34
 8000d2c:	af04      	add	r7, sp, #16

    JPEG_ConfTypeDef JPEG_Info;

    hjpeg.Instance = JPEG;
 8000d2e:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <jpeg_demo+0xdc>)
 8000d30:	4a34      	ldr	r2, [pc, #208]	@ (8000e04 <jpeg_demo+0xe0>)
 8000d32:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Init(&hjpeg);
 8000d34:	4832      	ldr	r0, [pc, #200]	@ (8000e00 <jpeg_demo+0xdc>)
 8000d36:	f001 fbc1 	bl	80024bc <HAL_JPEG_Init>

    if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4932      	ldr	r1, [pc, #200]	@ (8000e08 <jpeg_demo+0xe4>)
 8000d3e:	4833      	ldr	r0, [pc, #204]	@ (8000e0c <jpeg_demo+0xe8>)
 8000d40:	f00b f990 	bl	800c064 <f_open>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <jpeg_demo+0x2a>
    	while(1);
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <jpeg_demo+0x26>

    uint8_t JPEG_OutputBuffer[240*240*2]; 		// RAW buffer
    uint8_t DECODED_OutputBuffer[240*240*2];	// Decoded buffer

    // Decodifica JPEG
    JPEG_DecodePolling(&hjpeg, &file, (uint32_t)JPEG_OutputBuffer);
 8000d4e:	4b30      	ldr	r3, [pc, #192]	@ (8000e10 <jpeg_demo+0xec>)
 8000d50:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 8000d54:	f103 0320 	add.w	r3, r3, #32
 8000d58:	443b      	add	r3, r7
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	492b      	ldr	r1, [pc, #172]	@ (8000e0c <jpeg_demo+0xe8>)
 8000d5e:	4828      	ldr	r0, [pc, #160]	@ (8000e00 <jpeg_demo+0xdc>)
 8000d60:	f7ff fe5c 	bl	8000a1c <JPEG_DecodePolling>

    while(!Jpeg_Decoding_End);
 8000d64:	bf00      	nop
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <jpeg_demo+0xf0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0fb      	beq.n	8000d66 <jpeg_demo+0x42>

    // Ottieni informazioni sull'immagine JPEG
    HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <jpeg_demo+0xf4>)
 8000d70:	443b      	add	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4822      	ldr	r0, [pc, #136]	@ (8000e00 <jpeg_demo+0xdc>)
 8000d76:	f001 fc23 	bl	80025c0 <HAL_JPEG_GetInfo>

    uint32_t width = JPEG_Info.ImageWidth;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <jpeg_demo+0xf8>)
 8000d7c:	443b      	add	r3, r7
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a27      	ldr	r2, [pc, #156]	@ (8000e20 <jpeg_demo+0xfc>)
 8000d82:	443a      	add	r2, r7
 8000d84:	6013      	str	r3, [r2, #0]
    uint32_t height = JPEG_Info.ImageHeight;
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <jpeg_demo+0x100>)
 8000d88:	443b      	add	r3, r7
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <jpeg_demo+0x104>)
 8000d8e:	443a      	add	r2, r7
 8000d90:	6013      	str	r3, [r2, #0]

    DMA2D_CopyBuffer((uint32_t *)JPEG_OutputBuffer, (uint32_t *)DECODED_OutputBuffer, 0, 0, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, 0);
 8000d92:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <jpeg_demo+0xf8>)
 8000d94:	443b      	add	r3, r7
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4a22      	ldr	r2, [pc, #136]	@ (8000e24 <jpeg_demo+0x100>)
 8000d9c:	443a      	add	r2, r7
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	b292      	uxth	r2, r2
 8000da2:	4922      	ldr	r1, [pc, #136]	@ (8000e2c <jpeg_demo+0x108>)
 8000da4:	f501 3161 	add.w	r1, r1, #230400	@ 0x38400
 8000da8:	f101 0120 	add.w	r1, r1, #32
 8000dac:	4439      	add	r1, r7
 8000dae:	4818      	ldr	r0, [pc, #96]	@ (8000e10 <jpeg_demo+0xec>)
 8000db0:	f500 3061 	add.w	r0, r0, #230400	@ 0x38400
 8000db4:	f100 0020 	add.w	r0, r0, #32
 8000db8:	4438      	add	r0, r7
 8000dba:	2400      	movs	r4, #0
 8000dbc:	9402      	str	r4, [sp, #8]
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f000 f849 	bl	8000e5c <DMA2D_CopyBuffer>

    lcd_draw(0, 0, width, height, DECODED_OutputBuffer);
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <jpeg_demo+0xfc>)
 8000dcc:	443b      	add	r3, r7
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <jpeg_demo+0x104>)
 8000dd4:	443b      	add	r3, r7
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <jpeg_demo+0x108>)
 8000ddc:	f503 3361 	add.w	r3, r3, #230400	@ 0x38400
 8000de0:	f103 0320 	add.w	r3, r3, #32
 8000de4:	443b      	add	r3, r7
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	460b      	mov	r3, r1
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ff59 	bl	8000ca4 <lcd_draw>

}
 8000df2:	bf00      	nop
 8000df4:	f507 3761 	add.w	r7, r7, #230400	@ 0x38400
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24011584 	.word	0x24011584
 8000e04:	52003000 	.word	0x52003000
 8000e08:	0800d714 	.word	0x0800d714
 8000e0c:	24011284 	.word	0x24011284
 8000e10:	fffe3de4 	.word	0xfffe3de4
 8000e14:	2401104c 	.word	0x2401104c
 8000e18:	00038404 	.word	0x00038404
 8000e1c:	00038410 	.word	0x00038410
 8000e20:	0003841c 	.word	0x0003841c
 8000e24:	0003840c 	.word	0x0003840c
 8000e28:	00038418 	.word	0x00038418
 8000e2c:	fffc7be4 	.word	0xfffc7be4

08000e30 <sd_init>:


// SD

static void sd_init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8000e34:	2201      	movs	r2, #1
 8000e36:	4905      	ldr	r1, [pc, #20]	@ (8000e4c <sd_init+0x1c>)
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <sd_init+0x20>)
 8000e3a:	f00b f8cd 	bl	800bfd8 <f_mount>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <sd_init+0x18>
    	sd_error_handler();
 8000e44:	f000 f806 	bl	8000e54 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	0800d720 	.word	0x0800d720
 8000e50:	24011054 	.word	0x24011054

08000e54 <sd_error_handler>:


static void sd_error_handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

	while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <sd_error_handler+0x4>

08000e5c <DMA2D_CopyBuffer>:
  * @param  ysize: image Height
  * @retval None
  */
static DMA2D_HandleTypeDef    DMA2D_Handle;
static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize, uint32_t width_offset)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80bb      	strh	r3, [r7, #4]

  uint32_t destination = (uint32_t)pDst;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	613b      	str	r3, [r7, #16]

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode          = DMA2D_M2M_PFC;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000e7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e80:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode     = DMA2D_OUTPUT_RGB565;
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset  = 240 - xsize;
 8000e88:	8c3b      	ldrh	r3, [r7, #32]
 8000e8a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000e92:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000eae:	22ff      	movs	r2, #255	@ 0xff
 8000eb0:	651a      	str	r2, [r3, #80]	@ 0x50

#elif (JPEG_RGB_FORMAT == JPEG_RGB888)
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	649a      	str	r2, [r3, #72]	@ 0x48

#endif /* JPEG_RGB_FORMAT * */


  DMA2D_Handle.LayerCfg[1].InputOffset = width_offset;
 8000eb8:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <DMA2D_CopyBuffer+0xbc>)
 8000ece:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&DMA2D_Handle) == HAL_OK)
 8000ed0:	4810      	ldr	r0, [pc, #64]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ed2:	f000 fe17 	bl	8001b04 <HAL_DMA2D_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d116      	bne.n	8000f0a <DMA2D_CopyBuffer+0xae>
  {
    if(HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) == HAL_OK)
 8000edc:	2101      	movs	r1, #1
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ee0:	f000 ff88 	bl	8001df4 <HAL_DMA2D_ConfigLayer>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10f      	bne.n	8000f0a <DMA2D_CopyBuffer+0xae>
    {
      if (HAL_DMA2D_Start(&DMA2D_Handle, source, destination, xsize, ysize) == HAL_OK)
 8000eea:	8c3a      	ldrh	r2, [r7, #32]
 8000eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	6939      	ldr	r1, [r7, #16]
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000ef8:	f000 fe68 	bl	8001bcc <HAL_DMA2D_Start>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d103      	bne.n	8000f0a <DMA2D_CopyBuffer+0xae>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 100);
 8000f02:	2164      	movs	r1, #100	@ 0x64
 8000f04:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <DMA2D_CopyBuffer+0xb8>)
 8000f06:	f000 fe8c 	bl	8001c22 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240114b4 	.word	0x240114b4
 8000f18:	52001000 	.word	0x52001000

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000f22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f26:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f28:	bf00      	nop
 8000f2a:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <main+0xb0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <main+0x24>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dcf4      	bgt.n	8000f2a <main+0xe>
  if ( timeout < 0 )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da01      	bge.n	8000f4a <main+0x2e>
  {
  Error_Handler();
 8000f46:	f000 fa1d 	bl	8001384 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fc09 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f83f 	bl	8000fd0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f52:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <main+0xb0>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <main+0xb0>)
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <main+0xb0>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f001 fa75 	bl	8002460 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f001 fa8b 	bl	8002494 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f82:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f84:	bf00      	nop
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <main+0xb0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <main+0x80>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dcf4      	bgt.n	8000f86 <main+0x6a>
if ( timeout < 0 )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da01      	bge.n	8000fa6 <main+0x8a>
{
Error_Handler();
 8000fa2:	f000 f9ef 	bl	8001384 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 f957 	bl	8001258 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000faa:	f000 f901 	bl	80011b0 <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8000fae:	f000 f8db 	bl	8001168 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000fb2:	f009 f94d 	bl	800a250 <MX_FATFS_Init>
  JPEG_InitColorTables();
 8000fb6:	f00c fb6f 	bl	800d698 <JPEG_InitColorTables>
  MX_JPEG_Init();
 8000fba:	f000 f8c1 	bl	8001140 <MX_JPEG_Init>
  MX_DMA2D_Init();
 8000fbe:	f000 f885 	bl	80010cc <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000fc2:	f7ff fe61 	bl	8000c88 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000fc6:	f7ff fe67 	bl	8000c98 <lcd_process>
 8000fca:	e7fc      	b.n	8000fc6 <main+0xaa>
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b09c      	sub	sp, #112	@ 0x70
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	224c      	movs	r2, #76	@ 0x4c
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00c fb60 	bl	800d6a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00c fb5a 	bl	800d6a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ff0:	2004      	movs	r0, #4
 8000ff2:	f002 fd9b 	bl	8003b2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <SystemClock_Config+0xf4>)
 8000ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ffe:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <SystemClock_Config+0xf4>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001006:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <SystemClock_Config+0xf4>)
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <SystemClock_Config+0xf8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001018:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <SystemClock_Config+0xf8>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <SystemClock_Config+0xf8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800102c:	bf00      	nop
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <SystemClock_Config+0xf8>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800103a:	d1f8      	bne.n	800102e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001040:	2301      	movs	r3, #1
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2340      	movs	r3, #64	@ 0x40
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001054:	230c      	movs	r3, #12
 8001056:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001058:	2302      	movs	r3, #2
 800105a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 800105c:	230d      	movs	r3, #13
 800105e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001064:	230c      	movs	r3, #12
 8001066:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001068:	2300      	movs	r3, #0
 800106a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800106c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001070:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fdb2 	bl	8003be0 <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001082:	f000 f97f 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	233f      	movs	r3, #63	@ 0x3f
 8001088:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2303      	movs	r3, #3
 800108c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001096:	2340      	movs	r3, #64	@ 0x40
 8001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800109a:	2340      	movs	r3, #64	@ 0x40
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800109e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010a4:	2340      	movs	r3, #64	@ 0x40
 80010a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2102      	movs	r1, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f9f1 	bl	8004494 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80010b8:	f000 f964 	bl	8001384 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3770      	adds	r7, #112	@ 0x70
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58000400 	.word	0x58000400
 80010c8:	58024800 	.word	0x58024800

080010cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010d2:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <MX_DMA2D_Init+0x70>)
 80010d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 8001102:	2200      	movs	r2, #0
 8001104:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 800110e:	2200      	movs	r2, #0
 8001110:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001112:	4809      	ldr	r0, [pc, #36]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 8001114:	f000 fcf6 	bl	8001b04 <HAL_DMA2D_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800111e:	f000 f931 	bl	8001384 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001122:	2101      	movs	r1, #1
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_DMA2D_Init+0x6c>)
 8001126:	f000 fe65 	bl	8001df4 <HAL_DMA2D_ConfigLayer>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8001130:	f000 f928 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2401151c 	.word	0x2401151c
 800113c:	52001000 	.word	0x52001000

08001140 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_JPEG_Init+0x20>)
 8001146:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <MX_JPEG_Init+0x24>)
 8001148:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_JPEG_Init+0x20>)
 800114c:	f001 f9b6 	bl	80024bc <HAL_JPEG_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001156:	f000 f915 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	24011584 	.word	0x24011584
 8001164:	52003000 	.word	0x52003000

08001168 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <MX_SDMMC1_SD_Init+0x44>)
 8001170:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 8001180:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001184:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_SDMMC1_SD_Init+0x40>)
 8001194:	f006 fa32 	bl	80075fc <HAL_SD_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800119e:	f000 f8f1 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240115dc 	.word	0x240115dc
 80011ac:	52007000 	.word	0x52007000

080011b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011b6:	4a27      	ldr	r2, [pc, #156]	@ (8001254 <MX_SPI5_Init+0xa4>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_SPI5_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001208:	2200      	movs	r2, #0
 800120a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_SPI5_Init+0xa0>)
 800120e:	2200      	movs	r2, #0
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_SPI5_Init+0xa0>)
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001220:	2200      	movs	r2, #0
 8001222:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001226:	2200      	movs	r2, #0
 8001228:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_SPI5_Init+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001232:	2200      	movs	r2, #0
 8001234:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_SPI5_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_SPI5_Init+0xa0>)
 800123e:	f007 fe41 	bl	8008ec4 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8001248:	f000 f89c 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24011658 	.word	0x24011658
 8001254:	40015000 	.word	0x40015000

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b41      	ldr	r3, [pc, #260]	@ (8001374 <MX_GPIO_Init+0x11c>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a3f      	ldr	r2, [pc, #252]	@ (8001374 <MX_GPIO_Init+0x11c>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b3d      	ldr	r3, [pc, #244]	@ (8001374 <MX_GPIO_Init+0x11c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <MX_GPIO_Init+0x11c>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a38      	ldr	r2, [pc, #224]	@ (8001374 <MX_GPIO_Init+0x11c>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <MX_GPIO_Init+0x11c>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012aa:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	4a30      	ldr	r2, [pc, #192]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80012c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a29      	ldr	r2, [pc, #164]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_GPIO_Init+0x11c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	481b      	ldr	r0, [pc, #108]	@ (8001378 <MX_GPIO_Init+0x120>)
 800130a:	f001 f88f 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2161      	movs	r1, #97	@ 0x61
 8001312:	481a      	ldr	r0, [pc, #104]	@ (800137c <MX_GPIO_Init+0x124>)
 8001314:	f001 f88a 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4814      	ldr	r0, [pc, #80]	@ (8001380 <MX_GPIO_Init+0x128>)
 800132e:	f000 feb5 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 8001332:	2302      	movs	r3, #2
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <MX_GPIO_Init+0x120>)
 800134a:	f000 fea7 	bl	800209c <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800134e:	2361      	movs	r3, #97	@ 0x61
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_GPIO_Init+0x124>)
 8001366:	f000 fe99 	bl	800209c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	58024400 	.word	0x58024400
 8001378:	58022800 	.word	0x58022800
 800137c:	58022400 	.word	0x58022400
 8001380:	58022000 	.word	0x58022000

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <Error_Handler+0x8>

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_MspInit+0x30>)
 8001398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800139c:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x30>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x30>)
 80013a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_DMA2D_MspInit+0x3c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10e      	bne.n	80013f4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_DMA2D_MspInit+0x40>)
 80013d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013dc:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_DMA2D_MspInit+0x40>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <HAL_DMA2D_MspInit+0x40>)
 80013e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	52001000 	.word	0x52001000
 8001404:	58024400 	.word	0x58024400

08001408 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_JPEG_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10e      	bne.n	8001438 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <HAL_JPEG_MspInit+0x40>)
 800141c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001420:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_JPEG_MspInit+0x40>)
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_JPEG_MspInit+0x40>)
 800142c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	52003000 	.word	0x52003000
 8001448:	58024400 	.word	0x58024400

0800144c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0be      	sub	sp, #248	@ 0xf8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	22c8      	movs	r2, #200	@ 0xc8
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00c f919 	bl	800d6a4 <memset>
  if(hsd->Instance==SDMMC1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3c      	ldr	r2, [pc, #240]	@ (8001568 <HAL_SD_MspInit+0x11c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d171      	bne.n	8001560 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800147c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001488:	2300      	movs	r3, #0
 800148a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fb75 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800149c:	f7ff ff72 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80014a0:	4b32      	ldr	r3, [pc, #200]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014a6:	4a31      	ldr	r2, [pc, #196]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c4:	4a29      	ldr	r2, [pc, #164]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e2:	4a22      	ldr	r2, [pc, #136]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_SD_MspInit+0x120>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 80014fa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80014fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001514:	230c      	movs	r3, #12
 8001516:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800151e:	4619      	mov	r1, r3
 8001520:	4813      	ldr	r0, [pc, #76]	@ (8001570 <HAL_SD_MspInit+0x124>)
 8001522:	f000 fdbb 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001526:	2304      	movs	r3, #4
 8001528:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800153e:	230c      	movs	r3, #12
 8001540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001548:	4619      	mov	r1, r3
 800154a:	480a      	ldr	r0, [pc, #40]	@ (8001574 <HAL_SD_MspInit+0x128>)
 800154c:	f000 fda6 	bl	800209c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2031      	movs	r0, #49	@ 0x31
 8001556:	f000 faa0 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800155a:	2031      	movs	r0, #49	@ 0x31
 800155c:	f000 fab7 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	37f8      	adds	r7, #248	@ 0xf8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	52007000 	.word	0x52007000
 800156c:	58024400 	.word	0x58024400
 8001570:	58020800 	.word	0x58020800
 8001574:	58020c00 	.word	0x58020c00

08001578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0be      	sub	sp, #248	@ 0xf8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	22c8      	movs	r2, #200	@ 0xc8
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00c f883 	bl	800d6a4 <memset>
  if(hspi->Instance==SPI5)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a39      	ldr	r2, [pc, #228]	@ (8001688 <HAL_SPI_MspInit+0x110>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d16a      	bne.n	800167e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80015a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fade 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80015ca:	f7ff fedb 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d4:	4a2d      	ldr	r2, [pc, #180]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f2:	4a26      	ldr	r2, [pc, #152]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_SPI_MspInit+0x114>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_SPI_MspInit+0x114>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001610:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <HAL_SPI_MspInit+0x114>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_SPI_MspInit+0x114>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001640:	2305      	movs	r3, #5
 8001642:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	@ (8001690 <HAL_SPI_MspInit+0x118>)
 800164e:	f000 fd25 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 8001652:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800166c:	2305      	movs	r3, #5
 800166e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001672:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001676:	4619      	mov	r1, r3
 8001678:	4806      	ldr	r0, [pc, #24]	@ (8001694 <HAL_SPI_MspInit+0x11c>)
 800167a:	f000 fd0f 	bl	800209c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	37f8      	adds	r7, #248	@ 0xf8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40015000 	.word	0x40015000
 800168c:	58024400 	.word	0x58024400
 8001690:	58022800 	.word	0x58022800
 8001694:	58022400 	.word	0x58022400

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <NMI_Handler+0x4>

080016a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <MemManage_Handler+0x4>

080016b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <UsageFault_Handler+0x4>

080016c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 f8a9 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <SDMMC1_IRQHandler+0x10>)
 80016fe:	f006 f9ed 	bl	8007adc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240115dc 	.word	0x240115dc

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001710:	f7fe fde2 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	@ (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f00b ffbb 	bl	800d6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff fbed 	bl	8000f1c <main>
  bx  lr
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800174c:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8001750:	0800dd74 	.word	0x0800dd74
  ldr r2, =_sbss
 8001754:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001758:	24012768 	.word	0x24012768

0800175c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC3_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001766:	2003      	movs	r0, #3
 8001768:	f000 f98c 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800176c:	f003 f848 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_Init+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4913      	ldr	r1, [pc, #76]	@ (80017cc <HAL_Init+0x6c>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_Init+0x68>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <HAL_Init+0x6c>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_Init+0x70>)
 80017a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017a4:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_Init+0x74>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f814 	bl	80017d8 <HAL_InitTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e002      	b.n	80017c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fde9 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	58024400 	.word	0x58024400
 80017cc:	0800d768 	.word	0x0800d768
 80017d0:	24000004 	.word	0x24000004
 80017d4:	24000000 	.word	0x24000000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_InitTick+0x60>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e021      	b.n	8001830 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <HAL_InitTick+0x64>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_InitTick+0x60>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f971 	bl	8001aea <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 f93b 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	@ (8001840 <HAL_InitTick+0x68>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24000014 	.word	0x24000014
 800183c:	24000000 	.word	0x24000000
 8001840:	24000010 	.word	0x24000010

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	24000014 	.word	0x24000014
 8001868:	240116e0 	.word	0x240116e0

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	240116e0 	.word	0x240116e0

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24000014 	.word	0x24000014

080018cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetREVID+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0c1b      	lsrs	r3, r3, #16
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	5c001000 	.word	0x5c001000

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <__NVIC_SetPriorityGrouping+0x40>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	4313      	orrs	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <__NVIC_SetPriorityGrouping+0x40>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00
 8001928:	05fa0000 	.word	0x05fa0000

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4907      	ldr	r1, [pc, #28]	@ (8001980 <__NVIC_EnableIRQ+0x38>)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff29 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff40 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff33 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa4 	bl	8001a40 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e04f      	b.n	8001bb6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc4a 	bl	80013c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_DMA2D_Init+0xbc>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6851      	ldr	r1, [r2, #4]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	69d2      	ldr	r2, [r2, #28]
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <HAL_DMA2D_Init+0xc0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6891      	ldr	r1, [r2, #8]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6992      	ldr	r2, [r2, #24]
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_DMA2D_Init+0xc4>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d1      	ldr	r1, [r2, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	430b      	orrs	r3, r1
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	051a      	lsls	r2, r3, #20
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	055b      	lsls	r3, r3, #21
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	fff8ffbf 	.word	0xfff8ffbf
 8001bc4:	fffffef8 	.word	0xfffffef8
 8001bc8:	ffff0000 	.word	0xffff0000

08001bcc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA2D_Start+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e018      	b.n	8001c1a <HAL_DMA2D_Start+0x4e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9a4 	bl	8001f50 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d056      	beq.n	8001cec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fe15 	bl	800186c <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c44:	e04b      	b.n	8001cde <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2221      	movs	r2, #33	@ 0x21
 8001c8a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0a5      	b.n	8001dec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d01a      	beq.n	8001cde <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ca8:	f7ff fde0 	bl	800186c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d302      	bcc.n	8001cbe <HAL_DMA2D_PollForTransfer+0x9c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e086      	b.n	8001dec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ac      	beq.n	8001c46 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d061      	beq.n	8001dd2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d0e:	f7ff fdad 	bl	800186c <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d14:	e056      	b.n	8001dc4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02e      	beq.n	8001d86 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d4c:	f043 0202 	orr.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2229      	movs	r2, #41	@ 0x29
 8001d70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e032      	b.n	8001dec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d8e:	f7ff fd6d 	bl	800186c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d302      	bcc.n	8001da4 <HAL_DMA2D_PollForTransfer+0x182>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10f      	bne.n	8001dc4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e013      	b.n	8001dec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0a1      	beq.n	8001d16 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2212      	movs	r2, #18
 8001dd8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA2D_ConfigLayer+0x24>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e092      	b.n	8001f3e <HAL_DMA2D_ConfigLayer+0x14a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3328      	adds	r3, #40	@ 0x28
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001e4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001e58:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_DMA2D_ConfigLayer+0x158>)
 8001e5a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b0a      	cmp	r3, #10
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA2D_ConfigLayer+0x78>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e005      	b.n	8001e88 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d120      	bne.n	8001ed0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	ea02 0103 	and.w	r1, r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b0a      	cmp	r3, #10
 8001eb6:	d003      	beq.n	8001ec0 <HAL_DMA2D_ConfigLayer+0xcc>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	d135      	bne.n	8001f2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ece:	e02d      	b.n	8001f2c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0b      	cmp	r3, #11
 8001ed6:	d109      	bne.n	8001eec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	049b      	lsls	r3, r3, #18
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8001eea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	ea02 0103 	and.w	r1, r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	d003      	beq.n	8001f1e <HAL_DMA2D_ConfigLayer+0x12a>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	d106      	bne.n	8001f2c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f2a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	ff33000f 	.word	0xff33000f

08001f50 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	@ 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f88:	d174      	bne.n	8002074 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001f90:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001f98:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001fa0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d108      	bne.n	8001fc2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	e053      	b.n	800206a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd6:	e048      	b.n	800206a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d111      	bne.n	8002004 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	0cdb      	lsrs	r3, r3, #19
 8001fe4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	0a9b      	lsrs	r3, r3, #10
 8001fea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	02db      	lsls	r3, r3, #11
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
 8002002:	e032      	b.n	800206a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d117      	bne.n	800203c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	0fdb      	lsrs	r3, r3, #31
 8002010:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0cdb      	lsrs	r3, r3, #19
 8002016:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0adb      	lsrs	r3, r3, #11
 800201c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	431a      	orrs	r2, r3
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	03db      	lsls	r3, r3, #15
 8002032:	4313      	orrs	r3, r2
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
 800203a:	e016      	b.n	800206a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	0f1b      	lsrs	r3, r3, #28
 8002040:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	0d1b      	lsrs	r3, r3, #20
 8002046:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	0b1b      	lsrs	r3, r3, #12
 800204c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	011a      	lsls	r2, r3, #4
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	431a      	orrs	r2, r3
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	031b      	lsls	r3, r3, #12
 8002062:	4313      	orrs	r3, r2
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002070:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002072:	e00d      	b.n	8002090 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800207c:	d104      	bne.n	8002088 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	e003      	b.n	8002090 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	bf00      	nop
 8002092:	372c      	adds	r7, #44	@ 0x2c
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020aa:	4b89      	ldr	r3, [pc, #548]	@ (80022d0 <HAL_GPIO_Init+0x234>)
 80020ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ae:	e194      	b.n	80023da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8186 	beq.w	80023d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x44>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0201 	and.w	r2, r3, #1
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d017      	beq.n	800217e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d123      	bne.n	80021d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80e0 	beq.w	80023d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <HAL_GPIO_Init+0x238>)
 8002216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221a:	4a2e      	ldr	r2, [pc, #184]	@ (80022d4 <HAL_GPIO_Init+0x238>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002224:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <HAL_GPIO_Init+0x238>)
 8002226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a29      	ldr	r2, [pc, #164]	@ (80022d8 <HAL_GPIO_Init+0x23c>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a20      	ldr	r2, [pc, #128]	@ (80022dc <HAL_GPIO_Init+0x240>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d052      	beq.n	8002304 <HAL_GPIO_Init+0x268>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_GPIO_Init+0x244>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0x22e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <HAL_GPIO_Init+0x248>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x22a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <HAL_GPIO_Init+0x24c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <HAL_GPIO_Init+0x250>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_GPIO_Init+0x254>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_GPIO_Init+0x258>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <HAL_GPIO_Init+0x25c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_GPIO_Init+0x260>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_GPIO_Init+0x264>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x20e>
 80022a6:	2309      	movs	r3, #9
 80022a8:	e02d      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022aa:	230a      	movs	r3, #10
 80022ac:	e02b      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e029      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e027      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e025      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e023      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022be:	2304      	movs	r3, #4
 80022c0:	e021      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e01f      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e01d      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01b      	b.n	8002306 <HAL_GPIO_Init+0x26a>
 80022ce:	bf00      	nop
 80022d0:	58000080 	.word	0x58000080
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58000400 	.word	0x58000400
 80022dc:	58020000 	.word	0x58020000
 80022e0:	58020400 	.word	0x58020400
 80022e4:	58020800 	.word	0x58020800
 80022e8:	58020c00 	.word	0x58020c00
 80022ec:	58021000 	.word	0x58021000
 80022f0:	58021400 	.word	0x58021400
 80022f4:	58021800 	.word	0x58021800
 80022f8:	58021c00 	.word	0x58021c00
 80022fc:	58022000 	.word	0x58022000
 8002300:	58022400 	.word	0x58022400
 8002304:	2300      	movs	r3, #0
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	4093      	lsls	r3, r2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002316:	4938      	ldr	r1, [pc, #224]	@ (80023f8 <HAL_GPIO_Init+0x35c>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae63 	bne.w	80020b0 <HAL_GPIO_Init+0x14>
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3724      	adds	r7, #36	@ 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	58000400 	.word	0x58000400

080023fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e001      	b.n	800241e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002468:	4a08      	ldr	r2, [pc, #32]	@ (800248c <HAL_HSEM_FastTake+0x2c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3320      	adds	r3, #32
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_HSEM_FastTake+0x30>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	58026400 	.word	0x58026400
 8002490:	80000300 	.word	0x80000300

08002494 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800249e:	4906      	ldr	r1, [pc, #24]	@ (80024b8 <HAL_HSEM_Release+0x24>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	58026400 	.word	0x58026400

080024bc <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e070      	b.n	80025b0 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe ff90 	bl	8001408 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800252e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800254e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_JPEG_Init+0xfc>)
 8002554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <HAL_JPEG_Init+0x100>)
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fcdb 	bl	8002f24 <JPEG_Set_HuffEnc_Mem>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e018      	b.n	80025b0 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800258c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	0800d958 	.word	0x0800d958
 80025bc:	0800d998 	.word	0x0800d998

080025c0 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_JPEG_GetInfo+0x16>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e083      	b.n	80026e2 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d103      	bne.n	80025f0 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2210      	movs	r2, #16
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e017      	b.n	8002620 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e00c      	b.n	8002620 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d103      	bne.n	800261c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2230      	movs	r2, #48	@ 0x30
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e001      	b.n	8002620 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e060      	b.n	80026e2 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	b29a      	uxth	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	b29a      	uxth	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d003      	beq.n	800264c <HAL_JPEG_GetInfo+0x8c>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b30      	cmp	r3, #48	@ 0x30
 800264a:	d140      	bne.n	80026ce <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d109      	bne.n	8002690 <HAL_JPEG_GetInfo+0xd0>
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_JPEG_GetInfo+0xd0>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2202      	movs	r2, #2
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e01d      	b.n	80026cc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_JPEG_GetInfo+0xea>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_JPEG_GetInfo+0xea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e010      	b.n	80026cc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d109      	bne.n	80026c4 <HAL_JPEG_GetInfo+0x104>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_JPEG_GetInfo+0x104>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e003      	b.n	80026cc <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80026ca:	e003      	b.n	80026d4 <HAL_JPEG_GetInfo+0x114>
 80026cc:	e002      	b.n	80026d4 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f001 f9cb 	bl	8003a70 <JPEG_GetQuality>
 80026da:	4602      	mov	r2, r0
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_JPEG_Decode+0x20>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_JPEG_Decode+0x20>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e071      	b.n	80027f2 <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_JPEG_Decode+0x32>
 8002718:	2302      	movs	r3, #2
 800271a:	e06a      	b.n	80027f2 <HAL_JPEG_Decode+0x108>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8002724:	f7ff f8a2 	bl	800186c <HAL_GetTick>
 8002728:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d158      	bne.n	80027e8 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2204      	movs	r2, #4
 800273a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f023 020f 	bic.w	r2, r3, #15
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	f043 0206 	orr.w	r2, r3, #6
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fe50 	bl	8003428 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002788:	e01e      	b.n	80027c8 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d01a      	beq.n	80027c8 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002792:	f7ff f86b 	bl	800186c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <HAL_JPEG_Decode+0xbe>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ac:	f043 0208 	orr.w	r2, r3, #8
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e014      	b.n	80027f2 <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fea1 	bl	8003510 <JPEG_Process>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0da      	beq.n	800278a <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e004      	b.n	80027f2 <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b0c      	cmp	r3, #12
 8002812:	d116      	bne.n	8002842 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d033      	beq.n	800289c <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002840:	e02c      	b.n	800289c <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d126      	bne.n	800289c <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 0306 	orr.w	r3, r3, #6
 800286a:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002888:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002906:	b480      	push	{r7}
 8002908:	b08b      	sub	sp, #44	@ 0x2c
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e020      	b.n	8002960 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	4413      	add	r3, r2
 800292e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002932:	d90f      	bls.n	8002954 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e055      	b.n	80029e4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	440b      	add	r3, r1
 8002942:	3201      	adds	r2, #1
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
      p++;
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	3301      	adds	r3, #1
 800294c:	623b      	str	r3, [r7, #32]
      i--;
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	3b01      	subs	r3, #1
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d9db      	bls.n	800291e <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	4413      	add	r3, r2
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]
  p = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8002984:	e027      	b.n	80029d6 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	601a      	str	r2, [r3, #0]
      p++;
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	3301      	adds	r3, #1
 8002996:	623b      	str	r3, [r7, #32]
      code++;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3301      	adds	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d0eb      	beq.n	8002986 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b1f      	cmp	r3, #31
 80029b2:	d901      	bls.n	80029b8 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e015      	b.n	80029e4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80029b8:	2201      	movs	r2, #1
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d301      	bcc.n	80029ca <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00c      	b.n	80029e4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
    si++;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1dd      	bne.n	800299e <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	372c      	adds	r7, #44	@ 0x2c
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80029fc:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002a00:	6018      	str	r0, [r3, #0]
 8002a02:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002a06:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002a0a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002a0c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002a10:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f107 0308 	add.w	r3, r7, #8
 8002a1a:	f107 020c 	add.w	r2, r7, #12
 8002a1e:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8002a22:	f7ff ff70 	bl	8002906 <JPEG_Bits_To_SizeCodes>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002a2c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002a34:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002a38:	e075      	b.n	8002b26 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8002a40:	e067      	b.n	8002b12 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002a42:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002a46:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002a50:	4413      	add	r3, r2
 8002a52:	3310      	adds	r3, #16
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002a5a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002a62:	23a0      	movs	r3, #160	@ 0xa0
 8002a64:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002a68:	e021      	b.n	8002aae <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002a6a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002a6e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002a70:	d103      	bne.n	8002a7a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002a72:	23a1      	movs	r3, #161	@ 0xa1
 8002a74:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002a78:	e019      	b.n	8002aae <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002a7a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8002a88:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8002a94:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002aae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002ab2:	2ba1      	cmp	r3, #161	@ 0xa1
 8002ab4:	d901      	bls.n	8002aba <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e035      	b.n	8002b26 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002aba:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002abe:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002ac2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ace:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002ad8:	3328      	adds	r3, #40	@ 0x28
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002ae0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002ae4:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002ae8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2d9      	uxtb	r1, r3
 8002af4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002af8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002b02:	4413      	add	r3, r2
 8002b04:	460a      	mov	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
      k++;
 8002b08:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8002b12:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002b16:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d38e      	bcc.n	8002a42 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002b3c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002b40:	6018      	str	r0, [r3, #0]
 8002b42:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002b46:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002b4a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002b4c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002b50:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002b5a:	f107 0208 	add.w	r2, r7, #8
 8002b5e:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8002b62:	f7ff fed0 	bl	8002906 <JPEG_Bits_To_SizeCodes>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002b6c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002b74:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002b78:	e048      	b.n	8002c0c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8002b80:	e03d      	b.n	8002bfe <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002b82:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002b86:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002b90:	4413      	add	r3, r2
 8002b92:	3310      	adds	r3, #16
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002b9a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002b9e:	2b0b      	cmp	r3, #11
 8002ba0:	d901      	bls.n	8002ba6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e032      	b.n	8002c0c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002ba6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002baa:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002bae:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002bb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bb6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002bba:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002bcc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002bd0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002bd4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b2d9      	uxtb	r1, r3
 8002be0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002be4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002bee:	4413      	add	r3, r2
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	701a      	strb	r2, [r3, #0]
      k++;
 8002bf4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8002bfe:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8002c02:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3bb      	bcc.n	8002b82 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b09a      	sub	sp, #104	@ 0x68
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002c38:	3318      	adds	r3, #24
 8002c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c3c:	e00f      	b.n	8002c5e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002c54:	3318      	adds	r3, #24
 8002c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c58:	e001      	b.n	8002c5e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e059      	b.n	8002d12 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d055      	beq.n	8002d10 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	f7ff ff60 	bl	8002b30 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8002c76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002c82:	e046      	b.n	8002d12 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8002c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c86:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c8a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002c8e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c92:	3304      	adds	r3, #4
 8002c94:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c98:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002c9c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8002ca2:	e032      	b.n	8002d0a <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cac:	3b04      	subs	r3, #4
 8002cae:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002cb0:	f107 0214 	add.w	r2, r7, #20
 8002cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	3368      	adds	r3, #104	@ 0x68
 8002cc8:	443b      	add	r3, r7
 8002cca:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8002cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002cda:	f107 0214 	add.w	r2, r7, #20
 8002cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce0:	4413      	add	r3, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cec:	3302      	adds	r3, #2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3368      	adds	r3, #104	@ 0x68
 8002cf2:	443b      	add	r3, r7
 8002cf4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d08:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d8c9      	bhi.n	8002ca4 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3768      	adds	r7, #104	@ 0x68
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d28:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002d2c:	6018      	str	r0, [r3, #0]
 8002d2e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d32:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002d36:	6019      	str	r1, [r3, #0]
 8002d38:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d3c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002d40:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002d42:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d46:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d52:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002d56:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10c      	bne.n	8002d7a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002d60:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d64:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d70:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002d74:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002d78:	e01d      	b.n	8002db6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002d7a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d7e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002d8a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002d8e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d10c      	bne.n	8002db2 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002d98:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002d9c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002da8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002dac:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002db0:	e001      	b.n	8002db6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0a8      	b.n	8002f08 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8002db6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002dba:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a0 	beq.w	8002f06 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002dc6:	f107 0214 	add.w	r2, r7, #20
 8002dca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002dce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f7ff fe0b 	bl	80029f0 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002de0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8002de8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002dec:	e08c      	b.n	8002f08 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002dee:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002df2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002dfc:	e00e      	b.n	8002e1c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8002dfe:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e02:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002e06:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002e08:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002e12:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e16:	3301      	adds	r3, #1
 8002e18:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002e1c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d9ec      	bls.n	8002dfe <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002e24:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e28:	4a3a      	ldr	r2, [pc, #232]	@ (8002f14 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002e2a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002e2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e30:	3304      	adds	r3, #4
 8002e32:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8002e36:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e3a:	4a37      	ldr	r2, [pc, #220]	@ (8002f18 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002e3c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002e3e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e42:	3304      	adds	r3, #4
 8002e44:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002e48:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e4c:	4a33      	ldr	r2, [pc, #204]	@ (8002f1c <JPEG_Set_HuffAC_Mem+0x200>)
 8002e4e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002e50:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e54:	3304      	adds	r3, #4
 8002e56:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8002e5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002e5e:	4a30      	ldr	r2, [pc, #192]	@ (8002f20 <JPEG_Set_HuffAC_Mem+0x204>)
 8002e60:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002e62:	23a2      	movs	r3, #162	@ 0xa2
 8002e64:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8002e68:	e049      	b.n	8002efe <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002e6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002e74:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002e7e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e82:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002e86:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002e94:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002e98:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002e9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ea0:	3328      	adds	r3, #40	@ 0x28
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002eb0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002eba:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002ebe:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002ec2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002ed0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002ed4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002ed8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002edc:	3328      	adds	r3, #40	@ 0x28
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002eec:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002efc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002efe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d8b1      	bhi.n	8002e6a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0fd10fd0 	.word	0x0fd10fd0
 8002f18:	0fd30fd2 	.word	0x0fd30fd2
 8002f1c:	0fd50fd4 	.word	0x0fd50fd4
 8002f20:	0fd70fd6 	.word	0x0fd70fd6

08002f24 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f84d 	bl	8002fcc <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	491f      	ldr	r1, [pc, #124]	@ (8002fbc <JPEG_Set_HuffEnc_Mem+0x98>)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff feec 	bl	8002d1c <JPEG_Set_HuffAC_Mem>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	e030      	b.n	8002fb4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4918      	ldr	r1, [pc, #96]	@ (8002fc0 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fedc 	bl	8002d1c <JPEG_Set_HuffAC_Mem>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	e020      	b.n	8002fb4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4911      	ldr	r1, [pc, #68]	@ (8002fc4 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fe49 	bl	8002c16 <JPEG_Set_HuffDC_Mem>
 8002f84:	4603      	mov	r3, r0
 8002f86:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	e010      	b.n	8002fb4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	490a      	ldr	r1, [pc, #40]	@ (8002fc8 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe39 	bl	8002c16 <JPEG_Set_HuffDC_Mem>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	e000      	b.n	8002fb4 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800d7b0 	.word	0x0800d7b0
 8002fc0:	0800d864 	.word	0x0800d864
 8002fc4:	0800d778 	.word	0x0800d778
 8002fc8:	0800d794 	.word	0x0800d794

08002fcc <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b08b      	sub	sp, #44	@ 0x2c
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002fd4:	4b80      	ldr	r3, [pc, #512]	@ (80031d8 <JPEG_Set_Huff_DHTMem+0x20c>)
 8002fd6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002fd8:	4b80      	ldr	r3, [pc, #512]	@ (80031dc <JPEG_Set_Huff_DHTMem+0x210>)
 8002fda:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002fdc:	4b80      	ldr	r3, [pc, #512]	@ (80031e0 <JPEG_Set_Huff_DHTMem+0x214>)
 8002fde:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002fe0:	4b80      	ldr	r3, [pc, #512]	@ (80031e4 <JPEG_Set_Huff_DHTMem+0x218>)
 8002fe2:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002fec:	330c      	adds	r3, #12
 8002fee:	623b      	str	r3, [r7, #32]
  index = 16;
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ff4:	e01d      	b.n	8003032 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	3b02      	subs	r3, #2
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800300a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	3b03      	subs	r3, #3
 8003010:	6979      	ldr	r1, [r7, #20]
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003016:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301a:	3a04      	subs	r2, #4
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003020:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	601a      	str	r2, [r3, #0]
    address--;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	3b04      	subs	r3, #4
 800302a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	3b04      	subs	r3, #4
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	2b03      	cmp	r3, #3
 8003036:	d8de      	bhi.n	8002ff6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003040:	3318      	adds	r3, #24
 8003042:	623b      	str	r3, [r7, #32]
  index = 12;
 8003044:	230c      	movs	r3, #12
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003048:	e021      	b.n	800308e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	3b01      	subs	r3, #1
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4413      	add	r3, r2
 8003052:	7c1b      	ldrb	r3, [r3, #16]
 8003054:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	3b02      	subs	r3, #2
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	440b      	add	r3, r1
 800305e:	7c1b      	ldrb	r3, [r3, #16]
 8003060:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003062:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	3b03      	subs	r3, #3
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	440b      	add	r3, r1
 800306c:	7c1b      	ldrb	r3, [r3, #16]
 800306e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003070:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	3a04      	subs	r2, #4
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	440a      	add	r2, r1
 800307a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800307c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	601a      	str	r2, [r3, #0]
    address--;
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	3b04      	subs	r3, #4
 8003086:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	3b04      	subs	r3, #4
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	2b03      	cmp	r3, #3
 8003092:	d8da      	bhi.n	800304a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800309c:	3328      	adds	r3, #40	@ 0x28
 800309e:	623b      	str	r3, [r7, #32]
  index = 16;
 80030a0:	2310      	movs	r3, #16
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80030a4:	e01d      	b.n	80030e2 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	3b01      	subs	r3, #1
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	3b02      	subs	r3, #2
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030ba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	3b03      	subs	r3, #3
 80030c0:	69f9      	ldr	r1, [r7, #28]
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80030c6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80030c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ca:	3a04      	subs	r2, #4
 80030cc:	69f9      	ldr	r1, [r7, #28]
 80030ce:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80030d0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	601a      	str	r2, [r3, #0]
    address--;
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	3b04      	subs	r3, #4
 80030da:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	3b04      	subs	r3, #4
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d8de      	bhi.n	80030a6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80030f0:	33cc      	adds	r3, #204	@ 0xcc
 80030f2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <JPEG_Set_Huff_DHTMem+0x21c>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	3b04      	subs	r3, #4
 800311e:	623b      	str	r3, [r7, #32]
  index = 160;
 8003120:	23a0      	movs	r3, #160	@ 0xa0
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003124:	e021      	b.n	800316a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	3b01      	subs	r3, #1
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	7c1b      	ldrb	r3, [r3, #16]
 8003130:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	3b02      	subs	r3, #2
 8003136:	69f9      	ldr	r1, [r7, #28]
 8003138:	440b      	add	r3, r1
 800313a:	7c1b      	ldrb	r3, [r3, #16]
 800313c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800313e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	3b03      	subs	r3, #3
 8003144:	69f9      	ldr	r1, [r7, #28]
 8003146:	440b      	add	r3, r1
 8003148:	7c1b      	ldrb	r3, [r3, #16]
 800314a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800314c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800314e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003150:	3a04      	subs	r2, #4
 8003152:	69f9      	ldr	r1, [r7, #28]
 8003154:	440a      	add	r2, r1
 8003156:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003158:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	601a      	str	r2, [r3, #0]
    address--;
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	3b04      	subs	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	3b04      	subs	r3, #4
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b03      	cmp	r3, #3
 800316e:	d8da      	bhi.n	8003126 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003178:	33cc      	adds	r3, #204	@ 0xcc
 800317a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	061a      	lsls	r2, r3, #24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	431a      	orrs	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80031a6:	33dc      	adds	r3, #220	@ 0xdc
 80031a8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <JPEG_Set_Huff_DHTMem+0x21c>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	7bdb      	ldrb	r3, [r3, #15]
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	7b92      	ldrb	r2, [r2, #14]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  *address = value;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	3b04      	subs	r3, #4
 80031d0:	623b      	str	r3, [r7, #32]
  index = 12;
 80031d2:	230c      	movs	r3, #12
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80031d6:	e027      	b.n	8003228 <JPEG_Set_Huff_DHTMem+0x25c>
 80031d8:	0800d7b0 	.word	0x0800d7b0
 80031dc:	0800d864 	.word	0x0800d864
 80031e0:	0800d778 	.word	0x0800d778
 80031e4:	0800d794 	.word	0x0800d794
 80031e8:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	3301      	adds	r3, #1
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80031f6:	6939      	ldr	r1, [r7, #16]
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	440b      	add	r3, r1
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003200:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	3b01      	subs	r3, #1
 8003206:	6939      	ldr	r1, [r7, #16]
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800320c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	3a02      	subs	r2, #2
 8003212:	6939      	ldr	r1, [r7, #16]
 8003214:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003216:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	601a      	str	r2, [r3, #0]
    address--;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	3b04      	subs	r3, #4
 8003220:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	3b04      	subs	r3, #4
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	2b03      	cmp	r3, #3
 800322c:	d8de      	bhi.n	80031ec <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003236:	33dc      	adds	r3, #220	@ 0xdc
 8003238:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	7c5b      	ldrb	r3, [r3, #17]
 8003246:	061a      	lsls	r2, r3, #24
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	431a      	orrs	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	7c1b      	ldrb	r3, [r3, #16]
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003264:	33e8      	adds	r3, #232	@ 0xe8
 8003266:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b6d      	ldr	r3, [pc, #436]	@ (8003424 <JPEG_Set_Huff_DHTMem+0x458>)
 800326e:	4013      	ands	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	7edb      	ldrb	r3, [r3, #27]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	7e92      	ldrb	r2, [r2, #26]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	3b04      	subs	r3, #4
 800328e:	623b      	str	r3, [r7, #32]
  index = 8;
 8003290:	2308      	movs	r3, #8
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003294:	e021      	b.n	80032da <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	3301      	adds	r3, #1
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	7c1b      	ldrb	r3, [r3, #16]
 80032a0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80032a2:	6939      	ldr	r1, [r7, #16]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	440b      	add	r3, r1
 80032a8:	3310      	adds	r3, #16
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80032ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6939      	ldr	r1, [r7, #16]
 80032b6:	440b      	add	r3, r1
 80032b8:	7c1b      	ldrb	r3, [r3, #16]
 80032ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80032bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80032be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c0:	3a02      	subs	r2, #2
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	440a      	add	r2, r1
 80032c6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80032c8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	601a      	str	r2, [r3, #0]
    address--;
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	3b04      	subs	r3, #4
 80032d2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	3b04      	subs	r3, #4
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d8da      	bhi.n	8003296 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80032e8:	33e8      	adds	r3, #232	@ 0xe8
 80032ea:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	061a      	lsls	r2, r3, #24
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003316:	33f8      	adds	r3, #248	@ 0xf8
 8003318:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b41      	ldr	r3, [pc, #260]	@ (8003424 <JPEG_Set_Huff_DHTMem+0x458>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	7bdb      	ldrb	r3, [r3, #15]
 8003328:	021a      	lsls	r2, r3, #8
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	7b92      	ldrb	r2, [r2, #14]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	3b04      	subs	r3, #4
 8003340:	623b      	str	r3, [r7, #32]
  index = 12;
 8003342:	230c      	movs	r3, #12
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003346:	e01d      	b.n	8003384 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	440b      	add	r3, r1
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800335c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	3b01      	subs	r3, #1
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003368:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800336a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336c:	3a02      	subs	r2, #2
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003372:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	601a      	str	r2, [r3, #0]
    address--;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3b04      	subs	r3, #4
 800337c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	3b04      	subs	r3, #4
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	2b03      	cmp	r3, #3
 8003388:	d8de      	bhi.n	8003348 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003392:	33f8      	adds	r3, #248	@ 0xf8
 8003394:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	7c5b      	ldrb	r3, [r3, #17]
 80033a2:	061a      	lsls	r2, r3, #24
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	7c1b      	ldrb	r3, [r3, #16]
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80033c0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80033c4:	623b      	str	r3, [r7, #32]
  index = 160;
 80033c6:	23a0      	movs	r3, #160	@ 0xa0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80033ca:	e021      	b.n	8003410 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	3301      	adds	r3, #1
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	7c1b      	ldrb	r3, [r3, #16]
 80033d6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	440b      	add	r3, r1
 80033de:	3310      	adds	r3, #16
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80033e4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	3b01      	subs	r3, #1
 80033ea:	69b9      	ldr	r1, [r7, #24]
 80033ec:	440b      	add	r3, r1
 80033ee:	7c1b      	ldrb	r3, [r3, #16]
 80033f0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80033f2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80033f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f6:	3a02      	subs	r2, #2
 80033f8:	69b9      	ldr	r1, [r7, #24]
 80033fa:	440a      	add	r2, r1
 80033fc:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80033fe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	601a      	str	r2, [r3, #0]
    address--;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	3b04      	subs	r3, #4
 8003408:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	3b04      	subs	r3, #4
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	2b03      	cmp	r3, #3
 8003414:	d8da      	bhi.n	80033cc <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	372c      	adds	r7, #44	@ 0x2c
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	ffff0000 	.word	0xffff0000

08003428 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d108      	bne.n	800345a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0208 	orr.w	r2, r2, #8
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	e007      	b.n	800346a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d108      	bne.n	80034e8 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80034e6:	e00d      	b.n	8003504 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d107      	bne.n	8003504 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d125      	bne.n	8003570 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01e      	beq.n	8003570 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff f841 	bl	80025c0 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd faa4 	bl	8000a98 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d116      	bne.n	80035aa <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800358a:	2108      	movs	r1, #8
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f988 	bl	80038a2 <JPEG_ReadInputData>
 8003592:	e00a      	b.n	80035aa <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80035a2:	2101      	movs	r1, #1
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f97c 	bl	80038a2 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80035c4:	2108      	movs	r1, #8
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f864 	bl	8003694 <JPEG_StoreOutputData>
 80035cc:	e00a      	b.n	80035e4 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80035dc:	2101      	movs	r1, #1
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f858 	bl	8003694 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d14b      	bne.n	800368a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b08      	cmp	r3, #8
 800360c:	d107      	bne.n	800361e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69d9      	ldr	r1, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	461a      	mov	r2, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fd fae5 	bl	8000c10 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d103      	bne.n	8003680 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fd faf5 	bl	8000c68 <HAL_JPEG_DecodeCpltCallback>
 800367e:	e002      	b.n	8003686 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff f936 	bl	80028f2 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d34b      	bcc.n	8003748 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e031      	b.n	800371a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	4413      	add	r3, r2
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0a19      	lsrs	r1, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	3301      	adds	r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	b2ca      	uxtb	r2, r1
 80036e0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	0c19      	lsrs	r1, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	3302      	adds	r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0e19      	lsrs	r1, r3, #24
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	3303      	adds	r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	b2ca      	uxtb	r2, r1
 8003708:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	1d1a      	adds	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d3c9      	bcc.n	80036b6 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	429a      	cmp	r2, r3
 800372c:	f040 80b5 	bne.w	800389a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	461a      	mov	r2, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fa68 	bl	8000c10 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8003746:	e0a8      	b.n	800389a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	429a      	cmp	r2, r3
 8003752:	f240 80a2 	bls.w	800389a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e031      	b.n	80037ce <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	4413      	add	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	0a19      	lsrs	r1, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	3301      	adds	r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	0c19      	lsrs	r1, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	3302      	adds	r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	b2ca      	uxtb	r2, r1
 80037a8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	0e19      	lsrs	r1, r3, #24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	3303      	adds	r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	b2ca      	uxtb	r2, r1
 80037bc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3c9      	bcc.n	800376a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69d9      	ldr	r1, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	461a      	mov	r2, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd fa0f 	bl	8000c10 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80037f8:	e04f      	b.n	800389a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e015      	b.n	8003840 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	fa22 f103 	lsr.w	r1, r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	4413      	add	r3, r2
 800382c:	b2ca      	uxtb	r2, r1
 800382e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d3e5      	bcc.n	8003814 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69d9      	ldr	r1, [r3, #28]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	461a      	mov	r2, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd f9dc 	bl	8000c10 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f1c3 0304 	rsb	r3, r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e013      	b.n	8003894 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	fa22 f103 	lsr.w	r1, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	4413      	add	r3, r2
 8003880:	b2ca      	uxtb	r2, r1
 8003882:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d9e8      	bls.n	800386c <JPEG_StoreOutputData+0x1d8>
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b088      	sub	sp, #32
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <JPEG_ReadInputData+0x1c>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80038be:	2101      	movs	r1, #1
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fe ff9a 	bl	80027fa <HAL_JPEG_Pause>
 80038c6:	e028      	b.n	800391a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d906      	bls.n	80038e2 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e01b      	b.n	800391a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d115      	bne.n	800391a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fd f947 	bl	8000b88 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d905      	bls.n	800390e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 809f 	bne.w	8003a66 <JPEG_ReadInputData+0x1c4>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 809b 	beq.w	8003a66 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d335      	bcc.n	80039aa <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e02d      	b.n	80039a0 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003964:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6999      	ldr	r1, [r3, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3302      	adds	r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003976:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3303      	adds	r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800398c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	3301      	adds	r3, #1
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3cd      	bcc.n	8003944 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80039a8:	e05d      	b.n	8003a66 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d035      	beq.n	8003a1c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e02d      	b.n	8003a12 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80039d6:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3302      	adds	r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80039e8:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3303      	adds	r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80039fe:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3cd      	bcc.n	80039b6 <JPEG_ReadInputData+0x114>
}
 8003a1a:	e024      	b.n	8003a66 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e017      	b.n	8003a56 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3301      	adds	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3e3      	bcc.n	8003a26 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	@ 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3350      	adds	r3, #80	@ 0x50
 8003a82:	61bb      	str	r3, [r7, #24]

  i = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003a88:	e042      	b.n	8003b10 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e033      	b.n	8003afe <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d103      	bne.n	8003ab2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	3364      	adds	r3, #100	@ 0x64
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab0:	e022      	b.n	8003af8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2264      	movs	r2, #100	@ 0x64
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003abe:	6a38      	ldr	r0, [r7, #32]
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	4401      	add	r1, r0
 8003ac4:	4818      	ldr	r0, [pc, #96]	@ (8003b28 <JPEG_GetQuality+0xb8>)
 8003ac6:	5c41      	ldrb	r1, [r0, r1]
 8003ac8:	440a      	add	r2, r1
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b64      	cmp	r3, #100	@ 0x64
 8003ad6:	d807      	bhi.n	8003ae8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae2:	4413      	add	r3, r2
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	e007      	b.n	8003af8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af4:	4413      	add	r3, r2
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d9c8      	bls.n	8003a96 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	3304      	adds	r3, #4
 8003b08:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b3c      	cmp	r3, #60	@ 0x3c
 8003b14:	d9b9      	bls.n	8003a8a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	099b      	lsrs	r3, r3, #6
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	372c      	adds	r7, #44	@ 0x2c
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	0800d918 	.word	0x0800d918

08003b2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b34:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d00a      	beq.n	8003b56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e040      	b.n	8003bd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e03e      	b.n	8003bd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b56:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003b5e:	491f      	ldr	r1, [pc, #124]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b66:	f7fd fe81 	bl	800186c <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b6c:	e009      	b.n	8003b82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b6e:	f7fd fe7d 	bl	800186c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b7c:	d901      	bls.n	8003b82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e028      	b.n	8003bd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b82:	4b16      	ldr	r3, [pc, #88]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b1e      	cmp	r3, #30
 8003b94:	d008      	beq.n	8003ba8 <HAL_PWREx_ConfigSupply+0x7c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b9a:	d005      	beq.n	8003ba8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b1d      	cmp	r3, #29
 8003ba0:	d002      	beq.n	8003ba8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ba6:	d114      	bne.n	8003bd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ba8:	f7fd fe60 	bl	800186c <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bb0:	f7fd fe5c 	bl	800186c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	58024800 	.word	0x58024800

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	@ 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f000 bc48 	b.w	8004484 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8088 	beq.w	8003d12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c02:	4b99      	ldr	r3, [pc, #612]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c0c:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d007      	beq.n	8003c28 <HAL_RCC_OscConfig+0x48>
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	2b18      	cmp	r3, #24
 8003c1c:	d111      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	4b8f      	ldr	r3, [pc, #572]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d06d      	beq.n	8003d10 <HAL_RCC_OscConfig+0x130>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d169      	bne.n	8003d10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f000 bc21 	b.w	8004484 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x7a>
 8003c4c:	4b86      	ldr	r3, [pc, #536]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a85      	ldr	r2, [pc, #532]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e02e      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x9c>
 8003c62:	4b81      	ldr	r3, [pc, #516]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a80      	ldr	r2, [pc, #512]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a7d      	ldr	r2, [pc, #500]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e01d      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xc0>
 8003c86:	4b78      	ldr	r3, [pc, #480]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a77      	ldr	r2, [pc, #476]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b75      	ldr	r3, [pc, #468]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a74      	ldr	r2, [pc, #464]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCC_OscConfig+0xd8>
 8003ca0:	4b71      	ldr	r3, [pc, #452]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a70      	ldr	r2, [pc, #448]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b6e      	ldr	r3, [pc, #440]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6d      	ldr	r2, [pc, #436]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fdd4 	bl	800186c <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fdd0 	bl	800186c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	@ 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e3d4      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cda:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fdc0 	bl	800186c <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fdbc 	bl	800186c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e3c0      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d02:	4b59      	ldr	r3, [pc, #356]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x110>
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80ca 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d20:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_RCC_OscConfig+0x166>
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2b18      	cmp	r3, #24
 8003d3a:	d156      	bne.n	8003dea <HAL_RCC_OscConfig+0x20a>
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d151      	bne.n	8003dea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d46:	4b48      	ldr	r3, [pc, #288]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_RCC_OscConfig+0x17e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e392      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d5e:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0219 	bic.w	r2, r3, #25
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	493f      	ldr	r1, [pc, #252]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fd7c 	bl	800186c <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fd fd78 	bl	800186c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e37c      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8a:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	f7fd fd99 	bl	80018cc <HAL_GetREVID>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d817      	bhi.n	8003dd4 <HAL_RCC_OscConfig+0x1f4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b40      	cmp	r3, #64	@ 0x40
 8003daa:	d108      	bne.n	8003dbe <HAL_RCC_OscConfig+0x1de>
 8003dac:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003db4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dbc:	e07a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	031b      	lsls	r3, r3, #12
 8003dcc:	4926      	ldr	r1, [pc, #152]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd2:	e06f      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4921      	ldr	r1, [pc, #132]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	e064      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d047      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0219 	bic.w	r2, r3, #25
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	491a      	ldr	r1, [pc, #104]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fd32 	bl	800186c <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fd2e 	bl	800186c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e332      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e1e:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	f7fd fd4f 	bl	80018cc <HAL_GetREVID>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d819      	bhi.n	8003e6c <HAL_RCC_OscConfig+0x28c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d108      	bne.n	8003e52 <HAL_RCC_OscConfig+0x272>
 8003e40:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e48:	4a07      	ldr	r2, [pc, #28]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e030      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
 8003e52:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	031b      	lsls	r3, r3, #12
 8003e60:	4901      	ldr	r1, [pc, #4]	@ (8003e68 <HAL_RCC_OscConfig+0x288>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e025      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	4b9a      	ldr	r3, [pc, #616]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	4997      	ldr	r1, [pc, #604]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b95      	ldr	r3, [pc, #596]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a94      	ldr	r2, [pc, #592]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fced 	bl	800186c <HAL_GetTick>
 8003e92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd fce9 	bl	800186c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e2ed      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ea8:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a9 	beq.w	8004014 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec2:	4b85      	ldr	r3, [pc, #532]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ecc:	4b82      	ldr	r3, [pc, #520]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d007      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x308>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b18      	cmp	r3, #24
 8003edc:	d13a      	bne.n	8003f54 <HAL_RCC_OscConfig+0x374>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d135      	bne.n	8003f54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_OscConfig+0x320>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2b80      	cmp	r3, #128	@ 0x80
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e2c1      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f00:	f7fd fce4 	bl	80018cc <HAL_GetREVID>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d817      	bhi.n	8003f3e <HAL_RCC_OscConfig+0x35e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d108      	bne.n	8003f28 <HAL_RCC_OscConfig+0x348>
 8003f16:	4b70      	ldr	r3, [pc, #448]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f26:	e075      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f28:	4b6b      	ldr	r3, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	069b      	lsls	r3, r3, #26
 8003f36:	4968      	ldr	r1, [pc, #416]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f3c:	e06a      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f3e:	4b66      	ldr	r3, [pc, #408]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	061b      	lsls	r3, r3, #24
 8003f4c:	4962      	ldr	r1, [pc, #392]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f52:	e05f      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d042      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd fc80 	bl	800186c <HAL_GetTick>
 8003f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f70:	f7fd fc7c 	bl	800186c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e280      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f82:	4b55      	ldr	r3, [pc, #340]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f8e:	f7fd fc9d 	bl	80018cc <HAL_GetREVID>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d817      	bhi.n	8003fcc <HAL_RCC_OscConfig+0x3ec>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d108      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x3d6>
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fac:	4a4a      	ldr	r2, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fb2:	6053      	str	r3, [r2, #4]
 8003fb4:	e02e      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
 8003fb6:	4b48      	ldr	r3, [pc, #288]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	069b      	lsls	r3, r3, #26
 8003fc4:	4944      	ldr	r1, [pc, #272]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
 8003fca:	e023      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
 8003fcc:	4b42      	ldr	r3, [pc, #264]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	493f      	ldr	r1, [pc, #252]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
 8003fe0:	e018      	b.n	8004014 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3c      	ldr	r2, [pc, #240]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fc3d 	bl	800186c <HAL_GetTick>
 8003ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fc39 	bl	800186c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e23d      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004008:	4b33      	ldr	r3, [pc, #204]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d036      	beq.n	800408e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402c:	4a2a      	ldr	r2, [pc, #168]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd fc1a 	bl	800186c <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd fc16 	bl	800186c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e21a      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8004050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x45c>
 800405a:	e018      	b.n	800408e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 800405e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004060:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fc00 	bl	800186c <HAL_GetTick>
 800406c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004070:	f7fd fbfc 	bl	800186c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e200      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004082:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d039      	beq.n	800410e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01c      	beq.n	80040dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a0c      	ldr	r2, [pc, #48]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 80040a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040ae:	f7fd fbdd 	bl	800186c <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040b6:	f7fd fbd9 	bl	800186c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1dd      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <HAL_RCC_OscConfig+0x4f8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
 80040d4:	e01b      	b.n	800410e <HAL_RCC_OscConfig+0x52e>
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040dc:	4b9b      	ldr	r3, [pc, #620]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a9a      	ldr	r2, [pc, #616]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040e8:	f7fd fbc0 	bl	800186c <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f0:	f7fd fbbc 	bl	800186c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e1c0      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004102:	4b92      	ldr	r3, [pc, #584]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8081 	beq.w	800421e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800411c:	4b8c      	ldr	r3, [pc, #560]	@ (8004350 <HAL_RCC_OscConfig+0x770>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a8b      	ldr	r2, [pc, #556]	@ (8004350 <HAL_RCC_OscConfig+0x770>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004128:	f7fd fba0 	bl	800186c <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fd fb9c 	bl	800186c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	@ 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1a0      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004142:	4b83      	ldr	r3, [pc, #524]	@ (8004350 <HAL_RCC_OscConfig+0x770>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x584>
 8004156:	4b7d      	ldr	r3, [pc, #500]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	4a7c      	ldr	r2, [pc, #496]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	@ 0x70
 8004162:	e02d      	b.n	80041c0 <HAL_RCC_OscConfig+0x5e0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0x5a6>
 800416c:	4b77      	ldr	r3, [pc, #476]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a76      	ldr	r2, [pc, #472]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
 8004178:	4b74      	ldr	r3, [pc, #464]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a73      	ldr	r2, [pc, #460]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800417e:	f023 0304 	bic.w	r3, r3, #4
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x5e0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5c8>
 800418e:	4b6f      	ldr	r3, [pc, #444]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a6e      	ldr	r2, [pc, #440]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	4b6c      	ldr	r3, [pc, #432]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a6b      	ldr	r2, [pc, #428]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0x5e0>
 80041a8:	4b68      	ldr	r3, [pc, #416]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a67      	ldr	r2, [pc, #412]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	4b65      	ldr	r3, [pc, #404]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a64      	ldr	r2, [pc, #400]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041ba:	f023 0304 	bic.w	r3, r3, #4
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fb50 	bl	800186c <HAL_GetTick>
 80041cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd fb4c 	bl	800186c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e14e      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041e6:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ee      	beq.n	80041d0 <HAL_RCC_OscConfig+0x5f0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fd fb3a 	bl	800186c <HAL_GetTick>
 80041f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fd fb36 	bl	800186c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e138      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004212:	4b4e      	ldr	r3, [pc, #312]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ee      	bne.n	80041fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 812d 	beq.w	8004482 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004228:	4b48      	ldr	r3, [pc, #288]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004230:	2b18      	cmp	r3, #24
 8004232:	f000 80bd 	beq.w	80043b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	2b02      	cmp	r3, #2
 800423c:	f040 809e 	bne.w	800437c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b42      	ldr	r3, [pc, #264]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a41      	ldr	r2, [pc, #260]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fb0e 	bl	800186c <HAL_GetTick>
 8004250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fb0a 	bl	800186c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e10e      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004266:	4b39      	ldr	r3, [pc, #228]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004272:	4b36      	ldr	r3, [pc, #216]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004274:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004276:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <HAL_RCC_OscConfig+0x774>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	430a      	orrs	r2, r1
 8004286:	4931      	ldr	r1, [pc, #196]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	628b      	str	r3, [r1, #40]	@ 0x28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	3b01      	subs	r3, #1
 8004292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	3b01      	subs	r3, #1
 800429c:	025b      	lsls	r3, r3, #9
 800429e:	b29b      	uxth	r3, r3
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	3b01      	subs	r3, #1
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042bc:	4923      	ldr	r1, [pc, #140]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80042c2:	4b22      	ldr	r3, [pc, #136]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	4a21      	ldr	r2, [pc, #132]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042ce:	4b1f      	ldr	r3, [pc, #124]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d2:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <HAL_RCC_OscConfig+0x778>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042da:	00d2      	lsls	r2, r2, #3
 80042dc:	491b      	ldr	r1, [pc, #108]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042e2:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e6:	f023 020c 	bic.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	4917      	ldr	r1, [pc, #92]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042f4:	4b15      	ldr	r3, [pc, #84]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	f023 0202 	bic.w	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	4912      	ldr	r1, [pc, #72]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a10      	ldr	r2, [pc, #64]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a0d      	ldr	r2, [pc, #52]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004328:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	4a07      	ldr	r2, [pc, #28]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004336:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a04      	ldr	r2, [pc, #16]	@ (800434c <HAL_RCC_OscConfig+0x76c>)
 800433c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd fa93 	bl	800186c <HAL_GetTick>
 8004346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004348:	e011      	b.n	800436e <HAL_RCC_OscConfig+0x78e>
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400
 8004350:	58024800 	.word	0x58024800
 8004354:	fffffc0c 	.word	0xfffffc0c
 8004358:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd fa86 	bl	800186c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e08a      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800436e:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x77c>
 800437a:	e082      	b.n	8004482 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437c:	4b43      	ldr	r3, [pc, #268]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a42      	ldr	r2, [pc, #264]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fa70 	bl	800186c <HAL_GetTick>
 800438c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fd fa6c 	bl	800186c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e070      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043a2:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x7b0>
 80043ae:	e068      	b.n	8004482 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043b0:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043b6:	4b35      	ldr	r3, [pc, #212]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d031      	beq.n	8004428 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0203 	and.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d12a      	bne.n	8004428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d122      	bne.n	8004428 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	0a5b      	lsrs	r3, r3, #9
 80043f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d108      	bne.n	8004428 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0e1b      	lsrs	r3, r3, #24
 800441a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e02b      	b.n	8004484 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800442c:	4b17      	ldr	r3, [pc, #92]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 800442e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004436:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d01f      	beq.n	8004482 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	4a11      	ldr	r2, [pc, #68]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444e:	f7fd fa0d 	bl	800186c <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004454:	bf00      	nop
 8004456:	f7fd fa09 	bl	800186c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	4293      	cmp	r3, r2
 8004460:	d0f9      	beq.n	8004456 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004462:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_RCC_OscConfig+0x8b0>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800446e:	00d2      	lsls	r2, r2, #3
 8004470:	4906      	ldr	r1, [pc, #24]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004472:	4313      	orrs	r3, r2
 8004474:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004476:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	4a04      	ldr	r2, [pc, #16]	@ (800448c <HAL_RCC_OscConfig+0x8ac>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3730      	adds	r7, #48	@ 0x30
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	58024400 	.word	0x58024400
 8004490:	ffff0007 	.word	0xffff0007

08004494 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e19c      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b8a      	ldr	r3, [pc, #552]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b87      	ldr	r3, [pc, #540]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4985      	ldr	r1, [pc, #532]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b83      	ldr	r3, [pc, #524]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e184      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	4b7b      	ldr	r3, [pc, #492]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d908      	bls.n	8004506 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044f4:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4975      	ldr	r1, [pc, #468]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004502:	4313      	orrs	r3, r2
 8004504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	4b70      	ldr	r3, [pc, #448]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800451e:	429a      	cmp	r2, r3
 8004520:	d908      	bls.n	8004534 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004522:	4b6d      	ldr	r3, [pc, #436]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	496a      	ldr	r1, [pc, #424]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004530:	4313      	orrs	r3, r2
 8004532:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	4b64      	ldr	r3, [pc, #400]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800454c:	429a      	cmp	r2, r3
 800454e:	d908      	bls.n	8004562 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004550:	4b61      	ldr	r3, [pc, #388]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	495e      	ldr	r1, [pc, #376]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 800455e:	4313      	orrs	r3, r2
 8004560:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800457a:	429a      	cmp	r2, r3
 800457c:	d908      	bls.n	8004590 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800457e:	4b56      	ldr	r3, [pc, #344]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4953      	ldr	r1, [pc, #332]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 800458c:	4313      	orrs	r3, r2
 800458e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4b4d      	ldr	r3, [pc, #308]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d908      	bls.n	80045be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b4a      	ldr	r3, [pc, #296]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f023 020f 	bic.w	r2, r3, #15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4947      	ldr	r1, [pc, #284]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d055      	beq.n	8004676 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045ca:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4940      	ldr	r1, [pc, #256]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045e4:	4b3c      	ldr	r3, [pc, #240]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d121      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0f6      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d107      	bne.n	800460c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d115      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0ea      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004614:	4b30      	ldr	r3, [pc, #192]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0de      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004624:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d6      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f023 0207 	bic.w	r2, r3, #7
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4925      	ldr	r1, [pc, #148]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fd f911 	bl	800186c <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464c:	e00a      	b.n	8004664 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd f90d 	bl	800186c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0be      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004664:	4b1c      	ldr	r3, [pc, #112]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	429a      	cmp	r2, r3
 8004674:	d1eb      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d010      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	429a      	cmp	r2, r3
 8004690:	d208      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004692:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f023 020f 	bic.w	r2, r3, #15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	490e      	ldr	r1, [pc, #56]	@ (80046d8 <HAL_RCC_ClockConfig+0x244>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d214      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	4906      	ldr	r1, [pc, #24]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <HAL_RCC_ClockConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e086      	b.n	80047e2 <HAL_RCC_ClockConfig+0x34e>
 80046d4:	52002000 	.word	0x52002000
 80046d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d010      	beq.n	800470a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	4b3f      	ldr	r3, [pc, #252]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d208      	bcs.n	800470a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046f8:	4b3c      	ldr	r3, [pc, #240]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	4939      	ldr	r1, [pc, #228]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004706:	4313      	orrs	r3, r2
 8004708:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004722:	429a      	cmp	r2, r3
 8004724:	d208      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004726:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	492e      	ldr	r1, [pc, #184]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004734:	4313      	orrs	r3, r2
 8004736:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d010      	beq.n	8004766 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004750:	429a      	cmp	r2, r3
 8004752:	d208      	bcs.n	8004766 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4922      	ldr	r1, [pc, #136]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004762:	4313      	orrs	r3, r2
 8004764:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d010      	beq.n	8004794 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800477e:	429a      	cmp	r2, r3
 8004780:	d208      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4917      	ldr	r1, [pc, #92]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 8004790:	4313      	orrs	r3, r2
 8004792:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004794:	f000 f834 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	4912      	ldr	r1, [pc, #72]	@ (80047f0 <HAL_RCC_ClockConfig+0x35c>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047b2:	4b0e      	ldr	r3, [pc, #56]	@ (80047ec <HAL_RCC_ClockConfig+0x358>)
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <HAL_RCC_ClockConfig+0x35c>)
 80047bc:	5cd3      	ldrb	r3, [r2, r3]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <HAL_RCC_ClockConfig+0x360>)
 80047ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047cc:	4a0a      	ldr	r2, [pc, #40]	@ (80047f8 <HAL_RCC_ClockConfig+0x364>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047d2:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_RCC_ClockConfig+0x368>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc fffe 	bl	80017d8 <HAL_InitTick>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	0800d768 	.word	0x0800d768
 80047f4:	24000004 	.word	0x24000004
 80047f8:	24000000 	.word	0x24000000
 80047fc:	24000010 	.word	0x24000010

08004800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004806:	4bb3      	ldr	r3, [pc, #716]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800480e:	2b18      	cmp	r3, #24
 8004810:	f200 8155 	bhi.w	8004abe <HAL_RCC_GetSysClockFreq+0x2be>
 8004814:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004881 	.word	0x08004881
 8004820:	08004abf 	.word	0x08004abf
 8004824:	08004abf 	.word	0x08004abf
 8004828:	08004abf 	.word	0x08004abf
 800482c:	08004abf 	.word	0x08004abf
 8004830:	08004abf 	.word	0x08004abf
 8004834:	08004abf 	.word	0x08004abf
 8004838:	08004abf 	.word	0x08004abf
 800483c:	080048a7 	.word	0x080048a7
 8004840:	08004abf 	.word	0x08004abf
 8004844:	08004abf 	.word	0x08004abf
 8004848:	08004abf 	.word	0x08004abf
 800484c:	08004abf 	.word	0x08004abf
 8004850:	08004abf 	.word	0x08004abf
 8004854:	08004abf 	.word	0x08004abf
 8004858:	08004abf 	.word	0x08004abf
 800485c:	080048ad 	.word	0x080048ad
 8004860:	08004abf 	.word	0x08004abf
 8004864:	08004abf 	.word	0x08004abf
 8004868:	08004abf 	.word	0x08004abf
 800486c:	08004abf 	.word	0x08004abf
 8004870:	08004abf 	.word	0x08004abf
 8004874:	08004abf 	.word	0x08004abf
 8004878:	08004abf 	.word	0x08004abf
 800487c:	080048b3 	.word	0x080048b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004880:	4b94      	ldr	r3, [pc, #592]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800488c:	4b91      	ldr	r3, [pc, #580]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	4a90      	ldr	r2, [pc, #576]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800489e:	e111      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048a2:	61bb      	str	r3, [r7, #24]
      break;
 80048a4:	e10e      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048a6:	4b8d      	ldr	r3, [pc, #564]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	e10b      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048ac:	4b8c      	ldr	r3, [pc, #560]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048ae:	61bb      	str	r3, [r7, #24]
      break;
 80048b0:	e108      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048b2:	4b88      	ldr	r3, [pc, #544]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048bc:	4b85      	ldr	r3, [pc, #532]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048c8:	4b82      	ldr	r3, [pc, #520]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048d2:	4b80      	ldr	r3, [pc, #512]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d6:	08db      	lsrs	r3, r3, #3
 80048d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80e1 	beq.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	f000 8083 	beq.w	8004a04 <HAL_RCC_GetSysClockFreq+0x204>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f200 80a1 	bhi.w	8004a48 <HAL_RCC_GetSysClockFreq+0x248>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x114>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d056      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004912:	e099      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004914:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02d      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004920:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b62      	ldr	r3, [pc, #392]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a02 	vldr	s12, [r7, #8]
 800495e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800497a:	e087      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ae8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b51      	ldr	r3, [pc, #324]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049be:	e065      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2ec>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b40      	ldr	r3, [pc, #256]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80049e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a02:	e043      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004af0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a46:	e021      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004ae4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a96:	3301      	adds	r3, #1
 8004a98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab0:	ee17 3a90 	vmov	r3, s15
 8004ab4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ab6:	e005      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61bb      	str	r3, [r7, #24]
      break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ac0:	61bb      	str	r3, [r7, #24]
      break;
 8004ac2:	bf00      	nop
  }

  return sysclockfreq;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3724      	adds	r7, #36	@ 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	03d09000 	.word	0x03d09000
 8004adc:	003d0900 	.word	0x003d0900
 8004ae0:	017d7840 	.word	0x017d7840
 8004ae4:	46000000 	.word	0x46000000
 8004ae8:	4c742400 	.word	0x4c742400
 8004aec:	4a742400 	.word	0x4a742400
 8004af0:	4bbebc20 	.word	0x4bbebc20

08004af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004afa:	f7ff fe81 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490f      	ldr	r1, [pc, #60]	@ (8004b48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b18:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	4a07      	ldr	r2, [pc, #28]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b32:	4a07      	ldr	r2, [pc, #28]	@ (8004b50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b38:	4b04      	ldr	r3, [pc, #16]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	58024400 	.word	0x58024400
 8004b48:	0800d768 	.word	0x0800d768
 8004b4c:	24000004 	.word	0x24000004
 8004b50:	24000000 	.word	0x24000000

08004b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b58:	f7ff ffcc 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4904      	ldr	r1, [pc, #16]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	58024400 	.word	0x58024400
 8004b7c:	0800d768 	.word	0x0800d768

08004b80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b0cc      	sub	sp, #304	@ 0x130
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	ea54 0305 	orrs.w	r3, r4, r5
 8004baa:	d049      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb6:	d02f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bbc:	d828      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc2:	d01a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc8:	d822      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd2:	d007      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bd4:	e01c      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd6:	4bb8      	ldr	r3, [pc, #736]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	4ab7      	ldr	r2, [pc, #732]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004be2:	e01a      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004be8:	3308      	adds	r3, #8
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f002 fba1 	bl	8007334 <RCCEx_PLL2_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bf8:	e00f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bfe:	3328      	adds	r3, #40	@ 0x28
 8004c00:	2102      	movs	r1, #2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fc48 	bl	8007498 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c0e:	e004      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c22:	4ba5      	ldr	r3, [pc, #660]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c30:	4aa1      	ldr	r2, [pc, #644]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c36:	e003      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c4c:	f04f 0900 	mov.w	r9, #0
 8004c50:	ea58 0309 	orrs.w	r3, r8, r9
 8004c54:	d047      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d82a      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c60:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c7d 	.word	0x08004c7d
 8004c6c:	08004c8b 	.word	0x08004c8b
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004cbf 	.word	0x08004cbf
 8004c78:	08004cbf 	.word	0x08004cbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a8d      	ldr	r2, [pc, #564]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c88:	e01a      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2100      	movs	r1, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f002 fb4e 	bl	8007334 <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c9e:	e00f      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ca4:	3328      	adds	r3, #40	@ 0x28
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fbf5 	bl	8007498 <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ccc:	f023 0107 	bic.w	r1, r3, #7
 8004cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd6:	4a78      	ldr	r2, [pc, #480]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ce2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cf2:	f04f 0b00 	mov.w	fp, #0
 8004cf6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cfa:	d04c      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d06:	d030      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0c:	d829      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d10:	d02d      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d14:	d825      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d018      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d1a:	2b80      	cmp	r3, #128	@ 0x80
 8004d1c:	d821      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d22:	2b40      	cmp	r3, #64	@ 0x40
 8004d24:	d007      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d26:	e01c      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4b63      	ldr	r3, [pc, #396]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a62      	ldr	r2, [pc, #392]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d34:	e01c      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 faf8 	bl	8007334 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e011      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d50:	3328      	adds	r3, #40	@ 0x28
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 fb9f 	bl	8007498 <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d78:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d86:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004da2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004dac:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d053      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dc2:	d035      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dc8:	d82e      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dce:	d031      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004dd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dd4:	d828      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dda:	d01a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de0:	d822      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dea:	d007      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004dec:	e01c      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dee:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	4a31      	ldr	r2, [pc, #196]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dfa:	e01c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e00:	3308      	adds	r3, #8
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 fa95 	bl	8007334 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e10:	e011      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e16:	3328      	adds	r3, #40	@ 0x28
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f002 fb3c 	bl	8007498 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e26:	e006      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e2e:	e002      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e30:	bf00      	nop
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d056      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e8a:	d038      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e90:	d831      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e96:	d034      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e9c:	d82b      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ea8:	d825      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d006      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004eb4:	e01f      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ebc:	4ba2      	ldr	r3, [pc, #648]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4aa1      	ldr	r2, [pc, #644]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f002 fa2e 	bl	8007334 <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ede:	e011      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ee4:	3328      	adds	r3, #40	@ 0x28
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f002 fad5 	bl	8007498 <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004efc:	e002      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f0c:	4b8e      	ldr	r3, [pc, #568]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f10:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f1c:	4a8a      	ldr	r2, [pc, #552]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f28:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f42:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d03a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	2b30      	cmp	r3, #48	@ 0x30
 8004f54:	d01f      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f56:	2b30      	cmp	r3, #48	@ 0x30
 8004f58:	d819      	bhi.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d815      	bhi.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d019      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d111      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6a:	4b77      	ldr	r3, [pc, #476]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	4a76      	ldr	r2, [pc, #472]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f76:	e011      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2102      	movs	r1, #2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f002 f9d7 	bl	8007334 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fa4:	4b68      	ldr	r3, [pc, #416]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb2:	4a65      	ldr	r2, [pc, #404]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fd8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	d051      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fec:	d035      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff2:	d82e      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ff8:	d031      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ffa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ffe:	d828      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005004:	d01a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500a:	d822      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005014:	d007      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005016:	e01c      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	4a4a      	ldr	r2, [pc, #296]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800501e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005024:	e01c      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800502a:	3308      	adds	r3, #8
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f002 f980 	bl	8007334 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800503a:	e011      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800503c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005040:	3328      	adds	r3, #40	@ 0x28
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f002 fa27 	bl	8007498 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005058:	e002      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800505e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005068:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800506a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6513      	str	r3, [r2, #80]	@ 0x50
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005082:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005092:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800509c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d056      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b0:	d033      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80050b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b6:	d82c      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050bc:	d02f      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80050be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050c2:	d826      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050c8:	d02b      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80050ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050ce:	d820      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050d4:	d012      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050da:	d81a      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d022      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e4:	d115      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ea:	3308      	adds	r3, #8
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 f920 	bl	8007334 <RCCEx_PLL2_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050fa:	e015      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005100:	3328      	adds	r3, #40	@ 0x28
 8005102:	2101      	movs	r1, #1
 8005104:	4618      	mov	r0, r3
 8005106:	f002 f9c7 	bl	8007498 <RCCEx_PLL3_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005110:	e00a      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800511a:	bf00      	nop
 800511c:	e004      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800511e:	bf00      	nop
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005122:	bf00      	nop
 8005124:	e000      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800513c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800513e:	4a02      	ldr	r2, [pc, #8]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005140:	430b      	orrs	r3, r1
 8005142:	6513      	str	r3, [r2, #80]	@ 0x50
 8005144:	e006      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005150:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005160:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800516a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d055      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800517c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005180:	d033      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005186:	d82c      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518c:	d02f      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005192:	d826      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005194:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005198:	d02b      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800519a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800519e:	d820      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a4:	d012      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051aa:	d81a      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d022      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80051b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b4:	d115      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ba:	3308      	adds	r3, #8
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f002 f8b8 	bl	8007334 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051ca:	e015      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d0:	3328      	adds	r3, #40	@ 0x28
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 f95f 	bl	8007498 <RCCEx_PLL3_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051e0:	e00a      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051e8:	e006      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ea:	bf00      	nop
 80051ec:	e004      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005200:	4bb6      	ldr	r3, [pc, #728]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005204:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800520c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005210:	4ab2      	ldr	r2, [pc, #712]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005212:	430b      	orrs	r3, r1
 8005214:	6593      	str	r3, [r2, #88]	@ 0x58
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800521c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800522c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005230:	2300      	movs	r3, #0
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005236:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800523a:	460b      	mov	r3, r1
 800523c:	4313      	orrs	r3, r2
 800523e:	d02a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005246:	2b00      	cmp	r3, #0
 8005248:	d011      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800524a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524e:	d10a      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005254:	3308      	adds	r3, #8
 8005256:	2101      	movs	r1, #1
 8005258:	4618      	mov	r0, r3
 800525a:	f002 f86b 	bl	8007334 <RCCEx_PLL2_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005264:	e004      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800526e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005270:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005278:	4b98      	ldr	r3, [pc, #608]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005286:	4a95      	ldr	r2, [pc, #596]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005288:	430b      	orrs	r3, r1
 800528a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800528c:	e003      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005292:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80052a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052a6:	2300      	movs	r3, #0
 80052a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d037      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052c0:	d00e      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80052c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052c6:	d816      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d018      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052d0:	d111      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d2:	4b82      	ldr	r3, [pc, #520]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	4a81      	ldr	r2, [pc, #516]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052de:	e00f      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e4:	3308      	adds	r3, #8
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 f823 	bl	8007334 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80052fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005300:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005308:	4b74      	ldr	r3, [pc, #464]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	4a71      	ldr	r2, [pc, #452]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005318:	430b      	orrs	r3, r1
 800531a:	6513      	str	r3, [r2, #80]	@ 0x50
 800531c:	e003      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005322:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005332:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005336:	2300      	movs	r3, #0
 8005338:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800533c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005340:	460b      	mov	r3, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	d03a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800534a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534c:	2b03      	cmp	r3, #3
 800534e:	d81d      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005350:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	08005395 	.word	0x08005395
 800535c:	08005369 	.word	0x08005369
 8005360:	08005377 	.word	0x08005377
 8005364:	08005395 	.word	0x08005395
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005368:	4b5c      	ldr	r3, [pc, #368]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	4a5b      	ldr	r2, [pc, #364]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800536e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800537a:	3308      	adds	r3, #8
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f001 ffd8 	bl	8007334 <RCCEx_PLL2_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800538a:	e004      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005392:	e000      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800539e:	4b4f      	ldr	r3, [pc, #316]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a2:	f023 0103 	bic.w	r1, r3, #3
 80053a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ac:	4a4b      	ldr	r2, [pc, #300]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	f000 80a0 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3f      	ldr	r2, [pc, #252]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80053e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ea:	f7fc fa3f 	bl	800186c <HAL_GetTick>
 80053ee:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f2:	e00b      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f4:	f7fc fa3a 	bl	800186c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b64      	cmp	r3, #100	@ 0x64
 8005402:	d903      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800540a:	e005      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800540c:	4b34      	ldr	r3, [pc, #208]	@ (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ed      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005418:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800541c:	2b00      	cmp	r3, #0
 800541e:	d17a      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005420:	4b2e      	ldr	r3, [pc, #184]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005422:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005428:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800542c:	4053      	eors	r3, r2
 800542e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d015      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005436:	4b29      	ldr	r3, [pc, #164]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005442:	4b26      	ldr	r3, [pc, #152]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800544e:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	4a22      	ldr	r2, [pc, #136]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005458:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800545a:	4a20      	ldr	r2, [pc, #128]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800545c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005460:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005466:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800546a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546e:	d118      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fc f9fc 	bl	800186c <HAL_GetTick>
 8005474:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005478:	e00d      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fc f9f7 	bl	800186c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	f241 3388 	movw	r3, #5000	@ 0x1388
 800548a:	429a      	cmp	r2, r3
 800548c:	d903      	bls.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005494:	e005      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005496:	4b11      	ldr	r3, [pc, #68]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0eb      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80054a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d130      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ba:	d115      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054cc:	091a      	lsrs	r2, r3, #4
 80054ce:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	4a02      	ldr	r2, [pc, #8]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6113      	str	r3, [r2, #16]
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80054da:	bf00      	nop
 80054dc:	58024400 	.word	0x58024400
 80054e0:	58024800 	.word	0x58024800
 80054e4:	00ffffcf 	.word	0x00ffffcf
 80054e8:	4bd4      	ldr	r3, [pc, #848]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	4ad3      	ldr	r2, [pc, #844]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054f2:	6113      	str	r3, [r2, #16]
 80054f4:	4bd1      	ldr	r3, [pc, #836]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054f6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80054f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	4acd      	ldr	r2, [pc, #820]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005506:	430b      	orrs	r3, r1
 8005508:	6713      	str	r3, [r2, #112]	@ 0x70
 800550a:	e008      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005510:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800551a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 0301 	and.w	r3, r2, #1
 800552a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005534:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005538:	460b      	mov	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	f000 808b 	beq.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005548:	2b28      	cmp	r3, #40	@ 0x28
 800554a:	d86b      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	0800562d 	.word	0x0800562d
 8005558:	08005625 	.word	0x08005625
 800555c:	08005625 	.word	0x08005625
 8005560:	08005625 	.word	0x08005625
 8005564:	08005625 	.word	0x08005625
 8005568:	08005625 	.word	0x08005625
 800556c:	08005625 	.word	0x08005625
 8005570:	08005625 	.word	0x08005625
 8005574:	080055f9 	.word	0x080055f9
 8005578:	08005625 	.word	0x08005625
 800557c:	08005625 	.word	0x08005625
 8005580:	08005625 	.word	0x08005625
 8005584:	08005625 	.word	0x08005625
 8005588:	08005625 	.word	0x08005625
 800558c:	08005625 	.word	0x08005625
 8005590:	08005625 	.word	0x08005625
 8005594:	0800560f 	.word	0x0800560f
 8005598:	08005625 	.word	0x08005625
 800559c:	08005625 	.word	0x08005625
 80055a0:	08005625 	.word	0x08005625
 80055a4:	08005625 	.word	0x08005625
 80055a8:	08005625 	.word	0x08005625
 80055ac:	08005625 	.word	0x08005625
 80055b0:	08005625 	.word	0x08005625
 80055b4:	0800562d 	.word	0x0800562d
 80055b8:	08005625 	.word	0x08005625
 80055bc:	08005625 	.word	0x08005625
 80055c0:	08005625 	.word	0x08005625
 80055c4:	08005625 	.word	0x08005625
 80055c8:	08005625 	.word	0x08005625
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005625 	.word	0x08005625
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	08005625 	.word	0x08005625
 80055dc:	08005625 	.word	0x08005625
 80055e0:	08005625 	.word	0x08005625
 80055e4:	08005625 	.word	0x08005625
 80055e8:	08005625 	.word	0x08005625
 80055ec:	08005625 	.word	0x08005625
 80055f0:	08005625 	.word	0x08005625
 80055f4:	0800562d 	.word	0x0800562d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055fc:	3308      	adds	r3, #8
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fe97 	bl	8007334 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800560c:	e00f      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f001 ff3e 	bl	8007498 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005636:	4b81      	ldr	r3, [pc, #516]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800563e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005646:	4a7d      	ldr	r2, [pc, #500]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005648:	430b      	orrs	r3, r1
 800564a:	6553      	str	r3, [r2, #84]	@ 0x54
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005652:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f002 0302 	and.w	r3, r2, #2
 8005662:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800566c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005670:	460b      	mov	r3, r1
 8005672:	4313      	orrs	r3, r2
 8005674:	d042      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800567c:	2b05      	cmp	r3, #5
 800567e:	d825      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005680:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056d5 	.word	0x080056d5
 800568c:	080056a1 	.word	0x080056a1
 8005690:	080056b7 	.word	0x080056b7
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056d5 	.word	0x080056d5
 800569c:	080056d5 	.word	0x080056d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a4:	3308      	adds	r3, #8
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fe43 	bl	8007334 <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ba:	3328      	adds	r3, #40	@ 0x28
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 feea 	bl	8007498 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056de:	4b57      	ldr	r3, [pc, #348]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e2:	f023 0107 	bic.w	r1, r3, #7
 80056e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ec:	4a53      	ldr	r2, [pc, #332]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80056f2:	e003      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f002 0304 	and.w	r3, r2, #4
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005712:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d044      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800571c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005724:	2b05      	cmp	r3, #5
 8005726:	d825      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	0800577d 	.word	0x0800577d
 8005734:	08005749 	.word	0x08005749
 8005738:	0800575f 	.word	0x0800575f
 800573c:	0800577d 	.word	0x0800577d
 8005740:	0800577d 	.word	0x0800577d
 8005744:	0800577d 	.word	0x0800577d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800574c:	3308      	adds	r3, #8
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fdef 	bl	8007334 <RCCEx_PLL2_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800575c:	e00f      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005762:	3328      	adds	r3, #40	@ 0x28
 8005764:	2101      	movs	r1, #1
 8005766:	4618      	mov	r0, r3
 8005768:	f001 fe96 	bl	8007498 <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005786:	4b2d      	ldr	r3, [pc, #180]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	f023 0107 	bic.w	r1, r3, #7
 800578e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005796:	4a29      	ldr	r2, [pc, #164]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6593      	str	r3, [r2, #88]	@ 0x58
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f002 0320 	and.w	r3, r2, #32
 80057b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d057      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057d2:	d035      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80057d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057d8:	d82c      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057de:	d031      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e4:	d826      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057ea:	d02d      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80057ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057f0:	d820      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f6:	d012      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fc:	d81a      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d024      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005806:	d115      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800580c:	3308      	adds	r3, #8
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fd8f 	bl	8007334 <RCCEx_PLL2_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800581c:	e017      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005822:	3328      	adds	r3, #40	@ 0x28
 8005824:	2102      	movs	r1, #2
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fe36 	bl	8007498 <RCCEx_PLL3_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005832:	e00c      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800583a:	e008      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800583c:	58024400 	.word	0x58024400
        break;
 8005840:	bf00      	nop
 8005842:	e004      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005844:	bf00      	nop
 8005846:	e002      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800584c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005856:	4bc2      	ldr	r3, [pc, #776]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800585e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005866:	4abe      	ldr	r2, [pc, #760]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6553      	str	r3, [r2, #84]	@ 0x54
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005872:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005886:	2300      	movs	r3, #0
 8005888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800588c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d055      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800589a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800589e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058a2:	d033      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80058a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058a8:	d82c      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	d02f      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b4:	d826      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058ba:	d02b      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80058bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c0:	d820      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c6:	d012      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058cc:	d81a      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d022      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d6:	d115      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058dc:	3308      	adds	r3, #8
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fd27 	bl	8007334 <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058ec:	e015      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f2:	3328      	adds	r3, #40	@ 0x28
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fdce 	bl	8007498 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005902:	e00a      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800590a:	e006      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800590c:	bf00      	nop
 800590e:	e004      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005922:	4b8f      	ldr	r3, [pc, #572]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800592a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800592e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005932:	4a8b      	ldr	r2, [pc, #556]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005934:	430b      	orrs	r3, r1
 8005936:	6593      	str	r3, [r2, #88]	@ 0x58
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800593e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800594e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005958:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d055      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800596a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800596e:	d033      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005970:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005974:	d82c      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800597a:	d02f      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800597c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005980:	d826      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005982:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005986:	d02b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005988:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800598c:	d820      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800598e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005992:	d012      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005998:	d81a      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d022      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a2:	d115      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a8:	3308      	adds	r3, #8
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fcc1 	bl	8007334 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059b8:	e015      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059be:	3328      	adds	r3, #40	@ 0x28
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fd68 	bl	8007498 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059ce:	e00a      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059d6:	e006      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059fe:	4a58      	ldr	r2, [pc, #352]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f002 0308 	and.w	r3, r2, #8
 8005a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a24:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d01e      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3a:	d10c      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a40:	3328      	adds	r3, #40	@ 0x28
 8005a42:	2102      	movs	r1, #2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fd27 	bl	8007498 <RCCEx_PLL3_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a56:	4b42      	ldr	r3, [pc, #264]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	4a3e      	ldr	r2, [pc, #248]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f002 0310 	and.w	r3, r2, #16
 8005a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d01e      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a9e:	3328      	adds	r3, #40	@ 0x28
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fcf8 	bl	8007498 <RCCEx_PLL3_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac4:	4a26      	ldr	r2, [pc, #152]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ada:	2300      	movs	r3, #0
 8005adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ae0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	d040      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005af6:	d022      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005afc:	d81b      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b06:	d00b      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005b08:	e015      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b0e:	3308      	adds	r3, #8
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fc0e 	bl	8007334 <RCCEx_PLL2_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b24:	3328      	adds	r3, #40	@ 0x28
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fcb5 	bl	8007498 <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b34:	e004      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b48:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b58:	4a01      	ldr	r2, [pc, #4]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5e:	e005      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d03b      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b94:	d01f      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b9a:	d818      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005ba8:	e011      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4b64      	ldr	r3, [pc, #400]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	4a63      	ldr	r2, [pc, #396]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bb6:	e00f      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bbc:	3328      	adds	r3, #40	@ 0x28
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fc69 	bl	8007498 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bcc:	e004      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005be0:	4b56      	ldr	r3, [pc, #344]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bf0:	4a52      	ldr	r2, [pc, #328]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bf6:	e003      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c0e:	2300      	movs	r3, #0
 8005c10:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c12:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c16:	460b      	mov	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2a:	d007      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005c2c:	e011      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2e:	4b43      	ldr	r3, [pc, #268]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	4a42      	ldr	r2, [pc, #264]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c3a:	e00e      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c40:	3308      	adds	r3, #8
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fb75 	bl	8007334 <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c62:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	4a32      	ldr	r2, [pc, #200]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c76:	e003      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c8e:	2300      	movs	r3, #0
 8005c90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca0:	3328      	adds	r3, #40	@ 0x28
 8005ca2:	2102      	movs	r1, #2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fbf7 	bl	8007498 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005cc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	d03a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cde:	d018      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ce4:	d811      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cea:	d014      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf0:	d80b      	bhi.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4a0e      	ldr	r2, [pc, #56]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d08:	e008      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d34:	4a01      	ldr	r2, [pc, #4]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d36:	430b      	orrs	r3, r1
 8005d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d3a:	e005      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d56:	2300      	movs	r3, #0
 8005d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4313      	orrs	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d64:	4baa      	ldr	r3, [pc, #680]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d72:	4aa7      	ldr	r2, [pc, #668]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d86:	2300      	movs	r3, #0
 8005d88:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4313      	orrs	r3, r2
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d94:	4b9e      	ldr	r3, [pc, #632]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005da0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005da4:	4a9a      	ldr	r2, [pc, #616]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db8:	2300      	movs	r3, #0
 8005dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dc6:	4b92      	ldr	r3, [pc, #584]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de8:	2300      	movs	r3, #0
 8005dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d00e      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df6:	4b86      	ldr	r3, [pc, #536]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	4a85      	ldr	r2, [pc, #532]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dfc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e00:	6113      	str	r3, [r2, #16]
 8005e02:	4b83      	ldr	r3, [pc, #524]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e04:	6919      	ldr	r1, [r3, #16]
 8005e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e0e:	4a80      	ldr	r2, [pc, #512]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e22:	2300      	movs	r3, #0
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e30:	4b77      	ldr	r3, [pc, #476]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3e:	4a74      	ldr	r2, [pc, #464]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e40:	430b      	orrs	r3, r1
 8005e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e60:	4b6b      	ldr	r3, [pc, #428]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e70:	4a67      	ldr	r2, [pc, #412]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e72:	430b      	orrs	r3, r1
 8005e74:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d011      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	3308      	adds	r3, #8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fa4a 	bl	8007334 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6239      	str	r1, [r7, #32]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d011      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fa2a 	bl	8007334 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005ee6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	2100      	movs	r1, #0
 8005f00:	61b9      	str	r1, [r7, #24]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d011      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f16:	3308      	adds	r3, #8
 8005f18:	2102      	movs	r1, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fa0a 	bl	8007334 <RCCEx_PLL2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005f26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6139      	str	r1, [r7, #16]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d011      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f56:	3328      	adds	r3, #40	@ 0x28
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fa9c 	bl	8007498 <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8005f66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	2100      	movs	r1, #0
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d011      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f96:	3328      	adds	r3, #40	@ 0x28
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fa7c 	bl	8007498 <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005fa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	6039      	str	r1, [r7, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d011      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2102      	movs	r1, #2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fa5c 	bl	8007498 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ff2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8005ff6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
}
 8006004:	4618      	mov	r0, r3
 8006006:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800600a:	46bd      	mov	sp, r7
 800600c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006010:	58024400 	.word	0x58024400

08006014 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b090      	sub	sp, #64	@ 0x40
 8006018:	af00      	add	r7, sp, #0
 800601a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800601e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006022:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006026:	430b      	orrs	r3, r1
 8006028:	f040 8094 	bne.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800602c:	4b9e      	ldr	r3, [pc, #632]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2b04      	cmp	r3, #4
 800603a:	f200 8087 	bhi.w	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006059 	.word	0x08006059
 8006048:	08006081 	.word	0x08006081
 800604c:	080060a9 	.word	0x080060a9
 8006050:	08006145 	.word	0x08006145
 8006054:	080060d1 	.word	0x080060d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006058:	4b93      	ldr	r3, [pc, #588]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006060:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006064:	d108      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f810 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006074:	f000 bd45 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607c:	f000 bd41 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006080:	4b89      	ldr	r3, [pc, #548]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800608c:	d108      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fd54 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800609c:	f000 bd31 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a4:	f000 bd2d 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060a8:	4b7f      	ldr	r3, [pc, #508]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b4:	d108      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fe94 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c4:	f000 bd1d 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060cc:	f000 bd19 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060d0:	4b75      	ldr	r3, [pc, #468]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060da:	4b73      	ldr	r3, [pc, #460]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d10c      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060ec:	4b6e      	ldr	r3, [pc, #440]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	08db      	lsrs	r3, r3, #3
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	4a6d      	ldr	r2, [pc, #436]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060fe:	e01f      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006100:	4b69      	ldr	r3, [pc, #420]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610c:	d106      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800610e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006114:	d102      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006116:	4b66      	ldr	r3, [pc, #408]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611a:	e011      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800611c:	4b62      	ldr	r3, [pc, #392]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006128:	d106      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006130:	d102      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006132:	4b60      	ldr	r3, [pc, #384]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800613c:	f000 bce1 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006140:	f000 bcdf 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006144:	4b5c      	ldr	r3, [pc, #368]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006148:	f000 bcdb 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006150:	f000 bcd7 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006158:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800615c:	430b      	orrs	r3, r1
 800615e:	f040 80ad 	bne.w	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006162:	4b51      	ldr	r3, [pc, #324]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800616a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800616c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006172:	d056      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800617a:	f200 8090 	bhi.w	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2bc0      	cmp	r3, #192	@ 0xc0
 8006182:	f000 8088 	beq.w	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2bc0      	cmp	r3, #192	@ 0xc0
 800618a:	f200 8088 	bhi.w	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2b80      	cmp	r3, #128	@ 0x80
 8006192:	d032      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	2b80      	cmp	r3, #128	@ 0x80
 8006198:	f200 8081 	bhi.w	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d014      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80061a8:	e079      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061aa:	4b3f      	ldr	r3, [pc, #252]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b6:	d108      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ff67 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061c6:	f000 bc9c 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ce:	f000 bc98 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d2:	4b35      	ldr	r3, [pc, #212]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061de:	d108      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e0:	f107 0318 	add.w	r3, r7, #24
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fcab 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ee:	f000 bc88 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f6:	f000 bc84 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061fa:	4b2b      	ldr	r3, [pc, #172]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006206:	d108      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fdeb 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006216:	f000 bc74 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621e:	f000 bc70 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006222:	4b21      	ldr	r3, [pc, #132]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800622c:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d10c      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006250:	e01f      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006252:	4b15      	ldr	r3, [pc, #84]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800625e:	d106      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006266:	d102      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006268:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800626c:	e011      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800626e:	4b0e      	ldr	r3, [pc, #56]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800627a:	d106      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800627c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006282:	d102      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006284:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006288:	e003      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800628e:	f000 bc38 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006292:	f000 bc36 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629a:	f000 bc32 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a2:	f000 bc2e 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062a6:	bf00      	nop
 80062a8:	58024400 	.word	0x58024400
 80062ac:	03d09000 	.word	0x03d09000
 80062b0:	003d0900 	.word	0x003d0900
 80062b4:	017d7840 	.word	0x017d7840
 80062b8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80062c4:	430b      	orrs	r3, r1
 80062c6:	f040 809c 	bne.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062ca:	4b9e      	ldr	r3, [pc, #632]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ce:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80062d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062da:	d054      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062e2:	f200 808b 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062ec:	f000 8083 	beq.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062f6:	f200 8081 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006300:	d02f      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006308:	d878      	bhi.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006316:	d012      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006318:	e070      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800631a:	4b8a      	ldr	r3, [pc, #552]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 feaf 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006336:	e3e4      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e3e1      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800633e:	4b81      	ldr	r3, [pc, #516]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800634c:	f107 0318 	add.w	r3, r7, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fbf5 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e3d2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e3cf      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006362:	4b78      	ldr	r3, [pc, #480]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636e:	d107      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fd37 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637e:	e3c0      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e3bd      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006386:	4b6f      	ldr	r3, [pc, #444]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006390:	4b6c      	ldr	r3, [pc, #432]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10c      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a2:	4b68      	ldr	r3, [pc, #416]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a66      	ldr	r2, [pc, #408]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b4:	e01e      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063b6:	4b63      	ldr	r3, [pc, #396]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d106      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ca:	d102      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063cc:	4b5f      	ldr	r3, [pc, #380]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d0:	e010      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063e8:	4b59      	ldr	r3, [pc, #356]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063f2:	e386      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063f4:	e385      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063f6:	4b57      	ldr	r3, [pc, #348]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fa:	e382      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e37f      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006406:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800640a:	430b      	orrs	r3, r1
 800640c:	f040 80a7 	bne.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006410:	4b4c      	ldr	r3, [pc, #304]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006414:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006418:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006420:	d055      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006428:	f200 8096 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006432:	f000 8084 	beq.w	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800643c:	f200 808c 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006446:	d030      	beq.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644e:	f200 8083 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645e:	d012      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006460:	e07a      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006462:	4b38      	ldr	r3, [pc, #224]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fe0b 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800647e:	e340      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e33d      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006486:	4b2f      	ldr	r3, [pc, #188]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800648e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006494:	f107 0318 	add.w	r3, r7, #24
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fb51 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064a2:	e32e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a8:	e32b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064aa:	4b26      	ldr	r3, [pc, #152]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064b6:	d107      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fc93 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c6:	e31c      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064cc:	e319      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d10c      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064ea:	4b16      	ldr	r3, [pc, #88]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064fc:	e01e      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064fe:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006512:	d102      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006514:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	e010      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652e:	d102      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006534:	e002      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800653a:	e2e2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800653c:	e2e1      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006542:	e2de      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006544:	58024400 	.word	0x58024400
 8006548:	03d09000 	.word	0x03d09000
 800654c:	003d0900 	.word	0x003d0900
 8006550:	017d7840 	.word	0x017d7840
 8006554:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e2d1      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800655e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006562:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006566:	430b      	orrs	r3, r1
 8006568:	f040 809c 	bne.w	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800656c:	4b93      	ldr	r3, [pc, #588]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006570:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006574:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800657c:	d054      	beq.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006584:	f200 808b 	bhi.w	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800658e:	f000 8083 	beq.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006598:	f200 8081 	bhi.w	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800659c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a2:	d02f      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065aa:	d878      	bhi.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b8:	d012      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80065ba:	e070      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065bc:	4b7f      	ldr	r3, [pc, #508]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c8:	d107      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fd5e 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d8:	e293      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065de:	e290      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e0:	4b76      	ldr	r3, [pc, #472]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0318 	add.w	r3, r7, #24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 faa4 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fc:	e281      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e27e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006604:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006610:	d107      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fbe6 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006620:	e26f      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006626:	e26c      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006628:	4b64      	ldr	r3, [pc, #400]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800662a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006632:	4b62      	ldr	r3, [pc, #392]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d10c      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006644:	4b5d      	ldr	r3, [pc, #372]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	08db      	lsrs	r3, r3, #3
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	4a5c      	ldr	r2, [pc, #368]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006656:	e01e      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006658:	4b58      	ldr	r3, [pc, #352]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006664:	d106      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800666c:	d102      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800666e:	4b55      	ldr	r3, [pc, #340]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006672:	e010      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006674:	4b51      	ldr	r3, [pc, #324]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006680:	d106      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006688:	d102      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800668a:	4b4f      	ldr	r3, [pc, #316]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668e:	e002      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006694:	e235      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006696:	e234      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006698:	4b4c      	ldr	r3, [pc, #304]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669c:	e231      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a2:	e22e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80066ac:	430b      	orrs	r3, r1
 80066ae:	f040 808f 	bne.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066b2:	4b42      	ldr	r3, [pc, #264]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066c2:	d06b      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ca:	d874      	bhi.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066d2:	d056      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066da:	d86c      	bhi.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066e2:	d03b      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ea:	d864      	bhi.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066f2:	d021      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066fa:	d85c      	bhi.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006708:	d004      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800670a:	e054      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fe fa22 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006710:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006712:	e1f6      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006714:	4b29      	ldr	r3, [pc, #164]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006720:	d107      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fa0a 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006730:	e1e7      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006736:	e1e4      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006738:	4b20      	ldr	r3, [pc, #128]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006744:	d107      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fb4c 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006754:	e1d5      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800675a:	e1d2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800675c:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b04      	cmp	r3, #4
 8006766:	d109      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006768:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	08db      	lsrs	r3, r3, #3
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	4a13      	ldr	r2, [pc, #76]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800677a:	e1c2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006780:	e1bf      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006782:	4b0e      	ldr	r3, [pc, #56]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678e:	d102      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006790:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006794:	e1b5      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679a:	e1b2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800679c:	4b07      	ldr	r3, [pc, #28]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a8:	d102      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80067aa:	4b07      	ldr	r3, [pc, #28]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ae:	e1a8      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b4:	e1a5      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ba:	e1a2      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067bc:	58024400 	.word	0x58024400
 80067c0:	03d09000 	.word	0x03d09000
 80067c4:	003d0900 	.word	0x003d0900
 80067c8:	017d7840 	.word	0x017d7840
 80067cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80067d8:	430b      	orrs	r3, r1
 80067da:	d173      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d02f      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f4:	d863      	bhi.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006802:	d012      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006804:	e05b      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006806:	4b92      	ldr	r3, [pc, #584]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800680e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006814:	f107 0318 	add.w	r3, r7, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f991 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e16e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006828:	e16b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800682a:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006838:	f107 030c 	add.w	r3, r7, #12
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fad3 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006846:	e15c      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684c:	e159      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800684e:	4b80      	ldr	r3, [pc, #512]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006852:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006858:	4b7d      	ldr	r3, [pc, #500]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10c      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686a:	4b79      	ldr	r3, [pc, #484]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	4a77      	ldr	r2, [pc, #476]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687c:	e01e      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800687e:	4b74      	ldr	r3, [pc, #464]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800688a:	d106      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006892:	d102      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006894:	4b70      	ldr	r3, [pc, #448]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006898:	e010      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800689a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a6:	d106      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ae:	d102      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068b0:	4b6a      	ldr	r3, [pc, #424]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80068b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068b4:	e002      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068ba:	e122      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068bc:	e121      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c2:	e11e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80068cc:	430b      	orrs	r3, r1
 80068ce:	d133      	bne.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e6:	d012      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80068e8:	e023      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ea:	4b59      	ldr	r3, [pc, #356]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068f6:	d107      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fbc7 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006906:	e0fc      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800690c:	e0f9      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800690e:	4b50      	ldr	r3, [pc, #320]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800691a:	d107      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691c:	f107 0318 	add.w	r3, r7, #24
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f90d 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692a:	e0ea      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006930:	e0e7      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006936:	e0e4      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006940:	430b      	orrs	r3, r1
 8006942:	f040 808d 	bne.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006946:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006956:	d06b      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800695e:	d874      	bhi.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006966:	d056      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d86c      	bhi.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006976:	d03b      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800697e:	d864      	bhi.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006986:	d021      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698e:	d85c      	bhi.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800699c:	d004      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800699e:	e054      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069a0:	f000 f8b8 	bl	8006b14 <HAL_RCCEx_GetD3PCLK1Freq>
 80069a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069a6:	e0ac      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a8:	4b29      	ldr	r3, [pc, #164]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b6:	f107 0318 	add.w	r3, r7, #24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f8c0 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c4:	e09d      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ca:	e09a      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069cc:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d8:	d107      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fa02 	bl	8006de8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e8:	e08b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ee:	e088      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069f0:	4b17      	ldr	r3, [pc, #92]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d109      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069fc:	4b14      	ldr	r3, [pc, #80]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	08db      	lsrs	r3, r3, #3
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	4a13      	ldr	r2, [pc, #76]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a0e:	e078      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a14:	e075      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a16:	4b0e      	ldr	r3, [pc, #56]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a22:	d102      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006a24:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a28:	e06b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2e:	e068      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a30:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a42:	e05e      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a48:	e05b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4e:	e058      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a50:	58024400 	.word	0x58024400
 8006a54:	03d09000 	.word	0x03d09000
 8006a58:	003d0900 	.word	0x003d0900
 8006a5c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a64:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	d148      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a6c:	4b27      	ldr	r3, [pc, #156]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a7c:	d02a      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a84:	d838      	bhi.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a92:	d00d      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006a94:	e030      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a96:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa2:	d102      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa8:	e02b      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aae:	e028      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab0:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fae4 	bl	8007090 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006acc:	e019      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad2:	e016      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae2:	f107 0318 	add.w	r3, r7, #24
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f82a 	bl	8006b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af0:	e007      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afc:	e001      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3740      	adds	r7, #64	@ 0x40
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	017d7840 	.word	0x017d7840

08006b14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b18:	f7fd ffec 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4904      	ldr	r1, [pc, #16]	@ (8006b3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	0800d768 	.word	0x0800d768

08006b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b52:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	0b1b      	lsrs	r3, r3, #12
 8006b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	@ (8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4bbebc20 	.word	0x4bbebc20

08006de8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	@ 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba1      	ldr	r3, [pc, #644]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e06:	4b9c      	ldr	r3, [pc, #624]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e12:	4b99      	ldr	r3, [pc, #612]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8111 	beq.w	8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	f000 8083 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f200 80a1 	bhi.w	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d056      	beq.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e52:	e099      	b.n	8006f88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e54:	4b88      	ldr	r3, [pc, #544]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02d      	beq.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e60:	4b85      	ldr	r3, [pc, #532]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	4a84      	ldr	r2, [pc, #528]	@ (800707c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eba:	e087      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b6a      	ldr	r3, [pc, #424]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e065      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	e043      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b48      	ldr	r3, [pc, #288]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f86:	e021      	b.n	8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff2:	ee17 2a90 	vmov	r2, s15
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007014:	edd7 6a07 	vldr	s13, [r7, #28]
 8007018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007020:	ee17 2a90 	vmov	r2, s15
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007028:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	0e1b      	lsrs	r3, r3, #24
 800702e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007042:	edd7 6a07 	vldr	s13, [r7, #28]
 8007046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704e:	ee17 2a90 	vmov	r2, s15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007056:	e008      	b.n	800706a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
}
 800706a:	bf00      	nop
 800706c:	3724      	adds	r7, #36	@ 0x24
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	03d09000 	.word	0x03d09000
 8007080:	46000000 	.word	0x46000000
 8007084:	4c742400 	.word	0x4c742400
 8007088:	4a742400 	.word	0x4a742400
 800708c:	4bbebc20 	.word	0x4bbebc20

08007090 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	@ 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba0      	ldr	r3, [pc, #640]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070a2:	4b9e      	ldr	r3, [pc, #632]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ae:	4b9b      	ldr	r3, [pc, #620]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070b8:	4b98      	ldr	r3, [pc, #608]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070bc:	08db      	lsrs	r3, r3, #3
 80070be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8111 	beq.w	80072fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	f000 8083 	beq.w	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f200 80a1 	bhi.w	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d056      	beq.n	80071a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80070f8:	e099      	b.n	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fa:	4b88      	ldr	r3, [pc, #544]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d02d      	beq.n	8007162 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007106:	4b85      	ldr	r3, [pc, #532]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	4a83      	ldr	r2, [pc, #524]	@ (8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007130:	4b7a      	ldr	r3, [pc, #488]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007140:	ed97 6a03 	vldr	s12, [r7, #12]
 8007144:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007160:	e087      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007174:	4b69      	ldr	r3, [pc, #420]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a03 	vldr	s12, [r7, #12]
 8007188:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a4:	e065      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b8:	4b58      	ldr	r3, [pc, #352]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071cc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e8:	e043      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	4b47      	ldr	r3, [pc, #284]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007210:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722c:	e021      	b.n	8007272 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b36      	ldr	r3, [pc, #216]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a03 	vldr	s12, [r7, #12]
 8007254:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007270:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007272:	4b2a      	ldr	r3, [pc, #168]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007276:	0a5b      	lsrs	r3, r3, #9
 8007278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072a0:	4b1e      	ldr	r3, [pc, #120]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072ce:	4b13      	ldr	r3, [pc, #76]	@ (800731c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f4:	ee17 2a90 	vmov	r2, s15
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072fc:	e008      	b.n	8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	bf00      	nop
 8007312:	3724      	adds	r7, #36	@ 0x24
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	46000000 	.word	0x46000000
 8007328:	4c742400 	.word	0x4c742400
 800732c:	4a742400 	.word	0x4a742400
 8007330:	4bbebc20 	.word	0x4bbebc20

08007334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007342:	4b53      	ldr	r3, [pc, #332]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d101      	bne.n	8007352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e099      	b.n	8007486 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007352:	4b4f      	ldr	r3, [pc, #316]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4e      	ldr	r2, [pc, #312]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7fa fa85 	bl	800186c <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007366:	f7fa fa81 	bl	800186c <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e086      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007378:	4b45      	ldr	r3, [pc, #276]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f0      	bne.n	8007366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007384:	4b42      	ldr	r3, [pc, #264]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	031b      	lsls	r3, r3, #12
 8007392:	493f      	ldr	r1, [pc, #252]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	628b      	str	r3, [r1, #40]	@ 0x28
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
 80073b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073c8:	4931      	ldr	r1, [pc, #196]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ce:	4b30      	ldr	r3, [pc, #192]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	492d      	ldr	r1, [pc, #180]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	f023 0220 	bic.w	r2, r3, #32
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	4928      	ldr	r1, [pc, #160]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073f2:	4b27      	ldr	r3, [pc, #156]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	4a26      	ldr	r2, [pc, #152]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	f023 0310 	bic.w	r3, r3, #16
 80073fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073fe:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007402:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <RCCEx_PLL2_Config+0x160>)
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	69d2      	ldr	r2, [r2, #28]
 800740a:	00d2      	lsls	r2, r2, #3
 800740c:	4920      	ldr	r1, [pc, #128]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007412:	4b1f      	ldr	r3, [pc, #124]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007416:	4a1e      	ldr	r2, [pc, #120]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007418:	f043 0310 	orr.w	r3, r3, #16
 800741c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007424:	4b1a      	ldr	r3, [pc, #104]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	4a19      	ldr	r2, [pc, #100]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800742a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800742e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007430:	e00f      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d106      	bne.n	8007446 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007438:	4b15      	ldr	r3, [pc, #84]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4a14      	ldr	r2, [pc, #80]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800743e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007444:	e005      	b.n	8007452 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007446:	4b12      	ldr	r3, [pc, #72]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	4a11      	ldr	r2, [pc, #68]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800744c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007450:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007452:	4b0f      	ldr	r3, [pc, #60]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0e      	ldr	r2, [pc, #56]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800745c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745e:	f7fa fa05 	bl	800186c <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007464:	e008      	b.n	8007478 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007466:	f7fa fa01 	bl	800186c <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e006      	b.n	8007486 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007478:	4b05      	ldr	r3, [pc, #20]	@ (8007490 <RCCEx_PLL2_Config+0x15c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	58024400 	.word	0x58024400
 8007494:	ffff0007 	.word	0xffff0007

08007498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074a6:	4b53      	ldr	r3, [pc, #332]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d101      	bne.n	80074b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e099      	b.n	80075ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4e      	ldr	r2, [pc, #312]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fa f9d3 	bl	800186c <HAL_GetTick>
 80074c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074c8:	e008      	b.n	80074dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074ca:	f7fa f9cf 	bl	800186c <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e086      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074dc:	4b45      	ldr	r3, [pc, #276]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074e8:	4b42      	ldr	r3, [pc, #264]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	493f      	ldr	r1, [pc, #252]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	3b01      	subs	r3, #1
 8007502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	b29b      	uxth	r3, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	3b01      	subs	r3, #1
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800752c:	4931      	ldr	r1, [pc, #196]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800752e:	4313      	orrs	r3, r2
 8007530:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007532:	4b30      	ldr	r3, [pc, #192]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	492d      	ldr	r1, [pc, #180]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007544:	4b2b      	ldr	r3, [pc, #172]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4928      	ldr	r1, [pc, #160]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007556:	4b27      	ldr	r3, [pc, #156]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800755c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007562:	4b24      	ldr	r3, [pc, #144]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007566:	4b24      	ldr	r3, [pc, #144]	@ (80075f8 <RCCEx_PLL3_Config+0x160>)
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	69d2      	ldr	r2, [r2, #28]
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	4920      	ldr	r1, [pc, #128]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007576:	4b1f      	ldr	r3, [pc, #124]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	4a1e      	ldr	r2, [pc, #120]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007588:	4b1a      	ldr	r3, [pc, #104]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a19      	ldr	r2, [pc, #100]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800758e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007594:	e00f      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800759c:	4b15      	ldr	r3, [pc, #84]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	4a14      	ldr	r2, [pc, #80]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a8:	e005      	b.n	80075b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075aa:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ae:	4a11      	ldr	r2, [pc, #68]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075b6:	4b0f      	ldr	r3, [pc, #60]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a0e      	ldr	r2, [pc, #56]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c2:	f7fa f953 	bl	800186c <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075c8:	e008      	b.n	80075dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075ca:	f7fa f94f 	bl	800186c <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e006      	b.n	80075ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <RCCEx_PLL3_Config+0x15c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
 80075f8:	ffff0007 	.word	0xffff0007

080075fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	@ 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e075      	b.n	80076fa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7f9 ff13 	bl	800144c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2204      	movs	r2, #4
 800762a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f868 	bl	8007704 <HAL_SD_InitCard>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e05d      	b.n	80076fa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800763e:	f107 0308 	add.w	r3, r7, #8
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fdaf 	bl	80081a8 <HAL_SD_GetCardStatus>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e052      	b.n	80076fa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007654:	7e3b      	ldrb	r3, [r7, #24]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800765a:	7e7b      	ldrb	r3, [r7, #25]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007664:	2b01      	cmp	r3, #1
 8007666:	d10a      	bne.n	800767e <HAL_SD_Init+0x82>
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_SD_Init+0x78>
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800767a:	659a      	str	r2, [r3, #88]	@ 0x58
 800767c:	e00b      	b.n	8007696 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	2b01      	cmp	r3, #1
 8007684:	d104      	bne.n	8007690 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800768c:	659a      	str	r2, [r3, #88]	@ 0x58
 800768e:	e002      	b.n	8007696 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fe6d 	bl	800837c <HAL_SD_ConfigWideBusOperation>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e026      	b.n	80076fa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80076ac:	f7fa f8de 	bl	800186c <HAL_GetTick>
 80076b0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076b2:	e011      	b.n	80076d8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076b4:	f7fa f8da 	bl	800186c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d109      	bne.n	80076d8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076ca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e010      	b.n	80076fa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ff61 	bl	80085a0 <HAL_SD_GetCardState>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d1e7      	bne.n	80076b4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	@ 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b08d      	sub	sp, #52	@ 0x34
 8007708:	af02      	add	r7, sp, #8
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800771c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	f7fe fc76 	bl	8006014 <HAL_RCCEx_GetPeriphCLKFreq>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800773e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e070      	b.n	8007826 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	4a39      	ldr	r2, [pc, #228]	@ (8007830 <HAL_SD_InitCard+0x12c>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681c      	ldr	r4, [r3, #0]
 8007756:	466a      	mov	r2, sp
 8007758:	f107 0318 	add.w	r3, r7, #24
 800775c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007760:	e882 0003 	stmia.w	r2, {r0, r1}
 8007764:	f107 030c 	add.w	r3, r7, #12
 8007768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800776a:	4620      	mov	r0, r4
 800776c:	f001 ffa6 	bl	80096bc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f001 ffe9 	bl	800974c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007792:	4a28      	ldr	r2, [pc, #160]	@ (8007834 <HAL_SD_InitCard+0x130>)
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	3301      	adds	r3, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f7fa f871 	bl	8001884 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 ffea 	bl	800877c <SD_PowerON>
 80077a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e02e      	b.n	8007826 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 ff09 	bl	80085e0 <SD_InitCard>
 80077ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e01b      	b.n	8007826 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80077f6:	4618      	mov	r0, r3
 80077f8:	f002 f83e 	bl	8009878 <SDMMC_CmdBlockLength>
 80077fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a0b      	ldr	r2, [pc, #44]	@ (8007838 <HAL_SD_InitCard+0x134>)
 800780a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	372c      	adds	r7, #44	@ 0x2c
 800782a:	46bd      	mov	sp, r7
 800782c:	bd90      	pop	{r4, r7, pc}
 800782e:	bf00      	nop
 8007830:	014f8b59 	.word	0x014f8b59
 8007834:	00012110 	.word	0x00012110
 8007838:	1fe00fff 	.word	0x1fe00fff

0800783c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08c      	sub	sp, #48	@ 0x30
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e08d      	b.n	8007980 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	f040 8086 	bne.w	800797e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007882:	429a      	cmp	r2, r3
 8007884:	d907      	bls.n	8007896 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800788a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e074      	b.n	8007980 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2203      	movs	r2, #3
 800789a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	025a      	lsls	r2, r3, #9
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d002      	beq.n	80078c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	025b      	lsls	r3, r3, #9
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295
 80078c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	025b      	lsls	r3, r3, #9
 80078cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80078ce:	2390      	movs	r3, #144	@ 0x90
 80078d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078d2:	2302      	movs	r3, #2
 80078d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f107 0210 	add.w	r2, r7, #16
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 ff99 	bl	8009820 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2201      	movs	r2, #1
 800790c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d90a      	bls.n	800792a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2282      	movs	r2, #130	@ 0x82
 8007918:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007920:	4618      	mov	r0, r3
 8007922:	f001 ffef 	bl	8009904 <SDMMC_CmdReadMultiBlock>
 8007926:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007928:	e009      	b.n	800793e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2281      	movs	r2, #129	@ 0x81
 800792e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007936:	4618      	mov	r0, r3
 8007938:	f001 ffc1 	bl	80098be <SDMMC_CmdReadSingleBlock>
 800793c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800793e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a0f      	ldr	r2, [pc, #60]	@ (8007988 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800794a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007952:	431a      	orrs	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e00a      	b.n	8007980 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007978:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3730      	adds	r7, #48	@ 0x30
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	1fe00fff 	.word	0x1fe00fff

0800798c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	@ 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e08d      	b.n	8007ad0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b01      	cmp	r3, #1
 80079be:	f040 8086 	bne.w	8007ace <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d907      	bls.n	80079e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079da:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e074      	b.n	8007ad0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	025a      	lsls	r2, r3, #9
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d002      	beq.n	8007a12 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0e:	025b      	lsls	r3, r3, #9
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	025b      	lsls	r3, r3, #9
 8007a1c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a1e:	2390      	movs	r3, #144	@ 0x90
 8007a20:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f107 0210 	add.w	r2, r7, #16
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 fef1 	bl	8009820 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a4c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d90a      	bls.n	8007a7a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	22a0      	movs	r2, #160	@ 0xa0
 8007a68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 ff8d 	bl	8009990 <SDMMC_CmdWriteMultiBlock>
 8007a76:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a78:	e009      	b.n	8007a8e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2290      	movs	r2, #144	@ 0x90
 8007a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 ff5f 	bl	800994a <SDMMC_CmdWriteSingleBlock>
 8007a8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d012      	beq.n	8007aba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e00a      	b.n	8007ad0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	@ 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	1fe00fff 	.word	0x1fe00fff

08007adc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <HAL_SD_IRQHandler+0x2e>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f926 	bl	8008d54 <SD_Read_IT>
 8007b08:	e19a      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80ac 	beq.w	8007c72 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b22:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b59      	ldr	r3, [pc, #356]	@ (8007c94 <HAL_SD_IRQHandler+0x1b8>)
 8007b30:	400b      	ands	r3, r1
 8007b32:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007b42:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b52:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0308 	and.w	r3, r3, #8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d038      	beq.n	8007bd0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <HAL_SD_IRQHandler+0x96>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d011      	beq.n	8007b96 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 ff2e 	bl	80099d8 <SDMMC_CmdStopTransfer>
 8007b7c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f95b 	bl	8007e4c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007c98 <HAL_SD_IRQHandler+0x1bc>)
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_SD_IRQHandler+0xe4>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f002 fbe1 	bl	800a388 <HAL_SD_RxCpltCallback>
 8007bc6:	e13b      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f002 fbd3 	bl	800a374 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007bce:	e137      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8132 	beq.w	8007e40 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2200      	movs	r2, #0
 8007be2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <HAL_SD_IRQHandler+0x12c>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d011      	beq.n	8007c2c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fee3 	bl	80099d8 <SDMMC_CmdStopTransfer>
 8007c12:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f910 	bl	8007e4c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <HAL_SD_IRQHandler+0x172>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 fb90 	bl	800a374 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_SD_IRQHandler+0x18e>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80eb 	beq.w	8007e40 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f002 fb8c 	bl	800a388 <HAL_SD_RxCpltCallback>
}
 8007c70:	e0e6      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <HAL_SD_IRQHandler+0x1c0>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d008      	beq.n	8007c9c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 f8a8 	bl	8008de0 <SD_Write_IT>
 8007c90:	e0d6      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
 8007c92:	bf00      	nop
 8007c94:	ffff3ec5 	.word	0xffff3ec5
 8007c98:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 809d 	beq.w	8007de6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cbe:	f043 0202 	orr.w	r2, r3, #2
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd8:	f043 0208 	orr.w	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	f043 0210 	orr.w	r2, r3, #16
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a4b      	ldr	r2, [pc, #300]	@ (8007e48 <HAL_SD_IRQHandler+0x36c>)
 8007d1a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d3a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d5a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fe39 	bl	80099d8 <SDMMC_CmdStopTransfer>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d80:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f851 	bl	8007e4c <HAL_SD_ErrorCallback>
}
 8007daa:	e049      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d044      	beq.n	8007e40 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d040      	beq.n	8007e40 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f834 	bl	8007e4c <HAL_SD_ErrorCallback>
}
 8007de4:	e02c      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d025      	beq.n	8007e40 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f84a 	bl	8008eb0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007e1c:	e010      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f832 	bl	8008e88 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007e24:	e00c      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f833 	bl	8008e9c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007e36:	e003      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f81b 	bl	8008e74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007e3e:	e7ff      	b.n	8007e40 <HAL_SD_IRQHandler+0x364>
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	18000f3a 	.word	0x18000f3a

08007e4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6e:	0f9b      	lsrs	r3, r3, #30
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e7a:	0e9b      	lsrs	r3, r3, #26
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e8c:	0e1b      	lsrs	r3, r3, #24
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e9e:	0c1b      	lsrs	r3, r3, #16
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec0:	0d1b      	lsrs	r3, r3, #20
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ede:	0bdb      	lsrs	r3, r3, #15
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef0:	0b9b      	lsrs	r3, r3, #14
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f02:	0b5b      	lsrs	r3, r3, #13
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f14:	0b1b      	lsrs	r3, r3, #12
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2200      	movs	r2, #0
 8007f26:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d163      	bne.n	8007ff8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f34:	009a      	lsls	r2, r3, #2
 8007f36:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007f40:	0f92      	lsrs	r2, r2, #30
 8007f42:	431a      	orrs	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f4c:	0edb      	lsrs	r3, r3, #27
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f70:	0d5b      	lsrs	r3, r3, #21
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f82:	0c9b      	lsrs	r3, r3, #18
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f94:	0bdb      	lsrs	r3, r3, #15
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	7e1b      	ldrb	r3, [r3, #24]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	2201      	movs	r2, #1
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fc2:	fb03 f202 	mul.w	r2, r3, r2
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	7a1b      	ldrb	r3, [r3, #8]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	409a      	lsls	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007fe4:	0a52      	lsrs	r2, r2, #9
 8007fe6:	fb03 f202 	mul.w	r2, r3, r2
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ff4:	655a      	str	r2, [r3, #84]	@ 0x54
 8007ff6:	e031      	b.n	800805c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d11d      	bne.n	800803c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008004:	041b      	lsls	r3, r3, #16
 8008006:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800800e:	0c1b      	lsrs	r3, r3, #16
 8008010:	431a      	orrs	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	3301      	adds	r3, #1
 800801c:	029a      	lsls	r2, r3, #10
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008030:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	@ 0x54
 800803a:	e00f      	b.n	800805c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a58      	ldr	r2, [pc, #352]	@ (80081a4 <HAL_SD_GetCardCSD+0x344>)
 8008042:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008048:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e09d      	b.n	8008198 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008060:	0b9b      	lsrs	r3, r3, #14
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008072:	09db      	lsrs	r3, r3, #7
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008094:	0fdb      	lsrs	r3, r3, #31
 8008096:	b2da      	uxtb	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080a0:	0f5b      	lsrs	r3, r3, #29
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b2:	0e9b      	lsrs	r3, r3, #26
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080c4:	0d9b      	lsrs	r3, r3, #22
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080d6:	0d5b      	lsrs	r3, r3, #21
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080f2:	0c1b      	lsrs	r3, r3, #16
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008106:	0bdb      	lsrs	r3, r3, #15
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800811a:	0b9b      	lsrs	r3, r3, #14
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800812e:	0b5b      	lsrs	r3, r3, #13
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008142:	0b1b      	lsrs	r3, r3, #12
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008156:	0a9b      	lsrs	r3, r3, #10
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800816a:	0a1b      	lsrs	r3, r3, #8
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	1fe00fff 	.word	0x1fe00fff

080081a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b094      	sub	sp, #80	@ 0x50
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d101      	bne.n	80081c8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0a7      	b.n	8008318 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80081c8:	f107 0308 	add.w	r3, r7, #8
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fb62 	bl	8008898 <SD_SendSDStatus>
 80081d4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80081d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d011      	beq.n	8008200 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a4f      	ldr	r2, [pc, #316]	@ (8008320 <HAL_SD_GetCardStatus+0x178>)
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80081fe:	e070      	b.n	80082e2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	099b      	lsrs	r3, r3, #6
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	b2da      	uxtb	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	b29b      	uxth	r3, r3
 8008226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800822a:	b29a      	uxth	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	0e1b      	lsrs	r3, r3, #24
 8008230:	b29b      	uxth	r3, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	061a      	lsls	r2, r3, #24
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008246:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008250:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	0e1b      	lsrs	r3, r3, #24
 8008256:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	0d1b      	lsrs	r3, r3, #20
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 030f 	and.w	r3, r3, #15
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	b29b      	uxth	r3, r3
 8008284:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008288:	b29a      	uxth	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	b29b      	uxth	r3, r3
 800828e:	b2db      	uxtb	r3, r3
 8008290:	b29b      	uxth	r3, r3
 8008292:	4313      	orrs	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	0a9b      	lsrs	r3, r3, #10
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	0e1b      	lsrs	r3, r3, #24
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fac4 	bl	8009878 <SDMMC_CmdBlockLength>
 80082f0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80082f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00d      	beq.n	8008314 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a08      	ldr	r2, [pc, #32]	@ (8008320 <HAL_SD_GetCardStatus+0x178>)
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008304:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008314:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008318:	4618      	mov	r0, r3
 800831a:	3750      	adds	r7, #80	@ 0x50
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	1fe00fff 	.word	0x1fe00fff

08008324 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b08d      	sub	sp, #52	@ 0x34
 8008380:	af02      	add	r7, sp, #8
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008398:	2b03      	cmp	r3, #3
 800839a:	d02e      	beq.n	80083fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083a2:	d106      	bne.n	80083b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80083b0:	e029      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083b8:	d10a      	bne.n	80083d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fb64 	bl	8008a88 <SD_WideBus_Enable>
 80083c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80083ce:	e01a      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fba1 	bl	8008b1e <SD_WideBus_Disable>
 80083dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80083ea:	e00c      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80083f8:	e005      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a5f      	ldr	r2, [pc, #380]	@ (8008590 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800841c:	e096      	b.n	800854c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800841e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008422:	f04f 0100 	mov.w	r1, #0
 8008426:	f7fd fdf5 	bl	8006014 <HAL_RCCEx_GetPeriphCLKFreq>
 800842a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8083 	beq.w	800853a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695a      	ldr	r2, [r3, #20]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4950      	ldr	r1, [pc, #320]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008452:	fba1 1303 	umull	r1, r3, r1, r3
 8008456:	0e1b      	lsrs	r3, r3, #24
 8008458:	429a      	cmp	r2, r3
 800845a:	d303      	bcc.n	8008464 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e05a      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800846c:	d103      	bne.n	8008476 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	61bb      	str	r3, [r7, #24]
 8008474:	e051      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800847e:	d126      	bne.n	80084ce <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10e      	bne.n	80084a6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4a43      	ldr	r2, [pc, #268]	@ (8008598 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d906      	bls.n	800849e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4a40      	ldr	r2, [pc, #256]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008494:	fba2 2303 	umull	r2, r3, r2, r3
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	61bb      	str	r3, [r7, #24]
 800849c:	e03d      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e039      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	4a39      	ldr	r2, [pc, #228]	@ (8008598 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d906      	bls.n	80084c6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4a36      	ldr	r2, [pc, #216]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	0e5b      	lsrs	r3, r3, #25
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	e029      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e025      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10e      	bne.n	80084f4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4a30      	ldr	r2, [pc, #192]	@ (800859c <HAL_SD_ConfigWideBusOperation+0x220>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d906      	bls.n	80084ec <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e016      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e012      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	4a26      	ldr	r2, [pc, #152]	@ (800859c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d906      	bls.n	8008514 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4a22      	ldr	r2, [pc, #136]	@ (8008594 <HAL_SD_ConfigWideBusOperation+0x218>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	0e1b      	lsrs	r3, r3, #24
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e002      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	466a      	mov	r2, sp
 8008520:	f107 0314 	add.w	r3, r7, #20
 8008524:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008528:	e882 0003 	stmia.w	r2, {r0, r1}
 800852c:	f107 0308 	add.w	r3, r7, #8
 8008530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008532:	4620      	mov	r0, r4
 8008534:	f001 f8c2 	bl	80096bc <SDMMC_Init>
 8008538:	e008      	b.n	800854c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800853e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008554:	4618      	mov	r0, r3
 8008556:	f001 f98f 	bl	8009878 <SDMMC_CmdBlockLength>
 800855a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a0a      	ldr	r2, [pc, #40]	@ (8008590 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008568:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	431a      	orrs	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008588:	4618      	mov	r0, r3
 800858a:	372c      	adds	r7, #44	@ 0x2c
 800858c:	46bd      	mov	sp, r7
 800858e:	bd90      	pop	{r4, r7, pc}
 8008590:	1fe00fff 	.word	0x1fe00fff
 8008594:	55e63b89 	.word	0x55e63b89
 8008598:	02faf080 	.word	0x02faf080
 800859c:	017d7840 	.word	0x017d7840

080085a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa40 	bl	8008a38 <SD_SendStatus>
 80085b8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0a5b      	lsrs	r3, r3, #9
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085d6:	693b      	ldr	r3, [r7, #16]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b090      	sub	sp, #64	@ 0x40
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80085ec:	f7f9 f93e 	bl	800186c <HAL_GetTick>
 80085f0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 f8b9 	bl	800976e <SDMMC_GetPowerState>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008602:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008606:	e0b5      	b.n	8008774 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	2b03      	cmp	r3, #3
 800860e:	d02e      	beq.n	800866e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fb04 	bl	8009c22 <SDMMC_CmdSendCID>
 800861a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SD_InitCard+0x46>
    {
      return errorstate;
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	e0a6      	b.n	8008774 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2100      	movs	r1, #0
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f8e4 	bl	80097fa <SDMMC_GetResponse>
 8008632:	4602      	mov	r2, r0
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2104      	movs	r1, #4
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f8db 	bl	80097fa <SDMMC_GetResponse>
 8008644:	4602      	mov	r2, r0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2108      	movs	r1, #8
 8008650:	4618      	mov	r0, r3
 8008652:	f001 f8d2 	bl	80097fa <SDMMC_GetResponse>
 8008656:	4602      	mov	r2, r0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	210c      	movs	r1, #12
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f8c9 	bl	80097fa <SDMMC_GetResponse>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008672:	2b03      	cmp	r3, #3
 8008674:	d01d      	beq.n	80086b2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008676:	e019      	b.n	80086ac <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f107 020a 	add.w	r2, r7, #10
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fb0c 	bl	8009ca0 <SDMMC_CmdSetRelAdd>
 8008688:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008692:	e06f      	b.n	8008774 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008694:	f7f9 f8ea 	bl	800186c <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	f241 3287 	movw	r2, #4999	@ 0x1387
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d902      	bls.n	80086ac <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80086a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80086aa:	e063      	b.n	8008774 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80086ac:	897b      	ldrh	r3, [r7, #10]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0e2      	beq.n	8008678 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d036      	beq.n	8008728 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80086ba:	897b      	ldrh	r3, [r7, #10]
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f001 fac6 	bl	8009c60 <SDMMC_CmdSendCSD>
 80086d4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <SD_InitCard+0x100>
    {
      return errorstate;
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	e049      	b.n	8008774 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 f887 	bl	80097fa <SDMMC_GetResponse>
 80086ec:	4602      	mov	r2, r0
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2104      	movs	r1, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f87e 	bl	80097fa <SDMMC_GetResponse>
 80086fe:	4602      	mov	r2, r0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2108      	movs	r1, #8
 800870a:	4618      	mov	r0, r3
 800870c:	f001 f875 	bl	80097fa <SDMMC_GetResponse>
 8008710:	4602      	mov	r2, r0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	210c      	movs	r1, #12
 800871c:	4618      	mov	r0, r3
 800871e:	f001 f86c 	bl	80097fa <SDMMC_GetResponse>
 8008722:	4602      	mov	r2, r0
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2104      	movs	r1, #4
 800872e:	4618      	mov	r0, r3
 8008730:	f001 f863 	bl	80097fa <SDMMC_GetResponse>
 8008734:	4603      	mov	r3, r0
 8008736:	0d1a      	lsrs	r2, r3, #20
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff fb8c 	bl	8007e60 <HAL_SD_GetCardCSD>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800874e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008752:	e00f      	b.n	8008774 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875c:	041b      	lsls	r3, r3, #16
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f001 f975 	bl	8009a50 <SDMMC_CmdSelDesel>
 8008766:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <SD_InitCard+0x192>
  {
    return errorstate;
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	e000      	b.n	8008774 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3740      	adds	r7, #64	@ 0x40
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f001 f97e 	bl	8009a96 <SDMMC_CmdGoIdleState>
 800879a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	e072      	b.n	800888c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 f991 	bl	8009ad2 <SDMMC_CmdOperCond>
 80087b0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087b8:	d10d      	bne.n	80087d6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f966 	bl	8009a96 <SDMMC_CmdGoIdleState>
 80087ca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <SD_PowerON+0x60>
    {
      return errorstate;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e05a      	b.n	800888c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d137      	bne.n	8008854 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 f991 	bl	8009b12 <SDMMC_CmdAppCommand>
 80087f0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d02d      	beq.n	8008854 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087fc:	e046      	b.n	800888c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f984 	bl	8009b12 <SDMMC_CmdAppCommand>
 800880a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	e03a      	b.n	800888c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	491e      	ldr	r1, [pc, #120]	@ (8008894 <SD_PowerON+0x118>)
 800881c:	4618      	mov	r0, r3
 800881e:	f001 f99b 	bl	8009b58 <SDMMC_CmdAppOperCommand>
 8008822:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800882a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800882e:	e02d      	b.n	800888c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f000 ffdf 	bl	80097fa <SDMMC_GetResponse>
 800883c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	0fdb      	lsrs	r3, r3, #31
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <SD_PowerON+0xce>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <SD_PowerON+0xd0>
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]

    count++;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3301      	adds	r3, #1
 8008852:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800885a:	4293      	cmp	r3, r2
 800885c:	d802      	bhi.n	8008864 <SD_PowerON+0xe8>
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0cc      	beq.n	80087fe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800886a:	4293      	cmp	r3, r2
 800886c:	d902      	bls.n	8008874 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800886e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008872:	e00b      	b.n	800888c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	c1100000 	.word	0xc1100000

08008898 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	@ 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088a2:	f7f8 ffe3 	bl	800186c <HAL_GetTick>
 80088a6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 ffa1 	bl	80097fa <SDMMC_GetResponse>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088c2:	d102      	bne.n	80088ca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088c8:	e0b0      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2140      	movs	r1, #64	@ 0x40
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 ffd1 	bl	8009878 <SDMMC_CmdBlockLength>
 80088d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	e0a0      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f001 f90b 	bl	8009b12 <SDMMC_CmdAppCommand>
 80088fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	e08d      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008916:	2340      	movs	r3, #64	@ 0x40
 8008918:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800891a:	2360      	movs	r3, #96	@ 0x60
 800891c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800891e:	2302      	movs	r3, #2
 8008920:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008922:	2300      	movs	r3, #0
 8008924:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008926:	2301      	movs	r3, #1
 8008928:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f107 0208 	add.w	r2, r7, #8
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f000 ff73 	bl	8009820 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f001 f9f3 	bl	8009d2a <SDMMC_CmdStatusRegister>
 8008944:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d02b      	beq.n	80089a4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	e069      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d013      	beq.n	800898e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008966:	2300      	movs	r3, #0
 8008968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800896a:	e00d      	b.n	8008988 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fecd 	bl	8009710 <SDMMC_ReadFIFO>
 8008976:	4602      	mov	r2, r0
 8008978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897a:	601a      	str	r2, [r3, #0]
        pData++;
 800897c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897e:	3304      	adds	r3, #4
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	3301      	adds	r3, #1
 8008986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	2b07      	cmp	r3, #7
 800898c:	d9ee      	bls.n	800896c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800898e:	f7f8 ff6d 	bl	800186c <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899c:	d102      	bne.n	80089a4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800899e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80089a2:	e043      	b.n	8008a2c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089aa:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0d2      	beq.n	8008958 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089c0:	2308      	movs	r3, #8
 80089c2:	e033      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089d2:	2302      	movs	r3, #2
 80089d4:	e02a      	b.n	8008a2c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d017      	beq.n	8008a14 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80089e4:	2320      	movs	r3, #32
 80089e6:	e021      	b.n	8008a2c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fe8f 	bl	8009710 <SDMMC_ReadFIFO>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	601a      	str	r2, [r3, #0]
    pData++;
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	3304      	adds	r3, #4
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089fe:	f7f8 ff35 	bl	800186c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d102      	bne.n	8008a14 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a12:	e00b      	b.n	8008a2c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e2      	bne.n	80089e8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a03      	ldr	r2, [pc, #12]	@ (8008a34 <SD_SendSDStatus+0x19c>)
 8008a28:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3730      	adds	r7, #48	@ 0x30
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	18000f3a 	.word	0x18000f3a

08008a38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a4c:	e018      	b.n	8008a80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a56:	041b      	lsls	r3, r3, #16
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f001 f942 	bl	8009ce4 <SDMMC_CmdSendStatus>
 8008a60:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e009      	b.n	8008a80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2100      	movs	r1, #0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fec1 	bl	80097fa <SDMMC_GetResponse>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	2300      	movs	r3, #0
 8008a96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 feab 	bl	80097fa <SDMMC_GetResponse>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aae:	d102      	bne.n	8008ab6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ab0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ab4:	e02f      	b.n	8008b16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ab6:	f107 030c 	add.w	r3, r7, #12
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f879 	bl	8008bb4 <SD_FindSCR>
 8008ac2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	e023      	b.n	8008b16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01c      	beq.n	8008b12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f001 f814 	bl	8009b12 <SDMMC_CmdAppCommand>
 8008aea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	e00f      	b.n	8008b16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2102      	movs	r1, #2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 f84b 	bl	8009b98 <SDMMC_CmdBusWidth>
 8008b02:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	e003      	b.n	8008b16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e001      	b.n	8008b16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b086      	sub	sp, #24
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2100      	movs	r1, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fe60 	bl	80097fa <SDMMC_GetResponse>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b44:	d102      	bne.n	8008b4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b4a:	e02f      	b.n	8008bac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b4c:	f107 030c 	add.w	r3, r7, #12
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f82e 	bl	8008bb4 <SD_FindSCR>
 8008b58:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	e023      	b.n	8008bac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d01c      	beq.n	8008ba8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	041b      	lsls	r3, r3, #16
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f000 ffc9 	bl	8009b12 <SDMMC_CmdAppCommand>
 8008b80:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	e00f      	b.n	8008bac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 f800 	bl	8009b98 <SDMMC_CmdBusWidth>
 8008b98:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	e003      	b.n	8008bac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e001      	b.n	8008bac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ba8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	@ 0x38
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bbe:	f7f8 fe55 	bl	800186c <HAL_GetTick>
 8008bc2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60bb      	str	r3, [r7, #8]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2108      	movs	r1, #8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fe4c 	bl	8009878 <SDMMC_CmdBlockLength>
 8008be0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <SD_FindSCR+0x38>
  {
    return errorstate;
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	e0ad      	b.n	8008d48 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf4:	041b      	lsls	r3, r3, #16
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f000 ff8a 	bl	8009b12 <SDMMC_CmdAppCommand>
 8008bfe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	e09e      	b.n	8008d48 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c10:	2308      	movs	r3, #8
 8008c12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c14:	2330      	movs	r3, #48	@ 0x30
 8008c16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c20:	2301      	movs	r3, #1
 8008c22:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f107 0210 	add.w	r2, r7, #16
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fdf6 	bl	8009820 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 ffd0 	bl	8009bde <SDMMC_CmdSendSCR>
 8008c3e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d027      	beq.n	8008c96 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c48:	e07e      	b.n	8008d48 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d113      	bne.n	8008c80 <SD_FindSCR+0xcc>
 8008c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d110      	bne.n	8008c80 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fd54 	bl	8009710 <SDMMC_ReadFIFO>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fd4d 	bl	8009710 <SDMMC_ReadFIFO>
 8008c76:	4603      	mov	r3, r0
 8008c78:	60fb      	str	r3, [r7, #12]
      index++;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c80:	f7f8 fdf4 	bl	800186c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	d102      	bne.n	8008c96 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c94:	e058      	b.n	8008d48 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c9c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0d1      	beq.n	8008c4a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2208      	movs	r2, #8
 8008cba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	e043      	b.n	8008d48 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e036      	b.n	8008d48 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2220      	movs	r2, #32
 8008cee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	e029      	b.n	8008d48 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <SD_FindSCR+0x19c>)
 8008cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	061a      	lsls	r2, r3, #24
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	0a1b      	lsrs	r3, r3, #8
 8008d0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	0e1b      	lsrs	r3, r3, #24
 8008d18:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	601a      	str	r2, [r3, #0]
    scr++;
 8008d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d20:	3304      	adds	r3, #4
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	061a      	lsls	r2, r3, #24
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	0a1b      	lsrs	r3, r3, #8
 8008d36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	0e1b      	lsrs	r3, r3, #24
 8008d40:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d44:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3738      	adds	r7, #56	@ 0x38
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	18000f3a 	.word	0x18000f3a

08008d54 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d66:	2b1f      	cmp	r3, #31
 8008d68:	d936      	bls.n	8008dd8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	e027      	b.n	8008dc0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fccb 	bl	8009710 <SDMMC_ReadFIFO>
 8008d7a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	3301      	adds	r3, #1
 8008d88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	0a1b      	lsrs	r3, r3, #8
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	3301      	adds	r3, #1
 8008d98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	0c1b      	lsrs	r3, r3, #16
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	0e1b      	lsrs	r3, r3, #24
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3301      	adds	r3, #1
 8008db8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b07      	cmp	r3, #7
 8008dc4:	d9d4      	bls.n	8008d70 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	f1a3 0220 	sub.w	r2, r3, #32
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	2b1f      	cmp	r3, #31
 8008df4:	d93a      	bls.n	8008e6c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	e02b      	b.n	8008e54 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3301      	adds	r3, #1
 8008e06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	021a      	lsls	r2, r3, #8
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	3301      	adds	r3, #1
 8008e18:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	041a      	lsls	r2, r3, #16
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	061a      	lsls	r2, r3, #24
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f107 020c 	add.w	r2, r7, #12
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fc6e 	bl	800972a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	3301      	adds	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2b07      	cmp	r3, #7
 8008e58:	d9d0      	bls.n	8008dfc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	f1a3 0220 	sub.w	r2, r3, #32
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	621a      	str	r2, [r3, #32]
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e10f      	b.n	80090f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a87      	ldr	r2, [pc, #540]	@ (8009100 <HAL_SPI_Init+0x23c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00f      	beq.n	8008f06 <HAL_SPI_Init+0x42>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a86      	ldr	r2, [pc, #536]	@ (8009104 <HAL_SPI_Init+0x240>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00a      	beq.n	8008f06 <HAL_SPI_Init+0x42>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a84      	ldr	r2, [pc, #528]	@ (8009108 <HAL_SPI_Init+0x244>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d005      	beq.n	8008f06 <HAL_SPI_Init+0x42>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b0f      	cmp	r3, #15
 8008f00:	d901      	bls.n	8008f06 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e0f7      	b.n	80090f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fbbc 	bl	8009684 <SPI_GetPacketSize>
 8008f0c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a7b      	ldr	r2, [pc, #492]	@ (8009100 <HAL_SPI_Init+0x23c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00c      	beq.n	8008f32 <HAL_SPI_Init+0x6e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a79      	ldr	r2, [pc, #484]	@ (8009104 <HAL_SPI_Init+0x240>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <HAL_SPI_Init+0x6e>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a78      	ldr	r2, [pc, #480]	@ (8009108 <HAL_SPI_Init+0x244>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d002      	beq.n	8008f32 <HAL_SPI_Init+0x6e>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d811      	bhi.n	8008f56 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f36:	4a72      	ldr	r2, [pc, #456]	@ (8009100 <HAL_SPI_Init+0x23c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a70      	ldr	r2, [pc, #448]	@ (8009104 <HAL_SPI_Init+0x240>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_SPI_Init+0x8c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8009108 <HAL_SPI_Init+0x244>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d104      	bne.n	8008f5a <HAL_SPI_Init+0x96>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b10      	cmp	r3, #16
 8008f54:	d901      	bls.n	8008f5a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e0cd      	b.n	80090f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f8 fb02 	bl	8001578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008f96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fa0:	d119      	bne.n	8008fd6 <HAL_SPI_Init+0x112>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008faa:	d103      	bne.n	8008fb4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10c      	bne.n	8008fd6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fc4:	d107      	bne.n	8008fd6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008fd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00f      	beq.n	8009002 <HAL_SPI_Init+0x13e>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b06      	cmp	r3, #6
 8008fe8:	d90b      	bls.n	8009002 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e007      	b.n	8009012 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009010:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69da      	ldr	r2, [r3, #28]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	431a      	orrs	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	431a      	orrs	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009024:	ea42 0103 	orr.w	r1, r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68da      	ldr	r2, [r3, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	431a      	orrs	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009072:	ea42 0103 	orr.w	r1, r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d113      	bne.n	80090b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800909c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40013000 	.word	0x40013000
 8009104:	40003800 	.word	0x40003800
 8009108:	40003c00 	.word	0x40003c00

0800910c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3320      	adds	r3, #32
 8009122:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009124:	f7f8 fba2 	bl	800186c <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b01      	cmp	r3, #1
 8009134:	d001      	beq.n	800913a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009136:	2302      	movs	r3, #2
 8009138:	e1d1      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <HAL_SPI_Transmit+0x3a>
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e1c9      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_SPI_Transmit+0x4c>
 8009154:	2302      	movs	r3, #2
 8009156:	e1c2      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2203      	movs	r2, #3
 8009164:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	88fa      	ldrh	r2, [r7, #6]
 800917a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	88fa      	ldrh	r2, [r7, #6]
 8009182:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80091b0:	d108      	bne.n	80091c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e009      	b.n	80091d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80091d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4b96      	ldr	r3, [pc, #600]	@ (8009438 <HAL_SPI_Transmit+0x32c>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	88f9      	ldrh	r1, [r7, #6]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0201 	orr.w	r2, r2, #1
 80091fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009204:	d107      	bne.n	8009216 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	2b0f      	cmp	r3, #15
 800921c:	d947      	bls.n	80092ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800921e:	e03f      	b.n	80092a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b02      	cmp	r3, #2
 800922c:	d114      	bne.n	8009258 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6812      	ldr	r2, [r2, #0]
 8009238:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009256:	e023      	b.n	80092a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009258:	f7f8 fb08 	bl	800186c <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d803      	bhi.n	8009270 <HAL_SPI_Transmit+0x164>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d102      	bne.n	8009276 <HAL_SPI_Transmit+0x16a>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d114      	bne.n	80092a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f936 	bl	80094e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009282:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e11e      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1b9      	bne.n	8009220 <HAL_SPI_Transmit+0x114>
 80092ac:	e0f1      	b.n	8009492 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2b07      	cmp	r3, #7
 80092b4:	f240 80e6 	bls.w	8009484 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092b8:	e05d      	b.n	8009376 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d132      	bne.n	800932e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d918      	bls.n	8009306 <HAL_SPI_Transmit+0x1fa>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d014      	beq.n	8009306 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ec:	1d1a      	adds	r2, r3, #4
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b02      	subs	r3, #2
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009304:	e037      	b.n	8009376 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009314:	1c9a      	adds	r2, r3, #2
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800932c:	e023      	b.n	8009376 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800932e:	f7f8 fa9d 	bl	800186c <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d803      	bhi.n	8009346 <HAL_SPI_Transmit+0x23a>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009344:	d102      	bne.n	800934c <HAL_SPI_Transmit+0x240>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d114      	bne.n	8009376 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f8cb 	bl	80094e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009358:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e0b3      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800937c:	b29b      	uxth	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d19b      	bne.n	80092ba <HAL_SPI_Transmit+0x1ae>
 8009382:	e086      	b.n	8009492 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b02      	cmp	r3, #2
 8009390:	d154      	bne.n	800943c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b03      	cmp	r3, #3
 800939c:	d918      	bls.n	80093d0 <HAL_SPI_Transmit+0x2c4>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a2:	2b40      	cmp	r3, #64	@ 0x40
 80093a4:	d914      	bls.n	80093d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6812      	ldr	r2, [r2, #0]
 80093b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b6:	1d1a      	adds	r2, r3, #4
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b04      	subs	r3, #4
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80093ce:	e059      	b.n	8009484 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d917      	bls.n	800940c <HAL_SPI_Transmit+0x300>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d013      	beq.n	800940c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093e8:	881a      	ldrh	r2, [r3, #0]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3b02      	subs	r3, #2
 8009402:	b29a      	uxth	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800940a:	e03b      	b.n	8009484 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3320      	adds	r3, #32
 8009416:	7812      	ldrb	r2, [r2, #0]
 8009418:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800942a:	b29b      	uxth	r3, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009436:	e025      	b.n	8009484 <HAL_SPI_Transmit+0x378>
 8009438:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800943c:	f7f8 fa16 	bl	800186c <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d803      	bhi.n	8009454 <HAL_SPI_Transmit+0x348>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d102      	bne.n	800945a <HAL_SPI_Transmit+0x34e>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d114      	bne.n	8009484 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f844 	bl	80094e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009466:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e02c      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	f47f af79 	bne.w	8009384 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2200      	movs	r2, #0
 800949a:	2108      	movs	r1, #8
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f8c3 	bl	8009628 <SPI_WaitOnFlagUntilTimeout>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f815 	bl	80094e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e000      	b.n	80094de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80094dc:	2300      	movs	r3, #0
  }
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699a      	ldr	r2, [r3, #24]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0208 	orr.w	r2, r2, #8
 8009506:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699a      	ldr	r2, [r3, #24]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0210 	orr.w	r2, r2, #16
 8009516:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6919      	ldr	r1, [r3, #16]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b3c      	ldr	r3, [pc, #240]	@ (8009624 <SPI_CloseTransfer+0x13c>)
 8009534:	400b      	ands	r3, r1
 8009536:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009546:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b04      	cmp	r3, #4
 8009552:	d014      	beq.n	800957e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00f      	beq.n	800957e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009564:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	699a      	ldr	r2, [r3, #24]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 0220 	orr.w	r2, r2, #32
 800957c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d014      	beq.n	80095b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00f      	beq.n	80095b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800959a:	f043 0204 	orr.w	r2, r3, #4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	699a      	ldr	r2, [r3, #24]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00f      	beq.n	80095de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095c4:	f043 0201 	orr.w	r2, r3, #1
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00f      	beq.n	8009608 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095ee:	f043 0208 	orr.w	r2, r3, #8
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009606:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	fffffc90 	.word	0xfffffc90

08009628 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009638:	e010      	b.n	800965c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800963a:	f7f8 f917 	bl	800186c <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d803      	bhi.n	8009652 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d102      	bne.n	8009658 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e00f      	b.n	800967c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	695a      	ldr	r2, [r3, #20]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4013      	ands	r3, r2
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	429a      	cmp	r2, r3
 800966a:	bf0c      	ite	eq
 800966c:	2301      	moveq	r3, #1
 800966e:	2300      	movne	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	429a      	cmp	r2, r3
 8009678:	d0df      	beq.n	800963a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009690:	095b      	lsrs	r3, r3, #5
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3307      	adds	r3, #7
 80096a2:	08db      	lsrs	r3, r3, #3
 80096a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80096bc:	b084      	sub	sp, #16
 80096be:	b480      	push	{r7}
 80096c0:	b085      	sub	sp, #20
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	f107 001c 	add.w	r0, r7, #28
 80096ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80096d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80096d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80096d6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80096da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80096dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80096de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80096e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	4b07      	ldr	r3, [pc, #28]	@ (800970c <SDMMC_Init+0x50>)
 80096f0:	4013      	ands	r3, r2
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	b004      	add	sp, #16
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	ffc02c00 	.word	0xffc02c00

08009710 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f043 0203 	orr.w	r2, r3, #3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0303 	and.w	r3, r3, #3
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80097b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80097b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68da      	ldr	r2, [r3, #12]
 80097c2:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <SDMMC_SendCommand+0x50>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	fffee0c0 	.word	0xfffee0c0

080097e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	b2db      	uxtb	r3, r3
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3314      	adds	r3, #20
 8009808:	461a      	mov	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	4413      	add	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009846:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800984c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009852:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800986a:	2300      	movs	r3, #0

}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009886:	2310      	movs	r3, #16
 8009888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800988a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800988e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009898:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ff73 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80098a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098aa:	2110      	movs	r1, #16
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa5f 	bl	8009d70 <SDMMC_GetCmdResp1>
 80098b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098b4:	69fb      	ldr	r3, [r7, #28]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b088      	sub	sp, #32
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80098cc:	2311      	movs	r3, #17
 80098ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff ff50 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f0:	2111      	movs	r1, #17
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa3c 	bl	8009d70 <SDMMC_GetCmdResp1>
 80098f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098fa:	69fb      	ldr	r3, [r7, #28]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3720      	adds	r7, #32
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009912:	2312      	movs	r3, #18
 8009914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800991a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ff2d 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009936:	2112      	movs	r1, #18
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fa19 	bl	8009d70 <SDMMC_GetCmdResp1>
 800993e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009940:	69fb      	ldr	r3, [r7, #28]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b088      	sub	sp, #32
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009958:	2318      	movs	r3, #24
 800995a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800995c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009962:	2300      	movs	r3, #0
 8009964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800996a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff ff0a 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800997c:	2118      	movs	r1, #24
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9f6 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800999e:	2319      	movs	r3, #25
 80099a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fee7 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80099be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099c2:	2119      	movs	r1, #25
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9d3 	bl	8009d70 <SDMMC_GetCmdResp1>
 80099ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099cc:	69fb      	ldr	r3, [r7, #28]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3720      	adds	r7, #32
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099e4:	230c      	movs	r3, #12
 80099e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099f6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a10:	f107 0308 	add.w	r3, r7, #8
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff feb8 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a4c <SDMMC_CmdStopTransfer+0x74>)
 8009a1e:	210c      	movs	r1, #12
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9a5 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009a26:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a3a:	d101      	bne.n	8009a40 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009a40:	69fb      	ldr	r3, [r7, #28]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	05f5e100 	.word	0x05f5e100

08009a50 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a5e:	2307      	movs	r3, #7
 8009a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a72:	f107 0308 	add.w	r3, r7, #8
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fe87 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a82:	2107      	movs	r1, #7
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f973 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fe66 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fb97 	bl	800a1f4 <SDMMC_GetCmdError>
 8009ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b088      	sub	sp, #32
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ada:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009af2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fe46 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb29 	bl	800a158 <SDMMC_GetCmdResp7>
 8009b06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b08:	69fb      	ldr	r3, [r7, #28]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b20:	2337      	movs	r3, #55	@ 0x37
 8009b22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b34:	f107 0308 	add.w	r3, r7, #8
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff fe26 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b44:	2137      	movs	r1, #55	@ 0x37
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f912 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b66:	2329      	movs	r3, #41	@ 0x29
 8009b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009b78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fe03 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa2e 	bl	8009fe8 <SDMMC_GetCmdResp3>
 8009b8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ba6:	2306      	movs	r3, #6
 8009ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bba:	f107 0308 	add.w	r3, r7, #8
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff fde3 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bca:	2106      	movs	r1, #6
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8cf 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b088      	sub	sp, #32
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009bea:	2333      	movs	r3, #51	@ 0x33
 8009bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fdc1 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c0e:	2133      	movs	r1, #51	@ 0x33
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8ad 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c18:	69fb      	ldr	r3, [r7, #28]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3720      	adds	r7, #32
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b088      	sub	sp, #32
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff fd9f 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f980 	bl	8009f54 <SDMMC_GetCmdResp2>
 8009c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c56:	69fb      	ldr	r3, [r7, #28]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c6e:	2309      	movs	r3, #9
 8009c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c82:	f107 0308 	add.w	r3, r7, #8
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff fd7f 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f960 	bl	8009f54 <SDMMC_GetCmdResp2>
 8009c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c96:	69fb      	ldr	r3, [r7, #28]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fd5f 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	2103      	movs	r1, #3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9c8 	bl	800a068 <SDMMC_GetCmdResp6>
 8009cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cda:	69fb      	ldr	r3, [r7, #28]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3720      	adds	r7, #32
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009cf2:	230d      	movs	r3, #13
 8009cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff fd3d 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d16:	210d      	movs	r1, #13
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f829 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d20:	69fb      	ldr	r3, [r7, #28]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b088      	sub	sp, #32
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009d36:	230d      	movs	r3, #13
 8009d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d40:	2300      	movs	r3, #0
 8009d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d4a:	f107 0308 	add.w	r3, r7, #8
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff fd1b 	bl	800978c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5a:	210d      	movs	r1, #13
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f807 	bl	8009d70 <SDMMC_GetCmdResp1>
 8009d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d7e:	4b70      	ldr	r3, [pc, #448]	@ (8009f40 <SDMMC_GetCmdResp1+0x1d0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a70      	ldr	r2, [pc, #448]	@ (8009f44 <SDMMC_GetCmdResp1+0x1d4>)
 8009d84:	fba2 2303 	umull	r2, r3, r2, r3
 8009d88:	0a5a      	lsrs	r2, r3, #9
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	fb02 f303 	mul.w	r3, r2, r3
 8009d90:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	61fa      	str	r2, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009da0:	e0c9      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	4b67      	ldr	r3, [pc, #412]	@ (8009f48 <SDMMC_GetCmdResp1+0x1d8>)
 8009dac:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0ef      	beq.n	8009d92 <SDMMC_GetCmdResp1+0x22>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1ea      	bne.n	8009d92 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2204      	movs	r2, #4
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dce:	2304      	movs	r3, #4
 8009dd0:	e0b1      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d004      	beq.n	8009de8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2201      	movs	r2, #1
 8009de2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e0a6      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4a58      	ldr	r2, [pc, #352]	@ (8009f4c <SDMMC_GetCmdResp1+0x1dc>)
 8009dec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fcf6 	bl	80097e0 <SDMMC_GetCommandResponse>
 8009df4:	4603      	mov	r3, r0
 8009df6:	461a      	mov	r2, r3
 8009df8:	7afb      	ldrb	r3, [r7, #11]
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d001      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e099      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e02:	2100      	movs	r1, #0
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fcf8 	bl	80097fa <SDMMC_GetResponse>
 8009e0a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4b50      	ldr	r3, [pc, #320]	@ (8009f50 <SDMMC_GetCmdResp1+0x1e0>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e08d      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	da02      	bge.n	8009e26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e24:	e087      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	e080      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e3e:	2380      	movs	r3, #128	@ 0x80
 8009e40:	e079      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e50:	e071      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e60:	e069      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e70:	e061      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e80:	e059      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e90:	e051      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ea0:	e049      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009eac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009eb0:	e041      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec0:	e039      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ecc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009ed0:	e031      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009edc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009ee0:	e029      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009eec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ef0:	e021      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f00:	e019      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f10:	e011      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f20:	e009      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009f30:	e001      	b.n	8009f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	24000000 	.word	0x24000000
 8009f44:	10624dd3 	.word	0x10624dd3
 8009f48:	00200045 	.word	0x00200045
 8009f4c:	002000c5 	.word	0x002000c5
 8009f50:	fdffe008 	.word	0xfdffe008

08009f54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8009fdc <SDMMC_GetCmdResp2+0x88>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe0 <SDMMC_GetCmdResp2+0x8c>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	0a5b      	lsrs	r3, r3, #9
 8009f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f6c:	fb02 f303 	mul.w	r3, r2, r3
 8009f70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1e5a      	subs	r2, r3, #1
 8009f76:	60fa      	str	r2, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f80:	e026      	b.n	8009fd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0ef      	beq.n	8009f72 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1ea      	bne.n	8009f72 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2204      	movs	r2, #4
 8009fac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fae:	2304      	movs	r3, #4
 8009fb0:	e00e      	b.n	8009fd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e003      	b.n	8009fd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a06      	ldr	r2, [pc, #24]	@ (8009fe4 <SDMMC_GetCmdResp2+0x90>)
 8009fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	24000000 	.word	0x24000000
 8009fe0:	10624dd3 	.word	0x10624dd3
 8009fe4:	002000c5 	.word	0x002000c5

08009fe8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800a05c <SDMMC_GetCmdResp3+0x74>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1a      	ldr	r2, [pc, #104]	@ (800a060 <SDMMC_GetCmdResp3+0x78>)
 8009ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffa:	0a5b      	lsrs	r3, r3, #9
 8009ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a000:	fb02 f303 	mul.w	r3, r2, r3
 800a004:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	60fa      	str	r2, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a010:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a014:	e01b      	b.n	800a04e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a01a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0ef      	beq.n	800a006 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1ea      	bne.n	800a006 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2204      	movs	r2, #4
 800a040:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a042:	2304      	movs	r3, #4
 800a044:	e003      	b.n	800a04e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a06      	ldr	r2, [pc, #24]	@ (800a064 <SDMMC_GetCmdResp3+0x7c>)
 800a04a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	24000000 	.word	0x24000000
 800a060:	10624dd3 	.word	0x10624dd3
 800a064:	002000c5 	.word	0x002000c5

0800a068 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	460b      	mov	r3, r1
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a076:	4b35      	ldr	r3, [pc, #212]	@ (800a14c <SDMMC_GetCmdResp6+0xe4>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a35      	ldr	r2, [pc, #212]	@ (800a150 <SDMMC_GetCmdResp6+0xe8>)
 800a07c:	fba2 2303 	umull	r2, r3, r2, r3
 800a080:	0a5b      	lsrs	r3, r3, #9
 800a082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	1e5a      	subs	r2, r3, #1
 800a090:	61fa      	str	r2, [r7, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a096:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a09a:	e052      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0ef      	beq.n	800a08c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1ea      	bne.n	800a08c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d004      	beq.n	800a0cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2204      	movs	r2, #4
 800a0c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0c8:	2304      	movs	r3, #4
 800a0ca:	e03a      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e02f      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fb7c 	bl	80097e0 <SDMMC_GetCommandResponse>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d001      	beq.n	800a0f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e025      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4a16      	ldr	r2, [pc, #88]	@ (800a154 <SDMMC_GetCmdResp6+0xec>)
 800a0fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7ff fb7b 	bl	80097fa <SDMMC_GetResponse>
 800a104:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	e011      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a12c:	e009      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a13c:	e001      	b.n	800a142 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a13e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	24000000 	.word	0x24000000
 800a150:	10624dd3 	.word	0x10624dd3
 800a154:	002000c5 	.word	0x002000c5

0800a158 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a160:	4b22      	ldr	r3, [pc, #136]	@ (800a1ec <SDMMC_GetCmdResp7+0x94>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a22      	ldr	r2, [pc, #136]	@ (800a1f0 <SDMMC_GetCmdResp7+0x98>)
 800a166:	fba2 2303 	umull	r2, r3, r2, r3
 800a16a:	0a5b      	lsrs	r3, r3, #9
 800a16c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a170:	fb02 f303 	mul.w	r3, r2, r3
 800a174:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1e5a      	subs	r2, r3, #1
 800a17a:	60fa      	str	r2, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d102      	bne.n	800a186 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a180:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a184:	e02c      	b.n	800a1e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a18a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0ef      	beq.n	800a176 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1ea      	bne.n	800a176 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1b2:	2304      	movs	r3, #4
 800a1b4:	e014      	b.n	800a1e0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e009      	b.n	800a1e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2240      	movs	r2, #64	@ 0x40
 800a1dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1de:	2300      	movs	r3, #0

}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	24000000 	.word	0x24000000
 800a1f0:	10624dd3 	.word	0x10624dd3

0800a1f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1fc:	4b11      	ldr	r3, [pc, #68]	@ (800a244 <SDMMC_GetCmdError+0x50>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a11      	ldr	r2, [pc, #68]	@ (800a248 <SDMMC_GetCmdError+0x54>)
 800a202:	fba2 2303 	umull	r2, r3, r2, r3
 800a206:	0a5b      	lsrs	r3, r3, #9
 800a208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1e5a      	subs	r2, r3, #1
 800a216:	60fa      	str	r2, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a21c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a220:	e009      	b.n	800a236 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f1      	beq.n	800a212 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a06      	ldr	r2, [pc, #24]	@ (800a24c <SDMMC_GetCmdError+0x58>)
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	24000000 	.word	0x24000000
 800a248:	10624dd3 	.word	0x10624dd3
 800a24c:	002000c5 	.word	0x002000c5

0800a250 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a254:	4904      	ldr	r1, [pc, #16]	@ (800a268 <MX_FATFS_Init+0x18>)
 800a256:	4805      	ldr	r0, [pc, #20]	@ (800a26c <MX_FATFS_Init+0x1c>)
 800a258:	f002 fc52 	bl	800cb00 <FATFS_LinkDriver>
 800a25c:	4603      	mov	r3, r0
 800a25e:	461a      	mov	r2, r3
 800a260:	4b03      	ldr	r3, [pc, #12]	@ (800a270 <MX_FATFS_Init+0x20>)
 800a262:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a264:	bf00      	nop
 800a266:	bd80      	pop	{r7, pc}
 800a268:	240116e8 	.word	0x240116e8
 800a26c:	0800d9d8 	.word	0x0800d9d8
 800a270:	240116e4 	.word	0x240116e4

0800a274 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a278:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a28e:	f000 f885 	bl	800a39c <BSP_SD_IsDetected>
 800a292:	4603      	mov	r3, r0
 800a294:	2b01      	cmp	r3, #1
 800a296:	d001      	beq.n	800a29c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a298:	2302      	movs	r3, #2
 800a29a:	e012      	b.n	800a2c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a29c:	480b      	ldr	r0, [pc, #44]	@ (800a2cc <BSP_SD_Init+0x48>)
 800a29e:	f7fd f9ad 	bl	80075fc <HAL_SD_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a2ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a2b0:	4806      	ldr	r0, [pc, #24]	@ (800a2cc <BSP_SD_Init+0x48>)
 800a2b2:	f7fe f863 	bl	800837c <HAL_SD_ConfigWideBusOperation>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	240115dc 	.word	0x240115dc

0800a2d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	68f9      	ldr	r1, [r7, #12]
 800a2e6:	4806      	ldr	r0, [pc, #24]	@ (800a300 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a2e8:	f7fd faa8 	bl	800783c <HAL_SD_ReadBlocks_DMA>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	240115dc 	.word	0x240115dc

0800a304 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	4806      	ldr	r0, [pc, #24]	@ (800a334 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a31c:	f7fd fb36 	bl	800798c <HAL_SD_WriteBlocks_DMA>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	240115dc 	.word	0x240115dc

0800a338 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a33c:	4805      	ldr	r0, [pc, #20]	@ (800a354 <BSP_SD_GetCardState+0x1c>)
 800a33e:	f7fe f92f 	bl	80085a0 <HAL_SD_GetCardState>
 800a342:	4603      	mov	r3, r0
 800a344:	2b04      	cmp	r3, #4
 800a346:	bf14      	ite	ne
 800a348:	2301      	movne	r3, #1
 800a34a:	2300      	moveq	r3, #0
 800a34c:	b2db      	uxtb	r3, r3
}
 800a34e:	4618      	mov	r0, r3
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	240115dc 	.word	0x240115dc

0800a358 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4803      	ldr	r0, [pc, #12]	@ (800a370 <BSP_SD_GetCardInfo+0x18>)
 800a364:	f7fd ffde 	bl	8008324 <HAL_SD_GetCardInfo>
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	240115dc 	.word	0x240115dc

0800a374 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a37c:	f000 f9a0 	bl	800a6c0 <BSP_SD_WriteCpltCallback>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a390:	f000 f9a2 	bl	800a6d8 <BSP_SD_ReadCpltCallback>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a3a6:	f000 f80b 	bl	800a3c0 <BSP_PlatformIsDetected>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	b2db      	uxtb	r3, r3
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a3ce:	4806      	ldr	r0, [pc, #24]	@ (800a3e8 <BSP_PlatformIsDetected+0x28>)
 800a3d0:	f7f8 f814 	bl	80023fc <HAL_GPIO_ReadPin>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a3de:	79fb      	ldrb	r3, [r7, #7]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	58022000 	.word	0x58022000

0800a3ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a3f4:	f7f7 fa3a 	bl	800186c <HAL_GetTick>
 800a3f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a3fa:	e006      	b.n	800a40a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3fc:	f7ff ff9c 	bl	800a338 <BSP_SD_GetCardState>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a406:	2300      	movs	r3, #0
 800a408:	e009      	b.n	800a41e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a40a:	f7f7 fa2f 	bl	800186c <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d8f0      	bhi.n	800a3fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a41a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	4603      	mov	r3, r0
 800a430:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a432:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <SD_CheckStatus+0x38>)
 800a434:	2201      	movs	r2, #1
 800a436:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a438:	f7ff ff7e 	bl	800a338 <BSP_SD_GetCardState>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d107      	bne.n	800a452 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a442:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <SD_CheckStatus+0x38>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f023 0301 	bic.w	r3, r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	4b04      	ldr	r3, [pc, #16]	@ (800a460 <SD_CheckStatus+0x38>)
 800a450:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a452:	4b03      	ldr	r3, [pc, #12]	@ (800a460 <SD_CheckStatus+0x38>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b2db      	uxtb	r3, r3
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	24000015 	.word	0x24000015

0800a464 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a46e:	f7ff ff09 	bl	800a284 <BSP_SD_Init>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d107      	bne.n	800a488 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7ff ffd4 	bl	800a428 <SD_CheckStatus>
 800a480:	4603      	mov	r3, r0
 800a482:	461a      	mov	r2, r3
 800a484:	4b04      	ldr	r3, [pc, #16]	@ (800a498 <SD_initialize+0x34>)
 800a486:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a488:	4b03      	ldr	r3, [pc, #12]	@ (800a498 <SD_initialize+0x34>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	b2db      	uxtb	r3, r3
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	24000015 	.word	0x24000015

0800a49c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff ffbd 	bl	800a428 <SD_CheckStatus>
 800a4ae:	4603      	mov	r3, r0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a4cc:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a4d0:	f7ff ff8c 	bl	800a3ec <SD_CheckStatusWithTimeout>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da01      	bge.n	800a4de <SD_read+0x26>
  {
    return res;
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	e03b      	b.n	800a556 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	68b8      	ldr	r0, [r7, #8]
 800a4e4:	f7ff fef4 	bl	800a2d0 <BSP_SD_ReadBlocks_DMA>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d132      	bne.n	800a554 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a560 <SD_read+0xa8>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a4f4:	f7f7 f9ba 	bl	800186c <HAL_GetTick>
 800a4f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a4fa:	bf00      	nop
 800a4fc:	4b18      	ldr	r3, [pc, #96]	@ (800a560 <SD_read+0xa8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d108      	bne.n	800a516 <SD_read+0x5e>
 800a504:	f7f7 f9b2 	bl	800186c <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a512:	4293      	cmp	r3, r2
 800a514:	d9f2      	bls.n	800a4fc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a516:	4b12      	ldr	r3, [pc, #72]	@ (800a560 <SD_read+0xa8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
 800a522:	e017      	b.n	800a554 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a524:	4b0e      	ldr	r3, [pc, #56]	@ (800a560 <SD_read+0xa8>)
 800a526:	2200      	movs	r2, #0
 800a528:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a52a:	f7f7 f99f 	bl	800186c <HAL_GetTick>
 800a52e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a530:	e007      	b.n	800a542 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a532:	f7ff ff01 	bl	800a338 <BSP_SD_GetCardState>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d102      	bne.n	800a542 <SD_read+0x8a>
          {
            res = RES_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a540:	e008      	b.n	800a554 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a542:	f7f7 f993 	bl	800186c <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a550:	4293      	cmp	r3, r2
 800a552:	d9ee      	bls.n	800a532 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	240116f0 	.word	0x240116f0

0800a564 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	607a      	str	r2, [r7, #4]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a578:	4b24      	ldr	r3, [pc, #144]	@ (800a60c <SD_write+0xa8>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a57e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a582:	f7ff ff33 	bl	800a3ec <SD_CheckStatusWithTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	da01      	bge.n	800a590 <SD_write+0x2c>
  {
    return res;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	e038      	b.n	800a602 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	68b8      	ldr	r0, [r7, #8]
 800a596:	f7ff feb5 	bl	800a304 <BSP_SD_WriteBlocks_DMA>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d12f      	bne.n	800a600 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a5a0:	f7f7 f964 	bl	800186c <HAL_GetTick>
 800a5a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a5a6:	bf00      	nop
 800a5a8:	4b18      	ldr	r3, [pc, #96]	@ (800a60c <SD_write+0xa8>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d108      	bne.n	800a5c2 <SD_write+0x5e>
 800a5b0:	f7f7 f95c 	bl	800186c <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d9f2      	bls.n	800a5a8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a5c2:	4b12      	ldr	r3, [pc, #72]	@ (800a60c <SD_write+0xa8>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	75fb      	strb	r3, [r7, #23]
 800a5ce:	e017      	b.n	800a600 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a60c <SD_write+0xa8>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a5d6:	f7f7 f949 	bl	800186c <HAL_GetTick>
 800a5da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a5dc:	e007      	b.n	800a5ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5de:	f7ff feab 	bl	800a338 <BSP_SD_GetCardState>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <SD_write+0x8a>
          {
            res = RES_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	75fb      	strb	r3, [r7, #23]
            break;
 800a5ec:	e008      	b.n	800a600 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a5ee:	f7f7 f93d 	bl	800186c <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d9ee      	bls.n	800a5de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	240116ec 	.word	0x240116ec

0800a610 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08c      	sub	sp, #48	@ 0x30
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	603a      	str	r2, [r7, #0]
 800a61a:	71fb      	strb	r3, [r7, #7]
 800a61c:	460b      	mov	r3, r1
 800a61e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a626:	4b25      	ldr	r3, [pc, #148]	@ (800a6bc <SD_ioctl+0xac>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <SD_ioctl+0x28>
 800a634:	2303      	movs	r3, #3
 800a636:	e03c      	b.n	800a6b2 <SD_ioctl+0xa2>

  switch (cmd)
 800a638:	79bb      	ldrb	r3, [r7, #6]
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d834      	bhi.n	800a6a8 <SD_ioctl+0x98>
 800a63e:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <SD_ioctl+0x34>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a65d 	.word	0x0800a65d
 800a64c:	0800a675 	.word	0x0800a675
 800a650:	0800a68f 	.word	0x0800a68f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a65a:	e028      	b.n	800a6ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff fe79 	bl	800a358 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a666:	6a3a      	ldr	r2, [r7, #32]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a672:	e01c      	b.n	800a6ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a674:	f107 0308 	add.w	r3, r7, #8
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff fe6d 	bl	800a358 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	b29a      	uxth	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a68c:	e00f      	b.n	800a6ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a68e:	f107 0308 	add.w	r3, r7, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fe60 	bl	800a358 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	0a5a      	lsrs	r2, r3, #9
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a6a6:	e002      	b.n	800a6ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a6a8:	2304      	movs	r3, #4
 800a6aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3730      	adds	r7, #48	@ 0x30
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	24000015 	.word	0x24000015

0800a6c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a6c4:	4b03      	ldr	r3, [pc, #12]	@ (800a6d4 <BSP_SD_WriteCpltCallback+0x14>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
}
 800a6ca:	bf00      	nop
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	240116ec 	.word	0x240116ec

0800a6d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a6dc:	4b03      	ldr	r3, [pc, #12]	@ (800a6ec <BSP_SD_ReadCpltCallback+0x14>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	240116f0 	.word	0x240116f0

0800a6f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	4a08      	ldr	r2, [pc, #32]	@ (800a720 <disk_status+0x30>)
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	79fa      	ldrb	r2, [r7, #7]
 800a708:	4905      	ldr	r1, [pc, #20]	@ (800a720 <disk_status+0x30>)
 800a70a:	440a      	add	r2, r1
 800a70c:	7a12      	ldrb	r2, [r2, #8]
 800a70e:	4610      	mov	r0, r2
 800a710:	4798      	blx	r3
 800a712:	4603      	mov	r3, r0
 800a714:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	2401171c 	.word	0x2401171c

0800a724 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	4a0e      	ldr	r2, [pc, #56]	@ (800a770 <disk_initialize+0x4c>)
 800a736:	5cd3      	ldrb	r3, [r2, r3]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d114      	bne.n	800a766 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4a0c      	ldr	r2, [pc, #48]	@ (800a770 <disk_initialize+0x4c>)
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	79fa      	ldrb	r2, [r7, #7]
 800a74a:	4909      	ldr	r1, [pc, #36]	@ (800a770 <disk_initialize+0x4c>)
 800a74c:	440a      	add	r2, r1
 800a74e:	7a12      	ldrb	r2, [r2, #8]
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d103      	bne.n	800a766 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	4a03      	ldr	r2, [pc, #12]	@ (800a770 <disk_initialize+0x4c>)
 800a762:	2101      	movs	r1, #1
 800a764:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a766:	7bfb      	ldrb	r3, [r7, #15]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	2401171c 	.word	0x2401171c

0800a774 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	4a0a      	ldr	r2, [pc, #40]	@ (800a7b0 <disk_read+0x3c>)
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	689c      	ldr	r4, [r3, #8]
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	4a07      	ldr	r2, [pc, #28]	@ (800a7b0 <disk_read+0x3c>)
 800a794:	4413      	add	r3, r2
 800a796:	7a18      	ldrb	r0, [r3, #8]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	47a0      	blx	r4
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd90      	pop	{r4, r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	2401171c 	.word	0x2401171c

0800a7b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a7f0 <disk_write+0x3c>)
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68dc      	ldr	r4, [r3, #12]
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	4a07      	ldr	r2, [pc, #28]	@ (800a7f0 <disk_write+0x3c>)
 800a7d4:	4413      	add	r3, r2
 800a7d6:	7a18      	ldrb	r0, [r3, #8]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	47a0      	blx	r4
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd90      	pop	{r4, r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	2401171c 	.word	0x2401171c

0800a7f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3301      	adds	r3, #1
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a804:	89fb      	ldrh	r3, [r7, #14]
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	b21a      	sxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	b21b      	sxth	r3, r3
 800a810:	4313      	orrs	r3, r2
 800a812:	b21b      	sxth	r3, r3
 800a814:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a816:	89fb      	ldrh	r3, [r7, #14]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3303      	adds	r3, #3
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	3202      	adds	r2, #2
 800a83c:	7812      	ldrb	r2, [r2, #0]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	3201      	adds	r2, #1
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	887a      	ldrh	r2, [r7, #2]
 800a87e:	b2d2      	uxtb	r2, r2
 800a880:	701a      	strb	r2, [r3, #0]
 800a882:	887b      	ldrh	r3, [r7, #2]
 800a884:	0a1b      	lsrs	r3, r3, #8
 800a886:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	887a      	ldrh	r2, [r7, #2]
 800a890:	b2d2      	uxtb	r2, r2
 800a892:	701a      	strb	r2, [r3, #0]
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	0a1b      	lsrs	r3, r3, #8
 800a8ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	b2d2      	uxtb	r2, r2
 800a8c6:	701a      	strb	r2, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	0a1b      	lsrs	r3, r3, #8
 800a8cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	701a      	strb	r2, [r3, #0]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	0a1b      	lsrs	r3, r3, #8
 800a8de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	b2d2      	uxtb	r2, r2
 800a8ea:	701a      	strb	r2, [r3, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00d      	beq.n	800a92e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	1c53      	adds	r3, r2, #1
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	1c59      	adds	r1, r3, #1
 800a91c:	6179      	str	r1, [r7, #20]
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3b01      	subs	r3, #1
 800a926:	607b      	str	r3, [r7, #4]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f1      	bne.n	800a912 <mem_cpy+0x1a>
	}
}
 800a92e:	bf00      	nop
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a93a:	b480      	push	{r7}
 800a93c:	b087      	sub	sp, #28
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	617a      	str	r2, [r7, #20]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3b01      	subs	r3, #1
 800a95a:	607b      	str	r3, [r7, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f3      	bne.n	800a94a <mem_set+0x10>
}
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	@ 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	61fa      	str	r2, [r7, #28]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	4619      	mov	r1, r3
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	61ba      	str	r2, [r7, #24]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	1acb      	subs	r3, r1, r3
 800a99c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	607b      	str	r3, [r7, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <mem_cmp+0x40>
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0eb      	beq.n	800a988 <mem_cmp+0x18>

	return r;
 800a9b0:	697b      	ldr	r3, [r7, #20]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3724      	adds	r7, #36	@ 0x24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a9c8:	e002      	b.n	800a9d0 <chk_chr+0x12>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d005      	beq.n	800a9e4 <chk_chr+0x26>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d1f2      	bne.n	800a9ca <chk_chr+0xc>
	return *str;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	e029      	b.n	800aa5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aa08:	4a27      	ldr	r2, [pc, #156]	@ (800aaa8 <chk_lock+0xb4>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	4413      	add	r3, r2
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d01d      	beq.n	800aa52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa16:	4a24      	ldr	r2, [pc, #144]	@ (800aaa8 <chk_lock+0xb4>)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	4413      	add	r3, r2
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d116      	bne.n	800aa56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aa28:	4a1f      	ldr	r2, [pc, #124]	@ (800aaa8 <chk_lock+0xb4>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	4413      	add	r3, r2
 800aa30:	3304      	adds	r3, #4
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d10c      	bne.n	800aa56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa8 <chk_lock+0xb4>)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	4413      	add	r3, r2
 800aa44:	3308      	adds	r3, #8
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d102      	bne.n	800aa56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa50:	e007      	b.n	800aa62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d9d2      	bls.n	800aa08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d109      	bne.n	800aa7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d102      	bne.n	800aa74 <chk_lock+0x80>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d101      	bne.n	800aa78 <chk_lock+0x84>
 800aa74:	2300      	movs	r3, #0
 800aa76:	e010      	b.n	800aa9a <chk_lock+0xa6>
 800aa78:	2312      	movs	r3, #18
 800aa7a:	e00e      	b.n	800aa9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d108      	bne.n	800aa94 <chk_lock+0xa0>
 800aa82:	4a09      	ldr	r2, [pc, #36]	@ (800aaa8 <chk_lock+0xb4>)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	4413      	add	r3, r2
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa92:	d101      	bne.n	800aa98 <chk_lock+0xa4>
 800aa94:	2310      	movs	r3, #16
 800aa96:	e000      	b.n	800aa9a <chk_lock+0xa6>
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	240116fc 	.word	0x240116fc

0800aaac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aab2:	2300      	movs	r3, #0
 800aab4:	607b      	str	r3, [r7, #4]
 800aab6:	e002      	b.n	800aabe <enq_lock+0x12>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3301      	adds	r3, #1
 800aabc:	607b      	str	r3, [r7, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d806      	bhi.n	800aad2 <enq_lock+0x26>
 800aac4:	4a09      	ldr	r2, [pc, #36]	@ (800aaec <enq_lock+0x40>)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	011b      	lsls	r3, r3, #4
 800aaca:	4413      	add	r3, r2
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f2      	bne.n	800aab8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	bf14      	ite	ne
 800aad8:	2301      	movne	r3, #1
 800aada:	2300      	moveq	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	240116fc 	.word	0x240116fc

0800aaf0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aafa:	2300      	movs	r3, #0
 800aafc:	60fb      	str	r3, [r7, #12]
 800aafe:	e01f      	b.n	800ab40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ab00:	4a41      	ldr	r2, [pc, #260]	@ (800ac08 <inc_lock+0x118>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4413      	add	r3, r2
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d113      	bne.n	800ab3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ab12:	4a3d      	ldr	r2, [pc, #244]	@ (800ac08 <inc_lock+0x118>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	4413      	add	r3, r2
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d109      	bne.n	800ab3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ab26:	4a38      	ldr	r2, [pc, #224]	@ (800ac08 <inc_lock+0x118>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3308      	adds	r3, #8
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d006      	beq.n	800ab48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d9dc      	bls.n	800ab00 <inc_lock+0x10>
 800ab46:	e000      	b.n	800ab4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ab48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d132      	bne.n	800abb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	e002      	b.n	800ab5c <inc_lock+0x6c>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d806      	bhi.n	800ab70 <inc_lock+0x80>
 800ab62:	4a29      	ldr	r2, [pc, #164]	@ (800ac08 <inc_lock+0x118>)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	4413      	add	r3, r2
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1f2      	bne.n	800ab56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d101      	bne.n	800ab7a <inc_lock+0x8a>
 800ab76:	2300      	movs	r3, #0
 800ab78:	e040      	b.n	800abfc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	4922      	ldr	r1, [pc, #136]	@ (800ac08 <inc_lock+0x118>)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	440b      	add	r3, r1
 800ab86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	491e      	ldr	r1, [pc, #120]	@ (800ac08 <inc_lock+0x118>)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	440b      	add	r3, r1
 800ab94:	3304      	adds	r3, #4
 800ab96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695a      	ldr	r2, [r3, #20]
 800ab9c:	491a      	ldr	r1, [pc, #104]	@ (800ac08 <inc_lock+0x118>)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	011b      	lsls	r3, r3, #4
 800aba2:	440b      	add	r3, r1
 800aba4:	3308      	adds	r3, #8
 800aba6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aba8:	4a17      	ldr	r2, [pc, #92]	@ (800ac08 <inc_lock+0x118>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	4413      	add	r3, r2
 800abb0:	330c      	adds	r3, #12
 800abb2:	2200      	movs	r2, #0
 800abb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d009      	beq.n	800abd0 <inc_lock+0xe0>
 800abbc:	4a12      	ldr	r2, [pc, #72]	@ (800ac08 <inc_lock+0x118>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	4413      	add	r3, r2
 800abc4:	330c      	adds	r3, #12
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <inc_lock+0xe0>
 800abcc:	2300      	movs	r3, #0
 800abce:	e015      	b.n	800abfc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d108      	bne.n	800abe8 <inc_lock+0xf8>
 800abd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ac08 <inc_lock+0x118>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	011b      	lsls	r3, r3, #4
 800abdc:	4413      	add	r3, r2
 800abde:	330c      	adds	r3, #12
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	e001      	b.n	800abec <inc_lock+0xfc>
 800abe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abec:	4906      	ldr	r1, [pc, #24]	@ (800ac08 <inc_lock+0x118>)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	011b      	lsls	r3, r3, #4
 800abf2:	440b      	add	r3, r1
 800abf4:	330c      	adds	r3, #12
 800abf6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	240116fc 	.word	0x240116fc

0800ac0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ac14:	2300      	movs	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	e010      	b.n	800ac3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ac1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ac50 <clear_lock+0x44>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	4413      	add	r3, r2
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d105      	bne.n	800ac36 <clear_lock+0x2a>
 800ac2a:	4a09      	ldr	r2, [pc, #36]	@ (800ac50 <clear_lock+0x44>)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	4413      	add	r3, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d9eb      	bls.n	800ac1a <clear_lock+0xe>
	}
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	240116fc 	.word	0x240116fc

0800ac54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	78db      	ldrb	r3, [r3, #3]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d034      	beq.n	800acd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	7858      	ldrb	r0, [r3, #1]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac78:	2301      	movs	r3, #1
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	f7ff fd9a 	bl	800a7b4 <disk_write>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
 800ac8a:	e022      	b.n	800acd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	1ad2      	subs	r2, r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d217      	bcs.n	800acd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	613b      	str	r3, [r7, #16]
 800aca8:	e010      	b.n	800accc <sync_window+0x78>
					wsect += fs->fsize;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4413      	add	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7858      	ldrb	r0, [r3, #1]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800acbe:	2301      	movs	r3, #1
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	f7ff fd77 	bl	800a7b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	3b01      	subs	r3, #1
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d8eb      	bhi.n	800acaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d01b      	beq.n	800ad2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff ffad 	bl	800ac54 <sync_window>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d113      	bne.n	800ad2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7858      	ldrb	r0, [r3, #1]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad0e:	2301      	movs	r3, #1
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	f7ff fd2f 	bl	800a774 <disk_read>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d004      	beq.n	800ad26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b083      	sub	sp, #12
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	3b02      	subs	r3, #2
 800ad44:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	3b02      	subs	r3, #2
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d301      	bcc.n	800ad56 <clust2sect+0x20>
 800ad52:	2300      	movs	r3, #0
 800ad54:	e008      	b.n	800ad68 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	895b      	ldrh	r3, [r3, #10]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	fb03 f202 	mul.w	r2, r3, r2
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad66:	4413      	add	r3, r2
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d904      	bls.n	800ad94 <get_fat+0x20>
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d302      	bcc.n	800ad9a <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	e08e      	b.n	800aeb8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d061      	beq.n	800ae6c <get_fat+0xf8>
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	dc7b      	bgt.n	800aea4 <get_fat+0x130>
 800adac:	2b01      	cmp	r3, #1
 800adae:	d002      	beq.n	800adb6 <get_fat+0x42>
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d041      	beq.n	800ae38 <get_fat+0xc4>
 800adb4:	e076      	b.n	800aea4 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	6a1a      	ldr	r2, [r3, #32]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	0a5b      	lsrs	r3, r3, #9
 800adcc:	4413      	add	r3, r2
 800adce:	4619      	mov	r1, r3
 800add0:	6938      	ldr	r0, [r7, #16]
 800add2:	f7ff ff83 	bl	800acdc <move_window>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d166      	bne.n	800aeaa <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	60fa      	str	r2, [r7, #12]
 800ade2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4413      	add	r3, r2
 800adea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800adee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	6a1a      	ldr	r2, [r3, #32]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	0a5b      	lsrs	r3, r3, #9
 800adf8:	4413      	add	r3, r2
 800adfa:	4619      	mov	r1, r3
 800adfc:	6938      	ldr	r0, [r7, #16]
 800adfe:	f7ff ff6d 	bl	800acdc <move_window>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d152      	bne.n	800aeae <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4413      	add	r3, r2
 800ae12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <get_fat+0xba>
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	091b      	lsrs	r3, r3, #4
 800ae2c:	e002      	b.n	800ae34 <get_fat+0xc0>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae34:	617b      	str	r3, [r7, #20]
			break;
 800ae36:	e03f      	b.n	800aeb8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6a1a      	ldr	r2, [r3, #32]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	4413      	add	r3, r2
 800ae42:	4619      	mov	r1, r3
 800ae44:	6938      	ldr	r0, [r7, #16]
 800ae46:	f7ff ff49 	bl	800acdc <move_window>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d130      	bne.n	800aeb2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ae5e:	4413      	add	r3, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fcc7 	bl	800a7f4 <ld_word>
 800ae66:	4603      	mov	r3, r0
 800ae68:	617b      	str	r3, [r7, #20]
			break;
 800ae6a:	e025      	b.n	800aeb8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	6a1a      	ldr	r2, [r3, #32]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	09db      	lsrs	r3, r3, #7
 800ae74:	4413      	add	r3, r2
 800ae76:	4619      	mov	r1, r3
 800ae78:	6938      	ldr	r0, [r7, #16]
 800ae7a:	f7ff ff2f 	bl	800acdc <move_window>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d118      	bne.n	800aeb6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ae92:	4413      	add	r3, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff fcc5 	bl	800a824 <ld_dword>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aea0:	617b      	str	r3, [r7, #20]
			break;
 800aea2:	e009      	b.n	800aeb8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aea4:	2301      	movs	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	e006      	b.n	800aeb8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aeaa:	bf00      	nop
 800aeac:	e004      	b.n	800aeb8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aeae:	bf00      	nop
 800aeb0:	e002      	b.n	800aeb8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aeb2:	bf00      	nop
 800aeb4:	e000      	b.n	800aeb8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aeb6:	bf00      	nop
		}
	}

	return val;
 800aeb8:	697b      	ldr	r3, [r7, #20]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aec2:	b590      	push	{r4, r7, lr}
 800aec4:	b089      	sub	sp, #36	@ 0x24
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aece:	2302      	movs	r3, #2
 800aed0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	f240 80d9 	bls.w	800b08c <put_fat+0x1ca>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	f080 80d3 	bcs.w	800b08c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	f000 8096 	beq.w	800b01c <put_fat+0x15a>
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	f300 80cb 	bgt.w	800b08c <put_fat+0x1ca>
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d002      	beq.n	800af00 <put_fat+0x3e>
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d06e      	beq.n	800afdc <put_fat+0x11a>
 800aefe:	e0c5      	b.n	800b08c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	61bb      	str	r3, [r7, #24]
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	4413      	add	r3, r2
 800af0c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a1a      	ldr	r2, [r3, #32]
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	0a5b      	lsrs	r3, r3, #9
 800af16:	4413      	add	r3, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fede 	bl	800acdc <move_window>
 800af20:	4603      	mov	r3, r0
 800af22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af24:	7ffb      	ldrb	r3, [r7, #31]
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 80a9 	bne.w	800b07e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	1c59      	adds	r1, r3, #1
 800af36:	61b9      	str	r1, [r7, #24]
 800af38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3c:	4413      	add	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00d      	beq.n	800af66 <put_fat+0xa4>
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	b25b      	sxtb	r3, r3
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	b25a      	sxtb	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	b25b      	sxtb	r3, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	b25b      	sxtb	r3, r3
 800af62:	b2db      	uxtb	r3, r3
 800af64:	e001      	b.n	800af6a <put_fat+0xa8>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6a1a      	ldr	r2, [r3, #32]
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	0a5b      	lsrs	r3, r3, #9
 800af7c:	4413      	add	r3, r2
 800af7e:	4619      	mov	r1, r3
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff feab 	bl	800acdc <move_window>
 800af86:	4603      	mov	r3, r0
 800af88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af8a:	7ffb      	ldrb	r3, [r7, #31]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d178      	bne.n	800b082 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9c:	4413      	add	r3, r2
 800af9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <put_fat+0xf0>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	091b      	lsrs	r3, r3, #4
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	e00e      	b.n	800afd0 <put_fat+0x10e>
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b25b      	sxtb	r3, r3
 800afb8:	f023 030f 	bic.w	r3, r3, #15
 800afbc:	b25a      	sxtb	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	0a1b      	lsrs	r3, r3, #8
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	b25b      	sxtb	r3, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2201      	movs	r2, #1
 800afd8:	70da      	strb	r2, [r3, #3]
			break;
 800afda:	e057      	b.n	800b08c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a1a      	ldr	r2, [r3, #32]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	4413      	add	r3, r2
 800afe6:	4619      	mov	r1, r3
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fe77 	bl	800acdc <move_window>
 800afee:	4603      	mov	r3, r0
 800aff0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aff2:	7ffb      	ldrb	r3, [r7, #31]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d146      	bne.n	800b086 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b006:	4413      	add	r3, r2
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	b292      	uxth	r2, r2
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fc2b 	bl	800a86a <st_word>
			fs->wflag = 1;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2201      	movs	r2, #1
 800b018:	70da      	strb	r2, [r3, #3]
			break;
 800b01a:	e037      	b.n	800b08c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a1a      	ldr	r2, [r3, #32]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	09db      	lsrs	r3, r3, #7
 800b024:	4413      	add	r3, r2
 800b026:	4619      	mov	r1, r3
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff fe57 	bl	800acdc <move_window>
 800b02e:	4603      	mov	r3, r0
 800b030:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b032:	7ffb      	ldrb	r3, [r7, #31]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d128      	bne.n	800b08a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b04c:	4413      	add	r3, r2
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fbe8 	bl	800a824 <ld_dword>
 800b054:	4603      	mov	r3, r0
 800b056:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b05a:	4323      	orrs	r3, r4
 800b05c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b06c:	4413      	add	r3, r2
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff fc15 	bl	800a8a0 <st_dword>
			fs->wflag = 1;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	70da      	strb	r2, [r3, #3]
			break;
 800b07c:	e006      	b.n	800b08c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b07e:	bf00      	nop
 800b080:	e004      	b.n	800b08c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b08a:	bf00      	nop
		}
	}
	return res;
 800b08c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3724      	adds	r7, #36	@ 0x24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd90      	pop	{r4, r7, pc}

0800b096 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b088      	sub	sp, #32
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d904      	bls.n	800b0bc <remove_chain+0x26>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d301      	bcc.n	800b0c0 <remove_chain+0x2a>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e04b      	b.n	800b158 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00c      	beq.n	800b0e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	69b8      	ldr	r0, [r7, #24]
 800b0ce:	f7ff fef8 	bl	800aec2 <put_fat>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b0d6:	7ffb      	ldrb	r3, [r7, #31]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <remove_chain+0x4a>
 800b0dc:	7ffb      	ldrb	r3, [r7, #31]
 800b0de:	e03b      	b.n	800b158 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f7ff fe46 	bl	800ad74 <get_fat>
 800b0e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d031      	beq.n	800b154 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <remove_chain+0x64>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e02e      	b.n	800b158 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b100:	d101      	bne.n	800b106 <remove_chain+0x70>
 800b102:	2301      	movs	r3, #1
 800b104:	e028      	b.n	800b158 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b106:	2200      	movs	r2, #0
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	69b8      	ldr	r0, [r7, #24]
 800b10c:	f7ff fed9 	bl	800aec2 <put_fat>
 800b110:	4603      	mov	r3, r0
 800b112:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b114:	7ffb      	ldrb	r3, [r7, #31]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <remove_chain+0x88>
 800b11a:	7ffb      	ldrb	r3, [r7, #31]
 800b11c:	e01c      	b.n	800b158 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	3b02      	subs	r3, #2
 800b128:	429a      	cmp	r2, r3
 800b12a:	d20b      	bcs.n	800b144 <remove_chain+0xae>
			fs->free_clst++;
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	791b      	ldrb	r3, [r3, #4]
 800b13a:	f043 0301 	orr.w	r3, r3, #1
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d3c6      	bcc.n	800b0e0 <remove_chain+0x4a>
 800b152:	e000      	b.n	800b156 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b154:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10d      	bne.n	800b192 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d004      	beq.n	800b18c <create_chain+0x2c>
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d31b      	bcc.n	800b1c4 <create_chain+0x64>
 800b18c:	2301      	movs	r3, #1
 800b18e:	61bb      	str	r3, [r7, #24]
 800b190:	e018      	b.n	800b1c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fded 	bl	800ad74 <get_fat>
 800b19a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d801      	bhi.n	800b1a6 <create_chain+0x46>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e070      	b.n	800b288 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ac:	d101      	bne.n	800b1b2 <create_chain+0x52>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	e06a      	b.n	800b288 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d201      	bcs.n	800b1c0 <create_chain+0x60>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	e063      	b.n	800b288 <create_chain+0x128>
		scl = clst;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d307      	bcc.n	800b1e8 <create_chain+0x88>
				ncl = 2;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d901      	bls.n	800b1e8 <create_chain+0x88>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e04f      	b.n	800b288 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b1e8:	69f9      	ldr	r1, [r7, #28]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fdc2 	bl	800ad74 <get_fat>
 800b1f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00e      	beq.n	800b216 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d003      	beq.n	800b206 <create_chain+0xa6>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b204:	d101      	bne.n	800b20a <create_chain+0xaa>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	e03e      	b.n	800b288 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d1da      	bne.n	800b1c8 <create_chain+0x68>
 800b212:	2300      	movs	r3, #0
 800b214:	e038      	b.n	800b288 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b216:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	69f9      	ldr	r1, [r7, #28]
 800b21e:	6938      	ldr	r0, [r7, #16]
 800b220:	f7ff fe4f 	bl	800aec2 <put_fat>
 800b224:	4603      	mov	r3, r0
 800b226:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d109      	bne.n	800b242 <create_chain+0xe2>
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d006      	beq.n	800b242 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6938      	ldr	r0, [r7, #16]
 800b23a:	f7ff fe42 	bl	800aec2 <put_fat>
 800b23e:	4603      	mov	r3, r0
 800b240:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d116      	bne.n	800b276 <create_chain+0x116>
		fs->last_clst = ncl;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	691a      	ldr	r2, [r3, #16]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	3b02      	subs	r3, #2
 800b258:	429a      	cmp	r2, r3
 800b25a:	d804      	bhi.n	800b266 <create_chain+0x106>
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	1e5a      	subs	r2, r3, #1
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	791b      	ldrb	r3, [r3, #4]
 800b26a:	f043 0301 	orr.w	r3, r3, #1
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	711a      	strb	r2, [r3, #4]
 800b274:	e007      	b.n	800b286 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d102      	bne.n	800b282 <create_chain+0x122>
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
 800b280:	e000      	b.n	800b284 <create_chain+0x124>
 800b282:	2301      	movs	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b286:	69fb      	ldr	r3, [r7, #28]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3720      	adds	r7, #32
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	0a5b      	lsrs	r3, r3, #9
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	8952      	ldrh	r2, [r2, #10]
 800b2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	613a      	str	r2, [r7, #16]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <clmt_clust+0x3a>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e010      	b.n	800b2ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d307      	bcc.n	800b2e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b2e0:	e7e9      	b.n	800b2b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b2e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	4413      	add	r3, r2
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	371c      	adds	r7, #28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b30e:	d204      	bcs.n	800b31a <dir_sdi+0x22>
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	f003 031f 	and.w	r3, r3, #31
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <dir_sdi+0x26>
		return FR_INT_ERR;
 800b31a:	2302      	movs	r3, #2
 800b31c:	e063      	b.n	800b3e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <dir_sdi+0x46>
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d902      	bls.n	800b33e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b33c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10c      	bne.n	800b35e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	8912      	ldrh	r2, [r2, #8]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d301      	bcc.n	800b354 <dir_sdi+0x5c>
 800b350:	2302      	movs	r3, #2
 800b352:	e048      	b.n	800b3e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	61da      	str	r2, [r3, #28]
 800b35c:	e029      	b.n	800b3b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	895b      	ldrh	r3, [r3, #10]
 800b362:	025b      	lsls	r3, r3, #9
 800b364:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b366:	e019      	b.n	800b39c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6979      	ldr	r1, [r7, #20]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff fd01 	bl	800ad74 <get_fat>
 800b372:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37a:	d101      	bne.n	800b380 <dir_sdi+0x88>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e032      	b.n	800b3e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d904      	bls.n	800b390 <dir_sdi+0x98>
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d301      	bcc.n	800b394 <dir_sdi+0x9c>
 800b390:	2302      	movs	r3, #2
 800b392:	e028      	b.n	800b3e6 <dir_sdi+0xee>
			ofs -= csz;
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d2e1      	bcs.n	800b368 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b3a4:	6979      	ldr	r1, [r7, #20]
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f7ff fcc5 	bl	800ad36 <clust2sect>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <dir_sdi+0xcc>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e010      	b.n	800b3e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	69da      	ldr	r2, [r3, #28]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	0a5b      	lsrs	r3, r3, #9
 800b3cc:	441a      	add	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3de:	441a      	add	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b086      	sub	sp, #24
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	3320      	adds	r3, #32
 800b404:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <dir_next+0x28>
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b414:	d301      	bcc.n	800b41a <dir_next+0x2c>
 800b416:	2304      	movs	r3, #4
 800b418:	e0aa      	b.n	800b570 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b420:	2b00      	cmp	r3, #0
 800b422:	f040 8098 	bne.w	800b556 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	095b      	lsrs	r3, r3, #5
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	8912      	ldrh	r2, [r2, #8]
 800b440:	4293      	cmp	r3, r2
 800b442:	f0c0 8088 	bcc.w	800b556 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	61da      	str	r2, [r3, #28]
 800b44c:	2304      	movs	r3, #4
 800b44e:	e08f      	b.n	800b570 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	0a5b      	lsrs	r3, r3, #9
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	8952      	ldrh	r2, [r2, #10]
 800b458:	3a01      	subs	r2, #1
 800b45a:	4013      	ands	r3, r2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d17a      	bne.n	800b556 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	4619      	mov	r1, r3
 800b468:	4610      	mov	r0, r2
 800b46a:	f7ff fc83 	bl	800ad74 <get_fat>
 800b46e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d801      	bhi.n	800b47a <dir_next+0x8c>
 800b476:	2302      	movs	r3, #2
 800b478:	e07a      	b.n	800b570 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b480:	d101      	bne.n	800b486 <dir_next+0x98>
 800b482:	2301      	movs	r3, #1
 800b484:	e074      	b.n	800b570 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d358      	bcc.n	800b542 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d104      	bne.n	800b4a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	61da      	str	r2, [r3, #28]
 800b49c:	2304      	movs	r3, #4
 800b49e:	e067      	b.n	800b570 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7ff fe59 	bl	800b160 <create_chain>
 800b4ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <dir_next+0xcc>
 800b4b6:	2307      	movs	r3, #7
 800b4b8:	e05a      	b.n	800b570 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <dir_next+0xd6>
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	e055      	b.n	800b570 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ca:	d101      	bne.n	800b4d0 <dir_next+0xe2>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e04f      	b.n	800b570 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff fbbf 	bl	800ac54 <sync_window>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <dir_next+0xf2>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e047      	b.n	800b570 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3330      	adds	r3, #48	@ 0x30
 800b4e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff fa25 	bl	800a93a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	613b      	str	r3, [r7, #16]
 800b4f4:	6979      	ldr	r1, [r7, #20]
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff fc1d 	bl	800ad36 <clust2sect>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b502:	e012      	b.n	800b52a <dir_next+0x13c>
						fs->wflag = 1;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2201      	movs	r2, #1
 800b508:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff fba2 	bl	800ac54 <sync_window>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <dir_next+0x12c>
 800b516:	2301      	movs	r3, #1
 800b518:	e02a      	b.n	800b570 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	3301      	adds	r3, #1
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	895b      	ldrh	r3, [r3, #10]
 800b52e:	461a      	mov	r2, r3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	4293      	cmp	r3, r2
 800b534:	d3e6      	bcc.n	800b504 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	1ad2      	subs	r2, r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b548:	6979      	ldr	r1, [r7, #20]
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fbf3 	bl	800ad36 <clust2sect>
 800b550:	4602      	mov	r2, r0
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b568:	441a      	add	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b588:	2100      	movs	r1, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff feb4 	bl	800b2f8 <dir_sdi>
 800b590:	4603      	mov	r3, r0
 800b592:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d12b      	bne.n	800b5f2 <dir_alloc+0x7a>
		n = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fb99 	bl	800acdc <move_window>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d11d      	bne.n	800b5f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2be5      	cmp	r3, #229	@ 0xe5
 800b5bc:	d004      	beq.n	800b5c8 <dir_alloc+0x50>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d107      	bne.n	800b5d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d102      	bne.n	800b5dc <dir_alloc+0x64>
 800b5d6:	e00c      	b.n	800b5f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b5dc:	2101      	movs	r1, #1
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff ff05 	bl	800b3ee <dir_next>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0d7      	beq.n	800b59e <dir_alloc+0x26>
 800b5ee:	e000      	b.n	800b5f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b5f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d101      	bne.n	800b5fc <dir_alloc+0x84>
 800b5f8:	2307      	movs	r3, #7
 800b5fa:	75fb      	strb	r3, [r7, #23]
	return res;
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	331a      	adds	r3, #26
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff f8ed 	bl	800a7f4 <ld_word>
 800b61a:	4603      	mov	r3, r0
 800b61c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b03      	cmp	r3, #3
 800b624:	d109      	bne.n	800b63a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	3314      	adds	r3, #20
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff f8e2 	bl	800a7f4 <ld_word>
 800b630:	4603      	mov	r3, r0
 800b632:	041b      	lsls	r3, r3, #16
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b63a:	68fb      	ldr	r3, [r7, #12]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	331a      	adds	r3, #26
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	b292      	uxth	r2, r2
 800b658:	4611      	mov	r1, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff f905 	bl	800a86a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b03      	cmp	r3, #3
 800b666:	d109      	bne.n	800b67c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f103 0214 	add.w	r2, r3, #20
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	0c1b      	lsrs	r3, r3, #16
 800b672:	b29b      	uxth	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7ff f8f7 	bl	800a86a <st_word>
	}
}
 800b67c:	bf00      	nop
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b692:	2100      	movs	r1, #0
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff fe2f 	bl	800b2f8 <dir_sdi>
 800b69a:	4603      	mov	r3, r0
 800b69c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <dir_find+0x24>
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	e03e      	b.n	800b726 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6938      	ldr	r0, [r7, #16]
 800b6b0:	f7ff fb14 	bl	800acdc <move_window>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d12f      	bne.n	800b71e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <dir_find+0x4e>
 800b6cc:	2304      	movs	r3, #4
 800b6ce:	75fb      	strb	r3, [r7, #23]
 800b6d0:	e028      	b.n	800b724 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	330b      	adds	r3, #11
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	330b      	adds	r3, #11
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	f003 0308 	and.w	r3, r3, #8
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <dir_find+0x86>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a18      	ldr	r0, [r3, #32]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3324      	adds	r3, #36	@ 0x24
 800b6fc:	220b      	movs	r2, #11
 800b6fe:	4619      	mov	r1, r3
 800b700:	f7ff f936 	bl	800a970 <mem_cmp>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fe6e 	bl	800b3ee <dir_next>
 800b712:	4603      	mov	r3, r0
 800b714:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0c5      	beq.n	800b6a8 <dir_find+0x24>
 800b71c:	e002      	b.n	800b724 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b71e:	bf00      	nop
 800b720:	e000      	b.n	800b724 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b722:	bf00      	nop

	return res;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b73c:	2101      	movs	r1, #1
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff ff1a 	bl	800b578 <dir_alloc>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d11c      	bne.n	800b788 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	4619      	mov	r1, r3
 800b754:	68b8      	ldr	r0, [r7, #8]
 800b756:	f7ff fac1 	bl	800acdc <move_window>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d111      	bne.n	800b788 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	2220      	movs	r2, #32
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff f8e4 	bl	800a93a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a18      	ldr	r0, [r3, #32]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3324      	adds	r3, #36	@ 0x24
 800b77a:	220b      	movs	r2, #11
 800b77c:	4619      	mov	r1, r3
 800b77e:	f7ff f8bb 	bl	800a8f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2201      	movs	r2, #1
 800b786:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3324      	adds	r3, #36	@ 0x24
 800b7a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b7aa:	220b      	movs	r2, #11
 800b7ac:	2120      	movs	r1, #32
 800b7ae:	68b8      	ldr	r0, [r7, #8]
 800b7b0:	f7ff f8c3 	bl	800a93a <mem_set>
	si = i = 0; ni = 8;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	61fb      	str	r3, [r7, #28]
 800b7bc:	2308      	movs	r3, #8
 800b7be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	61fa      	str	r2, [r7, #28]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b7ce:	7efb      	ldrb	r3, [r7, #27]
 800b7d0:	2b20      	cmp	r3, #32
 800b7d2:	d94e      	bls.n	800b872 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b7d4:	7efb      	ldrb	r3, [r7, #27]
 800b7d6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b7d8:	d006      	beq.n	800b7e8 <create_name+0x54>
 800b7da:	7efb      	ldrb	r3, [r7, #27]
 800b7dc:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7de:	d110      	bne.n	800b802 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7e0:	e002      	b.n	800b7e8 <create_name+0x54>
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b7f2:	d0f6      	beq.n	800b7e2 <create_name+0x4e>
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7fe:	d0f0      	beq.n	800b7e2 <create_name+0x4e>
			break;
 800b800:	e038      	b.n	800b874 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b802:	7efb      	ldrb	r3, [r7, #27]
 800b804:	2b2e      	cmp	r3, #46	@ 0x2e
 800b806:	d003      	beq.n	800b810 <create_name+0x7c>
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d30c      	bcc.n	800b82a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b0b      	cmp	r3, #11
 800b814:	d002      	beq.n	800b81c <create_name+0x88>
 800b816:	7efb      	ldrb	r3, [r7, #27]
 800b818:	2b2e      	cmp	r3, #46	@ 0x2e
 800b81a:	d001      	beq.n	800b820 <create_name+0x8c>
 800b81c:	2306      	movs	r3, #6
 800b81e:	e044      	b.n	800b8aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b820:	2308      	movs	r3, #8
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	230b      	movs	r3, #11
 800b826:	617b      	str	r3, [r7, #20]
			continue;
 800b828:	e022      	b.n	800b870 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b82a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da04      	bge.n	800b83c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b832:	7efb      	ldrb	r3, [r7, #27]
 800b834:	3b80      	subs	r3, #128	@ 0x80
 800b836:	4a1f      	ldr	r2, [pc, #124]	@ (800b8b4 <create_name+0x120>)
 800b838:	5cd3      	ldrb	r3, [r2, r3]
 800b83a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b83c:	7efb      	ldrb	r3, [r7, #27]
 800b83e:	4619      	mov	r1, r3
 800b840:	481d      	ldr	r0, [pc, #116]	@ (800b8b8 <create_name+0x124>)
 800b842:	f7ff f8bc 	bl	800a9be <chk_chr>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <create_name+0xbc>
 800b84c:	2306      	movs	r3, #6
 800b84e:	e02c      	b.n	800b8aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b850:	7efb      	ldrb	r3, [r7, #27]
 800b852:	2b60      	cmp	r3, #96	@ 0x60
 800b854:	d905      	bls.n	800b862 <create_name+0xce>
 800b856:	7efb      	ldrb	r3, [r7, #27]
 800b858:	2b7a      	cmp	r3, #122	@ 0x7a
 800b85a:	d802      	bhi.n	800b862 <create_name+0xce>
 800b85c:	7efb      	ldrb	r3, [r7, #27]
 800b85e:	3b20      	subs	r3, #32
 800b860:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	613a      	str	r2, [r7, #16]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	4413      	add	r3, r2
 800b86c:	7efa      	ldrb	r2, [r7, #27]
 800b86e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b870:	e7a6      	b.n	800b7c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b872:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	441a      	add	r2, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <create_name+0xf4>
 800b884:	2306      	movs	r3, #6
 800b886:	e010      	b.n	800b8aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2be5      	cmp	r3, #229	@ 0xe5
 800b88e:	d102      	bne.n	800b896 <create_name+0x102>
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2205      	movs	r2, #5
 800b894:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b896:	7efb      	ldrb	r3, [r7, #27]
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d801      	bhi.n	800b8a0 <create_name+0x10c>
 800b89c:	2204      	movs	r2, #4
 800b89e:	e000      	b.n	800b8a2 <create_name+0x10e>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	330b      	adds	r3, #11
 800b8a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b8a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3720      	adds	r7, #32
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	0800d9ec 	.word	0x0800d9ec
 800b8b8:	0800d724 	.word	0x0800d724

0800b8bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b8d0:	e002      	b.n	800b8d8 <follow_path+0x1c>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	603b      	str	r3, [r7, #0]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8de:	d0f8      	beq.n	800b8d2 <follow_path+0x16>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b8e6:	d0f4      	beq.n	800b8d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b1f      	cmp	r3, #31
 800b8f4:	d80a      	bhi.n	800b90c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2280      	movs	r2, #128	@ 0x80
 800b8fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b8fe:	2100      	movs	r1, #0
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7ff fcf9 	bl	800b2f8 <dir_sdi>
 800b906:	4603      	mov	r3, r0
 800b908:	75fb      	strb	r3, [r7, #23]
 800b90a:	e043      	b.n	800b994 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b90c:	463b      	mov	r3, r7
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff ff3f 	bl	800b794 <create_name>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d134      	bne.n	800b98a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff feaf 	bl	800b684 <dir_find>
 800b926:	4603      	mov	r3, r0
 800b928:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b930:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d127      	bne.n	800b98e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b93e:	7afb      	ldrb	r3, [r7, #11]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b00      	cmp	r3, #0
 800b946:	d122      	bne.n	800b98e <follow_path+0xd2>
 800b948:	2305      	movs	r3, #5
 800b94a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b94c:	e01f      	b.n	800b98e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b94e:	7afb      	ldrb	r3, [r7, #11]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d11c      	bne.n	800b992 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	799b      	ldrb	r3, [r3, #6]
 800b95c:	f003 0310 	and.w	r3, r3, #16
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b964:	2305      	movs	r3, #5
 800b966:	75fb      	strb	r3, [r7, #23]
 800b968:	e014      	b.n	800b994 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b978:	4413      	add	r3, r2
 800b97a:	4619      	mov	r1, r3
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7ff fe42 	bl	800b606 <ld_clust>
 800b982:	4602      	mov	r2, r0
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b988:	e7c0      	b.n	800b90c <follow_path+0x50>
			if (res != FR_OK) break;
 800b98a:	bf00      	nop
 800b98c:	e002      	b.n	800b994 <follow_path+0xd8>
				break;
 800b98e:	bf00      	nop
 800b990:	e000      	b.n	800b994 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b992:	bf00      	nop
			}
		}
	}

	return res;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d031      	beq.n	800ba18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e002      	b.n	800b9c2 <get_ldnumber+0x24>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d903      	bls.n	800b9d2 <get_ldnumber+0x34>
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9d0:	d1f4      	bne.n	800b9bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9d8:	d11c      	bne.n	800ba14 <get_ldnumber+0x76>
			tp = *path;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	60fa      	str	r2, [r7, #12]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	3b30      	subs	r3, #48	@ 0x30
 800b9ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b09      	cmp	r3, #9
 800b9f0:	d80e      	bhi.n	800ba10 <get_ldnumber+0x72>
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d10a      	bne.n	800ba10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d107      	bne.n	800ba10 <get_ldnumber+0x72>
					vol = (int)i;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	3301      	adds	r3, #1
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	e002      	b.n	800ba1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba14:	2300      	movs	r3, #0
 800ba16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba18:	693b      	ldr	r3, [r7, #16]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	70da      	strb	r2, [r3, #3]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff f94a 	bl	800acdc <move_window>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <check_fs+0x2a>
 800ba4e:	2304      	movs	r3, #4
 800ba50:	e038      	b.n	800bac4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3330      	adds	r3, #48	@ 0x30
 800ba56:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe feca 	bl	800a7f4 <ld_word>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d001      	beq.n	800ba70 <check_fs+0x48>
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e029      	b.n	800bac4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba76:	2be9      	cmp	r3, #233	@ 0xe9
 800ba78:	d009      	beq.n	800ba8e <check_fs+0x66>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba80:	2beb      	cmp	r3, #235	@ 0xeb
 800ba82:	d11e      	bne.n	800bac2 <check_fs+0x9a>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ba8a:	2b90      	cmp	r3, #144	@ 0x90
 800ba8c:	d119      	bne.n	800bac2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3330      	adds	r3, #48	@ 0x30
 800ba92:	3336      	adds	r3, #54	@ 0x36
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fec5 	bl	800a824 <ld_dword>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800baa0:	4a0a      	ldr	r2, [pc, #40]	@ (800bacc <check_fs+0xa4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d101      	bne.n	800baaa <check_fs+0x82>
 800baa6:	2300      	movs	r3, #0
 800baa8:	e00c      	b.n	800bac4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3330      	adds	r3, #48	@ 0x30
 800baae:	3352      	adds	r3, #82	@ 0x52
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe feb7 	bl	800a824 <ld_dword>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4a05      	ldr	r2, [pc, #20]	@ (800bad0 <check_fs+0xa8>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d101      	bne.n	800bac2 <check_fs+0x9a>
 800babe:	2300      	movs	r3, #0
 800bac0:	e000      	b.n	800bac4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bac2:	2302      	movs	r3, #2
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	00544146 	.word	0x00544146
 800bad0:	33544146 	.word	0x33544146

0800bad4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b096      	sub	sp, #88	@ 0x58
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7ff ff58 	bl	800b99e <get_ldnumber>
 800baee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800baf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	da01      	bge.n	800bafa <find_volume+0x26>
 800baf6:	230b      	movs	r3, #11
 800baf8:	e22d      	b.n	800bf56 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bafa:	4aa1      	ldr	r2, [pc, #644]	@ (800bd80 <find_volume+0x2ac>)
 800bafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb02:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <find_volume+0x3a>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	e223      	b.n	800bf56 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	f023 0301 	bic.w	r3, r3, #1
 800bb1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d01a      	beq.n	800bb5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe fde1 	bl	800a6f0 <disk_status>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10c      	bne.n	800bb5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d007      	beq.n	800bb56 <find_volume+0x82>
 800bb46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb4a:	f003 0304 	and.w	r3, r3, #4
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bb52:	230a      	movs	r3, #10
 800bb54:	e1ff      	b.n	800bf56 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bb56:	2300      	movs	r3, #0
 800bb58:	e1fd      	b.n	800bf56 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bb60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	785b      	ldrb	r3, [r3, #1]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe fdd9 	bl	800a724 <disk_initialize>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bb78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bb84:	2303      	movs	r3, #3
 800bb86:	e1e6      	b.n	800bf56 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bb88:	79fb      	ldrb	r3, [r7, #7]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d007      	beq.n	800bb9e <find_volume+0xca>
 800bb8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb92:	f003 0304 	and.w	r3, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bb9a:	230a      	movs	r3, #10
 800bb9c:	e1db      	b.n	800bf56 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bba4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bba6:	f7ff ff3f 	bl	800ba28 <check_fs>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bbb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d149      	bne.n	800bc4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbb8:	2300      	movs	r3, #0
 800bbba:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbbc:	e01e      	b.n	800bbfc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc6:	011b      	lsls	r3, r3, #4
 800bbc8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bbcc:	4413      	add	r3, r2
 800bbce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d006      	beq.n	800bbe8 <find_volume+0x114>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbdc:	3308      	adds	r3, #8
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fe20 	bl	800a824 <ld_dword>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	e000      	b.n	800bbea <find_volume+0x116>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	3358      	adds	r3, #88	@ 0x58
 800bbf0:	443b      	add	r3, r7
 800bbf2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d9dd      	bls.n	800bbbe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc02:	2300      	movs	r3, #0
 800bc04:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bc06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <find_volume+0x13e>
 800bc0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	3358      	adds	r3, #88	@ 0x58
 800bc18:	443b      	add	r3, r7
 800bc1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bc1e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d005      	beq.n	800bc32 <find_volume+0x15e>
 800bc26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc2a:	f7ff fefd 	bl	800ba28 <check_fs>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	e000      	b.n	800bc34 <find_volume+0x160>
 800bc32:	2303      	movs	r3, #3
 800bc34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bc38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d905      	bls.n	800bc4c <find_volume+0x178>
 800bc40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc42:	3301      	adds	r3, #1
 800bc44:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d9e2      	bls.n	800bc12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d101      	bne.n	800bc58 <find_volume+0x184>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e17e      	b.n	800bf56 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bc58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d901      	bls.n	800bc64 <find_volume+0x190>
 800bc60:	230d      	movs	r3, #13
 800bc62:	e178      	b.n	800bf56 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	3330      	adds	r3, #48	@ 0x30
 800bc68:	330b      	adds	r3, #11
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe fdc2 	bl	800a7f4 <ld_word>
 800bc70:	4603      	mov	r3, r0
 800bc72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc76:	d001      	beq.n	800bc7c <find_volume+0x1a8>
 800bc78:	230d      	movs	r3, #13
 800bc7a:	e16c      	b.n	800bf56 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	3330      	adds	r3, #48	@ 0x30
 800bc80:	3316      	adds	r3, #22
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fdb6 	bl	800a7f4 <ld_word>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bc8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <find_volume+0x1cc>
 800bc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc94:	3330      	adds	r3, #48	@ 0x30
 800bc96:	3324      	adds	r3, #36	@ 0x24
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fe fdc3 	bl	800a824 <ld_dword>
 800bc9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bca4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb2:	789b      	ldrb	r3, [r3, #2]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d005      	beq.n	800bcc4 <find_volume+0x1f0>
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcba:	789b      	ldrb	r3, [r3, #2]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d001      	beq.n	800bcc4 <find_volume+0x1f0>
 800bcc0:	230d      	movs	r3, #13
 800bcc2:	e148      	b.n	800bf56 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc6:	789b      	ldrb	r3, [r3, #2]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bccc:	fb02 f303 	mul.w	r3, r2, r3
 800bcd0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce0:	895b      	ldrh	r3, [r3, #10]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d008      	beq.n	800bcf8 <find_volume+0x224>
 800bce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce8:	895b      	ldrh	r3, [r3, #10]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcee:	895b      	ldrh	r3, [r3, #10]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <find_volume+0x228>
 800bcf8:	230d      	movs	r3, #13
 800bcfa:	e12c      	b.n	800bf56 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfe:	3330      	adds	r3, #48	@ 0x30
 800bd00:	3311      	adds	r3, #17
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe fd76 	bl	800a7f4 <ld_word>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	891b      	ldrh	r3, [r3, #8]
 800bd14:	f003 030f 	and.w	r3, r3, #15
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <find_volume+0x24e>
 800bd1e:	230d      	movs	r3, #13
 800bd20:	e119      	b.n	800bf56 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	3330      	adds	r3, #48	@ 0x30
 800bd26:	3313      	adds	r3, #19
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fd63 	bl	800a7f4 <ld_word>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bd32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d106      	bne.n	800bd46 <find_volume+0x272>
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	3330      	adds	r3, #48	@ 0x30
 800bd3c:	3320      	adds	r3, #32
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe fd70 	bl	800a824 <ld_dword>
 800bd44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd48:	3330      	adds	r3, #48	@ 0x30
 800bd4a:	330e      	adds	r3, #14
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fd51 	bl	800a7f4 <ld_word>
 800bd52:	4603      	mov	r3, r0
 800bd54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bd56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <find_volume+0x28c>
 800bd5c:	230d      	movs	r3, #13
 800bd5e:	e0fa      	b.n	800bf56 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bd60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bd62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd64:	4413      	add	r3, r2
 800bd66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd68:	8912      	ldrh	r2, [r2, #8]
 800bd6a:	0912      	lsrs	r2, r2, #4
 800bd6c:	b292      	uxth	r2, r2
 800bd6e:	4413      	add	r3, r2
 800bd70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bd72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d204      	bcs.n	800bd84 <find_volume+0x2b0>
 800bd7a:	230d      	movs	r3, #13
 800bd7c:	e0eb      	b.n	800bf56 <find_volume+0x482>
 800bd7e:	bf00      	nop
 800bd80:	240116f4 	.word	0x240116f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bd84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd8c:	8952      	ldrh	r2, [r2, #10]
 800bd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <find_volume+0x2ca>
 800bd9a:	230d      	movs	r3, #13
 800bd9c:	e0db      	b.n	800bf56 <find_volume+0x482>
		fmt = FS_FAT32;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d802      	bhi.n	800bdb4 <find_volume+0x2e0>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d802      	bhi.n	800bdc4 <find_volume+0x2f0>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc6:	1c9a      	adds	r2, r3, #2
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdd0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bdd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd6:	441a      	add	r2, r3
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdda:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bddc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde0:	441a      	add	r2, r3
 800bde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800bde6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d11e      	bne.n	800be2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdf0:	3330      	adds	r3, #48	@ 0x30
 800bdf2:	332a      	adds	r3, #42	@ 0x2a
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe fcfd 	bl	800a7f4 <ld_word>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <find_volume+0x330>
 800be00:	230d      	movs	r3, #13
 800be02:	e0a8      	b.n	800bf56 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800be04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be06:	891b      	ldrh	r3, [r3, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <find_volume+0x33c>
 800be0c:	230d      	movs	r3, #13
 800be0e:	e0a2      	b.n	800bf56 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800be10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be12:	3330      	adds	r3, #48	@ 0x30
 800be14:	332c      	adds	r3, #44	@ 0x2c
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe fd04 	bl	800a824 <ld_dword>
 800be1c:	4602      	mov	r2, r0
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	647b      	str	r3, [r7, #68]	@ 0x44
 800be2a:	e01f      	b.n	800be6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800be2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2e:	891b      	ldrh	r3, [r3, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <find_volume+0x364>
 800be34:	230d      	movs	r3, #13
 800be36:	e08e      	b.n	800bf56 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	6a1a      	ldr	r2, [r3, #32]
 800be3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be3e:	441a      	add	r2, r3
 800be40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be42:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800be44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d103      	bne.n	800be54 <find_volume+0x380>
 800be4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	e00a      	b.n	800be6a <find_volume+0x396>
 800be54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be56:	695a      	ldr	r2, [r3, #20]
 800be58:	4613      	mov	r3, r2
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	4413      	add	r3, r2
 800be5e:	085a      	lsrs	r2, r3, #1
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800be6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800be6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6e:	699a      	ldr	r2, [r3, #24]
 800be70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800be76:	0a5b      	lsrs	r3, r3, #9
 800be78:	429a      	cmp	r2, r3
 800be7a:	d201      	bcs.n	800be80 <find_volume+0x3ac>
 800be7c:	230d      	movs	r3, #13
 800be7e:	e06a      	b.n	800bf56 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be82:	f04f 32ff 	mov.w	r2, #4294967295
 800be86:	611a      	str	r2, [r3, #16]
 800be88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8a:	691a      	ldr	r2, [r3, #16]
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800be90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be92:	2280      	movs	r2, #128	@ 0x80
 800be94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800be96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d149      	bne.n	800bf32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800be9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea0:	3330      	adds	r3, #48	@ 0x30
 800bea2:	3330      	adds	r3, #48	@ 0x30
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fca5 	bl	800a7f4 <ld_word>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b01      	cmp	r3, #1
 800beae:	d140      	bne.n	800bf32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800beb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb2:	3301      	adds	r3, #1
 800beb4:	4619      	mov	r1, r3
 800beb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800beb8:	f7fe ff10 	bl	800acdc <move_window>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d137      	bne.n	800bf32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec4:	2200      	movs	r2, #0
 800bec6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beca:	3330      	adds	r3, #48	@ 0x30
 800becc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fe fc8f 	bl	800a7f4 <ld_word>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461a      	mov	r2, r3
 800beda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bede:	429a      	cmp	r2, r3
 800bee0:	d127      	bne.n	800bf32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee4:	3330      	adds	r3, #48	@ 0x30
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fc9c 	bl	800a824 <ld_dword>
 800beec:	4603      	mov	r3, r0
 800beee:	4a1c      	ldr	r2, [pc, #112]	@ (800bf60 <find_volume+0x48c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d11e      	bne.n	800bf32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef6:	3330      	adds	r3, #48	@ 0x30
 800bef8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe fc91 	bl	800a824 <ld_dword>
 800bf02:	4603      	mov	r3, r0
 800bf04:	4a17      	ldr	r2, [pc, #92]	@ (800bf64 <find_volume+0x490>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d113      	bne.n	800bf32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0c:	3330      	adds	r3, #48	@ 0x30
 800bf0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fc86 	bl	800a824 <ld_dword>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf20:	3330      	adds	r3, #48	@ 0x30
 800bf22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fc7c 	bl	800a824 <ld_dword>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf30:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bf38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf68 <find_volume+0x494>)
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	4b09      	ldr	r3, [pc, #36]	@ (800bf68 <find_volume+0x494>)
 800bf44:	801a      	strh	r2, [r3, #0]
 800bf46:	4b08      	ldr	r3, [pc, #32]	@ (800bf68 <find_volume+0x494>)
 800bf48:	881a      	ldrh	r2, [r3, #0]
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bf4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf50:	f7fe fe5c 	bl	800ac0c <clear_lock>
#endif
	return FR_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3758      	adds	r7, #88	@ 0x58
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	41615252 	.word	0x41615252
 800bf64:	61417272 	.word	0x61417272
 800bf68:	240116f8 	.word	0x240116f8

0800bf6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bf76:	2309      	movs	r3, #9
 800bf78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01c      	beq.n	800bfba <validate+0x4e>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d018      	beq.n	800bfba <validate+0x4e>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d013      	beq.n	800bfba <validate+0x4e>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	889a      	ldrh	r2, [r3, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	88db      	ldrh	r3, [r3, #6]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d10c      	bne.n	800bfba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fba2 	bl	800a6f0 <disk_status>
 800bfac:	4603      	mov	r3, r0
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <validate+0x4e>
			res = FR_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <validate+0x5a>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	e000      	b.n	800bfc8 <validate+0x5c>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	6013      	str	r3, [r2, #0]
	return res;
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bfea:	f107 0310 	add.w	r3, r7, #16
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff fcd5 	bl	800b99e <get_ldnumber>
 800bff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	da01      	bge.n	800c000 <f_mount+0x28>
 800bffc:	230b      	movs	r3, #11
 800bffe:	e02b      	b.n	800c058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c000:	4a17      	ldr	r2, [pc, #92]	@ (800c060 <f_mount+0x88>)
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c010:	69b8      	ldr	r0, [r7, #24]
 800c012:	f7fe fdfb 	bl	800ac0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	490d      	ldr	r1, [pc, #52]	@ (800c060 <f_mount+0x88>)
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <f_mount+0x66>
 800c038:	79fb      	ldrb	r3, [r7, #7]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d001      	beq.n	800c042 <f_mount+0x6a>
 800c03e:	2300      	movs	r3, #0
 800c040:	e00a      	b.n	800c058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c042:	f107 010c 	add.w	r1, r7, #12
 800c046:	f107 0308 	add.w	r3, r7, #8
 800c04a:	2200      	movs	r2, #0
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fd41 	bl	800bad4 <find_volume>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c056:	7dfb      	ldrb	r3, [r7, #23]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	240116f4 	.word	0x240116f4

0800c064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b098      	sub	sp, #96	@ 0x60
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <f_open+0x18>
 800c078:	2309      	movs	r3, #9
 800c07a:	e1a9      	b.n	800c3d0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c084:	79fa      	ldrb	r2, [r7, #7]
 800c086:	f107 0110 	add.w	r1, r7, #16
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4618      	mov	r0, r3
 800c090:	f7ff fd20 	bl	800bad4 <find_volume>
 800c094:	4603      	mov	r3, r0
 800c096:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c09a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f040 818d 	bne.w	800c3be <f_open+0x35a>
		dj.obj.fs = fs;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	f107 0314 	add.w	r3, r7, #20
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fc03 	bl	800b8bc <follow_path>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d118      	bne.n	800c0f6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c0c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c0c8:	b25b      	sxtb	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	da03      	bge.n	800c0d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c0ce:	2306      	movs	r3, #6
 800c0d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c0d4:	e00f      	b.n	800c0f6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	bf8c      	ite	hi
 800c0dc:	2301      	movhi	r3, #1
 800c0de:	2300      	movls	r3, #0
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f107 0314 	add.w	r3, r7, #20
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fe fc82 	bl	800a9f4 <chk_lock>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c0f6:	79fb      	ldrb	r3, [r7, #7]
 800c0f8:	f003 031c 	and.w	r3, r3, #28
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d07f      	beq.n	800c200 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c104:	2b00      	cmp	r3, #0
 800c106:	d017      	beq.n	800c138 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c108:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c10c:	2b04      	cmp	r3, #4
 800c10e:	d10e      	bne.n	800c12e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c110:	f7fe fccc 	bl	800aaac <enq_lock>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <f_open+0xc4>
 800c11a:	f107 0314 	add.w	r3, r7, #20
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff fb05 	bl	800b72e <dir_register>
 800c124:	4603      	mov	r3, r0
 800c126:	e000      	b.n	800c12a <f_open+0xc6>
 800c128:	2312      	movs	r3, #18
 800c12a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c12e:	79fb      	ldrb	r3, [r7, #7]
 800c130:	f043 0308 	orr.w	r3, r3, #8
 800c134:	71fb      	strb	r3, [r7, #7]
 800c136:	e010      	b.n	800c15a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c138:	7ebb      	ldrb	r3, [r7, #26]
 800c13a:	f003 0311 	and.w	r3, r3, #17
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <f_open+0xe6>
					res = FR_DENIED;
 800c142:	2307      	movs	r3, #7
 800c144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c148:	e007      	b.n	800c15a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <f_open+0xf6>
 800c154:	2308      	movs	r3, #8
 800c156:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c15a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d168      	bne.n	800c234 <f_open+0x1d0>
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	f003 0308 	and.w	r3, r3, #8
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d063      	beq.n	800c234 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c16c:	f7fe f882 	bl	800a274 <get_fattime>
 800c170:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c174:	330e      	adds	r3, #14
 800c176:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe fb91 	bl	800a8a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c180:	3316      	adds	r3, #22
 800c182:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe fb8b 	bl	800a8a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c18c:	330b      	adds	r3, #11
 800c18e:	2220      	movs	r2, #32
 800c190:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c196:	4611      	mov	r1, r2
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff fa34 	bl	800b606 <ld_clust>
 800c19e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff fa4c 	bl	800b644 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ae:	331c      	adds	r3, #28
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fb74 	bl	800a8a0 <st_dword>
					fs->wflag = 1;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c1be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d037      	beq.n	800c234 <f_open+0x1d0>
						dw = fs->winsect;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c1ca:	f107 0314 	add.w	r3, r7, #20
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe ff5f 	bl	800b096 <remove_chain>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c1de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d126      	bne.n	800c234 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fd76 	bl	800acdc <move_window>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1fa:	3a01      	subs	r2, #1
 800c1fc:	60da      	str	r2, [r3, #12]
 800c1fe:	e019      	b.n	800c234 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c200:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c204:	2b00      	cmp	r3, #0
 800c206:	d115      	bne.n	800c234 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c208:	7ebb      	ldrb	r3, [r7, #26]
 800c20a:	f003 0310 	and.w	r3, r3, #16
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <f_open+0x1b6>
					res = FR_NO_FILE;
 800c212:	2304      	movs	r3, #4
 800c214:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c218:	e00c      	b.n	800c234 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d007      	beq.n	800c234 <f_open+0x1d0>
 800c224:	7ebb      	ldrb	r3, [r7, #26]
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <f_open+0x1d0>
						res = FR_DENIED;
 800c22e:	2307      	movs	r3, #7
 800c230:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c234:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d126      	bne.n	800c28a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	bf8c      	ite	hi
 800c262:	2301      	movhi	r3, #1
 800c264:	2300      	movls	r3, #0
 800c266:	b2db      	uxtb	r3, r3
 800c268:	461a      	mov	r2, r3
 800c26a:	f107 0314 	add.w	r3, r7, #20
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe fc3d 	bl	800aaf0 <inc_lock>
 800c276:	4602      	mov	r2, r0
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d102      	bne.n	800c28a <f_open+0x226>
 800c284:	2302      	movs	r3, #2
 800c286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c28a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f040 8095 	bne.w	800c3be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff f9b3 	bl	800b606 <ld_clust>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2a8:	331c      	adds	r3, #28
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe faba 	bl	800a824 <ld_dword>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	88da      	ldrh	r2, [r3, #6]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	79fa      	ldrb	r2, [r7, #7]
 800c2ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3330      	adds	r3, #48	@ 0x30
 800c2e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fb24 	bl	800a93a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	f003 0320 	and.w	r3, r3, #32
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d060      	beq.n	800c3be <f_open+0x35a>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d05c      	beq.n	800c3be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68da      	ldr	r2, [r3, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	895b      	ldrh	r3, [r3, #10]
 800c310:	025b      	lsls	r3, r3, #9
 800c312:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c320:	e016      	b.n	800c350 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fd24 	bl	800ad74 <get_fat>
 800c32c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c32e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c330:	2b01      	cmp	r3, #1
 800c332:	d802      	bhi.n	800c33a <f_open+0x2d6>
 800c334:	2302      	movs	r3, #2
 800c336:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c33a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d102      	bne.n	800c348 <f_open+0x2e4>
 800c342:	2301      	movs	r3, #1
 800c344:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c348:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c34a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c350:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <f_open+0x2fc>
 800c358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c35a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d8e0      	bhi.n	800c322 <f_open+0x2be>
				}
				fp->clust = clst;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c364:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c366:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d127      	bne.n	800c3be <f_open+0x35a>
 800c36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c374:	2b00      	cmp	r3, #0
 800c376:	d022      	beq.n	800c3be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fe fcda 	bl	800ad36 <clust2sect>
 800c382:	6478      	str	r0, [r7, #68]	@ 0x44
 800c384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <f_open+0x32e>
						res = FR_INT_ERR;
 800c38a:	2302      	movs	r3, #2
 800c38c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c390:	e015      	b.n	800c3be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c394:	0a5a      	lsrs	r2, r3, #9
 800c396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c398:	441a      	add	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	7858      	ldrb	r0, [r3, #1]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6a1a      	ldr	r2, [r3, #32]
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f7fe f9e1 	bl	800a774 <disk_read>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <f_open+0x35a>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c3be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <f_open+0x368>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c3cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3760      	adds	r7, #96	@ 0x60
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08e      	sub	sp, #56	@ 0x38
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f107 0214 	add.w	r2, r7, #20
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fdb7 	bl	800bf6c <validate>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c404:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d107      	bne.n	800c41c <f_read+0x44>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	7d5b      	ldrb	r3, [r3, #21]
 800c410:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c414:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <f_read+0x4a>
 800c41c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c420:	e115      	b.n	800c64e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	7d1b      	ldrb	r3, [r3, #20]
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <f_read+0x5a>
 800c42e:	2307      	movs	r3, #7
 800c430:	e10d      	b.n	800c64e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	429a      	cmp	r2, r3
 800c444:	f240 80fe 	bls.w	800c644 <f_read+0x26c>
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c44c:	e0fa      	b.n	800c644 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c456:	2b00      	cmp	r3, #0
 800c458:	f040 80c6 	bne.w	800c5e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	0a5b      	lsrs	r3, r3, #9
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	8952      	ldrh	r2, [r2, #10]
 800c466:	3a01      	subs	r2, #1
 800c468:	4013      	ands	r3, r2
 800c46a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d12f      	bne.n	800c4d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d103      	bne.n	800c482 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c480:	e013      	b.n	800c4aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c486:	2b00      	cmp	r3, #0
 800c488:	d007      	beq.n	800c49a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	4619      	mov	r1, r3
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7fe fefd 	bl	800b290 <clmt_clust>
 800c496:	6338      	str	r0, [r7, #48]	@ 0x30
 800c498:	e007      	b.n	800c4aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f7fe fc66 	bl	800ad74 <get_fat>
 800c4a8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d804      	bhi.n	800c4ba <f_read+0xe2>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	755a      	strb	r2, [r3, #21]
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	e0c9      	b.n	800c64e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d104      	bne.n	800c4cc <f_read+0xf4>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	755a      	strb	r2, [r3, #21]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e0c0      	b.n	800c64e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4610      	mov	r0, r2
 800c4dc:	f7fe fc2b 	bl	800ad36 <clust2sect>
 800c4e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <f_read+0x11a>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	755a      	strb	r2, [r3, #21]
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	e0ad      	b.n	800c64e <f_read+0x276>
			sect += csect;
 800c4f2:	69ba      	ldr	r2, [r7, #24]
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	0a5b      	lsrs	r3, r3, #9
 800c4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	d039      	beq.n	800c57a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c506:	69fa      	ldr	r2, [r7, #28]
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	4413      	add	r3, r2
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	8952      	ldrh	r2, [r2, #10]
 800c510:	4293      	cmp	r3, r2
 800c512:	d905      	bls.n	800c520 <f_read+0x148>
					cc = fs->csize - csect;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	895b      	ldrh	r3, [r3, #10]
 800c518:	461a      	mov	r2, r3
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	7858      	ldrb	r0, [r3, #1]
 800c524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c52a:	f7fe f923 	bl	800a774 <disk_read>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <f_read+0x166>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2201      	movs	r2, #1
 800c538:	755a      	strb	r2, [r3, #21]
 800c53a:	2301      	movs	r3, #1
 800c53c:	e087      	b.n	800c64e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	7d1b      	ldrb	r3, [r3, #20]
 800c542:	b25b      	sxtb	r3, r3
 800c544:	2b00      	cmp	r3, #0
 800c546:	da14      	bge.n	800c572 <f_read+0x19a>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6a1a      	ldr	r2, [r3, #32]
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c552:	429a      	cmp	r2, r3
 800c554:	d90d      	bls.n	800c572 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6a1a      	ldr	r2, [r3, #32]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	025b      	lsls	r3, r3, #9
 800c560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c562:	18d0      	adds	r0, r2, r3
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3330      	adds	r3, #48	@ 0x30
 800c568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c56c:	4619      	mov	r1, r3
 800c56e:	f7fe f9c3 	bl	800a8f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c574:	025b      	lsls	r3, r3, #9
 800c576:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c578:	e050      	b.n	800c61c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	d02e      	beq.n	800c5e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	7d1b      	ldrb	r3, [r3, #20]
 800c588:	b25b      	sxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	da18      	bge.n	800c5c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	7858      	ldrb	r0, [r3, #1]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6a1a      	ldr	r2, [r3, #32]
 800c59c:	2301      	movs	r3, #1
 800c59e:	f7fe f909 	bl	800a7b4 <disk_write>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d004      	beq.n	800c5b2 <f_read+0x1da>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	755a      	strb	r2, [r3, #21]
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e04d      	b.n	800c64e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	7d1b      	ldrb	r3, [r3, #20]
 800c5b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	7858      	ldrb	r0, [r3, #1]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	f7fe f8d1 	bl	800a774 <disk_read>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <f_read+0x20a>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	755a      	strb	r2, [r3, #21]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e035      	b.n	800c64e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c5f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d901      	bls.n	800c602 <f_read+0x22a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	699b      	ldr	r3, [r3, #24]
 800c60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c610:	4413      	add	r3, r2
 800c612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c614:	4619      	mov	r1, r3
 800c616:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c618:	f7fe f96e 	bl	800a8f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c620:	4413      	add	r3, r2
 800c622:	627b      	str	r3, [r7, #36]	@ 0x24
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c62a:	441a      	add	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	619a      	str	r2, [r3, #24]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c636:	441a      	add	r2, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f47f af01 	bne.w	800c44e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3738      	adds	r7, #56	@ 0x38
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b090      	sub	sp, #64	@ 0x40
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f107 0208 	add.w	r2, r7, #8
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fc7f 	bl	800bf6c <validate>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c674:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d103      	bne.n	800c684 <f_lseek+0x2e>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7d5b      	ldrb	r3, [r3, #21]
 800c680:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c684:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <f_lseek+0x3c>
 800c68c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c690:	e1e6      	b.n	800ca60 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 80d1 	beq.w	800c83e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a2:	d15a      	bne.n	800c75a <f_lseek+0x104>
			tbl = fp->cltbl;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	1d1a      	adds	r2, r3, #4
 800c6ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d03a      	beq.n	800c73a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c6:	613b      	str	r3, [r7, #16]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ce:	3302      	adds	r3, #2
 800c6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d8:	3301      	adds	r3, #1
 800c6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fe fb47 	bl	800ad74 <get_fat>
 800c6e6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d804      	bhi.n	800c6f8 <f_lseek+0xa2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	755a      	strb	r2, [r3, #21]
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e1b3      	b.n	800ca60 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d104      	bne.n	800c70a <f_lseek+0xb4>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	755a      	strb	r2, [r3, #21]
 800c706:	2301      	movs	r3, #1
 800c708:	e1aa      	b.n	800ca60 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c710:	429a      	cmp	r2, r3
 800c712:	d0de      	beq.n	800c6d2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d809      	bhi.n	800c730 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	627a      	str	r2, [r7, #36]	@ 0x24
 800c722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c728:	1d1a      	adds	r2, r3, #4
 800c72a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c736:	429a      	cmp	r2, r3
 800c738:	d3c4      	bcc.n	800c6c4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c73e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c740:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	429a      	cmp	r2, r3
 800c748:	d803      	bhi.n	800c752 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	e184      	b.n	800ca5c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c752:	2311      	movs	r3, #17
 800c754:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c758:	e180      	b.n	800ca5c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d902      	bls.n	800c76a <f_lseek+0x114>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 8172 	beq.w	800ca5c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7fe fd86 	bl	800b290 <clmt_clust>
 800c784:	4602      	mov	r2, r0
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	4619      	mov	r1, r3
 800c792:	4610      	mov	r0, r2
 800c794:	f7fe facf 	bl	800ad36 <clust2sect>
 800c798:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d104      	bne.n	800c7aa <f_lseek+0x154>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	755a      	strb	r2, [r3, #21]
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e15a      	b.n	800ca60 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	0a5b      	lsrs	r3, r3, #9
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	8952      	ldrh	r2, [r2, #10]
 800c7b4:	3a01      	subs	r2, #1
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 8148 	beq.w	800ca5c <f_lseek+0x406>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	f000 8142 	beq.w	800ca5c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	da18      	bge.n	800c814 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	7858      	ldrb	r0, [r3, #1]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1a      	ldr	r2, [r3, #32]
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	f7fd ffdf 	bl	800a7b4 <disk_write>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d004      	beq.n	800c806 <f_lseek+0x1b0>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	755a      	strb	r2, [r3, #21]
 800c802:	2301      	movs	r3, #1
 800c804:	e12c      	b.n	800ca60 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7d1b      	ldrb	r3, [r3, #20]
 800c80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	7858      	ldrb	r0, [r3, #1]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c81e:	2301      	movs	r3, #1
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	f7fd ffa7 	bl	800a774 <disk_read>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <f_lseek+0x1e0>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	755a      	strb	r2, [r3, #21]
 800c832:	2301      	movs	r3, #1
 800c834:	e114      	b.n	800ca60 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	69ba      	ldr	r2, [r7, #24]
 800c83a:	621a      	str	r2, [r3, #32]
 800c83c:	e10e      	b.n	800ca5c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d908      	bls.n	800c85a <f_lseek+0x204>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d102      	bne.n	800c85a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	637b      	str	r3, [r7, #52]	@ 0x34
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c868:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 80a7 	beq.w	800c9c0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	025b      	lsls	r3, r3, #9
 800c878:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d01b      	beq.n	800c8b8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	fbb2 f2f3 	udiv	r2, r2, r3
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	1e59      	subs	r1, r3, #1
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c894:	429a      	cmp	r2, r3
 800c896:	d30f      	bcc.n	800c8b8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	1e5a      	subs	r2, r3, #1
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	425b      	negs	r3, r3
 800c8a0:	401a      	ands	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	69db      	ldr	r3, [r3, #28]
 800c8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8b6:	e022      	b.n	800c8fe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d119      	bne.n	800c8f8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe fc49 	bl	800b160 <create_chain>
 800c8ce:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d104      	bne.n	800c8e0 <f_lseek+0x28a>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	755a      	strb	r2, [r3, #21]
 800c8dc:	2302      	movs	r3, #2
 800c8de:	e0bf      	b.n	800ca60 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e6:	d104      	bne.n	800c8f2 <f_lseek+0x29c>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	755a      	strb	r2, [r3, #21]
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e0b6      	b.n	800ca60 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d05d      	beq.n	800c9c0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c904:	e03a      	b.n	800c97c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	603b      	str	r3, [r7, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	699a      	ldr	r2, [r3, #24]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	441a      	add	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7d1b      	ldrb	r3, [r3, #20]
 800c91e:	f003 0302 	and.w	r3, r3, #2
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00b      	beq.n	800c93e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe fc18 	bl	800b160 <create_chain>
 800c930:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c934:	2b00      	cmp	r3, #0
 800c936:	d108      	bne.n	800c94a <f_lseek+0x2f4>
							ofs = 0; break;
 800c938:	2300      	movs	r3, #0
 800c93a:	603b      	str	r3, [r7, #0]
 800c93c:	e022      	b.n	800c984 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe fa16 	bl	800ad74 <get_fat>
 800c948:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c950:	d104      	bne.n	800c95c <f_lseek+0x306>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	755a      	strb	r2, [r3, #21]
 800c958:	2301      	movs	r3, #1
 800c95a:	e081      	b.n	800ca60 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d904      	bls.n	800c96c <f_lseek+0x316>
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c968:	429a      	cmp	r2, r3
 800c96a:	d304      	bcc.n	800c976 <f_lseek+0x320>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2202      	movs	r2, #2
 800c970:	755a      	strb	r2, [r3, #21]
 800c972:	2302      	movs	r3, #2
 800c974:	e074      	b.n	800ca60 <f_lseek+0x40a>
					fp->clust = clst;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c97a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	429a      	cmp	r2, r3
 800c982:	d8c0      	bhi.n	800c906 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	699a      	ldr	r2, [r3, #24]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	441a      	add	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c996:	2b00      	cmp	r3, #0
 800c998:	d012      	beq.n	800c9c0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe f9c9 	bl	800ad36 <clust2sect>
 800c9a4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d104      	bne.n	800c9b6 <f_lseek+0x360>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	755a      	strb	r2, [r3, #21]
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e054      	b.n	800ca60 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	0a5b      	lsrs	r3, r3, #9
 800c9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9bc:	4413      	add	r3, r2
 800c9be:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	699a      	ldr	r2, [r3, #24]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d90a      	bls.n	800c9e2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699a      	ldr	r2, [r3, #24]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d036      	beq.n	800ca5c <f_lseek+0x406>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d031      	beq.n	800ca5c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	b25b      	sxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da18      	bge.n	800ca34 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	7858      	ldrb	r0, [r3, #1]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a1a      	ldr	r2, [r3, #32]
 800ca10:	2301      	movs	r3, #1
 800ca12:	f7fd fecf 	bl	800a7b4 <disk_write>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <f_lseek+0x3d0>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	755a      	strb	r2, [r3, #21]
 800ca22:	2301      	movs	r3, #1
 800ca24:	e01c      	b.n	800ca60 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7d1b      	ldrb	r3, [r3, #20]
 800ca2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	7858      	ldrb	r0, [r3, #1]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca3e:	2301      	movs	r3, #1
 800ca40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca42:	f7fd fe97 	bl	800a774 <disk_read>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <f_lseek+0x400>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	755a      	strb	r2, [r3, #21]
 800ca52:	2301      	movs	r3, #1
 800ca54:	e004      	b.n	800ca60 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca5a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ca5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3740      	adds	r7, #64	@ 0x40
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	4613      	mov	r3, r2
 800ca74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca76:	2301      	movs	r3, #1
 800ca78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca7e:	4b1f      	ldr	r3, [pc, #124]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800ca80:	7a5b      	ldrb	r3, [r3, #9]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d131      	bne.n	800caec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca88:	4b1c      	ldr	r3, [pc, #112]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800ca8a:	7a5b      	ldrb	r3, [r3, #9]
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4b1a      	ldr	r3, [pc, #104]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800ca92:	2100      	movs	r1, #0
 800ca94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca96:	4b19      	ldr	r3, [pc, #100]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800ca98:	7a5b      	ldrb	r3, [r3, #9]
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	4a17      	ldr	r2, [pc, #92]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800caa6:	4b15      	ldr	r3, [pc, #84]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800caa8:	7a5b      	ldrb	r3, [r3, #9]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	461a      	mov	r2, r3
 800caae:	4b13      	ldr	r3, [pc, #76]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800cab0:	4413      	add	r3, r2
 800cab2:	79fa      	ldrb	r2, [r7, #7]
 800cab4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cab6:	4b11      	ldr	r3, [pc, #68]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800cab8:	7a5b      	ldrb	r3, [r3, #9]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	b2d1      	uxtb	r1, r2
 800cac0:	4a0e      	ldr	r2, [pc, #56]	@ (800cafc <FATFS_LinkDriverEx+0x94>)
 800cac2:	7251      	strb	r1, [r2, #9]
 800cac4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cac6:	7dbb      	ldrb	r3, [r7, #22]
 800cac8:	3330      	adds	r3, #48	@ 0x30
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	3301      	adds	r3, #1
 800cad4:	223a      	movs	r2, #58	@ 0x3a
 800cad6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	3302      	adds	r3, #2
 800cadc:	222f      	movs	r2, #47	@ 0x2f
 800cade:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	3303      	adds	r3, #3
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800caec:	7dfb      	ldrb	r3, [r7, #23]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	2401171c 	.word	0x2401171c

0800cb00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff ffaa 	bl	800ca68 <FATFS_LinkDriverEx>
 800cb14:	4603      	mov	r3, r0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800cb20:	b480      	push	{r7}
 800cb22:	b097      	sub	sp, #92	@ 0x5c
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	4a24      	ldr	r2, [pc, #144]	@ (800cbc4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 800cb32:	fba2 2303 	umull	r2, r3, r2, r3
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	633b      	str	r3, [r7, #48]	@ 0x30
  currentMCU = BlockIndex;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 800cb3e:	e148      	b.n	800cdd2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800cb40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb42:	011a      	lsls	r2, r3, #4
 800cb44:	4b20      	ldr	r3, [pc, #128]	@ (800cbc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800cb50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb52:	011b      	lsls	r3, r3, #4
 800cb54:	4a1c      	ldr	r2, [pc, #112]	@ (800cbc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800cb56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cb58:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb5c:	fb01 f202 	mul.w	r2, r1, r2
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800cb64:	4b18      	ldr	r3, [pc, #96]	@ (800cbc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800cb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb6a:	fb03 f202 	mul.w	r2, r3, r2
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	647b      	str	r3, [r7, #68]	@ 0x44

    currentMCU++;
 800cb76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb78:	3301      	adds	r3, #1
 800cb7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cb82:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    pLum = pInBuffer;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
    
    for(i= 0; i <  16; i+=2)
 800cb88:	2300      	movs	r3, #0
 800cb8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb8c:	e119      	b.n	800cdc2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 800cb8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb90:	2b08      	cmp	r3, #8
 800cb92:	d102      	bne.n	800cb9a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3380      	adds	r3, #128	@ 0x80
 800cb98:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800cb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cba0:	429a      	cmp	r2, r3
 800cba2:	f080 810b 	bcs.w	800cdbc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbaa:	4413      	add	r3, r2
 800cbac:	643b      	str	r3, [r7, #64]	@ 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800cbae:	4b06      	ldr	r3, [pc, #24]	@ (800cbc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbb4:	4413      	add	r3, r2
 800cbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        
        for(k= 0; k<2; k++)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbbc:	e0f1      	b.n	800cda2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbc2:	e0e4      	b.n	800cd8e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 800cbc4:	aaaaaaab 	.word	0xaaaaaaab
 800cbc8:	24011728 	.word	0x24011728
          {           
            cbcomp = (int32_t)(*(pChrom));
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	627b      	str	r3, [r7, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4a86      	ldr	r2, [pc, #536]	@ (800cdf0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 800cbd8:	4413      	add	r3, r2
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	3340      	adds	r3, #64	@ 0x40
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4a82      	ldr	r2, [pc, #520]	@ (800cdf4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 800cbec:	4413      	add	r3, r2
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4a80      	ldr	r2, [pc, #512]	@ (800cdf8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 800cbf8:	4413      	add	r3, r2
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	497e      	ldr	r1, [pc, #504]	@ (800cdfc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 800cc02:	440b      	add	r3, r1
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4413      	add	r3, r2
 800cc08:	141b      	asrs	r3, r3, #16
 800cc0a:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 800cc0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc10:	4413      	add	r3, r2
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cc20:	4a77      	ldr	r2, [pc, #476]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cc22:	5cd3      	ldrb	r3, [r2, r3]
 800cc24:	08db      	lsrs	r3, r3, #3
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	02db      	lsls	r3, r3, #11
 800cc2a:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc2c:	6939      	ldr	r1, [r7, #16]
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	440b      	add	r3, r1
 800cc32:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cc36:	4972      	ldr	r1, [pc, #456]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cc38:	5ccb      	ldrb	r3, [r1, r3]
 800cc3a:	089b      	lsrs	r3, r3, #2
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc40:	b21b      	sxth	r3, r3
 800cc42:	4313      	orrs	r3, r2
 800cc44:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cc46:	6939      	ldr	r1, [r7, #16]
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	440b      	add	r3, r1
 800cc4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cc50:	496b      	ldr	r1, [pc, #428]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cc52:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc54:	08db      	lsrs	r3, r3, #3
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	b21b      	sxth	r3, r3
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	b21b      	sxth	r3, r3
 800cc5e:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800cc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc62:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800cc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc66:	3301      	adds	r3, #1
 800cc68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc6a:	4413      	add	r3, r2
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc70:	693a      	ldr	r2, [r7, #16]
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cc7a:	4a61      	ldr	r2, [pc, #388]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cc7c:	5cd3      	ldrb	r3, [r2, r3]
 800cc7e:	08db      	lsrs	r3, r3, #3
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	02db      	lsls	r3, r3, #11
 800cc84:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cc86:	6939      	ldr	r1, [r7, #16]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	440b      	add	r3, r1
 800cc8c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cc90:	495b      	ldr	r1, [pc, #364]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cc92:	5ccb      	ldrb	r3, [r1, r3]
 800cc94:	089b      	lsrs	r3, r3, #2
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cca0:	6939      	ldr	r1, [r7, #16]
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	440b      	add	r3, r1
 800cca6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ccaa:	4955      	ldr	r1, [pc, #340]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800ccac:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ccae:	08db      	lsrs	r3, r3, #3
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	b21b      	sxth	r3, r3
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800ccb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccba:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ccbc:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800ccbe:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 800ccc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccc2:	3308      	adds	r3, #8
 800ccc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccc6:	4413      	add	r3, r2
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ccd6:	4a4a      	ldr	r2, [pc, #296]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800ccd8:	5cd3      	ldrb	r3, [r2, r3]
 800ccda:	08db      	lsrs	r3, r3, #3
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	02db      	lsls	r3, r3, #11
 800cce0:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cce2:	6939      	ldr	r1, [r7, #16]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	440b      	add	r3, r1
 800cce8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ccec:	4944      	ldr	r1, [pc, #272]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800ccee:	5ccb      	ldrb	r3, [r1, r3]
 800ccf0:	089b      	lsrs	r3, r3, #2
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800ccfc:	6939      	ldr	r1, [r7, #16]
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	440b      	add	r3, r1
 800cd02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd06:	493e      	ldr	r1, [pc, #248]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cd08:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cd0a:	08db      	lsrs	r3, r3, #3
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	b21b      	sxth	r3, r3
 800cd10:	4313      	orrs	r3, r2
 800cd12:	b21b      	sxth	r3, r3
 800cd14:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 800cd16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd18:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800cd1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd1c:	3309      	adds	r3, #9
 800cd1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd20:	4413      	add	r3, r2
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd30:	4a33      	ldr	r2, [pc, #204]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cd32:	5cd3      	ldrb	r3, [r2, r3]
 800cd34:	08db      	lsrs	r3, r3, #3
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	02db      	lsls	r3, r3, #11
 800cd3a:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cd3c:	6939      	ldr	r1, [r7, #16]
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	440b      	add	r3, r1
 800cd42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd46:	492e      	ldr	r1, [pc, #184]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cd48:	5ccb      	ldrb	r3, [r1, r3]
 800cd4a:	089b      	lsrs	r3, r3, #2
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cd50:	b21b      	sxth	r3, r3
 800cd52:	4313      	orrs	r3, r2
 800cd54:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800cd56:	6939      	ldr	r1, [r7, #16]
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cd60:	4927      	ldr	r1, [pc, #156]	@ (800ce00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 800cd62:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cd64:	08db      	lsrs	r3, r3, #3
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	b21b      	sxth	r3, r3
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800cd6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd70:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cd72:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800cd74:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800cd76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd78:	3304      	adds	r3, #4
 800cd7a:	643b      	str	r3, [r7, #64]	@ 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800cd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7e:	3304      	adds	r3, #4
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
          
            pChrom++;
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	3301      	adds	r3, #1
 800cd86:	63bb      	str	r3, [r7, #56]	@ 0x38
          for(j=0; j < 8; j+=2)
 800cd88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd8a:	3302      	adds	r3, #2
 800cd8c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd90:	2b07      	cmp	r3, #7
 800cd92:	f67f af1b 	bls.w	800cbcc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 800cd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd98:	3340      	adds	r3, #64	@ 0x40
 800cd9a:	637b      	str	r3, [r7, #52]	@ 0x34
        for(k= 0; k<2; k++)
 800cd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd9e:	3301      	adds	r3, #1
 800cda0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cda2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	f67f af0a 	bls.w	800cbbe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 800cdaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdac:	3b70      	subs	r3, #112	@ 0x70
 800cdae:	637b      	str	r3, [r7, #52]	@ 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800cdb0:	4b14      	ldr	r3, [pc, #80]	@ (800ce04 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 800cdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdb8:	4413      	add	r3, r2
 800cdba:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i= 0; i <  16; i+=2)
 800cdbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdbe:	3302      	adds	r3, #2
 800cdc0:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdc4:	2b0f      	cmp	r3, #15
 800cdc6:	f67f aee2 	bls.w	800cb8e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800cdd0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800cdd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdda:	429a      	cmp	r2, r3
 800cddc:	f4ff aeb0 	bcc.w	800cb40 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	375c      	adds	r7, #92	@ 0x5c
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	24011b68 	.word	0x24011b68
 800cdf4:	24011768 	.word	0x24011768
 800cdf8:	24011f68 	.word	0x24011f68
 800cdfc:	24012368 	.word	0x24012368
 800ce00:	0800da6c 	.word	0x0800da6c
 800ce04:	24011728 	.word	0x24011728

0800ce08 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800ce08:	b480      	push	{r7}
 800ce0a:	b097      	sub	sp, #92	@ 0x5c
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	0a1b      	lsrs	r3, r3, #8
 800ce1a:	637b      	str	r3, [r7, #52]	@ 0x34
  currentMCU = BlockIndex;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 800ce20:	e0d9      	b.n	800cfd6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ce22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce24:	011a      	lsls	r2, r3, #4
 800ce26:	4b73      	ldr	r3, [pc, #460]	@ (800cff4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800ce28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	633b      	str	r3, [r7, #48]	@ 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800ce32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	4a6f      	ldr	r2, [pc, #444]	@ (800cff4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800ce38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ce3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce3e:	fb01 f202 	mul.w	r2, r1, r2
 800ce42:	1a9b      	subs	r3, r3, r2
 800ce44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ce46:	4b6b      	ldr	r3, [pc, #428]	@ (800cff4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800ce48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce4c:	fb03 f202 	mul.w	r2, r3, r2
 800ce50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	647b      	str	r3, [r7, #68]	@ 0x44

    currentMCU++;
 800ce58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3380      	adds	r3, #128	@ 0x80
 800ce62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    pLum = pInBuffer;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    for(i= 0; i <  8; i++)
 800ce68:	2300      	movs	r3, #0
 800ce6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce6c:	e0ab      	b.n	800cfc6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ce6e:	4b61      	ldr	r3, [pc, #388]	@ (800cff4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce74:	429a      	cmp	r2, r3
 800ce76:	f080 80a3 	bcs.w	800cfc0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce7e:	4413      	add	r3, r2
 800ce80:	643b      	str	r3, [r7, #64]	@ 0x40
        
        for(k= 0; k<2; k++)
 800ce82:	2300      	movs	r3, #0
 800ce84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce86:	e08f      	b.n	800cfa8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce8c:	e082      	b.n	800cf94 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 800ce8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	62bb      	str	r3, [r7, #40]	@ 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4a57      	ldr	r2, [pc, #348]	@ (800cff8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 800ce9a:	4413      	add	r3, r2
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	627b      	str	r3, [r7, #36]	@ 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 800cea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea2:	3340      	adds	r3, #64	@ 0x40
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800cea8:	6a3b      	ldr	r3, [r7, #32]
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4a53      	ldr	r2, [pc, #332]	@ (800cffc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 800ceae:	4413      	add	r3, r2
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4a51      	ldr	r2, [pc, #324]	@ (800d000 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 800ceba:	4413      	add	r3, r2
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4950      	ldr	r1, [pc, #320]	@ (800d004 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 800cec4:	440b      	add	r3, r1
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4413      	add	r3, r2
 800ceca:	141b      	asrs	r3, r3, #16
 800cecc:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 800cece:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ced0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ced2:	4413      	add	r3, r2
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	4413      	add	r3, r2
 800cede:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cee2:	4a49      	ldr	r2, [pc, #292]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cee4:	5cd3      	ldrb	r3, [r2, r3]
 800cee6:	08db      	lsrs	r3, r3, #3
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	02db      	lsls	r3, r3, #11
 800ceec:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	440b      	add	r3, r1
 800cef4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cef8:	4943      	ldr	r1, [pc, #268]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cefa:	5ccb      	ldrb	r3, [r1, r3]
 800cefc:	089b      	lsrs	r3, r3, #2
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cf02:	b21b      	sxth	r3, r3
 800cf04:	4313      	orrs	r3, r2
 800cf06:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800cf08:	6979      	ldr	r1, [r7, #20]
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	440b      	add	r3, r1
 800cf0e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cf12:	493d      	ldr	r1, [pc, #244]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cf14:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cf16:	08db      	lsrs	r3, r3, #3
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	b21b      	sxth	r3, r3
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	b21b      	sxth	r3, r3
 800cf20:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800cf22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf24:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 800cf26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf28:	3301      	adds	r3, #1
 800cf2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf2c:	4413      	add	r3, r2
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cf3c:	4a32      	ldr	r2, [pc, #200]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cf3e:	5cd3      	ldrb	r3, [r2, r3]
 800cf40:	08db      	lsrs	r3, r3, #3
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	02db      	lsls	r3, r3, #11
 800cf46:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cf48:	6979      	ldr	r1, [r7, #20]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	440b      	add	r3, r1
 800cf4e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cf52:	492d      	ldr	r1, [pc, #180]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cf54:	5ccb      	ldrb	r3, [r1, r3]
 800cf56:	089b      	lsrs	r3, r3, #2
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800cf5c:	b21b      	sxth	r3, r3
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800cf62:	6979      	ldr	r1, [r7, #20]
 800cf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf66:	440b      	add	r3, r1
 800cf68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cf6c:	4926      	ldr	r1, [pc, #152]	@ (800d008 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 800cf6e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	b21b      	sxth	r3, r3
 800cf76:	4313      	orrs	r3, r2
 800cf78:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800cf7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf7c:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800cf7e:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800cf80:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800cf82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf84:	3304      	adds	r3, #4
 800cf86:	643b      	str	r3, [r7, #64]	@ 0x40
          
            pChrom++;
 800cf88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          for(j=0; j < 8; j+=2)
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf90:	3302      	adds	r3, #2
 800cf92:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf96:	2b07      	cmp	r3, #7
 800cf98:	f67f af79 	bls.w	800ce8e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9e:	3340      	adds	r3, #64	@ 0x40
 800cfa0:	63bb      	str	r3, [r7, #56]	@ 0x38
        for(k= 0; k<2; k++)
 800cfa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	f67f af6c 	bls.w	800ce88 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	3b78      	subs	r3, #120	@ 0x78
 800cfb4:	63bb      	str	r3, [r7, #56]	@ 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800cfb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cff4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 800cfb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfbc:	4413      	add	r3, r2
 800cfbe:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i= 0; i <  8; i++)
 800cfc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cfc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc8:	2b07      	cmp	r3, #7
 800cfca:	f67f af50 	bls.w	800ce6e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800cfd4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800cfd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4413      	add	r3, r2
 800cfdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	f4ff af1f 	bcc.w	800ce22 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	375c      	adds	r7, #92	@ 0x5c
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	24011728 	.word	0x24011728
 800cff8:	24011b68 	.word	0x24011b68
 800cffc:	24011768 	.word	0x24011768
 800d000:	24011f68 	.word	0x24011f68
 800d004:	24012368 	.word	0x24012368
 800d008:	0800da6c 	.word	0x0800da6c

0800d00c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800d00c:	b480      	push	{r7}
 800d00e:	b095      	sub	sp, #84	@ 0x54
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	4a58      	ldr	r2, [pc, #352]	@ (800d180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 800d01e:	fba2 2303 	umull	r2, r3, r2, r3
 800d022:	09db      	lsrs	r3, r3, #7
 800d024:	633b      	str	r3, [r7, #48]	@ 0x30
  currentMCU = BlockIndex;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	647b      	str	r3, [r7, #68]	@ 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 800d02a:	e09a      	b.n	800d162 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800d02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d02e:	00da      	lsls	r2, r3, #3
 800d030:	4b54      	ldr	r3, [pc, #336]	@ (800d184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800d032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d034:	fbb2 f3f3 	udiv	r3, r2, r3
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800d03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	4a50      	ldr	r2, [pc, #320]	@ (800d184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800d042:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d044:	fbb3 f1f2 	udiv	r1, r3, r2
 800d048:	fb01 f202 	mul.w	r2, r1, r2
 800d04c:	1a9b      	subs	r3, r3, r2
 800d04e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d050:	4b4c      	ldr	r3, [pc, #304]	@ (800d184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800d052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d056:	fb03 f202 	mul.w	r2, r3, r2
 800d05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	643b      	str	r3, [r7, #64]	@ 0x40

    currentMCU++;   
 800d062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d064:	3301      	adds	r3, #1
 800d066:	647b      	str	r3, [r7, #68]	@ 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3340      	adds	r3, #64	@ 0x40
 800d06c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    pLum = pInBuffer;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	637b      	str	r3, [r7, #52]	@ 0x34
    
    for(i= 0; i <  8; i++)
 800d072:	2300      	movs	r3, #0
 800d074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d076:	e06e      	b.n	800d156 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d078:	4b42      	ldr	r3, [pc, #264]	@ (800d184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d07e:	429a      	cmp	r2, r3
 800d080:	d266      	bcs.n	800d150 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d086:	4413      	add	r3, r2
 800d088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        

          for(j=0; j < 8; j++)
 800d08a:	2300      	movs	r3, #0
 800d08c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d08e:	e054      	b.n	800d13a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 800d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	627b      	str	r3, [r7, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4a3b      	ldr	r2, [pc, #236]	@ (800d188 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 800d09c:	4413      	add	r3, r2
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	3340      	adds	r3, #64	@ 0x40
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4a37      	ldr	r2, [pc, #220]	@ (800d18c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 800d0b0:	4413      	add	r3, r2
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4a35      	ldr	r2, [pc, #212]	@ (800d190 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 800d0bc:	4413      	add	r3, r2
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4933      	ldr	r1, [pc, #204]	@ (800d194 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 800d0c6:	440b      	add	r3, r1
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	141b      	asrs	r3, r3, #16
 800d0ce:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 800d0d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0d4:	4413      	add	r3, r2
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d0da:	693a      	ldr	r2, [r7, #16]
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800d0e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d198 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800d0e6:	5cd3      	ldrb	r3, [r2, r3]
 800d0e8:	08db      	lsrs	r3, r3, #3
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	02db      	lsls	r3, r3, #11
 800d0ee:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d0f0:	6939      	ldr	r1, [r7, #16]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	440b      	add	r3, r1
 800d0f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800d0fa:	4927      	ldr	r1, [pc, #156]	@ (800d198 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800d0fc:	5ccb      	ldrb	r3, [r1, r3]
 800d0fe:	089b      	lsrs	r3, r3, #2
 800d100:	b2db      	uxtb	r3, r3
 800d102:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800d104:	b21b      	sxth	r3, r3
 800d106:	4313      	orrs	r3, r2
 800d108:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800d10a:	6939      	ldr	r1, [r7, #16]
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	440b      	add	r3, r1
 800d110:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800d114:	4920      	ldr	r1, [pc, #128]	@ (800d198 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 800d116:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800d118:	08db      	lsrs	r3, r3, #3
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	b21b      	sxth	r3, r3
 800d11e:	4313      	orrs	r3, r2
 800d120:	b21b      	sxth	r3, r3
 800d122:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 800d124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d126:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 800d128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d12a:	3302      	adds	r3, #2
 800d12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          
            pChrom++;
 800d12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d130:	3301      	adds	r3, #1
 800d132:	63bb      	str	r3, [r7, #56]	@ 0x38
          for(j=0; j < 8; j++)
 800d134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d136:	3301      	adds	r3, #1
 800d138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d13a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d13c:	2b07      	cmp	r3, #7
 800d13e:	d9a7      	bls.n	800d090 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 800d140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d142:	3308      	adds	r3, #8
 800d144:	637b      	str	r3, [r7, #52]	@ 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800d146:	4b0f      	ldr	r3, [pc, #60]	@ (800d184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 800d148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d14a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d14c:	4413      	add	r3, r2
 800d14e:	643b      	str	r3, [r7, #64]	@ 0x40
    for(i= 0; i <  8; i++)
 800d150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d152:	3301      	adds	r3, #1
 800d154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d158:	2b07      	cmp	r3, #7
 800d15a:	d98d      	bls.n	800d078 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	33c0      	adds	r3, #192	@ 0xc0
 800d160:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800d162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4413      	add	r3, r2
 800d168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f4ff af5e 	bcc.w	800d02c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800d172:	4618      	mov	r0, r3
 800d174:	3754      	adds	r7, #84	@ 0x54
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	aaaaaaab 	.word	0xaaaaaaab
 800d184:	24011728 	.word	0x24011728
 800d188:	24011b68 	.word	0x24011b68
 800d18c:	24011768 	.word	0x24011768
 800d190:	24011f68 	.word	0x24011f68
 800d194:	24012368 	.word	0x24012368
 800d198:	0800da6c 	.word	0x0800da6c

0800d19c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b08f      	sub	sp, #60	@ 0x3c
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	099b      	lsrs	r3, r3, #6
 800d1ae:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	637b      	str	r3, [r7, #52]	@ 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 800d1b4:	e05e      	b.n	800d274 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b8:	00da      	lsls	r2, r3, #3
 800d1ba:	4b35      	ldr	r3, [pc, #212]	@ (800d290 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800d1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	4a31      	ldr	r2, [pc, #196]	@ (800d290 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800d1cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1d2:	fb01 f202 	mul.w	r2, r1, r2
 800d1d6:	1a9b      	subs	r3, r3, r2
 800d1d8:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d1da:	4b2d      	ldr	r3, [pc, #180]	@ (800d290 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800d1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	fb03 f202 	mul.w	r2, r3, r2
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	4413      	add	r3, r2
 800d1ea:	633b      	str	r3, [r7, #48]	@ 0x30
    
    currentMCU++;
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	637b      	str	r3, [r7, #52]	@ 0x34
  
    pLum = pInBuffer;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1fa:	e035      	b.n	800d268 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	4413      	add	r3, r2
 800d202:	627b      	str	r3, [r7, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d204:	4b22      	ldr	r3, [pc, #136]	@ (800d290 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d229      	bcs.n	800d262 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 800d20e:	2300      	movs	r3, #0
 800d210:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d212:	e01e      	b.n	800d252 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 800d214:	6a3b      	ldr	r3, [r7, #32]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	08db      	lsrs	r3, r3, #3
 800d21e:	b29b      	uxth	r3, r3
 800d220:	02db      	lsls	r3, r3, #11
 800d222:	b29a      	uxth	r2, r3
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	089b      	lsrs	r3, r3, #2
 800d228:	b29b      	uxth	r3, r3
 800d22a:	015b      	lsls	r3, r3, #5
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	b29a      	uxth	r2, r3
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	08db      	lsrs	r3, r3, #3
 800d236:	b29b      	uxth	r3, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	3302      	adds	r3, #2
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
          pLum++;
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	3301      	adds	r3, #1
 800d24a:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 800d24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24e:	3301      	adds	r3, #1
 800d250:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	2b07      	cmp	r3, #7
 800d256:	d9dd      	bls.n	800d214 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 800d258:	4b0d      	ldr	r3, [pc, #52]	@ (800d290 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 800d25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d25c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d25e:	4413      	add	r3, r2
 800d260:	633b      	str	r3, [r7, #48]	@ 0x30
    for(i= 0; i <  8; i++)
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	3301      	adds	r3, #1
 800d266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26a:	2b07      	cmp	r3, #7
 800d26c:	d9c6      	bls.n	800d1fc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3340      	adds	r3, #64	@ 0x40
 800d272:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800d274:	69fa      	ldr	r2, [r7, #28]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4413      	add	r3, r2
 800d27a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d39a      	bcc.n	800d1b6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800d280:	69fb      	ldr	r3, [r7, #28]
}
 800d282:	4618      	mov	r0, r3
 800d284:	373c      	adds	r7, #60	@ 0x3c
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	24011728 	.word	0x24011728

0800d294 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800d294:	b480      	push	{r7}
 800d296:	b093      	sub	sp, #76	@ 0x4c
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	0a1b      	lsrs	r3, r3, #8
 800d2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  currentMCU = BlockIndex;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 800d2ac:	e08b      	b.n	800d3c6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b0:	00da      	lsls	r2, r3, #3
 800d2b2:	4b4c      	ldr	r3, [pc, #304]	@ (800d3e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ba:	00db      	lsls	r3, r3, #3
 800d2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800d2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	4a48      	ldr	r2, [pc, #288]	@ (800d3e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800d2c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d2c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2ca:	fb01 f202 	mul.w	r2, r1, r2
 800d2ce:	1a9b      	subs	r3, r3, r2
 800d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800d2d2:	4b44      	ldr	r3, [pc, #272]	@ (800d3e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800d2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2d8:	fb03 f202 	mul.w	r2, r3, r2
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	4413      	add	r3, r2
 800d2e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    currentMCU++;
 800d2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    pChrom = pInBuffer;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	633b      	str	r3, [r7, #48]	@ 0x30
    
    for(i= 0; i <  8; i++)
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2f2:	e061      	b.n	800d3b8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800d2f4:	4b3b      	ldr	r3, [pc, #236]	@ (800d3e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d259      	bcs.n	800d3b2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d302:	4413      	add	r3, r2
 800d304:	637b      	str	r3, [r7, #52]	@ 0x34

          for(j=0; j < 8; j++)
 800d306:	2300      	movs	r3, #0
 800d308:	643b      	str	r3, [r7, #64]	@ 0x40
 800d30a:	e04a      	b.n	800d3a2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	33c0      	adds	r3, #192	@ 0xc0
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	fb02 f303 	mul.w	r3, r2, r3
 800d320:	4a31      	ldr	r2, [pc, #196]	@ (800d3e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800d322:	fb82 1203 	smull	r1, r2, r2, r3
 800d326:	441a      	add	r2, r3
 800d328:	11d2      	asrs	r2, r2, #7
 800d32a:	17db      	asrs	r3, r3, #31
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800d330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d332:	3340      	adds	r3, #64	@ 0x40
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	fb02 f303 	mul.w	r3, r2, r3
 800d33e:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800d340:	fb82 1203 	smull	r1, r2, r2, r3
 800d344:	441a      	add	r2, r3
 800d346:	11d2      	asrs	r2, r2, #7
 800d348:	17db      	asrs	r3, r3, #31
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	3380      	adds	r3, #128	@ 0x80
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	461a      	mov	r2, r3
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	fb02 f303 	mul.w	r3, r2, r3
 800d35c:	4a22      	ldr	r2, [pc, #136]	@ (800d3e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 800d35e:	fb82 1203 	smull	r1, r2, r2, r3
 800d362:	441a      	add	r2, r3
 800d364:	11d2      	asrs	r2, r2, #7
 800d366:	17db      	asrs	r3, r3, #31
 800d368:	1ad3      	subs	r3, r2, r3
 800d36a:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	10db      	asrs	r3, r3, #3
 800d370:	02db      	lsls	r3, r3, #11
 800d372:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	109b      	asrs	r3, r3, #2
 800d378:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800d384:	b21b      	sxth	r3, r3
 800d386:	4313      	orrs	r3, r2
 800d388:	b21b      	sxth	r3, r3
 800d38a:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 800d38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d38e:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 800d390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d392:	3302      	adds	r3, #2
 800d394:	637b      	str	r3, [r7, #52]	@ 0x34
          
            pChrom++;
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	3301      	adds	r3, #1
 800d39a:	633b      	str	r3, [r7, #48]	@ 0x30
          for(j=0; j < 8; j++)
 800d39c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d39e:	3301      	adds	r3, #1
 800d3a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a4:	2b07      	cmp	r3, #7
 800d3a6:	d9b1      	bls.n	800d30c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 800d3a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 800d3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3ae:	4413      	add	r3, r2
 800d3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i= 0; i <  8; i++)
 800d3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3ba:	2b07      	cmp	r3, #7
 800d3bc:	d99a      	bls.n	800d2f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800d3c4:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 800d3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	f4ff af6d 	bcc.w	800d2ae <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	374c      	adds	r7, #76	@ 0x4c
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	24011728 	.word	0x24011728
 800d3e8:	80808081 	.word	0x80808081

0800d3ec <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b087      	sub	sp, #28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a7a      	ldr	r2, [pc, #488]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d3fe:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	4a78      	ldr	r2, [pc, #480]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d406:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	4a76      	ldr	r2, [pc, #472]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d40e:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	6892      	ldr	r2, [r2, #8]
 800d418:	fb02 f303 	mul.w	r3, r2, r3
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4a72      	ldr	r2, [pc, #456]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d420:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4a70      	ldr	r2, [pc, #448]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d428:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800d42a:	4b6f      	ldr	r3, [pc, #444]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b10      	cmp	r3, #16
 800d430:	d155      	bne.n	800d4de <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800d432:	4b6d      	ldr	r3, [pc, #436]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	2b01      	cmp	r3, #1
 800d438:	d119      	bne.n	800d46e <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	4a6b      	ldr	r2, [pc, #428]	@ (800d5ec <JPEG_GetDecodeColorConvertFunc+0x200>)
 800d43e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800d440:	4b69      	ldr	r3, [pc, #420]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	4a67      	ldr	r2, [pc, #412]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d44a:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800d44c:	4b66      	ldr	r3, [pc, #408]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800d454:	4b64      	ldr	r3, [pc, #400]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	f1c3 0310 	rsb	r3, r3, #16
 800d45c:	4a62      	ldr	r2, [pc, #392]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d45e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800d460:	4b61      	ldr	r3, [pc, #388]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d462:	2210      	movs	r2, #16
 800d464:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 800d466:	4b60      	ldr	r3, [pc, #384]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d468:	2210      	movs	r2, #16
 800d46a:	621a      	str	r2, [r3, #32]
 800d46c:	e075      	b.n	800d55a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800d46e:	4b5e      	ldr	r3, [pc, #376]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d119      	bne.n	800d4aa <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	4a5d      	ldr	r2, [pc, #372]	@ (800d5f0 <JPEG_GetDecodeColorConvertFunc+0x204>)
 800d47a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 800d47c:	4b5a      	ldr	r3, [pc, #360]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	f003 030f 	and.w	r3, r3, #15
 800d484:	4a58      	ldr	r2, [pc, #352]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d486:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800d488:	4b57      	ldr	r3, [pc, #348]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800d490:	4b55      	ldr	r3, [pc, #340]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	f1c3 0310 	rsb	r3, r3, #16
 800d498:	4a53      	ldr	r2, [pc, #332]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d49a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800d49c:	4b52      	ldr	r3, [pc, #328]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d49e:	2210      	movs	r2, #16
 800d4a0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800d4a2:	4b51      	ldr	r3, [pc, #324]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4a4:	2208      	movs	r2, #8
 800d4a6:	621a      	str	r2, [r3, #32]
 800d4a8:	e057      	b.n	800d55a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4a51      	ldr	r2, [pc, #324]	@ (800d5f4 <JPEG_GetDecodeColorConvertFunc+0x208>)
 800d4ae:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800d4b0:	4b4d      	ldr	r3, [pc, #308]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f003 0307 	and.w	r3, r3, #7
 800d4b8:	4a4b      	ldr	r2, [pc, #300]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4ba:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800d4bc:	4b4a      	ldr	r3, [pc, #296]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d005      	beq.n	800d4d0 <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800d4c4:	4b48      	ldr	r3, [pc, #288]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	f1c3 0308 	rsb	r3, r3, #8
 800d4cc:	4a46      	ldr	r2, [pc, #280]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4ce:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 800d4d0:	4b45      	ldr	r3, [pc, #276]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4d2:	2208      	movs	r2, #8
 800d4d4:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800d4d6:	4b44      	ldr	r3, [pc, #272]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4d8:	2208      	movs	r2, #8
 800d4da:	621a      	str	r2, [r3, #32]
 800d4dc:	e03d      	b.n	800d55a <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800d4de:	4b42      	ldr	r3, [pc, #264]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d119      	bne.n	800d51a <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	4a43      	ldr	r2, [pc, #268]	@ (800d5f8 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 800d4ea:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800d4ec:	4b3e      	ldr	r3, [pc, #248]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	4a3c      	ldr	r2, [pc, #240]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4f6:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 800d4f8:	4b3b      	ldr	r3, [pc, #236]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d005      	beq.n	800d50c <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800d500:	4b39      	ldr	r3, [pc, #228]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	f1c3 0308 	rsb	r3, r3, #8
 800d508:	4a37      	ldr	r2, [pc, #220]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d50a:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800d50c:	4b36      	ldr	r3, [pc, #216]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d50e:	2208      	movs	r2, #8
 800d510:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800d512:	4b35      	ldr	r3, [pc, #212]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d514:	2208      	movs	r2, #8
 800d516:	621a      	str	r2, [r3, #32]
 800d518:	e01f      	b.n	800d55a <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800d51a:	4b33      	ldr	r3, [pc, #204]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b30      	cmp	r3, #48	@ 0x30
 800d520:	d119      	bne.n	800d556 <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	4a35      	ldr	r2, [pc, #212]	@ (800d5fc <JPEG_GetDecodeColorConvertFunc+0x210>)
 800d526:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 800d528:	4b2f      	ldr	r3, [pc, #188]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	f003 0307 	and.w	r3, r3, #7
 800d530:	4a2d      	ldr	r2, [pc, #180]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d532:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 800d534:	4b2c      	ldr	r3, [pc, #176]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d005      	beq.n	800d548 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800d53c:	4b2a      	ldr	r3, [pc, #168]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	f1c3 0308 	rsb	r3, r3, #8
 800d544:	4a28      	ldr	r2, [pc, #160]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d546:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 800d548:	4b27      	ldr	r3, [pc, #156]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d54a:	2208      	movs	r2, #8
 800d54c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 800d54e:	4b26      	ldr	r3, [pc, #152]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d550:	2208      	movs	r2, #8
 800d552:	621a      	str	r2, [r3, #32]
 800d554:	e001      	b.n	800d55a <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 800d556:	2301      	movs	r3, #1
 800d558:	e040      	b.n	800d5dc <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800d55a:	4b23      	ldr	r3, [pc, #140]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	4b22      	ldr	r3, [pc, #136]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	4413      	add	r3, r2
 800d564:	4a20      	ldr	r2, [pc, #128]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d566:	6253      	str	r3, [r2, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800d568:	4b1f      	ldr	r3, [pc, #124]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	005b      	lsls	r3, r3, #1
 800d56e:	4a1e      	ldr	r2, [pc, #120]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d570:	6293      	str	r3, [r2, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800d572:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	4b1c      	ldr	r3, [pc, #112]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d578:	69db      	ldr	r3, [r3, #28]
 800d57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d57e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800d580:	4b19      	ldr	r3, [pc, #100]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	4a18      	ldr	r2, [pc, #96]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d586:	69d2      	ldr	r2, [r2, #28]
 800d588:	fbb3 f1f2 	udiv	r1, r3, r2
 800d58c:	fb01 f202 	mul.w	r2, r1, r2
 800d590:	1a9b      	subs	r3, r3, r2
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	3301      	adds	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800d59c:	4b12      	ldr	r3, [pc, #72]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	4b11      	ldr	r3, [pc, #68]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d5a2:	6a1b      	ldr	r3, [r3, #32]
 800d5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5a8:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800d5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	4a0e      	ldr	r2, [pc, #56]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d5b0:	6a12      	ldr	r2, [r2, #32]
 800d5b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5b6:	fb01 f202 	mul.w	r2, r1, r2
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	693a      	ldr	r2, [r7, #16]
 800d5ca:	fb02 f303 	mul.w	r3, r2, r3
 800d5ce:	4a06      	ldr	r2, [pc, #24]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800d5d2:	4b05      	ldr	r3, [pc, #20]	@ (800d5e8 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 800d5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	24011728 	.word	0x24011728
 800d5ec:	0800cb21 	.word	0x0800cb21
 800d5f0:	0800ce09 	.word	0x0800ce09
 800d5f4:	0800d00d 	.word	0x0800d00d
 800d5f8:	0800d19d 	.word	0x0800d19d
 800d5fc:	0800d295 	.word	0x0800d295

0800d600 <JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitPostProcColorTables(void)
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
  int32_t index, i; 
    
  for (i = 0; i <= 255; i++) 
 800d606:	2300      	movs	r3, #0
 800d608:	607b      	str	r3, [r7, #4]
 800d60a:	e02e      	b.n	800d66a <JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3b80      	subs	r3, #128	@ 0x80
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	f24b 3274 	movw	r2, #45940	@ 0xb374
 800d61a:	fb02 f303 	mul.w	r3, r2, r3
 800d61e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d622:	141a      	asrs	r2, r3, #16
 800d624:	4916      	ldr	r1, [pc, #88]	@ (800d680 <JPEG_InitPostProcColorTables+0x80>)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f24e 22d0 	movw	r2, #58064	@ 0xe2d0
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d63a:	141a      	asrs	r2, r3, #16
 800d63c:	4911      	ldr	r1, [pc, #68]	@ (800d684 <JPEG_InitPostProcColorTables+0x84>)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	4a10      	ldr	r2, [pc, #64]	@ (800d688 <JPEG_InitPostProcColorTables+0x88>)
 800d648:	fb03 f202 	mul.w	r2, r3, r2
 800d64c:	490f      	ldr	r1, [pc, #60]	@ (800d68c <JPEG_InitPostProcColorTables+0x8c>)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	4a0e      	ldr	r2, [pc, #56]	@ (800d690 <JPEG_InitPostProcColorTables+0x90>)
 800d658:	fb03 f202 	mul.w	r2, r3, r2
 800d65c:	490d      	ldr	r1, [pc, #52]	@ (800d694 <JPEG_InitPostProcColorTables+0x94>)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++) 
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	3301      	adds	r3, #1
 800d668:	607b      	str	r3, [r7, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2bff      	cmp	r3, #255	@ 0xff
 800d66e:	ddcd      	ble.n	800d60c <JPEG_InitPostProcColorTables+0xc>
  }  
}
 800d670:	bf00      	nop
 800d672:	bf00      	nop
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	24011768 	.word	0x24011768
 800d684:	24011b68 	.word	0x24011b68
 800d688:	ffffa498 	.word	0xffffa498
 800d68c:	24011f68 	.word	0x24011f68
 800d690:	ffffd3f4 	.word	0xffffd3f4
 800d694:	24012368 	.word	0x24012368

0800d698 <JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables  
  * @param  None
  * @retval None
  */
void JPEG_InitColorTables(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	af00      	add	r7, sp, #0
  JPEG_InitPreProcColorTables();
  JPEG_Init_MCU_LUT();
#endif

#if (USE_JPEG_DECODER == 1)
  JPEG_InitPostProcColorTables();
 800d69c:	f7ff ffb0 	bl	800d600 <JPEG_InitPostProcColorTables>
#endif

}
 800d6a0:	bf00      	nop
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <memset>:
 800d6a4:	4402      	add	r2, r0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d100      	bne.n	800d6ae <memset+0xa>
 800d6ac:	4770      	bx	lr
 800d6ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d6b2:	e7f9      	b.n	800d6a8 <memset+0x4>

0800d6b4 <__libc_init_array>:
 800d6b4:	b570      	push	{r4, r5, r6, lr}
 800d6b6:	4d0d      	ldr	r5, [pc, #52]	@ (800d6ec <__libc_init_array+0x38>)
 800d6b8:	4c0d      	ldr	r4, [pc, #52]	@ (800d6f0 <__libc_init_array+0x3c>)
 800d6ba:	1b64      	subs	r4, r4, r5
 800d6bc:	10a4      	asrs	r4, r4, #2
 800d6be:	2600      	movs	r6, #0
 800d6c0:	42a6      	cmp	r6, r4
 800d6c2:	d109      	bne.n	800d6d8 <__libc_init_array+0x24>
 800d6c4:	4d0b      	ldr	r5, [pc, #44]	@ (800d6f4 <__libc_init_array+0x40>)
 800d6c6:	4c0c      	ldr	r4, [pc, #48]	@ (800d6f8 <__libc_init_array+0x44>)
 800d6c8:	f000 f818 	bl	800d6fc <_init>
 800d6cc:	1b64      	subs	r4, r4, r5
 800d6ce:	10a4      	asrs	r4, r4, #2
 800d6d0:	2600      	movs	r6, #0
 800d6d2:	42a6      	cmp	r6, r4
 800d6d4:	d105      	bne.n	800d6e2 <__libc_init_array+0x2e>
 800d6d6:	bd70      	pop	{r4, r5, r6, pc}
 800d6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6dc:	4798      	blx	r3
 800d6de:	3601      	adds	r6, #1
 800d6e0:	e7ee      	b.n	800d6c0 <__libc_init_array+0xc>
 800d6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e6:	4798      	blx	r3
 800d6e8:	3601      	adds	r6, #1
 800d6ea:	e7f2      	b.n	800d6d2 <__libc_init_array+0x1e>
 800d6ec:	0800dd6c 	.word	0x0800dd6c
 800d6f0:	0800dd6c 	.word	0x0800dd6c
 800d6f4:	0800dd6c 	.word	0x0800dd6c
 800d6f8:	0800dd70 	.word	0x0800dd70

0800d6fc <_init>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	bf00      	nop
 800d700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	469e      	mov	lr, r3
 800d706:	4770      	bx	lr

0800d708 <_fini>:
 800d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70a:	bf00      	nop
 800d70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d70e:	bc08      	pop	{r3}
 800d710:	469e      	mov	lr, r3
 800d712:	4770      	bx	lr
