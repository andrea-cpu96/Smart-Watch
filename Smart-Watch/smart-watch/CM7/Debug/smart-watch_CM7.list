
smart-watch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb68  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800ce00  0800ce00  0000de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d160  0800d160  0000f060  2**0
                  CONTENTS
  4 .ARM          00000000  0800d160  0800d160  0000f060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d160  0800d160  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d164  0800d164  0000e164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  0800d168  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  24000060  0800d1c8  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007d0  0800d1c8  0000f7d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a15  00000000  00000000  0000f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003757  00000000  00000000  00026aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0002a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee2  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041da3  00000000  00000000  0002c48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c34e  00000000  00000000  0006e22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c253  00000000  00000000  0008a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002267ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  00226814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0022bbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cde8 	.word	0x0800cde8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	0800cde8 	.word	0x0800cde8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d105      	bne.n	8000420 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4806      	ldr	r0, [pc, #24]	@ (8000434 <GC9A01_set_reset+0x30>)
 800041a:	f001 fca5 	bl	8001d68 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800041e:	e004      	b.n	800042a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2120      	movs	r1, #32
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <GC9A01_set_reset+0x30>)
 8000426:	f001 fc9f 	bl	8001d68 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	58022400 	.word	0x58022400

08000438 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d105      	bne.n	8000454 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2140      	movs	r1, #64	@ 0x40
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800044e:	f001 fc8b 	bl	8001d68 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000452:	e004      	b.n	800045e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	@ (8000468 <GC9A01_set_data_command+0x30>)
 800045a:	f001 fc85 	bl	8001d68 <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	58022400 	.word	0x58022400

0800046c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2102      	movs	r1, #2
 8000480:	4806      	ldr	r0, [pc, #24]	@ (800049c <GC9A01_set_chip_select+0x30>)
 8000482:	f001 fc71 	bl	8001d68 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000486:	e004      	b.n	8000492 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2102      	movs	r1, #2
 800048c:	4803      	ldr	r0, [pc, #12]	@ (800049c <GC9A01_set_chip_select+0x30>)
 800048e:	f001 fc6b 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	58022800 	.word	0x58022800

080004a0 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ffc4 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ffdb 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fa92 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd3 	bl	800046c <GC9A01_set_chip_select>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ffad 	bl	8000438 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ffc4 	bl	800046c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fa7a 	bl	80009e4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ffbb 	bl	800046c <GC9A01_set_chip_select>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	2101      	movs	r1, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffde 	bl	80004ce <GC9A01_write_data>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <GC9A01_write>:

void GC9A01_write(uint8_t *data, size_t len) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR);
 8000524:	202c      	movs	r0, #44	@ 0x2c
 8000526:	f7ff ffbb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffce 	bl	80004ce <GC9A01_write_data>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <GC9A01_write_continue>:

void GC9A01_write_continue(uint8_t *data, size_t len) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
    GC9A01_write_command(MEM_WR_CONT);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff ffab 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_data(data, len);
 800054a:	6839      	ldr	r1, [r7, #0]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffbe 	bl	80004ce <GC9A01_write_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <GC9A01_init>:

void GC9A01_init(void) {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ff84 	bl	800046c <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000564:	2005      	movs	r0, #5
 8000566:	f001 f8f7 	bl	8001758 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff4a 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f001 f8f1 	bl	8001758 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff44 	bl	8000404 <GC9A01_set_reset>
    HAL_Delay(120);
 800057c:	2078      	movs	r0, #120	@ 0x78
 800057e:	f001 f8eb 	bl	8001758 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000582:	20ef      	movs	r0, #239	@ 0xef
 8000584:	f7ff ff8c 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000588:	20eb      	movs	r0, #235	@ 0xeb
 800058a:	f7ff ff89 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800058e:	2014      	movs	r0, #20
 8000590:	f7ff ffb5 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000594:	20fe      	movs	r0, #254	@ 0xfe
 8000596:	f7ff ff83 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800059a:	20ef      	movs	r0, #239	@ 0xef
 800059c:	f7ff ff80 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 80005a0:	20eb      	movs	r0, #235	@ 0xeb
 80005a2:	f7ff ff7d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f7ff ffa9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 80005ac:	2084      	movs	r0, #132	@ 0x84
 80005ae:	f7ff ff77 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 80005b2:	2040      	movs	r0, #64	@ 0x40
 80005b4:	f7ff ffa3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 80005b8:	2085      	movs	r0, #133	@ 0x85
 80005ba:	f7ff ff71 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005be:	20ff      	movs	r0, #255	@ 0xff
 80005c0:	f7ff ff9d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 80005c4:	2086      	movs	r0, #134	@ 0x86
 80005c6:	f7ff ff6b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005ca:	20ff      	movs	r0, #255	@ 0xff
 80005cc:	f7ff ff97 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 80005d0:	2087      	movs	r0, #135	@ 0x87
 80005d2:	f7ff ff65 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	f7ff ff91 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 80005dc:	2088      	movs	r0, #136	@ 0x88
 80005de:	f7ff ff5f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f7ff ff8b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 80005e8:	2089      	movs	r0, #137	@ 0x89
 80005ea:	f7ff ff59 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80005ee:	2021      	movs	r0, #33	@ 0x21
 80005f0:	f7ff ff85 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 80005f4:	208a      	movs	r0, #138	@ 0x8a
 80005f6:	f7ff ff53 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff7f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000600:	208b      	movs	r0, #139	@ 0x8b
 8000602:	f7ff ff4d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000606:	2080      	movs	r0, #128	@ 0x80
 8000608:	f7ff ff79 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800060c:	208c      	movs	r0, #140	@ 0x8c
 800060e:	f7ff ff47 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff73 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000618:	208d      	movs	r0, #141	@ 0x8d
 800061a:	f7ff ff41 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff6d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000624:	208e      	movs	r0, #142	@ 0x8e
 8000626:	f7ff ff3b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800062a:	20ff      	movs	r0, #255	@ 0xff
 800062c:	f7ff ff67 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000630:	208f      	movs	r0, #143	@ 0x8f
 8000632:	f7ff ff35 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff61 	bl	80004fe <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800063c:	20b6      	movs	r0, #182	@ 0xb6
 800063e:	f7ff ff2f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff ff5b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff58 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800064e:	2036      	movs	r0, #54	@ 0x36
 8000650:	f7ff ff26 	bl	80004a0 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000654:	2048      	movs	r0, #72	@ 0x48
 8000656:	f7ff ff52 	bl	80004fe <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800065a:	203a      	movs	r0, #58	@ 0x3a
 800065c:	f7ff ff20 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff ff4c 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000666:	2090      	movs	r0, #144	@ 0x90
 8000668:	f7ff ff1a 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff46 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000672:	2008      	movs	r0, #8
 8000674:	f7ff ff43 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000678:	2008      	movs	r0, #8
 800067a:	f7ff ff40 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff ff3d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000684:	20bd      	movs	r0, #189	@ 0xbd
 8000686:	f7ff ff0b 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff37 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000690:	20bc      	movs	r0, #188	@ 0xbc
 8000692:	f7ff ff05 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff31 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800069c:	20ff      	movs	r0, #255	@ 0xff
 800069e:	f7ff feff 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 80006a2:	2060      	movs	r0, #96	@ 0x60
 80006a4:	f7ff ff2b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff28 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f7ff ff25 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 80006b4:	20c3      	movs	r0, #195	@ 0xc3
 80006b6:	f7ff fef3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006ba:	2013      	movs	r0, #19
 80006bc:	f7ff ff1f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 80006c0:	20c4      	movs	r0, #196	@ 0xc4
 80006c2:	f7ff feed 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 80006c6:	2013      	movs	r0, #19
 80006c8:	f7ff ff19 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 80006cc:	20c9      	movs	r0, #201	@ 0xc9
 80006ce:	f7ff fee7 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 80006d2:	2022      	movs	r0, #34	@ 0x22
 80006d4:	f7ff ff13 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 80006d8:	20be      	movs	r0, #190	@ 0xbe
 80006da:	f7ff fee1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 80006de:	2011      	movs	r0, #17
 80006e0:	f7ff ff0d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 80006e4:	20e1      	movs	r0, #225	@ 0xe1
 80006e6:	f7ff fedb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff07 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff04 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 80006f6:	20df      	movs	r0, #223	@ 0xdf
 80006f8:	f7ff fed2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 80006fc:	2021      	movs	r0, #33	@ 0x21
 80006fe:	f7ff fefe 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff fefb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fef8 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800070e:	20f0      	movs	r0, #240	@ 0xf0
 8000710:	f7ff fec6 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000714:	2045      	movs	r0, #69	@ 0x45
 8000716:	f7ff fef2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800071a:	2009      	movs	r0, #9
 800071c:	f7ff feef 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000720:	2008      	movs	r0, #8
 8000722:	f7ff feec 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000726:	2008      	movs	r0, #8
 8000728:	f7ff fee9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fee6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000732:	202a      	movs	r0, #42	@ 0x2a
 8000734:	f7ff fee3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000738:	20f1      	movs	r0, #241	@ 0xf1
 800073a:	f7ff feb1 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800073e:	2043      	movs	r0, #67	@ 0x43
 8000740:	f7ff fedd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000744:	2070      	movs	r0, #112	@ 0x70
 8000746:	f7ff feda 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800074a:	2072      	movs	r0, #114	@ 0x72
 800074c:	f7ff fed7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000750:	2036      	movs	r0, #54	@ 0x36
 8000752:	f7ff fed4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000756:	2037      	movs	r0, #55	@ 0x37
 8000758:	f7ff fed1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800075c:	206f      	movs	r0, #111	@ 0x6f
 800075e:	f7ff fece 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000762:	20f2      	movs	r0, #242	@ 0xf2
 8000764:	f7ff fe9c 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000768:	2045      	movs	r0, #69	@ 0x45
 800076a:	f7ff fec8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fec5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff fec2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800077a:	2008      	movs	r0, #8
 800077c:	f7ff febf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000780:	2026      	movs	r0, #38	@ 0x26
 8000782:	f7ff febc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000786:	202a      	movs	r0, #42	@ 0x2a
 8000788:	f7ff feb9 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800078c:	20f3      	movs	r0, #243	@ 0xf3
 800078e:	f7ff fe87 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000792:	2043      	movs	r0, #67	@ 0x43
 8000794:	f7ff feb3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000798:	2070      	movs	r0, #112	@ 0x70
 800079a:	f7ff feb0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800079e:	2072      	movs	r0, #114	@ 0x72
 80007a0:	f7ff fead 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 80007a4:	2036      	movs	r0, #54	@ 0x36
 80007a6:	f7ff feaa 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 80007aa:	2037      	movs	r0, #55	@ 0x37
 80007ac:	f7ff fea7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 80007b0:	206f      	movs	r0, #111	@ 0x6f
 80007b2:	f7ff fea4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 80007b6:	20ed      	movs	r0, #237	@ 0xed
 80007b8:	f7ff fe72 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80007bc:	201b      	movs	r0, #27
 80007be:	f7ff fe9e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 80007c2:	200b      	movs	r0, #11
 80007c4:	f7ff fe9b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 80007c8:	20ae      	movs	r0, #174	@ 0xae
 80007ca:	f7ff fe69 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80007ce:	2077      	movs	r0, #119	@ 0x77
 80007d0:	f7ff fe95 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 80007d4:	20cd      	movs	r0, #205	@ 0xcd
 80007d6:	f7ff fe63 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80007da:	2063      	movs	r0, #99	@ 0x63
 80007dc:	f7ff fe8f 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 80007e0:	2070      	movs	r0, #112	@ 0x70
 80007e2:	f7ff fe5d 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f7ff fe89 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f7ff fe86 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 80007f2:	2004      	movs	r0, #4
 80007f4:	f7ff fe83 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 80007f8:	200e      	movs	r0, #14
 80007fa:	f7ff fe80 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 80007fe:	200f      	movs	r0, #15
 8000800:	f7ff fe7d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000804:	2009      	movs	r0, #9
 8000806:	f7ff fe7a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800080a:	2007      	movs	r0, #7
 800080c:	f7ff fe77 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe74 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000816:	2003      	movs	r0, #3
 8000818:	f7ff fe71 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800081c:	20e8      	movs	r0, #232	@ 0xe8
 800081e:	f7ff fe3f 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000822:	2034      	movs	r0, #52	@ 0x34
 8000824:	f7ff fe6b 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000828:	2062      	movs	r0, #98	@ 0x62
 800082a:	f7ff fe39 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800082e:	2018      	movs	r0, #24
 8000830:	f7ff fe65 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000834:	200d      	movs	r0, #13
 8000836:	f7ff fe62 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800083a:	2071      	movs	r0, #113	@ 0x71
 800083c:	f7ff fe5f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000840:	20ed      	movs	r0, #237	@ 0xed
 8000842:	f7ff fe5c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000846:	2070      	movs	r0, #112	@ 0x70
 8000848:	f7ff fe59 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800084c:	2070      	movs	r0, #112	@ 0x70
 800084e:	f7ff fe56 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000852:	2018      	movs	r0, #24
 8000854:	f7ff fe53 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000858:	200f      	movs	r0, #15
 800085a:	f7ff fe50 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800085e:	2071      	movs	r0, #113	@ 0x71
 8000860:	f7ff fe4d 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000864:	20ef      	movs	r0, #239	@ 0xef
 8000866:	f7ff fe4a 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800086a:	2070      	movs	r0, #112	@ 0x70
 800086c:	f7ff fe47 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000870:	2070      	movs	r0, #112	@ 0x70
 8000872:	f7ff fe44 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000876:	2063      	movs	r0, #99	@ 0x63
 8000878:	f7ff fe12 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800087c:	2018      	movs	r0, #24
 800087e:	f7ff fe3e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe3b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000888:	2071      	movs	r0, #113	@ 0x71
 800088a:	f7ff fe38 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800088e:	20f1      	movs	r0, #241	@ 0xf1
 8000890:	f7ff fe35 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000894:	2070      	movs	r0, #112	@ 0x70
 8000896:	f7ff fe32 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800089a:	2070      	movs	r0, #112	@ 0x70
 800089c:	f7ff fe2f 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 80008a0:	2018      	movs	r0, #24
 80008a2:	f7ff fe2c 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 80008a6:	2013      	movs	r0, #19
 80008a8:	f7ff fe29 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 80008ac:	2071      	movs	r0, #113	@ 0x71
 80008ae:	f7ff fe26 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 80008b2:	20f3      	movs	r0, #243	@ 0xf3
 80008b4:	f7ff fe23 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008b8:	2070      	movs	r0, #112	@ 0x70
 80008ba:	f7ff fe20 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 80008be:	2070      	movs	r0, #112	@ 0x70
 80008c0:	f7ff fe1d 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 80008c4:	2064      	movs	r0, #100	@ 0x64
 80008c6:	f7ff fdeb 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f7ff fe17 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 80008d0:	2029      	movs	r0, #41	@ 0x29
 80008d2:	f7ff fe14 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008d6:	20f1      	movs	r0, #241	@ 0xf1
 80008d8:	f7ff fe11 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe0e 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 80008e2:	20f1      	movs	r0, #241	@ 0xf1
 80008e4:	f7ff fe0b 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe08 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f7ff fe05 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 80008f4:	2066      	movs	r0, #102	@ 0x66
 80008f6:	f7ff fdd3 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 80008fa:	203c      	movs	r0, #60	@ 0x3c
 80008fc:	f7ff fdff 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fdfc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000906:	20cd      	movs	r0, #205	@ 0xcd
 8000908:	f7ff fdf9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800090c:	2067      	movs	r0, #103	@ 0x67
 800090e:	f7ff fdf6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f7ff fdf3 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f7ff fdf0 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fded 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdea 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fde7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fde4 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000936:	2067      	movs	r0, #103	@ 0x67
 8000938:	f7ff fdb2 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fdde 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000942:	203c      	movs	r0, #60	@ 0x3c
 8000944:	f7ff fddb 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fdd8 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fdd5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdd2 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fdcf 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000960:	2054      	movs	r0, #84	@ 0x54
 8000962:	f7ff fdcc 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000966:	2010      	movs	r0, #16
 8000968:	f7ff fdc9 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800096c:	2032      	movs	r0, #50	@ 0x32
 800096e:	f7ff fdc6 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000972:	2098      	movs	r0, #152	@ 0x98
 8000974:	f7ff fdc3 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000978:	2074      	movs	r0, #116	@ 0x74
 800097a:	f7ff fd91 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800097e:	2010      	movs	r0, #16
 8000980:	f7ff fdbd 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000984:	2085      	movs	r0, #133	@ 0x85
 8000986:	f7ff fdba 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800098a:	2080      	movs	r0, #128	@ 0x80
 800098c:	f7ff fdb7 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fdb4 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fdb1 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800099c:	204e      	movs	r0, #78	@ 0x4e
 800099e:	f7ff fdae 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fdab 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 80009a8:	2098      	movs	r0, #152	@ 0x98
 80009aa:	f7ff fd79 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80009ae:	203e      	movs	r0, #62	@ 0x3e
 80009b0:	f7ff fda5 	bl	80004fe <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f7ff fda2 	bl	80004fe <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 80009ba:	2035      	movs	r0, #53	@ 0x35
 80009bc:	f7ff fd70 	bl	80004a0 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 80009c0:	2021      	movs	r0, #33	@ 0x21
 80009c2:	f7ff fd6d 	bl	80004a0 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f7ff fd6a 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(120);
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f000 fec3 	bl	8001758 <HAL_Delay>
    GC9A01_write_command(0x29);
 80009d2:	2029      	movs	r0, #41	@ 0x29
 80009d4:	f7ff fd64 	bl	80004a0 <GC9A01_write_command>
    HAL_Delay(20);
 80009d8:	2014      	movs	r0, #20
 80009da:	f000 febd 	bl	8001758 <HAL_Delay>
    
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
static void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 80009f0:	887a      	ldrh	r2, [r7, #2]
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_spi_tx+0x30>)
 80009fa:	f008 f82d 	bl	8008a58 <HAL_SPI_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a04:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <GC9A01_spi_tx+0x34>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
		return;

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240005b4 	.word	0x240005b4
 8000a18:	2400007c 	.word	0x2400007c

08000a1c <lcd_init>:
// lcd
uint8_t color[3];


void lcd_init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	GC9A01_init();
 8000a20:	f7ff fd9b 	bl	800055a <GC9A01_init>
	sd_init();
 8000a24:	f000 f94e 	bl	8000cc4 <sd_init>

	//bmp_init(bmp, &file, fName, lcd_draw);

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <lcd_process>:


void lcd_process(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

	// sd_image_demo();
	// lcd_demo();
	jpeg_demo();
 8000a30:	f000 f842 	bl	8000ab8 <jpeg_demo>

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <lcd_draw>:


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	80fb      	strh	r3, [r7, #6]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80bb      	strh	r3, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	807b      	strh	r3, [r7, #2]
 8000a52:	4613      	mov	r3, r2
 8000a54:	803b      	strh	r3, [r7, #0]

	for(int x = sx; x < ( wd + sx ) ; x++)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e022      	b.n	8000aa2 <lcd_draw+0x6a>
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	e016      	b.n	8000a90 <lcd_draw+0x58>
		{

			if (x == sx && y == sy)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d108      	bne.n	8000a7c <lcd_draw+0x44>
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d104      	bne.n	8000a7c <lcd_draw+0x44>
			{

				GC9A01_write(data, 2);
 8000a72:	2102      	movs	r1, #2
 8000a74:	6a38      	ldr	r0, [r7, #32]
 8000a76:	f7ff fd50 	bl	800051a <GC9A01_write>
 8000a7a:	e003      	b.n	8000a84 <lcd_draw+0x4c>

			}
			else
			{

				GC9A01_write_continue(data, 2);
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	6a38      	ldr	r0, [r7, #32]
 8000a80:	f7ff fd5b 	bl	800053a <GC9A01_write_continue>

			}

			data += 2;
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	3302      	adds	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
		for(int y = sy; y < ( ht + sy ) ; y++)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	883a      	ldrh	r2, [r7, #0]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbe2      	blt.n	8000a62 <lcd_draw+0x2a>
	for(int x = sx; x < ( wd + sx ) ; x++)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd6      	blt.n	8000a5c <lcd_draw+0x24>

		}

	}

}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <jpeg_demo>:

#include "string.h"
uint16_t sample_image[240*240*2] = {0};

void jpeg_demo(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	f5ad 3d28 	sub.w	sp, sp, #172032	@ 0x2a000
 8000abe:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8000ac2:	af02      	add	r7, sp, #8
    UINT byteRead;
    JPEG_ConfTypeDef JPEG_Info;

    hjpeg.Instance = JPEG;
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	@ (8000c7c <jpeg_demo+0x1c4>)
 8000ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8000c80 <jpeg_demo+0x1c8>)
 8000ac8:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Init(&hjpeg);
 8000aca:	486c      	ldr	r0, [pc, #432]	@ (8000c7c <jpeg_demo+0x1c4>)
 8000acc:	f001 f994 	bl	8001df8 <HAL_JPEG_Init>

    if(f_open(&file, "image.jpg", FA_READ) != FR_OK)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	496c      	ldr	r1, [pc, #432]	@ (8000c84 <jpeg_demo+0x1cc>)
 8000ad4:	486c      	ldr	r0, [pc, #432]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000ad6:	f00b f833 	bl	800bb40 <f_open>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <jpeg_demo+0x2e>
    {
        Error_Handler(); // Gestisci l'errore di apertura del file
 8000ae0:	f000 fba6 	bl	8001230 <Error_Handler>
        return;
 8000ae4:	e0c3      	b.n	8000c6e <jpeg_demo+0x1b6>
    }

    uint32_t size = f_size(&file);
 8000ae6:	4b68      	ldr	r3, [pc, #416]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	4a68      	ldr	r2, [pc, #416]	@ (8000c8c <jpeg_demo+0x1d4>)
 8000aec:	443a      	add	r2, r7
 8000aee:	6013      	str	r3, [r2, #0]

    uint8_t *JPEG_InputBuffer = (uint8_t *)malloc(size); // Allocazione dinamica del buffer di input
 8000af0:	4b66      	ldr	r3, [pc, #408]	@ (8000c8c <jpeg_demo+0x1d4>)
 8000af2:	443b      	add	r3, r7
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f00c f82b 	bl	800cb50 <malloc>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a64      	ldr	r2, [pc, #400]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000afe:	443a      	add	r2, r7
 8000b00:	6013      	str	r3, [r2, #0]
    if (JPEG_InputBuffer == NULL)
 8000b02:	4b63      	ldr	r3, [pc, #396]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000b04:	443b      	add	r3, r7
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <jpeg_demo+0x5a>
    {
        Error_Handler(); // Gestisci l'errore di allocazione di memoria
 8000b0c:	f000 fb90 	bl	8001230 <Error_Handler>
        return;
 8000b10:	e0ad      	b.n	8000c6e <jpeg_demo+0x1b6>
    }

    uint8_t JPEG_OutputBuffer[240 * 240 * 3]; // Buffer di output

    if(f_read(&file, JPEG_InputBuffer, size, &byteRead) != FR_OK)
 8000b12:	4b60      	ldr	r3, [pc, #384]	@ (8000c94 <jpeg_demo+0x1dc>)
 8000b14:	443b      	add	r3, r7
 8000b16:	4a5d      	ldr	r2, [pc, #372]	@ (8000c8c <jpeg_demo+0x1d4>)
 8000b18:	443a      	add	r2, r7
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	495c      	ldr	r1, [pc, #368]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000b1e:	4439      	add	r1, r7
 8000b20:	6809      	ldr	r1, [r1, #0]
 8000b22:	4859      	ldr	r0, [pc, #356]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000b24:	f00b f9c6 	bl	800beb4 <f_read>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <jpeg_demo+0x86>
    {
        free(JPEG_InputBuffer); // Libera la memoria allocata
 8000b2e:	4b58      	ldr	r3, [pc, #352]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000b30:	443b      	add	r3, r7
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	f00c f814 	bl	800cb60 <free>
        Error_Handler(); // Gestisci l'errore di lettura dal file
 8000b38:	f000 fb7a 	bl	8001230 <Error_Handler>
        return;
 8000b3c:	e097      	b.n	8000c6e <jpeg_demo+0x1b6>
    }

    // Decodifica JPEG
    HAL_JPEG_Decode(&hjpeg, JPEG_InputBuffer, size, JPEG_OutputBuffer, sizeof(JPEG_OutputBuffer), HAL_MAX_DELAY);
 8000b3e:	4b56      	ldr	r3, [pc, #344]	@ (8000c98 <jpeg_demo+0x1e0>)
 8000b40:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000b44:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8000b48:	443b      	add	r3, r7
 8000b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4e:	9201      	str	r2, [sp, #4]
 8000b50:	4a52      	ldr	r2, [pc, #328]	@ (8000c9c <jpeg_demo+0x1e4>)
 8000b52:	9200      	str	r2, [sp, #0]
 8000b54:	4a4d      	ldr	r2, [pc, #308]	@ (8000c8c <jpeg_demo+0x1d4>)
 8000b56:	443a      	add	r2, r7
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	494d      	ldr	r1, [pc, #308]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000b5c:	4439      	add	r1, r7
 8000b5e:	6809      	ldr	r1, [r1, #0]
 8000b60:	4846      	ldr	r0, [pc, #280]	@ (8000c7c <jpeg_demo+0x1c4>)
 8000b62:	f001 fa60 	bl	8002026 <HAL_JPEG_Decode>

    // Ottieni informazioni sull'immagine JPEG
    HAL_JPEG_GetInfo(&hjpeg, &JPEG_Info);
 8000b66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca0 <jpeg_demo+0x1e8>)
 8000b68:	443b      	add	r3, r7
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4843      	ldr	r0, [pc, #268]	@ (8000c7c <jpeg_demo+0x1c4>)
 8000b6e:	f001 f9c5 	bl	8001efc <HAL_JPEG_GetInfo>

    uint32_t width = JPEG_Info.ImageWidth;
 8000b72:	4b4c      	ldr	r3, [pc, #304]	@ (8000ca4 <jpeg_demo+0x1ec>)
 8000b74:	443b      	add	r3, r7
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca8 <jpeg_demo+0x1f0>)
 8000b7a:	443a      	add	r2, r7
 8000b7c:	6013      	str	r3, [r2, #0]
    uint32_t height = JPEG_Info.ImageHeight;
 8000b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000cac <jpeg_demo+0x1f4>)
 8000b80:	443b      	add	r3, r7
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb0 <jpeg_demo+0x1f8>)
 8000b86:	443a      	add	r2, r7
 8000b88:	6013      	str	r3, [r2, #0]

    doubleFormat p;
    p.u8Arr = JPEG_OutputBuffer;
 8000b8a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000b8e:	f5a3 724c 	sub.w	r2, r3, #816	@ 0x330
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <jpeg_demo+0x1e0>)
 8000b94:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000b98:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8000b9c:	443b      	add	r3, r7
 8000b9e:	6013      	str	r3, [r2, #0]

    depth24To16(&p, width*height, 3);
 8000ba0:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <jpeg_demo+0x1f0>)
 8000ba2:	443b      	add	r3, r7
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b41      	ldr	r3, [pc, #260]	@ (8000cb0 <jpeg_demo+0x1f8>)
 8000baa:	443b      	add	r3, r7
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	fb12 f303 	smulbb	r3, r2, r3
 8000bb4:	b299      	uxth	r1, r3
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb4 <jpeg_demo+0x1fc>)
 8000bb8:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000bbc:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8000bc0:	443b      	add	r3, r7
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f893 	bl	8000cf0 <depth24To16>
    imageWindowed(&p);
 8000bca:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb4 <jpeg_demo+0x1fc>)
 8000bcc:	f503 3328 	add.w	r3, r3, #172032	@ 0x2a000
 8000bd0:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 8000bd4:	443b      	add	r3, r7
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8de 	bl	8000d98 <imageWindowed>

    lcd_draw(0, 0, width, height, p.u8Arr);
 8000bdc:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <jpeg_demo+0x1f0>)
 8000bde:	443b      	add	r3, r7
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <jpeg_demo+0x1f8>)
 8000be6:	443b      	add	r3, r7
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b299      	uxth	r1, r3
 8000bec:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000bf0:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff ff1b 	bl	8000a38 <lcd_draw>


        // Apri il file per la scrittura
        f_open(&file, "o.txt", FA_WRITE);
 8000c02:	2202      	movs	r2, #2
 8000c04:	492c      	ldr	r1, [pc, #176]	@ (8000cb8 <jpeg_demo+0x200>)
 8000c06:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000c08:	f00a ff9a 	bl	800bb40 <f_open>


        // Scrivi i dati dell'array nel file
        for (size_t i = 0; i < (width*height); i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cbc <jpeg_demo+0x204>)
 8000c10:	443a      	add	r2, r7
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e016      	b.n	8000c44 <jpeg_demo+0x18c>
        {
            // Scrive ogni elemento dell'array in una nuova riga
            f_printf(&file, ""+JPEG_OutputBuffer[i]);
 8000c16:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8000c1a:	f5a3 724b 	sub.w	r2, r3, #812	@ 0x32c
 8000c1e:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <jpeg_demo+0x204>)
 8000c20:	443b      	add	r3, r7
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <jpeg_demo+0x208>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4815      	ldr	r0, [pc, #84]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000c32:	f00b fd13 	bl	800c65c <f_printf>
        for (size_t i = 0; i < (width*height); i++)
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <jpeg_demo+0x204>)
 8000c38:	443b      	add	r3, r7
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cbc <jpeg_demo+0x204>)
 8000c40:	443a      	add	r2, r7
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <jpeg_demo+0x1f0>)
 8000c46:	443b      	add	r3, r7
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <jpeg_demo+0x1f8>)
 8000c4c:	443a      	add	r2, r7
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	4a19      	ldr	r2, [pc, #100]	@ (8000cbc <jpeg_demo+0x204>)
 8000c56:	443a      	add	r2, r7
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3db      	bcc.n	8000c16 <jpeg_demo+0x15e>
        }

        // Chiudi il file
        f_close(&file);
 8000c5e:	480a      	ldr	r0, [pc, #40]	@ (8000c88 <jpeg_demo+0x1d0>)
 8000c60:	f00b fc5a 	bl	800c518 <f_close>


    free(JPEG_InputBuffer); // Libera la memoria allocata
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <jpeg_demo+0x1d8>)
 8000c66:	443b      	add	r3, r7
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	f00b ff79 	bl	800cb60 <free>
}
 8000c6e:	f507 3728 	add.w	r7, r7, #172032	@ 0x2a000
 8000c72:	f507 774c 	add.w	r7, r7, #816	@ 0x330
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240004e0 	.word	0x240004e0
 8000c80:	52003000 	.word	0x52003000
 8000c84:	0800ce00 	.word	0x0800ce00
 8000c88:	240002b0 	.word	0x240002b0
 8000c8c:	0002a328 	.word	0x0002a328
 8000c90:	0002a324 	.word	0x0002a324
 8000c94:	0002a318 	.word	0x0002a318
 8000c98:	fffd5cd4 	.word	0xfffd5cd4
 8000c9c:	0002a300 	.word	0x0002a300
 8000ca0:	0002a304 	.word	0x0002a304
 8000ca4:	0002a310 	.word	0x0002a310
 8000ca8:	0002a320 	.word	0x0002a320
 8000cac:	0002a30c 	.word	0x0002a30c
 8000cb0:	0002a31c 	.word	0x0002a31c
 8000cb4:	fffd5cd0 	.word	0xfffd5cd0
 8000cb8:	0800ce0c 	.word	0x0800ce0c
 8000cbc:	0002a32c 	.word	0x0002a32c
 8000cc0:	0800ce14 	.word	0x0800ce14

08000cc4 <sd_init>:


// SD

static void sd_init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

    if(f_mount(&SDFatFs, "", 1) != FR_OK)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4905      	ldr	r1, [pc, #20]	@ (8000ce0 <sd_init+0x1c>)
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <sd_init+0x20>)
 8000cce:	f00a fef1 	bl	800bab4 <f_mount>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <sd_init+0x18>
    	sd_error_handler();
 8000cd8:	f000 f806 	bl	8000ce8 <sd_error_handler>

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	0800ce14 	.word	0x0800ce14
 8000ce4:	24000080 	.word	0x24000080

08000ce8 <sd_error_handler>:


static void sd_error_handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

	while(1);
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <sd_error_handler+0x4>

08000cf0 <depth24To16>:

}


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
	uint8_t b;
	uint8_t g;
	uint8_t r;


	for(int i = 0 ; i < length ; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e03a      	b.n	8000d7c <depth24To16+0x8c>
	{

		b = pxArr->u8Arr[i*bpx];
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	787a      	ldrb	r2, [r7, #1]
 8000d0c:	68f9      	ldr	r1, [r7, #12]
 8000d0e:	fb01 f202 	mul.w	r2, r1, r2
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	68f9      	ldr	r1, [r7, #12]
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	68f9      	ldr	r1, [r7, #12]
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	3302      	adds	r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(b, r, g);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <depth24To16+0xa4>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	7a7b      	ldrb	r3, [r7, #9]
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	7abb      	ldrb	r3, [r7, #10]
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b219      	sxth	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	b28a      	uxth	r2, r1
 8000d74:	801a      	strh	r2, [r3, #0]
	for(int i = 0 ; i < length ; i++)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbc0      	blt.n	8000d06 <depth24To16+0x16>
		//pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );

	}

}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	fffff800 	.word	0xfffff800

08000d98 <imageWindowed>:


static void imageWindowed(doubleFormat *data)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	uint16_t tmp;


	for(int i = 0 ; i < 240 ; i++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e043      	b.n	8000e2e <imageWindowed+0x96>
	{

		for(int j = 0 ; j < 120 ; j++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	e03a      	b.n	8000e22 <imageWindowed+0x8a>
		{

			tmp = data->u16Arr[j+(i*240)];
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	4613      	mov	r3, r2
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	461a      	mov	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	81fb      	strh	r3, [r7, #14]
			data->u16Arr[j+(i*240)] = data->u16Arr[(240-1-j)+(i*240)];
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6819      	ldr	r1, [r3, #0]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	f1c3 00ef 	rsb	r0, r3, #239	@ 0xef
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4403      	add	r3, r0
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4419      	add	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4613      	mov	r3, r2
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	461a      	mov	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4403      	add	r3, r0
 8000dfa:	880a      	ldrh	r2, [r1, #0]
 8000dfc:	801a      	strh	r2, [r3, #0]
			data->u16Arr[(240-1-j)+(i*240)] = tmp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	f1c3 00ef 	rsb	r0, r3, #239	@ 0xef
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4403      	add	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	440b      	add	r3, r1
 8000e18:	89fa      	ldrh	r2, [r7, #14]
 8000e1a:	801a      	strh	r2, [r3, #0]
		for(int j = 0 ; j < 120 ; j++)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b77      	cmp	r3, #119	@ 0x77
 8000e26:	ddc1      	ble.n	8000dac <imageWindowed+0x14>
	for(int i = 0 ; i < 240 ; i++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2bef      	cmp	r3, #239	@ 0xef
 8000e32:	ddb8      	ble.n	8000da6 <imageWindowed+0xe>

		}

	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e4e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e50:	bf00      	nop
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <main+0xa8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <main+0x24>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	dcf4      	bgt.n	8000e52 <main+0xe>
  if ( timeout < 0 )
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	da01      	bge.n	8000e72 <main+0x2e>
  {
  Error_Handler();
 8000e6e:	f000 f9df 	bl	8001230 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f000 fbdf 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f83b 	bl	8000ef0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <main+0xa8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a1a      	ldr	r2, [pc, #104]	@ (8000eec <main+0xa8>)
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <main+0xa8>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 ff7f 	bl	8001d9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 ff95 	bl	8001dd0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eaa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000eac:	bf00      	nop
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <main+0xa8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <main+0x80>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dcf4      	bgt.n	8000eae <main+0x6a>
if ( timeout < 0 )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da01      	bge.n	8000ece <main+0x8a>
{
Error_Handler();
 8000eca:	f000 f9b1 	bl	8001230 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 f919 	bl	8001104 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000ed2:	f000 f8c3 	bl	800105c <MX_SPI5_Init>
  MX_SDMMC1_SD_Init();
 8000ed6:	f000 f89d 	bl	8001014 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000eda:	f008 fe5f 	bl	8009b9c <MX_FATFS_Init>
  MX_JPEG_Init();
 8000ede:	f000 f885 	bl	8000fec <MX_JPEG_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000ee2:	f7ff fd9b 	bl	8000a1c <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_process();
 8000ee6:	f7ff fda1 	bl	8000a2c <lcd_process>
 8000eea:	e7fc      	b.n	8000ee6 <main+0xa2>
 8000eec:	58024400 	.word	0x58024400

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	@ 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	224c      	movs	r2, #76	@ 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b fee4 	bl	800cccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00b fede 	bl	800cccc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f10:	2004      	movs	r0, #4
 8000f12:	f002 fab1 	bl	8003478 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <SystemClock_Config+0xf4>)
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <SystemClock_Config+0xf4>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <SystemClock_Config+0xf4>)
 8000f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe8 <SystemClock_Config+0xf8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f38:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe8 <SystemClock_Config+0xf8>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <SystemClock_Config+0xf8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f4c:	bf00      	nop
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <SystemClock_Config+0xf8>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f5a:	d1f8      	bne.n	8000f4e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000f7c:	230d      	movs	r3, #13
 8000f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f84:	230c      	movs	r3, #12
 8000f86:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fac8 	bl	800352c <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fa2:	f000 f945 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	233f      	movs	r3, #63	@ 0x3f
 8000fa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 ff07 	bl	8003de0 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000fd8:	f000 f92a 	bl	8001230 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3770      	adds	r7, #112	@ 0x70
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	58000400 	.word	0x58000400
 8000fe8:	58024800 	.word	0x58024800

08000fec <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_JPEG_Init+0x20>)
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <MX_JPEG_Init+0x24>)
 8000ff4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_JPEG_Init+0x20>)
 8000ff8:	f000 fefe 	bl	8001df8 <HAL_JPEG_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001002:	f000 f915 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240004e0 	.word	0x240004e0
 8001010:	52003000 	.word	0x52003000

08001014 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 800101a:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <MX_SDMMC1_SD_Init+0x44>)
 800101c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 800102c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001030:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_SDMMC1_SD_Init+0x40>)
 8001040:	f005 ff82 	bl	8006f48 <HAL_SD_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800104a:	f000 f8f1 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000538 	.word	0x24000538
 8001058:	52007000 	.word	0x52007000

0800105c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001062:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <MX_SPI5_Init+0xa4>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001068:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800106c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001076:	2207      	movs	r2, #7
 8001078:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_SPI5_Init+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001088:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800108c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_SPI5_Init+0xa0>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_SPI5_Init+0xa0>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <MX_SPI5_Init+0xa0>)
 80010ea:	f007 fb91 	bl	8008810 <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f000 f89c 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	240005b4 	.word	0x240005b4
 8001100:	40015000 	.word	0x40015000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001120:	4a3f      	ldr	r2, [pc, #252]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112a:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113e:	4a38      	ldr	r2, [pc, #224]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001148:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001156:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115c:	4a30      	ldr	r2, [pc, #192]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	4a29      	ldr	r2, [pc, #164]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800117c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0x11c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <MX_GPIO_Init+0x11c>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_GPIO_Init+0x11c>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	481b      	ldr	r0, [pc, #108]	@ (8001224 <MX_GPIO_Init+0x120>)
 80011b6:	f000 fdd7 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2161      	movs	r1, #97	@ 0x61
 80011be:	481a      	ldr	r0, [pc, #104]	@ (8001228 <MX_GPIO_Init+0x124>)
 80011c0:	f000 fdd2 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4814      	ldr	r0, [pc, #80]	@ (800122c <MX_GPIO_Init+0x128>)
 80011da:	f000 fbfd 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <MX_GPIO_Init+0x120>)
 80011f6:	f000 fbef 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 80011fa:	2361      	movs	r3, #97	@ 0x61
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_GPIO_Init+0x124>)
 8001212:	f000 fbe1 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	58024400 	.word	0x58024400
 8001224:	58022800 	.word	0x58022800
 8001228:	58022400 	.word	0x58022400
 800122c:	58022000 	.word	0x58022000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_MspInit+0x30>)
 8001244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <HAL_MspInit+0x30>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_MspInit+0x30>)
 8001254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	58024400 	.word	0x58024400

08001270 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_JPEG_MspInit+0x3c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10e      	bne.n	80012a0 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_JPEG_MspInit+0x40>)
 8001284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001288:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_JPEG_MspInit+0x40>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <HAL_JPEG_MspInit+0x40>)
 8001294:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	52003000 	.word	0x52003000
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0be      	sub	sp, #248	@ 0xf8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	22c8      	movs	r2, #200	@ 0xc8
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00b fcf9 	bl	800cccc <memset>
  if(hsd->Instance==SDMMC1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a3c      	ldr	r2, [pc, #240]	@ (80013d0 <HAL_SD_MspInit+0x11c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d171      	bne.n	80013c8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80012e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f4:	f107 0318 	add.w	r3, r7, #24
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f8e7 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001304:	f7ff ff94 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001308:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 800130a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800130e:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 800131a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800131e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001336:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <HAL_SD_MspInit+0x120>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001362:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800137c:	230c      	movs	r3, #12
 800137e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001386:	4619      	mov	r1, r3
 8001388:	4813      	ldr	r0, [pc, #76]	@ (80013d8 <HAL_SD_MspInit+0x124>)
 800138a:	f000 fb25 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800138e:	2304      	movs	r3, #4
 8001390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013a6:	230c      	movs	r3, #12
 80013a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013b0:	4619      	mov	r1, r3
 80013b2:	480a      	ldr	r0, [pc, #40]	@ (80013dc <HAL_SD_MspInit+0x128>)
 80013b4:	f000 fb10 	bl	80019d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2031      	movs	r0, #49	@ 0x31
 80013be:	f000 fad6 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80013c2:	2031      	movs	r0, #49	@ 0x31
 80013c4:	f000 faed 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	37f8      	adds	r7, #248	@ 0xf8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	52007000 	.word	0x52007000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020800 	.word	0x58020800
 80013dc:	58020c00 	.word	0x58020c00

080013e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0be      	sub	sp, #248	@ 0xf8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	22c8      	movs	r2, #200	@ 0xc8
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00b fc63 	bl	800cccc <memset>
  if(hspi->Instance==SPI5)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a39      	ldr	r2, [pc, #228]	@ (80014f0 <HAL_SPI_MspInit+0x110>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d16a      	bne.n	80014e6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001410:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f003 f850 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001432:	f7ff fefd 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001436:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800143c:	4a2d      	ldr	r2, [pc, #180]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 800143e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001442:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800144c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 800145c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 800147a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_SPI_MspInit+0x114>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GC9A01_SCK_Pin;
 8001490:	2301      	movs	r3, #1
 8001492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GC9A01_SCK_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <HAL_SPI_MspInit+0x118>)
 80014b6:	f000 fa8f 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GC9A01_MISO_Pin|GC9A01_MOSI_Pin;
 80014ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014d4:	2305      	movs	r3, #5
 80014d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014da:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014de:	4619      	mov	r1, r3
 80014e0:	4806      	ldr	r0, [pc, #24]	@ (80014fc <HAL_SPI_MspInit+0x11c>)
 80014e2:	f000 fa79 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	37f8      	adds	r7, #248	@ 0xf8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40015000 	.word	0x40015000
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58022800 	.word	0x58022800
 80014fc:	58022400 	.word	0x58022400

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001556:	f000 f8df 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <SDMMC1_IRQHandler+0x10>)
 8001566:	f005 ff5f 	bl	8007428 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000538 	.word	0x24000538

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f00b fbaa 	bl	800ccfc <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	24080000 	.word	0x24080000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	2400063c 	.word	0x2400063c
 80015dc:	240007d0 	.word	0x240007d0

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001618 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f7fe fe78 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f00b fb7b 	bl	800cd08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fc17 	bl	8000e44 <main>
  bx  lr
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800161c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001620:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001624:	0800d168 	.word	0x0800d168
  ldr r2, =_sbss
 8001628:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800162c:	240007d0 	.word	0x240007d0

08001630 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC3_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f98c 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001640:	f002 fd84 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	4913      	ldr	r1, [pc, #76]	@ (80016a0 <HAL_Init+0x6c>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <HAL_Init+0x6c>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_Init+0x70>)
 8001676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_Init+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f814 	bl	80016ac <HAL_InitTick>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e002      	b.n	8001694 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fdd5 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024400 	.word	0x58024400
 80016a0:	0800ce5c 	.word	0x0800ce5c
 80016a4:	24000004 	.word	0x24000004
 80016a8:	24000000 	.word	0x24000000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_InitTick+0x64>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_InitTick+0x60>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f971 	bl	80019be <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f93b 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x68>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2400000c 	.word	0x2400000c
 8001710:	24000000 	.word	0x24000000
 8001714:	24000008 	.word	0x24000008

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2400000c 	.word	0x2400000c
 800173c:	24000640 	.word	0x24000640

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	24000640 	.word	0x24000640

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2400000c 	.word	0x2400000c

080017a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetREVID+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0c1b      	lsrs	r3, r3, #16
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	5c001000 	.word	0x5c001000

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019e6:	4b89      	ldr	r3, [pc, #548]	@ (8001c0c <HAL_GPIO_Init+0x234>)
 80019e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ea:	e194      	b.n	8001d16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8186 	beq.w	8001d10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d005      	beq.n	8001a1c <HAL_GPIO_Init+0x44>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d017      	beq.n	8001aba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d123      	bne.n	8001b0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	69b9      	ldr	r1, [r7, #24]
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0203 	and.w	r2, r3, #3
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80e0 	beq.w	8001d10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <HAL_GPIO_Init+0x238>)
 8001b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b56:	4a2e      	ldr	r2, [pc, #184]	@ (8001c10 <HAL_GPIO_Init+0x238>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b60:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <HAL_GPIO_Init+0x238>)
 8001b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a29      	ldr	r2, [pc, #164]	@ (8001c14 <HAL_GPIO_Init+0x23c>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <HAL_GPIO_Init+0x240>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d052      	beq.n	8001c40 <HAL_GPIO_Init+0x268>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c1c <HAL_GPIO_Init+0x244>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_GPIO_Init+0x248>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_GPIO_Init+0x24c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_GPIO_Init+0x250>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <HAL_GPIO_Init+0x254>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_GPIO_Init+0x258>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_GPIO_Init+0x25c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <HAL_GPIO_Init+0x260>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <HAL_GPIO_Init+0x264>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e02d      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e02b      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e029      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e027      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e025      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e023      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e021      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e01f      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e01d      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01b      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c0a:	bf00      	nop
 8001c0c:	58000080 	.word	0x58000080
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58000400 	.word	0x58000400
 8001c18:	58020000 	.word	0x58020000
 8001c1c:	58020400 	.word	0x58020400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020c00 	.word	0x58020c00
 8001c28:	58021000 	.word	0x58021000
 8001c2c:	58021400 	.word	0x58021400
 8001c30:	58021800 	.word	0x58021800
 8001c34:	58021c00 	.word	0x58021c00
 8001c38:	58022000 	.word	0x58022000
 8001c3c:	58022400 	.word	0x58022400
 8001c40:	2300      	movs	r3, #0
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c52:	4938      	ldr	r1, [pc, #224]	@ (8001d34 <HAL_GPIO_Init+0x35c>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ae63 	bne.w	80019ec <HAL_GPIO_Init+0x14>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3724      	adds	r7, #36	@ 0x24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	58000400 	.word	0x58000400

08001d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001da4:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_HSEM_FastTake+0x2c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3320      	adds	r3, #32
 8001daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dae:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <HAL_HSEM_FastTake+0x30>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	58026400 	.word	0x58026400
 8001dcc:	80000300 	.word	0x80000300

08001dd0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001dda:	4906      	ldr	r1, [pc, #24]	@ (8001df4 <HAL_HSEM_Release+0x24>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	58026400 	.word	0x58026400

08001df8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e070      	b.n	8001eec <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fa26 	bl	8001270 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <HAL_JPEG_Init+0xfc>)
 8001e90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <HAL_JPEG_Init+0x100>)
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fce3 	bl	8002870 <JPEG_Set_HuffEnc_Mem>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e018      	b.n	8001eec <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800d04c 	.word	0x0800d04c
 8001ef8:	0800d08c 	.word	0x0800d08c

08001efc <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_JPEG_GetInfo+0x16>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e083      	b.n	800201e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d103      	bne.n	8001f2c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2210      	movs	r2, #16
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e017      	b.n	8001f5c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e00c      	b.n	8001f5c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d103      	bne.n	8001f58 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2230      	movs	r2, #48	@ 0x30
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e001      	b.n	8001f5c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e060      	b.n	800201e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d003      	beq.n	8001f88 <HAL_JPEG_GetInfo+0x8c>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b30      	cmp	r3, #48	@ 0x30
 8001f86:	d140      	bne.n	800200a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d109      	bne.n	8001fcc <HAL_JPEG_GetInfo+0xd0>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_JPEG_GetInfo+0xd0>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e01d      	b.n	8002008 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_JPEG_GetInfo+0xea>
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_JPEG_GetInfo+0xea>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	e010      	b.n	8002008 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d109      	bne.n	8002000 <HAL_JPEG_GetInfo+0x104>
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_JPEG_GetInfo+0x104>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e003      	b.n	8002008 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002006:	e003      	b.n	8002010 <HAL_JPEG_GetInfo+0x114>
 8002008:	e002      	b.n	8002010 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 f9d3 	bl	80033bc <JPEG_GetQuality>
 8002016:	4602      	mov	r2, r0
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_JPEG_Decode+0x20>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_JPEG_Decode+0x20>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e071      	b.n	800212e <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_JPEG_Decode+0x32>
 8002054:	2302      	movs	r3, #2
 8002056:	e06a      	b.n	800212e <HAL_JPEG_Decode+0x108>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8002060:	f7ff fb6e 	bl	8001740 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d158      	bne.n	8002124 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2204      	movs	r2, #4
 8002076:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	f023 020f 	bic.w	r2, r3, #15
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f043 0206 	orr.w	r2, r3, #6
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fe58 	bl	8002d74 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80020c4:	e01e      	b.n	8002104 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d01a      	beq.n	8002104 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020ce:	f7ff fb37 	bl	8001740 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <HAL_JPEG_Decode+0xbe>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10f      	bne.n	8002104 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e8:	f043 0208 	orr.w	r2, r3, #8
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e014      	b.n	800212e <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fea9 	bl	8002e5c <JPEG_Process>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0da      	beq.n	80020c6 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e004      	b.n	800212e <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d116      	bne.n	800217e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d033      	beq.n	80021d8 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	@ 0x54
 800217c:	e02c      	b.n	80021d8 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d126      	bne.n	80021d8 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f043 0306 	orr.w	r3, r3, #6
 80021a6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80021c4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002252:	b480      	push	{r7}
 8002254:	b08b      	sub	sp, #44	@ 0x2c
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	e020      	b.n	80022ac <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002274:	6a3a      	ldr	r2, [r7, #32]
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	4413      	add	r3, r2
 800227a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800227e:	d90f      	bls.n	80022a0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e055      	b.n	8002330 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	440b      	add	r3, r1
 800228e:	3201      	adds	r2, #1
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]
      p++;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	3301      	adds	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
      i--;
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	3b01      	subs	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ee      	bne.n	8002284 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d9db      	bls.n	800226a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	4413      	add	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	617b      	str	r3, [r7, #20]
  p = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80022d0:	e027      	b.n	8002322 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	601a      	str	r2, [r3, #0]
      p++;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	3301      	adds	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
      code++;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d0eb      	beq.n	80022d2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b1f      	cmp	r3, #31
 80022fe:	d901      	bls.n	8002304 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e015      	b.n	8002330 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002304:	2201      	movs	r2, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	429a      	cmp	r2, r3
 8002310:	d301      	bcc.n	8002316 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00c      	b.n	8002330 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
    si++;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1dd      	bne.n	80022ea <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	372c      	adds	r7, #44	@ 0x2c
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8002342:	af00      	add	r7, sp, #0
 8002344:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002348:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800234c:	6018      	str	r0, [r3, #0]
 800234e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002352:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002356:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002358:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800235c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	f107 020c 	add.w	r2, r7, #12
 800236a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800236e:	f7ff ff70 	bl	8002252 <JPEG_Bits_To_SizeCodes>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002378:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002380:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002384:	e075      	b.n	8002472 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800238c:	e067      	b.n	800245e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800238e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002392:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800239c:	4413      	add	r3, r2
 800239e:	3310      	adds	r3, #16
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80023a6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80023ae:	23a0      	movs	r3, #160	@ 0xa0
 80023b0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80023b4:	e021      	b.n	80023fa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80023b6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80023ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80023bc:	d103      	bne.n	80023c6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80023be:	23a1      	movs	r3, #161	@ 0xa1
 80023c0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80023c4:	e019      	b.n	80023fa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80023c6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80023d4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80023e0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	461a      	mov	r2, r3
 80023ee:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80023f2:	4413      	add	r3, r2
 80023f4:	3b01      	subs	r3, #1
 80023f6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80023fa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80023fe:	2ba1      	cmp	r3, #161	@ 0xa1
 8002400:	d901      	bls.n	8002406 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002402:	2301      	movs	r3, #1
 8002404:	e035      	b.n	8002472 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002406:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800240a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800240e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002416:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800241a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002424:	3328      	adds	r3, #40	@ 0x28
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800242c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002430:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002434:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	b2d9      	uxtb	r1, r3
 8002440:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002444:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800244e:	4413      	add	r3, r2
 8002450:	460a      	mov	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      k++;
 8002454:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800245e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002462:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800246c:	429a      	cmp	r2, r3
 800246e:	d38e      	bcc.n	800238e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002482:	af00      	add	r7, sp, #0
 8002484:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002488:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800248c:	6018      	str	r0, [r3, #0]
 800248e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002492:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002496:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002498:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800249c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80024a6:	f107 0208 	add.w	r2, r7, #8
 80024aa:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80024ae:	f7ff fed0 	bl	8002252 <JPEG_Bits_To_SizeCodes>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80024b8:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80024c0:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80024c4:	e048      	b.n	8002558 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80024cc:	e03d      	b.n	800254a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80024ce:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80024d2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80024dc:	4413      	add	r3, r2
 80024de:	3310      	adds	r3, #16
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80024e6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80024ea:	2b0b      	cmp	r3, #11
 80024ec:	d901      	bls.n	80024f2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80024ee:	2301      	movs	r3, #1
 80024f0:	e032      	b.n	8002558 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80024f2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80024f6:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80024fa:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80024fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002502:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002506:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002510:	3302      	adds	r3, #2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002518:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800251c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002520:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	3b01      	subs	r3, #1
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002530:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800253a:	4413      	add	r3, r2
 800253c:	460a      	mov	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
      k++;
 8002540:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002544:	3301      	adds	r3, #1
 8002546:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800254a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800254e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002552:	429a      	cmp	r2, r3
 8002554:	d3bb      	bcc.n	80024ce <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b09a      	sub	sp, #104	@ 0x68
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002584:	3318      	adds	r3, #24
 8002586:	663b      	str	r3, [r7, #96]	@ 0x60
 8002588:	e00f      	b.n	80025aa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80025a0:	3318      	adds	r3, #24
 80025a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80025a4:	e001      	b.n	80025aa <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e059      	b.n	800265e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d055      	beq.n	800265c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	68b8      	ldr	r0, [r7, #8]
 80025b8:	f7ff ff60 	bl	800247c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80025c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80025ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80025ce:	e046      	b.n	800265e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80025d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80025d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80025da:	601a      	str	r2, [r3, #0]
    addressDef++;
 80025dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025de:	3304      	adds	r3, #4
 80025e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80025e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025e4:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80025e8:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80025ea:	230c      	movs	r3, #12
 80025ec:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80025ee:	e032      	b.n	8002656 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80025f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025f2:	3b01      	subs	r3, #1
 80025f4:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80025f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025f8:	3b04      	subs	r3, #4
 80025fa:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80025fc:	f107 0214 	add.w	r2, r7, #20
 8002600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800260c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260e:	3302      	adds	r3, #2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	3368      	adds	r3, #104	@ 0x68
 8002614:	443b      	add	r3, r7
 8002616:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8002620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002622:	3b01      	subs	r3, #1
 8002624:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002626:	f107 0214 	add.w	r2, r7, #20
 800262a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002638:	3302      	adds	r3, #2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	3368      	adds	r3, #104	@ 0x68
 800263e:	443b      	add	r3, r7
 8002640:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800264a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002650:	431a      	orrs	r2, r3
 8002652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002654:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002658:	2b01      	cmp	r3, #1
 800265a:	d8c9      	bhi.n	80025f0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3768      	adds	r7, #104	@ 0x68
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800266e:	af00      	add	r7, sp, #0
 8002670:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002674:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002678:	6018      	str	r0, [r3, #0]
 800267a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800267e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002682:	6019      	str	r1, [r3, #0]
 8002684:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002688:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800268c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800268e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002692:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80026a2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10c      	bne.n	80026c6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80026ac:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026b0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026bc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80026c0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80026c4:	e01d      	b.n	8002702 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80026c6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026ca:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80026d6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80026da:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10c      	bne.n	80026fe <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80026e4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026e8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80026f4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80026f8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80026fc:	e001      	b.n	8002702 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0a8      	b.n	8002854 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8002702:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002706:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a0 	beq.w	8002852 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002712:	f107 0214 	add.w	r2, r7, #20
 8002716:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800271a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800271e:	4611      	mov	r1, r2
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f7ff fe0b 	bl	800233c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002726:	4603      	mov	r3, r0
 8002728:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800272c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8002734:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002738:	e08c      	b.n	8002854 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800273a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800273e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002748:	e00e      	b.n	8002768 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800274a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800274e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002752:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002754:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002758:	3304      	adds	r3, #4
 800275a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800275e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002762:	3301      	adds	r3, #1
 8002764:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002768:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800276c:	2b02      	cmp	r3, #2
 800276e:	d9ec      	bls.n	800274a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002770:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002774:	4a3a      	ldr	r2, [pc, #232]	@ (8002860 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002776:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002778:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800277c:	3304      	adds	r3, #4
 800277e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8002782:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002786:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002788:	601a      	str	r2, [r3, #0]
    addressDef++;
 800278a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800278e:	3304      	adds	r3, #4
 8002790:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002794:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002798:	4a33      	ldr	r2, [pc, #204]	@ (8002868 <JPEG_Set_HuffAC_Mem+0x200>)
 800279a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800279c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80027a0:	3304      	adds	r3, #4
 80027a2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80027a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80027aa:	4a30      	ldr	r2, [pc, #192]	@ (800286c <JPEG_Set_HuffAC_Mem+0x204>)
 80027ac:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80027ae:	23a2      	movs	r3, #162	@ 0xa2
 80027b0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80027b4:	e049      	b.n	800284a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80027b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80027c0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80027c4:	3b04      	subs	r3, #4
 80027c6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80027ca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80027ce:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80027d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80027e0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80027e4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80027e8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80027ec:	3328      	adds	r3, #40	@ 0x28
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80027fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002800:	3b01      	subs	r3, #1
 8002802:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002806:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800280a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800280e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800281c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002820:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002824:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002828:	3328      	adds	r3, #40	@ 0x28
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002838:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002842:	431a      	orrs	r2, r3
 8002844:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002848:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800284a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800284e:	2b01      	cmp	r3, #1
 8002850:	d8b1      	bhi.n	80027b6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	0fd10fd0 	.word	0x0fd10fd0
 8002864:	0fd30fd2 	.word	0x0fd30fd2
 8002868:	0fd50fd4 	.word	0x0fd50fd4
 800286c:	0fd70fd6 	.word	0x0fd70fd6

08002870 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f84d 	bl	8002918 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002886:	461a      	mov	r2, r3
 8002888:	491f      	ldr	r1, [pc, #124]	@ (8002908 <JPEG_Set_HuffEnc_Mem+0x98>)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff feec 	bl	8002668 <JPEG_Set_HuffAC_Mem>
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	e030      	b.n	8002900 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80028a6:	461a      	mov	r2, r3
 80028a8:	4918      	ldr	r1, [pc, #96]	@ (800290c <JPEG_Set_HuffEnc_Mem+0x9c>)
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fedc 	bl	8002668 <JPEG_Set_HuffAC_Mem>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	e020      	b.n	8002900 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80028c6:	461a      	mov	r2, r3
 80028c8:	4911      	ldr	r1, [pc, #68]	@ (8002910 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fe49 	bl	8002562 <JPEG_Set_HuffDC_Mem>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	e010      	b.n	8002900 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80028e6:	461a      	mov	r2, r3
 80028e8:	490a      	ldr	r1, [pc, #40]	@ (8002914 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fe39 	bl	8002562 <JPEG_Set_HuffDC_Mem>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	e000      	b.n	8002900 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800cea4 	.word	0x0800cea4
 800290c:	0800cf58 	.word	0x0800cf58
 8002910:	0800ce6c 	.word	0x0800ce6c
 8002914:	0800ce88 	.word	0x0800ce88

08002918 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002918:	b480      	push	{r7}
 800291a:	b08b      	sub	sp, #44	@ 0x2c
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002920:	4b80      	ldr	r3, [pc, #512]	@ (8002b24 <JPEG_Set_Huff_DHTMem+0x20c>)
 8002922:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002924:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <JPEG_Set_Huff_DHTMem+0x210>)
 8002926:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002928:	4b80      	ldr	r3, [pc, #512]	@ (8002b2c <JPEG_Set_Huff_DHTMem+0x214>)
 800292a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800292c:	4b80      	ldr	r3, [pc, #512]	@ (8002b30 <JPEG_Set_Huff_DHTMem+0x218>)
 800292e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002938:	330c      	adds	r3, #12
 800293a:	623b      	str	r3, [r7, #32]
  index = 16;
 800293c:	2310      	movs	r3, #16
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002940:	e01d      	b.n	800297e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	3b01      	subs	r3, #1
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	3b02      	subs	r3, #2
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002956:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	3b03      	subs	r3, #3
 800295c:	6979      	ldr	r1, [r7, #20]
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002962:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002966:	3a04      	subs	r2, #4
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800296c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	601a      	str	r2, [r3, #0]
    address--;
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	3b04      	subs	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	3b04      	subs	r3, #4
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	2b03      	cmp	r3, #3
 8002982:	d8de      	bhi.n	8002942 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800298c:	3318      	adds	r3, #24
 800298e:	623b      	str	r3, [r7, #32]
  index = 12;
 8002990:	230c      	movs	r3, #12
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002994:	e021      	b.n	80029da <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	3b01      	subs	r3, #1
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4413      	add	r3, r2
 800299e:	7c1b      	ldrb	r3, [r3, #16]
 80029a0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	3b02      	subs	r3, #2
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	440b      	add	r3, r1
 80029aa:	7c1b      	ldrb	r3, [r3, #16]
 80029ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80029ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	3b03      	subs	r3, #3
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	440b      	add	r3, r1
 80029b8:	7c1b      	ldrb	r3, [r3, #16]
 80029ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80029bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	3a04      	subs	r2, #4
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	440a      	add	r2, r1
 80029c6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80029c8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	601a      	str	r2, [r3, #0]
    address--;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	3b04      	subs	r3, #4
 80029d2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	3b04      	subs	r3, #4
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d8da      	bhi.n	8002996 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029e8:	3328      	adds	r3, #40	@ 0x28
 80029ea:	623b      	str	r3, [r7, #32]
  index = 16;
 80029ec:	2310      	movs	r3, #16
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029f0:	e01d      	b.n	8002a2e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	3b01      	subs	r3, #1
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	3b02      	subs	r3, #2
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a06:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	3b03      	subs	r3, #3
 8002a0c:	69f9      	ldr	r1, [r7, #28]
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002a12:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a16:	3a04      	subs	r2, #4
 8002a18:	69f9      	ldr	r1, [r7, #28]
 8002a1a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002a1c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	601a      	str	r2, [r3, #0]
    address--;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	3b04      	subs	r3, #4
 8002a26:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d8de      	bhi.n	80029f2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a3c:	33cc      	adds	r3, #204	@ 0xcc
 8002a3e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002a50:	021a      	lsls	r2, r3, #8
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	3b04      	subs	r3, #4
 8002a6a:	623b      	str	r3, [r7, #32]
  index = 160;
 8002a6c:	23a0      	movs	r3, #160	@ 0xa0
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a70:	e021      	b.n	8002ab6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	3b01      	subs	r3, #1
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	7c1b      	ldrb	r3, [r3, #16]
 8002a7c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	3b02      	subs	r3, #2
 8002a82:	69f9      	ldr	r1, [r7, #28]
 8002a84:	440b      	add	r3, r1
 8002a86:	7c1b      	ldrb	r3, [r3, #16]
 8002a88:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002a8a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	3b03      	subs	r3, #3
 8002a90:	69f9      	ldr	r1, [r7, #28]
 8002a92:	440b      	add	r3, r1
 8002a94:	7c1b      	ldrb	r3, [r3, #16]
 8002a96:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002a98:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9c:	3a04      	subs	r2, #4
 8002a9e:	69f9      	ldr	r1, [r7, #28]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002aa4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	601a      	str	r2, [r3, #0]
    address--;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3b04      	subs	r3, #4
 8002aae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d8da      	bhi.n	8002a72 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002ac4:	33cc      	adds	r3, #204	@ 0xcc
 8002ac6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	061a      	lsls	r2, r3, #24
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002af2:	33dc      	adds	r3, #220	@ 0xdc
 8002af4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	7bdb      	ldrb	r3, [r3, #15]
 8002b04:	021a      	lsls	r2, r3, #8
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	7b92      	ldrb	r2, [r2, #14]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
  index = 12;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b22:	e027      	b.n	8002b74 <JPEG_Set_Huff_DHTMem+0x25c>
 8002b24:	0800cea4 	.word	0x0800cea4
 8002b28:	0800cf58 	.word	0x0800cf58
 8002b2c:	0800ce6c 	.word	0x0800ce6c
 8002b30:	0800ce88 	.word	0x0800ce88
 8002b34:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002b42:	6939      	ldr	r1, [r7, #16]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	440b      	add	r3, r1
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b4c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	3b01      	subs	r3, #1
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002b58:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	3a02      	subs	r2, #2
 8002b5e:	6939      	ldr	r1, [r7, #16]
 8002b60:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002b62:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	601a      	str	r2, [r3, #0]
    address--;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	3b04      	subs	r3, #4
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d8de      	bhi.n	8002b38 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002b82:	33dc      	adds	r3, #220	@ 0xdc
 8002b84:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	7c5b      	ldrb	r3, [r3, #17]
 8002b92:	061a      	lsls	r2, r3, #24
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	7c1b      	ldrb	r3, [r3, #16]
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002bb0:	33e8      	adds	r3, #232	@ 0xe8
 8002bb2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002d70 <JPEG_Set_Huff_DHTMem+0x458>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	7edb      	ldrb	r3, [r3, #27]
 8002bc2:	021a      	lsls	r2, r3, #8
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	7e92      	ldrb	r2, [r2, #26]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	3b04      	subs	r3, #4
 8002bda:	623b      	str	r3, [r7, #32]
  index = 8;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002be0:	e021      	b.n	8002c26 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	3301      	adds	r3, #1
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	7c1b      	ldrb	r3, [r3, #16]
 8002bec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002bfa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6939      	ldr	r1, [r7, #16]
 8002c02:	440b      	add	r3, r1
 8002c04:	7c1b      	ldrb	r3, [r3, #16]
 8002c06:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002c08:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	3a02      	subs	r2, #2
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	440a      	add	r2, r1
 8002c12:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002c14:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	601a      	str	r2, [r3, #0]
    address--;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	3b04      	subs	r3, #4
 8002c1e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	3b04      	subs	r3, #4
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d8da      	bhi.n	8002be2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c34:	33e8      	adds	r3, #232	@ 0xe8
 8002c36:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	061a      	lsls	r2, r3, #24
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c62:	33f8      	adds	r3, #248	@ 0xf8
 8002c64:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b41      	ldr	r3, [pc, #260]	@ (8002d70 <JPEG_Set_Huff_DHTMem+0x458>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	7bdb      	ldrb	r3, [r3, #15]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	7b92      	ldrb	r2, [r2, #14]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	623b      	str	r3, [r7, #32]
  index = 12;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c92:	e01d      	b.n	8002cd0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	440b      	add	r3, r1
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002ca8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3b01      	subs	r3, #1
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	5ccb      	ldrb	r3, [r1, r3]
 8002cb2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002cb4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	3a02      	subs	r2, #2
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002cbe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	601a      	str	r2, [r3, #0]
    address--;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	3b04      	subs	r3, #4
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d8de      	bhi.n	8002c94 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002cde:	33f8      	adds	r3, #248	@ 0xf8
 8002ce0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	7c5b      	ldrb	r3, [r3, #17]
 8002cee:	061a      	lsls	r2, r3, #24
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	7c1b      	ldrb	r3, [r3, #16]
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002d0c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002d10:	623b      	str	r3, [r7, #32]
  index = 160;
 8002d12:	23a0      	movs	r3, #160	@ 0xa0
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d16:	e021      	b.n	8002d5c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	7c1b      	ldrb	r3, [r3, #16]
 8002d22:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	440b      	add	r3, r1
 8002d2a:	3310      	adds	r3, #16
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002d30:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	3b01      	subs	r3, #1
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	440b      	add	r3, r1
 8002d3a:	7c1b      	ldrb	r3, [r3, #16]
 8002d3c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002d3e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d42:	3a02      	subs	r2, #2
 8002d44:	69b9      	ldr	r1, [r7, #24]
 8002d46:	440a      	add	r2, r1
 8002d48:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002d4a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	601a      	str	r2, [r3, #0]
    address--;
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	3b04      	subs	r3, #4
 8002d54:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d8da      	bhi.n	8002d18 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	372c      	adds	r7, #44	@ 0x2c
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	ffff0000 	.word	0xffff0000

08002d74 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d108      	bne.n	8002da6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e007      	b.n	8002db6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0208 	bic.w	r2, r2, #8
 8002db4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002e04:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d108      	bne.n	8002e34 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002e30:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e32:	e00d      	b.n	8002e50 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d107      	bne.n	8002e50 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d125      	bne.n	8002ebc <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01e      	beq.n	8002ebc <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff f839 	bl	8001efc <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f9a5 	bl	80021e6 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f988 	bl	80031ee <JPEG_ReadInputData>
 8002ede:	e00a      	b.n	8002ef6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f97c 	bl	80031ee <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002f10:	2108      	movs	r1, #8
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f864 	bl	8002fe0 <JPEG_StoreOutputData>
 8002f18:	e00a      	b.n	8002f30 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f858 	bl	8002fe0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d14b      	bne.n	8002fd6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d107      	bne.n	8002f6a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69d9      	ldr	r1, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff f954 	bl	800223a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d103      	bne.n	8002fcc <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f923 	bl	8002210 <HAL_JPEG_DecodeCpltCallback>
 8002fca:	e002      	b.n	8002fd2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff f915 	bl	80021fc <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d34b      	bcc.n	8003094 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e031      	b.n	8003066 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	4413      	add	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0a19      	lsrs	r1, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	3301      	adds	r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	b2ca      	uxtb	r2, r1
 800302c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	0c19      	lsrs	r1, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	3302      	adds	r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	b2ca      	uxtb	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0e19      	lsrs	r1, r3, #24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	3303      	adds	r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	b2ca      	uxtb	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3c9      	bcc.n	8003002 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	429a      	cmp	r2, r3
 8003078:	f040 80b5 	bne.w	80031e6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69d9      	ldr	r1, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	461a      	mov	r2, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff f8d7 	bl	800223a <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8003092:	e0a8      	b.n	80031e6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	429a      	cmp	r2, r3
 800309e:	f240 80a2 	bls.w	80031e6 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e031      	b.n	800311a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	4413      	add	r3, r2
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0a19      	lsrs	r1, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	b2ca      	uxtb	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0c19      	lsrs	r1, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	3302      	adds	r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0e19      	lsrs	r1, r3, #24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	3303      	adds	r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3c9      	bcc.n	80030b6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	429a      	cmp	r2, r3
 800312c:	d10b      	bne.n	8003146 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69d9      	ldr	r1, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	461a      	mov	r2, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff f87e 	bl	800223a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003144:	e04f      	b.n	80031e6 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e015      	b.n	800318c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	fa22 f103 	lsr.w	r1, r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	4413      	add	r3, r2
 8003178:	b2ca      	uxtb	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d3e5      	bcc.n	8003160 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69d9      	ldr	r1, [r3, #28]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	461a      	mov	r2, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff f84b 	bl	800223a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1c3 0304 	rsb	r3, r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e013      	b.n	80031e0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	fa22 f103 	lsr.w	r1, r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	4413      	add	r3, r2
 80031cc:	b2ca      	uxtb	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d9e8      	bls.n	80031b8 <JPEG_StoreOutputData+0x1d8>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b088      	sub	sp, #32
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <JPEG_ReadInputData+0x1c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800320a:	2101      	movs	r1, #1
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fe ff92 	bl	8002136 <HAL_JPEG_Pause>
 8003212:	e028      	b.n	8003266 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	429a      	cmp	r2, r3
 800321e:	d906      	bls.n	800322e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e01b      	b.n	8003266 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	429a      	cmp	r2, r3
 8003238:	d115      	bne.n	8003266 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fe ffef 	bl	8002224 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	2b04      	cmp	r3, #4
 800324c:	d905      	bls.n	800325a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 809f 	bne.w	80033b2 <JPEG_ReadInputData+0x1c4>
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 809b 	beq.w	80033b2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d335      	bcc.n	80032f6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e02d      	b.n	80032ec <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80032b0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6999      	ldr	r1, [r3, #24]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3302      	adds	r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3303      	adds	r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80032d8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3cd      	bcc.n	8003290 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80032f4:	e05d      	b.n	80033b2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d035      	beq.n	8003368 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e02d      	b.n	800335e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003322:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3302      	adds	r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003334:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3303      	adds	r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800334a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	3301      	adds	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3cd      	bcc.n	8003302 <JPEG_ReadInputData+0x114>
}
 8003366:	e024      	b.n	80033b2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	e017      	b.n	80033a2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4413      	add	r3, r2
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3301      	adds	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d3e3      	bcc.n	8003372 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033b2:	bf00      	nop
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80033bc:	b480      	push	{r7}
 80033be:	b08b      	sub	sp, #44	@ 0x2c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3350      	adds	r3, #80	@ 0x50
 80033ce:	61bb      	str	r3, [r7, #24]

  i = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80033d4:	e042      	b.n	800345c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	e033      	b.n	800344a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d103      	bne.n	80033fe <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	3364      	adds	r3, #100	@ 0x64
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fc:	e022      	b.n	8003444 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2264      	movs	r2, #100	@ 0x64
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800340a:	6a38      	ldr	r0, [r7, #32]
 800340c:	69f9      	ldr	r1, [r7, #28]
 800340e:	4401      	add	r1, r0
 8003410:	4818      	ldr	r0, [pc, #96]	@ (8003474 <JPEG_GetQuality+0xb8>)
 8003412:	5c41      	ldrb	r1, [r0, r1]
 8003414:	440a      	add	r2, r1
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	fbb3 f3f2 	udiv	r3, r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b64      	cmp	r3, #100	@ 0x64
 8003422:	d807      	bhi.n	8003434 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342e:	4413      	add	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
 8003432:	e007      	b.n	8003444 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	4413      	add	r3, r2
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	3301      	adds	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d9c8      	bls.n	80033e2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	3304      	adds	r3, #4
 8003454:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	3304      	adds	r3, #4
 800345a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003460:	d9b9      	bls.n	80033d6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	099b      	lsrs	r3, r3, #6
}
 8003466:	4618      	mov	r0, r3
 8003468:	372c      	adds	r7, #44	@ 0x2c
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	0800d00c 	.word	0x0800d00c

08003478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	2b06      	cmp	r3, #6
 800348a:	d00a      	beq.n	80034a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800348c:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e040      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e03e      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034a2:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80034aa:	491f      	ldr	r1, [pc, #124]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034b2:	f7fe f945 	bl	8001740 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b8:	e009      	b.n	80034ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034ba:	f7fe f941 	bl	8001740 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034c8:	d901      	bls.n	80034ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e028      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034da:	d1ee      	bne.n	80034ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b1e      	cmp	r3, #30
 80034e0:	d008      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80034e6:	d005      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b1d      	cmp	r3, #29
 80034ec:	d002      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80034f2:	d114      	bne.n	800351e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034f4:	f7fe f924 	bl	8001740 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034fa:	e009      	b.n	8003510 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034fc:	f7fe f920 	bl	8001740 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800350a:	d901      	bls.n	8003510 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351c:	d1ee      	bne.n	80034fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024800 	.word	0x58024800

0800352c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	@ 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f000 bc48 	b.w	8003dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8088 	beq.w	800365e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	4b99      	ldr	r3, [pc, #612]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003558:	4b96      	ldr	r3, [pc, #600]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	2b10      	cmp	r3, #16
 8003562:	d007      	beq.n	8003574 <HAL_RCC_OscConfig+0x48>
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	2b18      	cmp	r3, #24
 8003568:	d111      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b8f      	ldr	r3, [pc, #572]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d06d      	beq.n	800365c <HAL_RCC_OscConfig+0x130>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d169      	bne.n	800365c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f000 bc21 	b.w	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7a>
 8003598:	4b86      	ldr	r3, [pc, #536]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a85      	ldr	r2, [pc, #532]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x9c>
 80035ae:	4b81      	ldr	r3, [pc, #516]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a80      	ldr	r2, [pc, #512]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7e      	ldr	r3, [pc, #504]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7d      	ldr	r2, [pc, #500]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035d2:	4b78      	ldr	r3, [pc, #480]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a77      	ldr	r2, [pc, #476]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a74      	ldr	r2, [pc, #464]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035ec:	4b71      	ldr	r3, [pc, #452]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a70      	ldr	r2, [pc, #448]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6e      	ldr	r3, [pc, #440]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6d      	ldr	r2, [pc, #436]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe f898 	bl	8001740 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe f894 	bl	8001740 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e3d4      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003626:	4b63      	ldr	r3, [pc, #396]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f884 	bl	8001740 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f880 	bl	8001740 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e3c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800364e:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x110>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80ca 	beq.w	8003800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366c:	4b51      	ldr	r3, [pc, #324]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003676:	4b4f      	ldr	r3, [pc, #316]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x166>
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	2b18      	cmp	r3, #24
 8003686:	d156      	bne.n	8003736 <HAL_RCC_OscConfig+0x20a>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d151      	bne.n	8003736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003692:	4b48      	ldr	r3, [pc, #288]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e392      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036aa:	4b42      	ldr	r3, [pc, #264]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0219 	bic.w	r2, r3, #25
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	493f      	ldr	r1, [pc, #252]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f840 	bl	8001740 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fe f83c 	bl	8001740 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e37c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d6:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	f7fe f85d 	bl	80017a0 <HAL_GetREVID>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d817      	bhi.n	8003720 <HAL_RCC_OscConfig+0x1f4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d108      	bne.n	800370a <HAL_RCC_OscConfig+0x1de>
 80036f8:	4b2e      	ldr	r3, [pc, #184]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003708:	e07a      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b2a      	ldr	r3, [pc, #168]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4926      	ldr	r1, [pc, #152]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371e:	e06f      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	4921      	ldr	r1, [pc, #132]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	e064      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d047      	beq.n	80037ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0219 	bic.w	r2, r3, #25
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	491a      	ldr	r1, [pc, #104]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fff6 	bl	8001740 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7fd fff2 	bl	8001740 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e332      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376a:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	f7fe f813 	bl	80017a0 <HAL_GetREVID>
 800377a:	4603      	mov	r3, r0
 800377c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003780:	4293      	cmp	r3, r2
 8003782:	d819      	bhi.n	80037b8 <HAL_RCC_OscConfig+0x28c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d108      	bne.n	800379e <HAL_RCC_OscConfig+0x272>
 800378c:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003794:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379a:	6053      	str	r3, [r2, #4]
 800379c:	e030      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	4901      	ldr	r1, [pc, #4]	@ (80037b4 <HAL_RCC_OscConfig+0x288>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e025      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
 80037b4:	58024400 	.word	0x58024400
 80037b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	4997      	ldr	r1, [pc, #604]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
 80037cc:	e018      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b95      	ldr	r3, [pc, #596]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a94      	ldr	r2, [pc, #592]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd ffb1 	bl	8001740 <HAL_GetTick>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fd ffad 	bl	8001740 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e2ed      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f4:	4b8b      	ldr	r3, [pc, #556]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a9 	beq.w	8003960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003818:	4b82      	ldr	r3, [pc, #520]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d007      	beq.n	8003834 <HAL_RCC_OscConfig+0x308>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b18      	cmp	r3, #24
 8003828:	d13a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x374>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d135      	bne.n	80038a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003834:	4b7b      	ldr	r3, [pc, #492]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x320>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b80      	cmp	r3, #128	@ 0x80
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e2c1      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800384c:	f7fd ffa8 	bl	80017a0 <HAL_GetREVID>
 8003850:	4603      	mov	r3, r0
 8003852:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003856:	4293      	cmp	r3, r2
 8003858:	d817      	bhi.n	800388a <HAL_RCC_OscConfig+0x35e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2b20      	cmp	r3, #32
 8003860:	d108      	bne.n	8003874 <HAL_RCC_OscConfig+0x348>
 8003862:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800386a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800386c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003872:	e075      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003874:	4b6b      	ldr	r3, [pc, #428]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	069b      	lsls	r3, r3, #26
 8003882:	4968      	ldr	r1, [pc, #416]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003888:	e06a      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800388a:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	4962      	ldr	r1, [pc, #392]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800389e:	e05f      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d042      	beq.n	800392e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd ff44 	bl	8001740 <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038bc:	f7fd ff40 	bl	8001740 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e280      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ce:	4b55      	ldr	r3, [pc, #340]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038da:	f7fd ff61 	bl	80017a0 <HAL_GetREVID>
 80038de:	4603      	mov	r3, r0
 80038e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d817      	bhi.n	8003918 <HAL_RCC_OscConfig+0x3ec>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d108      	bne.n	8003902 <HAL_RCC_OscConfig+0x3d6>
 80038f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80038f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
 8003902:	4b48      	ldr	r3, [pc, #288]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	4944      	ldr	r1, [pc, #272]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
 8003916:	e023      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
 8003918:	4b42      	ldr	r3, [pc, #264]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	493f      	ldr	r1, [pc, #252]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
 800392c:	e018      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800392e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a3c      	ldr	r2, [pc, #240]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd ff01 	bl	8001740 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003942:	f7fd fefd 	bl	8001740 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e23d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003954:	4b33      	ldr	r3, [pc, #204]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d036      	beq.n	80039da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003974:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003978:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fede 	bl	8001740 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fd feda 	bl	8001740 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e21a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800399a:	4b22      	ldr	r3, [pc, #136]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x45c>
 80039a6:	e018      	b.n	80039da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fec4 	bl	8001740 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd fec0 	bl	8001740 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e200      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d039      	beq.n	8003a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fea1 	bl	8001740 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a02:	f7fd fe9d 	bl	8001740 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e1dd      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a14:	4b03      	ldr	r3, [pc, #12]	@ (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x52e>
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a28:	4b9b      	ldr	r3, [pc, #620]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a34:	f7fd fe84 	bl	8001740 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3c:	f7fd fe80 	bl	8001740 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a4e:	4b92      	ldr	r3, [pc, #584]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8081 	beq.w	8003b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a68:	4b8c      	ldr	r3, [pc, #560]	@ (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8b      	ldr	r2, [pc, #556]	@ (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fe64 	bl	8001740 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fd fe60 	bl	8001740 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1a0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8e:	4b83      	ldr	r3, [pc, #524]	@ (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x584>
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aae:	e02d      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5a6>
 8003ab8:	4b77      	ldr	r3, [pc, #476]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a76      	ldr	r2, [pc, #472]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac4:	4b74      	ldr	r3, [pc, #464]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a73      	ldr	r2, [pc, #460]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c8>
 8003ada:	4b6f      	ldr	r3, [pc, #444]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	4a6e      	ldr	r2, [pc, #440]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	4a6b      	ldr	r2, [pc, #428]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4a67      	ldr	r2, [pc, #412]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b00:	4b65      	ldr	r3, [pc, #404]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a64      	ldr	r2, [pc, #400]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fe14 	bl	8001740 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fe10 	bl	8001740 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e14e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b32:	4b59      	ldr	r3, [pc, #356]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ee      	beq.n	8003b1c <HAL_RCC_OscConfig+0x5f0>
 8003b3e:	e014      	b.n	8003b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fdfe 	bl	8001740 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd fdfa 	bl	8001740 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e138      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ee      	bne.n	8003b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 812d 	beq.w	8003dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b74:	4b48      	ldr	r3, [pc, #288]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b7c:	2b18      	cmp	r3, #24
 8003b7e:	f000 80bd 	beq.w	8003cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	f040 809e 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	4b42      	ldr	r3, [pc, #264]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a41      	ldr	r2, [pc, #260]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fdd2 	bl	8001740 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fdce 	bl	8001740 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e10e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bb2:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bbe:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc2:	4b37      	ldr	r3, [pc, #220]	@ (8003ca0 <HAL_RCC_OscConfig+0x774>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4931      	ldr	r1, [pc, #196]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	3b01      	subs	r3, #1
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	3b01      	subs	r3, #1
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c08:	4923      	ldr	r1, [pc, #140]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c0e:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	4a21      	ldr	r2, [pc, #132]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c1e:	4b21      	ldr	r3, [pc, #132]	@ (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	491b      	ldr	r1, [pc, #108]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	f023 020c 	bic.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	4917      	ldr	r1, [pc, #92]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c40:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	f023 0202 	bic.w	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	4912      	ldr	r1, [pc, #72]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c52:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	4a10      	ldr	r2, [pc, #64]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	4a07      	ldr	r2, [pc, #28]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fd57 	bl	8001740 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c94:	e011      	b.n	8003cba <HAL_RCC_OscConfig+0x78e>
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	58024800 	.word	0x58024800
 8003ca0:	fffffc0c 	.word	0xfffffc0c
 8003ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fd4a 	bl	8001740 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e08a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x77c>
 8003cc6:	e082      	b.n	8003dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	4b43      	ldr	r3, [pc, #268]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a42      	ldr	r2, [pc, #264]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fd34 	bl	8001740 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fd30 	bl	8001740 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e070      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cee:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x7b0>
 8003cfa:	e068      	b.n	8003dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cfc:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d02:	4b35      	ldr	r3, [pc, #212]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d031      	beq.n	8003d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d12a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d122      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0a5b      	lsrs	r3, r3, #9
 8003d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0e1b      	lsrs	r3, r3, #24
 8003d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e02b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d78:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d01f      	beq.n	8003dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	4a11      	ldr	r2, [pc, #68]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d9a:	f7fd fcd1 	bl	8001740 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003da0:	bf00      	nop
 8003da2:	f7fd fccd 	bl	8001740 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d0f9      	beq.n	8003da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_RCC_OscConfig+0x8b0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4906      	ldr	r1, [pc, #24]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dc2:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3730      	adds	r7, #48	@ 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	ffff0007 	.word	0xffff0007

08003de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e19c      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b8a      	ldr	r3, [pc, #552]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d910      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b87      	ldr	r3, [pc, #540]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 020f 	bic.w	r2, r3, #15
 8003e0a:	4985      	ldr	r1, [pc, #532]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b83      	ldr	r3, [pc, #524]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e184      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	4b7b      	ldr	r3, [pc, #492]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d908      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e40:	4b78      	ldr	r3, [pc, #480]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4975      	ldr	r1, [pc, #468]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	4b70      	ldr	r3, [pc, #448]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d908      	bls.n	8003e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	496a      	ldr	r1, [pc, #424]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	4b64      	ldr	r3, [pc, #400]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d908      	bls.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	495e      	ldr	r1, [pc, #376]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	4b59      	ldr	r3, [pc, #356]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eca:	4b56      	ldr	r3, [pc, #344]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4953      	ldr	r1, [pc, #332]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	4b4d      	ldr	r3, [pc, #308]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f023 020f 	bic.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4947      	ldr	r1, [pc, #284]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d055      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f16:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4940      	ldr	r1, [pc, #256]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f30:	4b3c      	ldr	r3, [pc, #240]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0f6      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f48:	4b36      	ldr	r3, [pc, #216]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d115      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0ea      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f60:	4b30      	ldr	r3, [pc, #192]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0de      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f70:	4b2c      	ldr	r3, [pc, #176]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0d6      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f80:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f023 0207 	bic.w	r2, r3, #7
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4925      	ldr	r1, [pc, #148]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fd fbd5 	bl	8001740 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9a:	f7fd fbd1 	bl	8001740 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0be      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d1eb      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d208      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fde:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	490e      	ldr	r1, [pc, #56]	@ (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d214      	bcs.n	8004028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	4906      	ldr	r1, [pc, #24]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e086      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
 8004020:	52002000 	.word	0x52002000
 8004024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	4b3f      	ldr	r3, [pc, #252]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004040:	429a      	cmp	r2, r3
 8004042:	d208      	bcs.n	8004056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004044:	4b3c      	ldr	r3, [pc, #240]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4939      	ldr	r1, [pc, #228]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004052:	4313      	orrs	r3, r2
 8004054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	4b34      	ldr	r3, [pc, #208]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800406e:	429a      	cmp	r2, r3
 8004070:	d208      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004072:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	492e      	ldr	r1, [pc, #184]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004080:	4313      	orrs	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	4b28      	ldr	r3, [pc, #160]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800409c:	429a      	cmp	r2, r3
 800409e:	d208      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040a0:	4b25      	ldr	r3, [pc, #148]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	4922      	ldr	r1, [pc, #136]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d208      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4917      	ldr	r1, [pc, #92]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e0:	f000 f834 	bl	800414c <HAL_RCC_GetSysClockFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	4912      	ldr	r1, [pc, #72]	@ (800413c <HAL_RCC_ClockConfig+0x35c>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	4a0d      	ldr	r2, [pc, #52]	@ (800413c <HAL_RCC_ClockConfig+0x35c>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <HAL_RCC_ClockConfig+0x360>)
 8004116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004118:	4a0a      	ldr	r2, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x364>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x368>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fac2 	bl	80016ac <HAL_InitTick>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	58024400 	.word	0x58024400
 800413c:	0800ce5c 	.word	0x0800ce5c
 8004140:	24000004 	.word	0x24000004
 8004144:	24000000 	.word	0x24000000
 8004148:	24000008 	.word	0x24000008

0800414c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	@ 0x24
 8004150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004152:	4bb3      	ldr	r3, [pc, #716]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800415a:	2b18      	cmp	r3, #24
 800415c:	f200 8155 	bhi.w	800440a <HAL_RCC_GetSysClockFreq+0x2be>
 8004160:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004166:	bf00      	nop
 8004168:	080041cd 	.word	0x080041cd
 800416c:	0800440b 	.word	0x0800440b
 8004170:	0800440b 	.word	0x0800440b
 8004174:	0800440b 	.word	0x0800440b
 8004178:	0800440b 	.word	0x0800440b
 800417c:	0800440b 	.word	0x0800440b
 8004180:	0800440b 	.word	0x0800440b
 8004184:	0800440b 	.word	0x0800440b
 8004188:	080041f3 	.word	0x080041f3
 800418c:	0800440b 	.word	0x0800440b
 8004190:	0800440b 	.word	0x0800440b
 8004194:	0800440b 	.word	0x0800440b
 8004198:	0800440b 	.word	0x0800440b
 800419c:	0800440b 	.word	0x0800440b
 80041a0:	0800440b 	.word	0x0800440b
 80041a4:	0800440b 	.word	0x0800440b
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	0800440b 	.word	0x0800440b
 80041b0:	0800440b 	.word	0x0800440b
 80041b4:	0800440b 	.word	0x0800440b
 80041b8:	0800440b 	.word	0x0800440b
 80041bc:	0800440b 	.word	0x0800440b
 80041c0:	0800440b 	.word	0x0800440b
 80041c4:	0800440b 	.word	0x0800440b
 80041c8:	080041ff 	.word	0x080041ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041cc:	4b94      	ldr	r3, [pc, #592]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041d8:	4b91      	ldr	r3, [pc, #580]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	4a90      	ldr	r2, [pc, #576]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80041ea:	e111      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041ee:	61bb      	str	r3, [r7, #24]
      break;
 80041f0:	e10e      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80041f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041f4:	61bb      	str	r3, [r7, #24]
      break;
 80041f6:	e10b      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80041f8:	4b8c      	ldr	r3, [pc, #560]	@ (800442c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041fa:	61bb      	str	r3, [r7, #24]
      break;
 80041fc:	e108      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004208:	4b85      	ldr	r3, [pc, #532]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004214:	4b82      	ldr	r3, [pc, #520]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800421e:	4b80      	ldr	r3, [pc, #512]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80e1 	beq.w	8004404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b02      	cmp	r3, #2
 8004246:	f000 8083 	beq.w	8004350 <HAL_RCC_GetSysClockFreq+0x204>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f200 80a1 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x248>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x114>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d056      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x1c0>
 800425e:	e099      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004260:	4b6f      	ldr	r3, [pc, #444]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02d      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800426c:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	4a6b      	ldr	r2, [pc, #428]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	4b62      	ldr	r3, [pc, #392]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042c6:	e087      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042da:	4b51      	ldr	r3, [pc, #324]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800430a:	e065      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800431a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431e:	4b40      	ldr	r3, [pc, #256]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004332:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800434e:	e043      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800443c <HAL_RCC_GetSysClockFreq+0x2f0>
 800435e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004372:	ed97 6a02 	vldr	s12, [r7, #8]
 8004376:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800437a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004392:	e021      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e2:	3301      	adds	r3, #1
 80043e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	ee07 3a90 	vmov	s15, r3
 80043ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fc:	ee17 3a90 	vmov	r3, s15
 8004400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800440a:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800440c:	61bb      	str	r3, [r7, #24]
      break;
 800440e:	bf00      	nop
  }

  return sysclockfreq;
 8004410:	69bb      	ldr	r3, [r7, #24]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	@ 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	03d09000 	.word	0x03d09000
 8004428:	003d0900 	.word	0x003d0900
 800442c:	017d7840 	.word	0x017d7840
 8004430:	46000000 	.word	0x46000000
 8004434:	4c742400 	.word	0x4c742400
 8004438:	4a742400 	.word	0x4a742400
 800443c:	4bbebc20 	.word	0x4bbebc20

08004440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004446:	f7ff fe81 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_GetHCLKFreq+0x50>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490f      	ldr	r1, [pc, #60]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x54>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_RCC_GetHCLKFreq+0x50>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <HAL_RCC_GetHCLKFreq+0x54>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	fa22 f303 	lsr.w	r3, r2, r3
 800447a:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <HAL_RCC_GetHCLKFreq+0x58>)
 800447c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800447e:	4a07      	ldr	r2, [pc, #28]	@ (800449c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004484:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <HAL_RCC_GetHCLKFreq+0x58>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	58024400 	.word	0x58024400
 8004494:	0800ce5c 	.word	0x0800ce5c
 8004498:	24000004 	.word	0x24000004
 800449c:	24000000 	.word	0x24000000

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044a4:	f7ff ffcc 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4904      	ldr	r1, [pc, #16]	@ (80044c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024400 	.word	0x58024400
 80044c8:	0800ce5c 	.word	0x0800ce5c

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d0:	b0cc      	sub	sp, #304	@ 0x130
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80044f0:	2500      	movs	r5, #0
 80044f2:	ea54 0305 	orrs.w	r3, r4, r5
 80044f6:	d049      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80044f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004502:	d02f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004508:	d828      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800450a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800450e:	d01a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004514:	d822      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800451e:	d007      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004520:	e01c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004522:	4bb8      	ldr	r3, [pc, #736]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4ab7      	ldr	r2, [pc, #732]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800452e:	e01a      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004530:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004534:	3308      	adds	r3, #8
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f002 fba1 	bl	8006c80 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004544:	e00f      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800454a:	3328      	adds	r3, #40	@ 0x28
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f002 fc48 	bl	8006de4 <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800456e:	4ba5      	ldr	r3, [pc, #660]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004572:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800457a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457c:	4aa1      	ldr	r2, [pc, #644]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800457e:	430b      	orrs	r3, r1
 8004580:	6513      	str	r3, [r2, #80]	@ 0x50
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004588:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800458c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004598:	f04f 0900 	mov.w	r9, #0
 800459c:	ea58 0309 	orrs.w	r3, r8, r9
 80045a0:	d047      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d82a      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045ac:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045c9 	.word	0x080045c9
 80045b8:	080045d7 	.word	0x080045d7
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	0800460b 	.word	0x0800460b
 80045c4:	0800460b 	.word	0x0800460b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	4a8d      	ldr	r2, [pc, #564]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045d4:	e01a      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045da:	3308      	adds	r3, #8
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f002 fb4e 	bl	8006c80 <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ea:	e00f      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045f0:	3328      	adds	r3, #40	@ 0x28
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f002 fbf5 	bl	8006de4 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004614:	4b7b      	ldr	r3, [pc, #492]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004618:	f023 0107 	bic.w	r1, r3, #7
 800461c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	4a78      	ldr	r2, [pc, #480]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6513      	str	r3, [r2, #80]	@ 0x50
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800462e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800463e:	f04f 0b00 	mov.w	fp, #0
 8004642:	ea5a 030b 	orrs.w	r3, sl, fp
 8004646:	d04c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800464c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004652:	d030      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004658:	d829      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800465a:	2bc0      	cmp	r3, #192	@ 0xc0
 800465c:	d02d      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800465e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004660:	d825      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004662:	2b80      	cmp	r3, #128	@ 0x80
 8004664:	d018      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d821      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d007      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004672:	e01c      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4b63      	ldr	r3, [pc, #396]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	4a62      	ldr	r2, [pc, #392]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004680:	e01c      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004686:	3308      	adds	r3, #8
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f002 faf8 	bl	8006c80 <RCCEx_PLL2_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800469c:	3328      	adds	r3, #40	@ 0x28
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f002 fb9f 	bl	8006de4 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80046ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80046cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80046ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80046f8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d053      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800470a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800470e:	d035      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004714:	d82e      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004716:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800471a:	d031      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800471c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004720:	d828      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004726:	d01a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472c:	d822      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004736:	d007      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004738:	e01c      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4b32      	ldr	r3, [pc, #200]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a31      	ldr	r2, [pc, #196]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004746:	e01c      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800474c:	3308      	adds	r3, #8
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fa95 	bl	8006c80 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800475c:	e011      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800475e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004762:	3328      	adds	r3, #40	@ 0x28
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f002 fb3c 	bl	8006de4 <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004772:	e006      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800477a:	e002      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800478a:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004796:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6593      	str	r3, [r2, #88]	@ 0x58
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80047ba:	2300      	movs	r3, #0
 80047bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80047c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d056      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80047ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047d6:	d038      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047dc:	d831      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80047de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047e2:	d034      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80047e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047e8:	d82b      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80047ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047ee:	d01d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80047f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047f4:	d825      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80047fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004800:	e01f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004802:	bf00      	nop
 8004804:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004808:	4ba2      	ldr	r3, [pc, #648]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	4aa1      	ldr	r2, [pc, #644]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800480e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004814:	e01c      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800481a:	3308      	adds	r3, #8
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f002 fa2e 	bl	8006c80 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800482a:	e011      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800482c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004830:	3328      	adds	r3, #40	@ 0x28
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f002 fad5 	bl	8006de4 <RCCEx_PLL3_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004840:	e006      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800484e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004850:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004858:	4b8e      	ldr	r3, [pc, #568]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004868:	4a8a      	ldr	r2, [pc, #552]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800486a:	430b      	orrs	r3, r1
 800486c:	6593      	str	r3, [r2, #88]	@ 0x58
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004874:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004884:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800488e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d03a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	2b30      	cmp	r3, #48	@ 0x30
 80048a0:	d01f      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048a2:	2b30      	cmp	r3, #48	@ 0x30
 80048a4:	d819      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d00c      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d815      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d019      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d111      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b6:	4b77      	ldr	r3, [pc, #476]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	4a76      	ldr	r2, [pc, #472]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80048c2:	e011      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c8:	3308      	adds	r3, #8
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f002 f9d7 	bl	8006c80 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80048d8:	e006      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048f0:	4b68      	ldr	r3, [pc, #416]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80048f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	4a65      	ldr	r2, [pc, #404]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004900:	430b      	orrs	r3, r1
 8004902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800490a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800490e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800491a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004924:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004928:	460b      	mov	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	d051      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800492e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004938:	d035      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800493a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800493e:	d82e      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004940:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004944:	d031      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004946:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800494a:	d828      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004950:	d01a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004956:	d822      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004962:	e01c      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004970:	e01c      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004976:	3308      	adds	r3, #8
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f002 f980 	bl	8006c80 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004986:	e011      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800498c:	3328      	adds	r3, #40	@ 0x28
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f002 fa27 	bl	8006de4 <RCCEx_PLL3_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049b4:	4b37      	ldr	r3, [pc, #220]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049c2:	4a34      	ldr	r2, [pc, #208]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80049de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80049e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d056      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80049f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049fc:	d033      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80049fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a02:	d82c      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a08:	d02f      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a0e:	d826      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a14:	d02b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a1a:	d820      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a20:	d012      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a26:	d81a      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d022      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a30:	d115      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a36:	3308      	adds	r3, #8
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f002 f920 	bl	8006c80 <RCCEx_PLL2_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a46:	e015      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a4c:	3328      	adds	r3, #40	@ 0x28
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 f9c7 	bl	8006de4 <RCCEx_PLL3_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a64:	e006      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a66:	bf00      	nop
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a8a:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004aac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ab6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d055      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004acc:	d033      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad2:	d82c      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad8:	d02f      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ade:	d826      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ae0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ae4:	d02b      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004ae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aea:	d820      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af0:	d012      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af6:	d81a      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d022      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b00:	d115      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b06:	3308      	adds	r3, #8
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f002 f8b8 	bl	8006c80 <RCCEx_PLL2_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b16:	e015      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b1c:	3328      	adds	r3, #40	@ 0x28
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f002 f95f 	bl	8006de4 <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b4c:	4bb6      	ldr	r3, [pc, #728]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b5c:	4ab2      	ldr	r2, [pc, #712]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d02a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f002 f86b 	bl	8006c80 <RCCEx_PLL2_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004bb0:	e004      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004bb8:	e000      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004bc4:	4b98      	ldr	r3, [pc, #608]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd2:	4a95      	ldr	r2, [pc, #596]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004bf8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d037      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c0c:	d00e      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c12:	d816      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d018      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1c:	d111      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1e:	4b82      	ldr	r3, [pc, #520]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a81      	ldr	r2, [pc, #516]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c2a:	e00f      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c30:	3308      	adds	r3, #8
 8004c32:	2101      	movs	r1, #1
 8004c34:	4618      	mov	r0, r3
 8004c36:	f002 f823 	bl	8006c80 <RCCEx_PLL2_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c40:	e004      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c48:	e000      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c54:	4b74      	ldr	r3, [pc, #464]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c62:	4a71      	ldr	r2, [pc, #452]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c88:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d03a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d81d      	bhi.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004ce1 	.word	0x08004ce1
 8004ca8:	08004cb5 	.word	0x08004cb5
 8004cac:	08004cc3 	.word	0x08004cc3
 8004cb0:	08004ce1 	.word	0x08004ce1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	4a5b      	ldr	r2, [pc, #364]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cc0:	e00f      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	2102      	movs	r1, #2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 ffd8 	bl	8006c80 <RCCEx_PLL2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cd6:	e004      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cea:	4b4f      	ldr	r3, [pc, #316]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cee:	f023 0103 	bic.w	r1, r3, #3
 8004cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cfe:	e003      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f000 80a0 	beq.w	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2a:	4b40      	ldr	r3, [pc, #256]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d36:	f7fc fd03 	bl	8001740 <HAL_GetTick>
 8004d3a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fc fcfe 	bl	8001740 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	@ 0x64
 8004d4e:	d903      	bls.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d58:	4b34      	ldr	r3, [pc, #208]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ed      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004d64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d17a      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d78:	4053      	eors	r3, r2
 8004d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d8e:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d9a:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a22      	ldr	r2, [pc, #136]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004da6:	4a20      	ldr	r2, [pc, #128]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004da8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004dac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004db2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dba:	d118      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fc fcc0 	bl	8001740 <HAL_GetTick>
 8004dc0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc4:	e00d      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fc fcbb 	bl	8001740 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d903      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004de2:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0eb      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d130      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e06:	d115      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004e08:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e18:	091a      	lsrs	r2, r3, #4
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	4a02      	ldr	r2, [pc, #8]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6113      	str	r3, [r2, #16]
 8004e24:	e00c      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004e26:	bf00      	nop
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	58024800 	.word	0x58024800
 8004e30:	00ffffcf 	.word	0x00ffffcf
 8004e34:	4bd4      	ldr	r3, [pc, #848]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	4ad3      	ldr	r2, [pc, #844]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e3e:	6113      	str	r3, [r2, #16]
 8004e40:	4bd1      	ldr	r3, [pc, #836]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e42:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e50:	4acd      	ldr	r2, [pc, #820]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004e60:	e003      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f002 0301 	and.w	r3, r2, #1
 8004e76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f000 808b 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e94:	2b28      	cmp	r3, #40	@ 0x28
 8004e96:	d86b      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004e98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004f79 	.word	0x08004f79
 8004ea4:	08004f71 	.word	0x08004f71
 8004ea8:	08004f71 	.word	0x08004f71
 8004eac:	08004f71 	.word	0x08004f71
 8004eb0:	08004f71 	.word	0x08004f71
 8004eb4:	08004f71 	.word	0x08004f71
 8004eb8:	08004f71 	.word	0x08004f71
 8004ebc:	08004f71 	.word	0x08004f71
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	08004f71 	.word	0x08004f71
 8004ec8:	08004f71 	.word	0x08004f71
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004f71 	.word	0x08004f71
 8004ed4:	08004f71 	.word	0x08004f71
 8004ed8:	08004f71 	.word	0x08004f71
 8004edc:	08004f71 	.word	0x08004f71
 8004ee0:	08004f5b 	.word	0x08004f5b
 8004ee4:	08004f71 	.word	0x08004f71
 8004ee8:	08004f71 	.word	0x08004f71
 8004eec:	08004f71 	.word	0x08004f71
 8004ef0:	08004f71 	.word	0x08004f71
 8004ef4:	08004f71 	.word	0x08004f71
 8004ef8:	08004f71 	.word	0x08004f71
 8004efc:	08004f71 	.word	0x08004f71
 8004f00:	08004f79 	.word	0x08004f79
 8004f04:	08004f71 	.word	0x08004f71
 8004f08:	08004f71 	.word	0x08004f71
 8004f0c:	08004f71 	.word	0x08004f71
 8004f10:	08004f71 	.word	0x08004f71
 8004f14:	08004f71 	.word	0x08004f71
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f71 	.word	0x08004f71
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f79 	.word	0x08004f79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f48:	3308      	adds	r3, #8
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fe97 	bl	8006c80 <RCCEx_PLL2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f58:	e00f      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f5e:	3328      	adds	r3, #40	@ 0x28
 8004f60:	2101      	movs	r1, #1
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 ff3e 	bl	8006de4 <RCCEx_PLL3_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f6e:	e004      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f76:	e000      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f82:	4b81      	ldr	r3, [pc, #516]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f92:	4a7d      	ldr	r2, [pc, #500]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f002 0302 	and.w	r3, r2, #2
 8004fae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d042      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d825      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08005021 	.word	0x08005021
 8004fd8:	08004fed 	.word	0x08004fed
 8004fdc:	08005003 	.word	0x08005003
 8004fe0:	08005021 	.word	0x08005021
 8004fe4:	08005021 	.word	0x08005021
 8004fe8:	08005021 	.word	0x08005021
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fe43 	bl	8006c80 <RCCEx_PLL2_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005000:	e00f      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005006:	3328      	adds	r3, #40	@ 0x28
 8005008:	2101      	movs	r1, #1
 800500a:	4618      	mov	r0, r3
 800500c:	f001 feea 	bl	8006de4 <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005016:	e004      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800501e:	e000      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005022:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800502a:	4b57      	ldr	r3, [pc, #348]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	f023 0107 	bic.w	r1, r3, #7
 8005032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005038:	4a53      	ldr	r2, [pc, #332]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800503a:	430b      	orrs	r3, r1
 800503c:	6553      	str	r3, [r2, #84]	@ 0x54
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f002 0304 	and.w	r3, r2, #4
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	d044      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800506c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005070:	2b05      	cmp	r3, #5
 8005072:	d825      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005074:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050c9 	.word	0x080050c9
 8005080:	08005095 	.word	0x08005095
 8005084:	080050ab 	.word	0x080050ab
 8005088:	080050c9 	.word	0x080050c9
 800508c:	080050c9 	.word	0x080050c9
 8005090:	080050c9 	.word	0x080050c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005098:	3308      	adds	r3, #8
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f001 fdef 	bl	8006c80 <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050a8:	e00f      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ae:	3328      	adds	r3, #40	@ 0x28
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fe96 	bl	8006de4 <RCCEx_PLL3_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050be:	e004      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80050c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d6:	f023 0107 	bic.w	r1, r3, #7
 80050da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050e2:	4a29      	ldr	r2, [pc, #164]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f002 0320 	and.w	r3, r2, #32
 80050fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d057      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800511a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800511e:	d035      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005124:	d82c      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512a:	d031      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d826      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005136:	d02d      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800513c:	d820      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800513e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005142:	d012      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005148:	d81a      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d024      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800514e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005152:	d115      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005158:	3308      	adds	r3, #8
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f001 fd8f 	bl	8006c80 <RCCEx_PLL2_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005168:	e017      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800516a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800516e:	3328      	adds	r3, #40	@ 0x28
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fe36 	bl	8006de4 <RCCEx_PLL3_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800517e:	e00c      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005186:	e008      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005188:	58024400 	.word	0x58024400
        break;
 800518c:	bf00      	nop
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005190:	bf00      	nop
 8005192:	e002      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051a2:	4bc2      	ldr	r3, [pc, #776]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	4abe      	ldr	r2, [pc, #760]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80051d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80051dc:	460b      	mov	r3, r1
 80051de:	4313      	orrs	r3, r2
 80051e0:	d055      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051ee:	d033      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80051f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80051f4:	d82c      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	d02f      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005200:	d826      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005206:	d02b      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005208:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800520c:	d820      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005212:	d012      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005218:	d81a      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d022      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005222:	d115      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005228:	3308      	adds	r3, #8
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f001 fd27 	bl	8006c80 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005238:	e015      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800523e:	3328      	adds	r3, #40	@ 0x28
 8005240:	2102      	movs	r1, #2
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fdce 	bl	8006de4 <RCCEx_PLL3_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800524e:	e00a      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005256:	e006      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005258:	bf00      	nop
 800525a:	e004      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005266:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800526e:	4b8f      	ldr	r3, [pc, #572]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005272:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800527a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800527e:	4a8b      	ldr	r2, [pc, #556]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005280:	430b      	orrs	r3, r1
 8005282:	6593      	str	r3, [r2, #88]	@ 0x58
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800528a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800528e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800529a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d055      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80052ba:	d033      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80052bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80052c0:	d82c      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80052c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c6:	d02f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052cc:	d826      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80052ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80052d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80052d8:	d820      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80052da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052de:	d012      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80052e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052e4:	d81a      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d022      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ee:	d115      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f4:	3308      	adds	r3, #8
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 fcc1 	bl	8006c80 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005304:	e015      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800530a:	3328      	adds	r3, #40	@ 0x28
 800530c:	2102      	movs	r1, #2
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fd68 	bl	8006de4 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800531a:	e00a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800533a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800534a:	4a58      	ldr	r2, [pc, #352]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	e003      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005352:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005356:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800535a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f002 0308 	and.w	r3, r2, #8
 8005366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800536a:	2300      	movs	r3, #0
 800536c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005370:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005374:	460b      	mov	r3, r1
 8005376:	4313      	orrs	r3, r2
 8005378:	d01e      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800537a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	d10c      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800538c:	3328      	adds	r3, #40	@ 0x28
 800538e:	2102      	movs	r1, #2
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fd27 	bl	8006de4 <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053a2:	4b42      	ldr	r3, [pc, #264]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	4a3e      	ldr	r2, [pc, #248]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f002 0310 	and.w	r3, r2, #16
 80053c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d01e      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ea:	3328      	adds	r3, #40	@ 0x28
 80053ec:	2102      	movs	r1, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fcf8 	bl	8006de4 <RCCEx_PLL3_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005400:	4b2a      	ldr	r3, [pc, #168]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800540c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005410:	4a26      	ldr	r2, [pc, #152]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005412:	430b      	orrs	r3, r1
 8005414:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800542c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005430:	460b      	mov	r3, r1
 8005432:	4313      	orrs	r3, r2
 8005434:	d040      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800543a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005442:	d022      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005448:	d81b      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005452:	d00b      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005454:	e015      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800545a:	3308      	adds	r3, #8
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fc0e 	bl	8006c80 <RCCEx_PLL2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800546a:	e00f      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800546c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005470:	3328      	adds	r3, #40	@ 0x28
 8005472:	2102      	movs	r1, #2
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fcb5 	bl	8006de4 <RCCEx_PLL3_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005480:	e004      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005498:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800549c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054a4:	4a01      	ldr	r2, [pc, #4]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054aa:	e005      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80054ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80054c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054c6:	2300      	movs	r3, #0
 80054c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d03b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054e0:	d01f      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80054e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054e6:	d818      	bhi.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80054e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80054ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80054f4:	e011      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4a63      	ldr	r2, [pc, #396]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005502:	e00f      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005508:	3328      	adds	r3, #40	@ 0x28
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fc69 	bl	8006de4 <RCCEx_PLL3_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005518:	e004      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005524:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552c:	4b56      	ldr	r3, [pc, #344]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800553c:	4a52      	ldr	r2, [pc, #328]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800553e:	430b      	orrs	r3, r1
 8005540:	6553      	str	r3, [r2, #84]	@ 0x54
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005544:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005548:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800554c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005558:	673b      	str	r3, [r7, #112]	@ 0x70
 800555a:	2300      	movs	r3, #0
 800555c:	677b      	str	r3, [r7, #116]	@ 0x74
 800555e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	d031      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800556c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005576:	d007      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005578:	e011      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557a:	4b43      	ldr	r3, [pc, #268]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	4a42      	ldr	r2, [pc, #264]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005586:	e00e      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800558c:	3308      	adds	r3, #8
 800558e:	2102      	movs	r1, #2
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fb75 	bl	8006c80 <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800559c:	e003      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055ae:	4b36      	ldr	r3, [pc, #216]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055bc:	4a32      	ldr	r2, [pc, #200]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80055be:	430b      	orrs	r3, r1
 80055c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055c2:	e003      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80055d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055da:	2300      	movs	r3, #0
 80055dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d00c      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ec:	3328      	adds	r3, #40	@ 0x28
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fbf7 	bl	8006de4 <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800560e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005610:	2300      	movs	r3, #0
 8005612:	667b      	str	r3, [r7, #100]	@ 0x64
 8005614:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005618:	460b      	mov	r3, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	d03a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800561e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800562a:	d018      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800562c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005630:	d811      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005636:	d014      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563c:	d80b      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d106      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a0e      	ldr	r2, [pc, #56]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800565c:	e004      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800565e:	bf00      	nop
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005668:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005670:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005680:	4a01      	ldr	r2, [pc, #4]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005682:	430b      	orrs	r3, r1
 8005684:	6553      	str	r3, [r2, #84]	@ 0x54
 8005686:	e005      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005690:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80056a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a2:	2300      	movs	r3, #0
 80056a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b0:	4baa      	ldr	r3, [pc, #680]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80056b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80056b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056be:	4aa7      	ldr	r2, [pc, #668]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80056d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80056d2:	2300      	movs	r3, #0
 80056d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80056d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056e0:	4b9e      	ldr	r3, [pc, #632]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80056e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80056f0:	4a9a      	ldr	r2, [pc, #616]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80056f2:	430b      	orrs	r3, r1
 80056f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005704:	2300      	movs	r3, #0
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005708:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d009      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005712:	4b92      	ldr	r3, [pc, #584]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005716:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800571a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	4a8e      	ldr	r2, [pc, #568]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005722:	430b      	orrs	r3, r1
 8005724:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005732:	643b      	str	r3, [r7, #64]	@ 0x40
 8005734:	2300      	movs	r3, #0
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44
 8005738:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800573c:	460b      	mov	r3, r1
 800573e:	4313      	orrs	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005742:	4b86      	ldr	r3, [pc, #536]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	4a85      	ldr	r2, [pc, #532]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005748:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800574c:	6113      	str	r3, [r2, #16]
 800574e:	4b83      	ldr	r3, [pc, #524]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005756:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800575a:	4a80      	ldr	r2, [pc, #512]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800575c:	430b      	orrs	r3, r1
 800575e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800576c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800576e:	2300      	movs	r3, #0
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005772:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800577c:	4b77      	ldr	r3, [pc, #476]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800577e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005780:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	4a74      	ldr	r2, [pc, #464]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800578c:	430b      	orrs	r3, r1
 800578e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800579c:	633b      	str	r3, [r7, #48]	@ 0x30
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057ac:	4b6b      	ldr	r3, [pc, #428]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80057b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057bc:	4a67      	ldr	r2, [pc, #412]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	2100      	movs	r1, #0
 80057cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d011      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e2:	3308      	adds	r3, #8
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 fa4a 	bl	8006c80 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80057f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	2100      	movs	r1, #0
 800580c:	6239      	str	r1, [r7, #32]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005818:	460b      	mov	r3, r1
 800581a:	4313      	orrs	r3, r2
 800581c:	d011      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800581e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005822:	3308      	adds	r3, #8
 8005824:	2101      	movs	r1, #1
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fa2a 	bl	8006c80 <RCCEx_PLL2_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005832:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800583e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	2100      	movs	r1, #0
 800584c:	61b9      	str	r1, [r7, #24]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005858:	460b      	mov	r3, r1
 800585a:	4313      	orrs	r3, r2
 800585c:	d011      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800585e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005862:	3308      	adds	r3, #8
 8005864:	2102      	movs	r1, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fa0a 	bl	8006c80 <RCCEx_PLL2_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005872:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800587e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005882:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	2100      	movs	r1, #0
 800588c:	6139      	str	r1, [r7, #16]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d011      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800589e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a2:	3328      	adds	r3, #40	@ 0x28
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 fa9c 	bl	8006de4 <RCCEx_PLL3_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80058b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80058c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	2100      	movs	r1, #0
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d011      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e2:	3328      	adds	r3, #40	@ 0x28
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fa7c 	bl	8006de4 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80058f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	2100      	movs	r1, #0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	607b      	str	r3, [r7, #4]
 8005914:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d011      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800591e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005922:	3328      	adds	r3, #40	@ 0x28
 8005924:	2102      	movs	r1, #2
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fa5c 	bl	8006de4 <RCCEx_PLL3_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800593e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8005942:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
}
 8005950:	4618      	mov	r0, r3
 8005952:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005956:	46bd      	mov	sp, r7
 8005958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800595c:	58024400 	.word	0x58024400

08005960 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b090      	sub	sp, #64	@ 0x40
 8005964:	af00      	add	r7, sp, #0
 8005966:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800596a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800596e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005972:	430b      	orrs	r3, r1
 8005974:	f040 8094 	bne.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005978:	4b9e      	ldr	r3, [pc, #632]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2b04      	cmp	r3, #4
 8005986:	f200 8087 	bhi.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800598a:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	080059a5 	.word	0x080059a5
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059f5 	.word	0x080059f5
 800599c:	08005a91 	.word	0x08005a91
 80059a0:	08005a1d 	.word	0x08005a1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059a4:	4b93      	ldr	r3, [pc, #588]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b0:	d108      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f810 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059c0:	f000 bd45 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c8:	f000 bd41 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059cc:	4b89      	ldr	r3, [pc, #548]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d8:	d108      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059da:	f107 0318 	add.w	r3, r7, #24
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fd54 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059e8:	f000 bd31 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f0:	f000 bd2d 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059f4:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a00:	d108      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fe94 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a10:	f000 bd1d 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a18:	f000 bd19 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a1c:	4b75      	ldr	r3, [pc, #468]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a26:	4b73      	ldr	r3, [pc, #460]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a38:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	08db      	lsrs	r3, r3, #3
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	4a6d      	ldr	r2, [pc, #436]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a4a:	e01f      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a4c:	4b69      	ldr	r3, [pc, #420]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a58:	d106      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a60:	d102      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a62:	4b66      	ldr	r3, [pc, #408]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a66:	e011      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a68:	4b62      	ldr	r3, [pc, #392]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a74:	d106      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a7c:	d102      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a7e:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a82:	e003      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a88:	f000 bce1 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a8c:	f000 bcdf 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a90:	4b5c      	ldr	r3, [pc, #368]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a94:	f000 bcdb 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9c:	f000 bcd7 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aa4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	f040 80ad 	bne.w	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005aae:	4b51      	ldr	r3, [pc, #324]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005abe:	d056      	beq.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac6:	f200 8090 	bhi.w	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ace:	f000 8088 	beq.w	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad6:	f200 8088 	bhi.w	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	2b80      	cmp	r3, #128	@ 0x80
 8005ade:	d032      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	2b80      	cmp	r3, #128	@ 0x80
 8005ae4:	f200 8081 	bhi.w	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	2b40      	cmp	r3, #64	@ 0x40
 8005af2:	d014      	beq.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005af4:	e079      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005af6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b02:	d108      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 ff67 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b12:	f000 bc9c 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1a:	f000 bc98 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b1e:	4b35      	ldr	r3, [pc, #212]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b2a:	d108      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2c:	f107 0318 	add.w	r3, r7, #24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fcab 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b3a:	f000 bc88 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b42:	f000 bc84 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b46:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b52:	d108      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fdeb 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b62:	f000 bc74 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b6a:	f000 bc70 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b6e:	4b21      	ldr	r3, [pc, #132]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b78:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d10c      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b96:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b9c:	e01f      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b9e:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005baa:	d106      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb2:	d102      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bb4:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bb8:	e011      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bba:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005bda:	f000 bc38 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005bde:	f000 bc36 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005be2:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be6:	f000 bc32 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bee:	f000 bc2e 	b.w	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005bf2:	bf00      	nop
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	03d09000 	.word	0x03d09000
 8005bfc:	003d0900 	.word	0x003d0900
 8005c00:	017d7840 	.word	0x017d7840
 8005c04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c0c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005c10:	430b      	orrs	r3, r1
 8005c12:	f040 809c 	bne.w	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005c16:	4b9e      	ldr	r3, [pc, #632]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c26:	d054      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c2e:	f200 808b 	bhi.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c38:	f000 8083 	beq.w	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c42:	f200 8081 	bhi.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4c:	d02f      	beq.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c54:	d878      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c62:	d012      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005c64:	e070      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c66:	4b8a      	ldr	r3, [pc, #552]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c72:	d107      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 feaf 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c82:	e3e4      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c88:	e3e1      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c8a:	4b81      	ldr	r3, [pc, #516]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c98:	f107 0318 	add.w	r3, r7, #24
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fbf5 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ca6:	e3d2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cac:	e3cf      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cae:	4b78      	ldr	r3, [pc, #480]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cba:	d107      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cbc:	f107 030c 	add.w	r3, r7, #12
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fd37 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cca:	e3c0      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e3bd      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d10c      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cee:	4b68      	ldr	r3, [pc, #416]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	08db      	lsrs	r3, r3, #3
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	4a66      	ldr	r2, [pc, #408]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d00:	e01e      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d02:	4b63      	ldr	r3, [pc, #396]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0e:	d106      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d16:	d102      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d18:	4b5f      	ldr	r3, [pc, #380]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d1c:	e010      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d32:	d102      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005d34:	4b59      	ldr	r3, [pc, #356]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d3e:	e386      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d40:	e385      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d46:	e382      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d4c:	e37f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d52:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005d56:	430b      	orrs	r3, r1
 8005d58:	f040 80a7 	bne.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d6c:	d055      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d74:	f200 8096 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d7e:	f000 8084 	beq.w	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d88:	f200 808c 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d92:	d030      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d9a:	f200 8083 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005daa:	d012      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005dac:	e07a      	b.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dae:	4b38      	ldr	r3, [pc, #224]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dba:	d107      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fe0b 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dca:	e340      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd0:	e33d      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dde:	d107      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de0:	f107 0318 	add.w	r3, r7, #24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fb51 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dee:	e32e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df4:	e32b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005df6:	4b26      	ldr	r3, [pc, #152]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e02:	d107      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fc93 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e12:	e31c      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e18:	e319      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e24:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e36:	4b16      	ldr	r3, [pc, #88]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	4a14      	ldr	r2, [pc, #80]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e48:	e01e      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e4a:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e56:	d106      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e60:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e64:	e010      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e66:	4b0a      	ldr	r3, [pc, #40]	@ (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e86:	e2e2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e88:	e2e1      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8e:	e2de      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e90:	58024400 	.word	0x58024400
 8005e94:	03d09000 	.word	0x03d09000
 8005e98:	003d0900 	.word	0x003d0900
 8005e9c:	017d7840 	.word	0x017d7840
 8005ea0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	e2d1      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	f040 809c 	bne.w	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005eb8:	4b93      	ldr	r3, [pc, #588]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005ec0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ec8:	d054      	beq.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed0:	f200 808b 	bhi.w	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eda:	f000 8083 	beq.w	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ee4:	f200 8081 	bhi.w	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eee:	d02f      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef6:	d878      	bhi.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f04:	d012      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005f06:	e070      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f08:	4b7f      	ldr	r3, [pc, #508]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f14:	d107      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fd5e 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f24:	e293      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2a:	e290      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2c:	4b76      	ldr	r3, [pc, #472]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f38:	d107      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 faa4 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f48:	e281      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4e:	e27e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f50:	4b6d      	ldr	r3, [pc, #436]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5e:	f107 030c 	add.w	r3, r7, #12
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fbe6 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6c:	e26f      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f72:	e26c      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f74:	4b64      	ldr	r3, [pc, #400]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f7e:	4b62      	ldr	r3, [pc, #392]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f90:	4b5d      	ldr	r3, [pc, #372]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	08db      	lsrs	r3, r3, #3
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa2:	e01e      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fa4:	4b58      	ldr	r3, [pc, #352]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fb8:	d102      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fba:	4b55      	ldr	r3, [pc, #340]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fbe:	e010      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fc0:	4b51      	ldr	r3, [pc, #324]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fda:	e002      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005fe0:	e235      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fe2:	e234      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe8:	e231      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fee:	e22e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	f040 808f 	bne.w	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005ffe:	4b42      	ldr	r3, [pc, #264]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006002:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006006:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800600e:	d06b      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006016:	d874      	bhi.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800601e:	d056      	beq.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006026:	d86c      	bhi.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800602e:	d03b      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006036:	d864      	bhi.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800603e:	d021      	beq.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006046:	d85c      	bhi.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006054:	d004      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006056:	e054      	b.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006058:	f7fe fa22 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 800605c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800605e:	e1f6      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006060:	4b29      	ldr	r3, [pc, #164]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800606c:	d107      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606e:	f107 0318 	add.w	r3, r7, #24
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fa0a 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800607c:	e1e7      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006082:	e1e4      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006084:	4b20      	ldr	r3, [pc, #128]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006090:	d107      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fb4c 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060a0:	e1d5      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a6:	e1d2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060a8:	4b17      	ldr	r3, [pc, #92]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d109      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060b4:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	08db      	lsrs	r3, r3, #3
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	4a13      	ldr	r2, [pc, #76]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
 80060c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c6:	e1c2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060cc:	e1bf      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d102      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80060dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060e0:	e1b5      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e6:	e1b2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060e8:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f4:	d102      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80060f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060fa:	e1a8      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006100:	e1a5      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006106:	e1a2      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006108:	58024400 	.word	0x58024400
 800610c:	03d09000 	.word	0x03d09000
 8006110:	003d0900 	.word	0x003d0900
 8006114:	017d7840 	.word	0x017d7840
 8006118:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800611c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006120:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006124:	430b      	orrs	r3, r1
 8006126:	d173      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006128:	4b9c      	ldr	r3, [pc, #624]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006130:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006138:	d02f      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006140:	d863      	bhi.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614e:	d012      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006150:	e05b      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006152:	4b92      	ldr	r3, [pc, #584]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800615e:	d107      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006160:	f107 0318 	add.w	r3, r7, #24
 8006164:	4618      	mov	r0, r3
 8006166:	f000 f991 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616e:	e16e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006174:	e16b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006176:	4b89      	ldr	r3, [pc, #548]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800617e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006182:	d107      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fad3 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006192:	e15c      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e159      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800619a:	4b80      	ldr	r3, [pc, #512]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800619c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061a4:	4b7d      	ldr	r3, [pc, #500]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d10c      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80061b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061b6:	4b79      	ldr	r3, [pc, #484]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	4a77      	ldr	r2, [pc, #476]	@ (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061c8:	e01e      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061ca:	4b74      	ldr	r3, [pc, #464]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061d6:	d106      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80061d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061de:	d102      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80061e0:	4b70      	ldr	r3, [pc, #448]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e4:	e010      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061e6:	4b6d      	ldr	r3, [pc, #436]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f2:	d106      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80061f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fa:	d102      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061fc:	4b6a      	ldr	r3, [pc, #424]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006206:	e122      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006208:	e121      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800620e:	e11e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006214:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006218:	430b      	orrs	r3, r1
 800621a:	d133      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800621c:	4b5f      	ldr	r3, [pc, #380]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800621e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d004      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006232:	d012      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006234:	e023      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006236:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006242:	d107      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fbc7 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006252:	e0fc      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006258:	e0f9      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800625a:	4b50      	ldr	r3, [pc, #320]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006266:	d107      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006268:	f107 0318 	add.w	r3, r7, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f000 f90d 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006276:	e0ea      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	e0e7      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006282:	e0e4      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006288:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800628c:	430b      	orrs	r3, r1
 800628e:	f040 808d 	bne.w	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006292:	4b42      	ldr	r3, [pc, #264]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a2:	d06b      	beq.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062aa:	d874      	bhi.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b2:	d056      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d86c      	bhi.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c2:	d03b      	beq.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ca:	d864      	bhi.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d2:	d021      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062da:	d85c      	bhi.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e8:	d004      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80062ea:	e054      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80062ec:	f000 f8b8 	bl	8006460 <HAL_RCCEx_GetD3PCLK1Freq>
 80062f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062f2:	e0ac      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062f4:	4b29      	ldr	r3, [pc, #164]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006300:	d107      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006302:	f107 0318 	add.w	r3, r7, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f8c0 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006310:	e09d      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006316:	e09a      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006318:	4b20      	ldr	r3, [pc, #128]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006324:	d107      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fa02 	bl	8006734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006334:	e08b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633a:	e088      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800633c:	4b17      	ldr	r3, [pc, #92]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d109      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006348:	4b14      	ldr	r3, [pc, #80]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	08db      	lsrs	r3, r3, #3
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	4a13      	ldr	r2, [pc, #76]	@ (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e078      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e075      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006362:	4b0e      	ldr	r3, [pc, #56]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636e:	d102      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006374:	e06b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637a:	e068      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800637c:	4b07      	ldr	r3, [pc, #28]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006388:	d102      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800638a:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638e:	e05e      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006394:	e05b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800639a:	e058      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800639c:	58024400 	.word	0x58024400
 80063a0:	03d09000 	.word	0x03d09000
 80063a4:	003d0900 	.word	0x003d0900
 80063a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80063ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80063b4:	430b      	orrs	r3, r1
 80063b6:	d148      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80063b8:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c8:	d02a      	beq.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d0:	d838      	bhi.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80063d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063de:	d00d      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80063e0:	e030      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ee:	d102      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f4:	e02b      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fa:	e028      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063fc:	4b16      	ldr	r3, [pc, #88]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fae4 	bl	80069dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006418:	e019      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800641e:	e016      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006420:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642e:	f107 0318 	add.w	r3, r7, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f82a 	bl	800648c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800643c:	e007      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006442:	e004      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006448:	e001      	b.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800644e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006450:	4618      	mov	r0, r3
 8006452:	3740      	adds	r7, #64	@ 0x40
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	58024400 	.word	0x58024400
 800645c:	017d7840 	.word	0x017d7840

08006460 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006464:	f7fd ffec 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	091b      	lsrs	r3, r3, #4
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4904      	ldr	r1, [pc, #16]	@ (8006488 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	58024400 	.word	0x58024400
 8006488:	0800ce5c 	.word	0x0800ce5c

0800648c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	@ 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006494:	4ba1      	ldr	r3, [pc, #644]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800649e:	4b9f      	ldr	r3, [pc, #636]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	0b1b      	lsrs	r3, r3, #12
 80064a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80064aa:	4b9c      	ldr	r3, [pc, #624]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80064b6:	4b99      	ldr	r3, [pc, #612]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8111 	beq.w	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	f000 8083 	beq.w	80065e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f200 80a1 	bhi.w	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d056      	beq.n	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80064f6:	e099      	b.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f8:	4b88      	ldr	r3, [pc, #544]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02d      	beq.n	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006504:	4b85      	ldr	r3, [pc, #532]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	08db      	lsrs	r3, r3, #3
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	4a84      	ldr	r2, [pc, #528]	@ (8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	ee07 3a90 	vmov	s15, r3
 800651c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652e:	4b7b      	ldr	r3, [pc, #492]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800655e:	e087      	b.n	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006728 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b6a      	ldr	r3, [pc, #424]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a03 	vldr	s12, [r7, #12]
 8006586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a2:	e065      	b.n	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b59      	ldr	r3, [pc, #356]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065e6:	e043      	b.n	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b48      	ldr	r3, [pc, #288]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a03 	vldr	s12, [r7, #12]
 800660e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800662a:	e021      	b.n	8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800672c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663e:	4b37      	ldr	r3, [pc, #220]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800664e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800666e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006670:	4b2a      	ldr	r3, [pc, #168]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	0a5b      	lsrs	r3, r3, #9
 8006676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800668a:	edd7 6a07 	vldr	s13, [r7, #28]
 800668e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006696:	ee17 2a90 	vmov	r2, s15
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800669e:	4b1f      	ldr	r3, [pc, #124]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80066bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c4:	ee17 2a90 	vmov	r2, s15
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80066cc:	4b13      	ldr	r3, [pc, #76]	@ (800671c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	0e1b      	lsrs	r3, r3, #24
 80066d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f2:	ee17 2a90 	vmov	r2, s15
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066fa:	e008      	b.n	800670e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
}
 800670e:	bf00      	nop
 8006710:	3724      	adds	r7, #36	@ 0x24
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	58024400 	.word	0x58024400
 8006720:	03d09000 	.word	0x03d09000
 8006724:	46000000 	.word	0x46000000
 8006728:	4c742400 	.word	0x4c742400
 800672c:	4a742400 	.word	0x4a742400
 8006730:	4bbebc20 	.word	0x4bbebc20

08006734 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	@ 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800673c:	4ba1      	ldr	r3, [pc, #644]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006746:	4b9f      	ldr	r3, [pc, #636]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	0d1b      	lsrs	r3, r3, #20
 800674c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006750:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006752:	4b9c      	ldr	r3, [pc, #624]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800675e:	4b99      	ldr	r3, [pc, #612]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	08db      	lsrs	r3, r3, #3
 8006764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8111 	beq.w	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b02      	cmp	r3, #2
 8006786:	f000 8083 	beq.w	8006890 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	f200 80a1 	bhi.w	80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d056      	beq.n	800684c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800679e:	e099      	b.n	80068d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a0:	4b88      	ldr	r3, [pc, #544]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02d      	beq.n	8006808 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ac:	4b85      	ldr	r3, [pc, #532]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	08db      	lsrs	r3, r3, #3
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	4a84      	ldr	r2, [pc, #528]	@ (80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
 80067bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b7b      	ldr	r3, [pc, #492]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006806:	e087      	b.n	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a03 	vldr	s12, [r7, #12]
 800682e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684a:	e065      	b.n	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006856:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800685a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685e:	4b59      	ldr	r3, [pc, #356]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006872:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800688e:	e043      	b.n	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a2:	4b48      	ldr	r3, [pc, #288]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068d2:	e021      	b.n	8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e6:	4b37      	ldr	r3, [pc, #220]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006916:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006918:	4b2a      	ldr	r3, [pc, #168]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	0a5b      	lsrs	r3, r3, #9
 800691e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800692e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006932:	edd7 6a07 	vldr	s13, [r7, #28]
 8006936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800693e:	ee17 2a90 	vmov	r2, s15
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006946:	4b1f      	ldr	r3, [pc, #124]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	0c1b      	lsrs	r3, r3, #16
 800694c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800695c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006960:	edd7 6a07 	vldr	s13, [r7, #28]
 8006964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696c:	ee17 2a90 	vmov	r2, s15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006974:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	0e1b      	lsrs	r3, r3, #24
 800697a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800698a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800698e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699a:	ee17 2a90 	vmov	r2, s15
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80069a2:	e008      	b.n	80069b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
}
 80069b6:	bf00      	nop
 80069b8:	3724      	adds	r7, #36	@ 0x24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	58024400 	.word	0x58024400
 80069c8:	03d09000 	.word	0x03d09000
 80069cc:	46000000 	.word	0x46000000
 80069d0:	4c742400 	.word	0x4c742400
 80069d4:	4a742400 	.word	0x4a742400
 80069d8:	4bbebc20 	.word	0x4bbebc20

080069dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80069dc:	b480      	push	{r7}
 80069de:	b089      	sub	sp, #36	@ 0x24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069e4:	4ba0      	ldr	r3, [pc, #640]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80069ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80069fa:	4b9b      	ldr	r3, [pc, #620]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a04:	4b98      	ldr	r3, [pc, #608]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	ee07 3a90 	vmov	s15, r3
 8006a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8111 	beq.w	8006c4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	f000 8083 	beq.w	8006b36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	f200 80a1 	bhi.w	8006b7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d056      	beq.n	8006af2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006a44:	e099      	b.n	8006b7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a46:	4b88      	ldr	r3, [pc, #544]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d02d      	beq.n	8006aae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a52:	4b85      	ldr	r3, [pc, #532]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	4a83      	ldr	r2, [pc, #524]	@ (8006c6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7c:	4b7a      	ldr	r3, [pc, #488]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006aac:	e087      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006c74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac0:	4b69      	ldr	r3, [pc, #420]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af0:	e065      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	ee07 3a90 	vmov	s15, r3
 8006af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006c78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b04:	4b58      	ldr	r3, [pc, #352]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0c:	ee07 3a90 	vmov	s15, r3
 8006b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b34:	e043      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006c7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b48:	4b47      	ldr	r3, [pc, #284]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b78:	e021      	b.n	8006bbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006c74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8c:	4b36      	ldr	r3, [pc, #216]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b94:	ee07 3a90 	vmov	s15, r3
 8006b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006c70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	0a5b      	lsrs	r3, r3, #9
 8006bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be4:	ee17 2a90 	vmov	r2, s15
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006bec:	4b1e      	ldr	r3, [pc, #120]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c12:	ee17 2a90 	vmov	r2, s15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006c1a:	4b13      	ldr	r3, [pc, #76]	@ (8006c68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	0e1b      	lsrs	r3, r3, #24
 8006c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c48:	e008      	b.n	8006c5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	3724      	adds	r7, #36	@ 0x24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	46000000 	.word	0x46000000
 8006c74:	4c742400 	.word	0x4c742400
 8006c78:	4a742400 	.word	0x4a742400
 8006c7c:	4bbebc20 	.word	0x4bbebc20

08006c80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c8e:	4b53      	ldr	r3, [pc, #332]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d101      	bne.n	8006c9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e099      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a4e      	ldr	r2, [pc, #312]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006caa:	f7fa fd49 	bl	8001740 <HAL_GetTick>
 8006cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb0:	e008      	b.n	8006cc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cb2:	f7fa fd45 	bl	8001740 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e086      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cc4:	4b45      	ldr	r3, [pc, #276]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cd0:	4b42      	ldr	r3, [pc, #264]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	031b      	lsls	r3, r3, #12
 8006cde:	493f      	ldr	r1, [pc, #252]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	025b      	lsls	r3, r3, #9
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	061b      	lsls	r3, r3, #24
 8006d10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d14:	4931      	ldr	r1, [pc, #196]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d1a:	4b30      	ldr	r3, [pc, #192]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	492d      	ldr	r1, [pc, #180]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	f023 0220 	bic.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4928      	ldr	r1, [pc, #160]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d3e:	4b27      	ldr	r3, [pc, #156]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	4a26      	ldr	r2, [pc, #152]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d44:	f023 0310 	bic.w	r3, r3, #16
 8006d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d4a:	4b24      	ldr	r3, [pc, #144]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d4e:	4b24      	ldr	r3, [pc, #144]	@ (8006de0 <RCCEx_PLL2_Config+0x160>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	69d2      	ldr	r2, [r2, #28]
 8006d56:	00d2      	lsls	r2, r2, #3
 8006d58:	4920      	ldr	r1, [pc, #128]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d62:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d64:	f043 0310 	orr.w	r3, r3, #16
 8006d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d106      	bne.n	8006d7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a19      	ldr	r2, [pc, #100]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d7c:	e00f      	b.n	8006d9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d84:	4b15      	ldr	r3, [pc, #84]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	4a14      	ldr	r2, [pc, #80]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d90:	e005      	b.n	8006d9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d92:	4b12      	ldr	r3, [pc, #72]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a0e      	ldr	r2, [pc, #56]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006da4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006daa:	f7fa fcc9 	bl	8001740 <HAL_GetTick>
 8006dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db0:	e008      	b.n	8006dc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006db2:	f7fa fcc5 	bl	8001740 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e006      	b.n	8006dd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dc4:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	ffff0007 	.word	0xffff0007

08006de4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006df2:	4b53      	ldr	r3, [pc, #332]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d101      	bne.n	8006e02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e099      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e02:	4b4f      	ldr	r3, [pc, #316]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a4e      	ldr	r2, [pc, #312]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0e:	f7fa fc97 	bl	8001740 <HAL_GetTick>
 8006e12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e14:	e008      	b.n	8006e28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e16:	f7fa fc93 	bl	8001740 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e086      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e28:	4b45      	ldr	r3, [pc, #276]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e34:	4b42      	ldr	r3, [pc, #264]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	051b      	lsls	r3, r3, #20
 8006e42:	493f      	ldr	r1, [pc, #252]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	025b      	lsls	r3, r3, #9
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	061b      	lsls	r3, r3, #24
 8006e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e78:	4931      	ldr	r1, [pc, #196]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e7e:	4b30      	ldr	r3, [pc, #192]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	492d      	ldr	r1, [pc, #180]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	4928      	ldr	r1, [pc, #160]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ea2:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	4a26      	ldr	r2, [pc, #152]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eae:	4b24      	ldr	r3, [pc, #144]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <RCCEx_PLL3_Config+0x160>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	69d2      	ldr	r2, [r2, #28]
 8006eba:	00d2      	lsls	r2, r2, #3
 8006ebc:	4920      	ldr	r1, [pc, #128]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	4a19      	ldr	r2, [pc, #100]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee0:	e00f      	b.n	8006f02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d106      	bne.n	8006ef6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ee8:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006eee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef4:	e005      	b.n	8006f02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ef6:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4a11      	ldr	r2, [pc, #68]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f02:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0e      	ldr	r2, [pc, #56]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0e:	f7fa fc17 	bl	8001740 <HAL_GetTick>
 8006f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f16:	f7fa fc13 	bl	8001740 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e006      	b.n	8006f36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	ffff0007 	.word	0xffff0007

08006f48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	@ 0x28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e075      	b.n	8007046 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7fa f9a1 	bl	80012b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f868 	bl	8007050 <HAL_SD_InitCard>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e05d      	b.n	8007046 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fdaf 	bl	8007af4 <HAL_SD_GetCardStatus>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e052      	b.n	8007046 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006fa0:	7e3b      	ldrb	r3, [r7, #24]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006fa6:	7e7b      	ldrb	r3, [r7, #25]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10a      	bne.n	8006fca <HAL_SD_Init+0x82>
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <HAL_SD_Init+0x78>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fc8:	e00b      	b.n	8006fe2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d104      	bne.n	8006fdc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fda:	e002      	b.n	8006fe2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fe6d 	bl	8007cc8 <HAL_SD_ConfigWideBusOperation>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e026      	b.n	8007046 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006ff8:	f7fa fba2 	bl	8001740 <HAL_GetTick>
 8006ffc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006ffe:	e011      	b.n	8007024 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007000:	f7fa fb9e 	bl	8001740 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d109      	bne.n	8007024 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007016:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e010      	b.n	8007046 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff61 	bl	8007eec <HAL_SD_GetCardState>
 800702a:	4603      	mov	r3, r0
 800702c:	2b04      	cmp	r3, #4
 800702e:	d1e7      	bne.n	8007000 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	@ 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b08d      	sub	sp, #52	@ 0x34
 8007054:	af02      	add	r7, sp, #8
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007068:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800706c:	f04f 0100 	mov.w	r1, #0
 8007070:	f7fe fc76 	bl	8005960 <HAL_RCCEx_GetPeriphCLKFreq>
 8007074:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d109      	bne.n	8007090 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800708a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e070      	b.n	8007172 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	4a39      	ldr	r2, [pc, #228]	@ (800717c <HAL_SD_InitCard+0x12c>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681c      	ldr	r4, [r3, #0]
 80070a2:	466a      	mov	r2, sp
 80070a4:	f107 0318 	add.w	r3, r7, #24
 80070a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070b6:	4620      	mov	r0, r4
 80070b8:	f001 ffa6 	bl	8009008 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 ffe9 	bl	8009098 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80070de:	4a28      	ldr	r2, [pc, #160]	@ (8007180 <HAL_SD_InitCard+0x130>)
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fa fb35 	bl	8001758 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ffea 	bl	80080c8 <SD_PowerON>
 80070f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e02e      	b.n	8007172 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 ff09 	bl	8007f2c <SD_InitCard>
 800711a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e01b      	b.n	8007172 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007142:	4618      	mov	r0, r3
 8007144:	f002 f83e 	bl	80091c4 <SDMMC_CmdBlockLength>
 8007148:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00f      	beq.n	8007170 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a0b      	ldr	r2, [pc, #44]	@ (8007184 <HAL_SD_InitCard+0x134>)
 8007156:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	372c      	adds	r7, #44	@ 0x2c
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	014f8b59 	.word	0x014f8b59
 8007180:	00012110 	.word	0x00012110
 8007184:	1fe00fff 	.word	0x1fe00fff

08007188 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08c      	sub	sp, #48	@ 0x30
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e08d      	b.n	80072cc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	f040 8086 	bne.w	80072ca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d907      	bls.n	80071e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e074      	b.n	80072cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2203      	movs	r2, #3
 80071e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	025a      	lsls	r2, r3, #9
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	2b01      	cmp	r3, #1
 8007206:	d002      	beq.n	800720e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	025b      	lsls	r3, r3, #9
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	025b      	lsls	r3, r3, #9
 8007218:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800721a:	2390      	movs	r3, #144	@ 0x90
 800721c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800721e:	2302      	movs	r3, #2
 8007220:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007222:	2300      	movs	r3, #0
 8007224:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f107 0210 	add.w	r2, r7, #16
 8007232:	4611      	mov	r1, r2
 8007234:	4618      	mov	r0, r3
 8007236:	f001 ff99 	bl	800916c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007248:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2201      	movs	r2, #1
 8007258:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d90a      	bls.n	8007276 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2282      	movs	r2, #130	@ 0x82
 8007264:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800726c:	4618      	mov	r0, r3
 800726e:	f001 ffef 	bl	8009250 <SDMMC_CmdReadMultiBlock>
 8007272:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007274:	e009      	b.n	800728a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2281      	movs	r2, #129	@ 0x81
 800727a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007282:	4618      	mov	r0, r3
 8007284:	f001 ffc1 	bl	800920a <SDMMC_CmdReadSingleBlock>
 8007288:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d012      	beq.n	80072b6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0f      	ldr	r2, [pc, #60]	@ (80072d4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	431a      	orrs	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e00a      	b.n	80072cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80072c4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e000      	b.n	80072cc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80072ca:	2302      	movs	r3, #2
  }
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3730      	adds	r7, #48	@ 0x30
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	1fe00fff 	.word	0x1fe00fff

080072d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08c      	sub	sp, #48	@ 0x30
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d107      	bne.n	8007300 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e08d      	b.n	800741c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	f040 8086 	bne.w	800741a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	441a      	add	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731e:	429a      	cmp	r2, r3
 8007320:	d907      	bls.n	8007332 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007326:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e074      	b.n	800741c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2203      	movs	r2, #3
 8007336:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2200      	movs	r2, #0
 8007340:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	025a      	lsls	r2, r3, #9
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	2b01      	cmp	r3, #1
 8007356:	d002      	beq.n	800735e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735a:	025b      	lsls	r3, r3, #9
 800735c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	025b      	lsls	r3, r3, #9
 8007368:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800736a:	2390      	movs	r3, #144	@ 0x90
 800736c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007372:	2300      	movs	r3, #0
 8007374:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007376:	2300      	movs	r3, #0
 8007378:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f107 0210 	add.w	r2, r7, #16
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fef1 	bl	800916c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007398:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2201      	movs	r2, #1
 80073a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d90a      	bls.n	80073c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	22a0      	movs	r2, #160	@ 0xa0
 80073b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 ff8d 	bl	80092dc <SDMMC_CmdWriteMultiBlock>
 80073c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80073c4:	e009      	b.n	80073da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2290      	movs	r2, #144	@ 0x90
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 ff5f 	bl	8009296 <SDMMC_CmdWriteSingleBlock>
 80073d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007424 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80073e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e00a      	b.n	800741c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8007414:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800741a:	2302      	movs	r3, #2
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3730      	adds	r7, #48	@ 0x30
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	1fe00fff 	.word	0x1fe00fff

08007428 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <HAL_SD_IRQHandler+0x2e>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 f926 	bl	80086a0 <SD_Read_IT>
 8007454:	e19a      	b.n	800778c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80ac 	beq.w	80075be <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800746e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b59      	ldr	r3, [pc, #356]	@ (80075e0 <HAL_SD_IRQHandler+0x1b8>)
 800747c:	400b      	ands	r3, r1
 800747e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800748e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800749e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d038      	beq.n	800751c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_SD_IRQHandler+0x96>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 ff2e 	bl	8009324 <SDMMC_CmdStopTransfer>
 80074c8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f95b 	bl	8007798 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a3f      	ldr	r2, [pc, #252]	@ (80075e4 <HAL_SD_IRQHandler+0x1bc>)
 80074e8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <HAL_SD_IRQHandler+0xe4>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 fbe1 	bl	8009cd4 <HAL_SD_RxCpltCallback>
 8007512:	e13b      	b.n	800778c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f002 fbd3 	bl	8009cc0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800751a:	e137      	b.n	800778c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8132 	beq.w	800778c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_SD_IRQHandler+0x12c>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fee3 	bl	8009324 <SDMMC_CmdStopTransfer>
 800755e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f910 	bl	8007798 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f003 0310 	and.w	r3, r3, #16
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <HAL_SD_IRQHandler+0x172>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f002 fb90 	bl	8009cc0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <HAL_SD_IRQHandler+0x18e>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80eb 	beq.w	800778c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f002 fb8c 	bl	8009cd4 <HAL_SD_RxCpltCallback>
}
 80075bc:	e0e6      	b.n	800778c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <HAL_SD_IRQHandler+0x1c0>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d008      	beq.n	80075e8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f8a8 	bl	800872c <SD_Write_IT>
 80075dc:	e0d6      	b.n	800778c <HAL_SD_IRQHandler+0x364>
 80075de:	bf00      	nop
 80075e0:	ffff3ec5 	.word	0xffff3ec5
 80075e4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ee:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 809d 	beq.w	8007732 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760a:	f043 0202 	orr.w	r2, r3, #2
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007624:	f043 0208 	orr.w	r2, r3, #8
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764c:	f003 0310 	and.w	r3, r3, #16
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	f043 0210 	orr.w	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a4b      	ldr	r2, [pc, #300]	@ (8007794 <HAL_SD_IRQHandler+0x36c>)
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007676:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007686:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007696:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076a6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 fe39 	bl	8009324 <SDMMC_CmdStopTransfer>
 80076b2:	4602      	mov	r2, r0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076cc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f851 	bl	8007798 <HAL_SD_ErrorCallback>
}
 80076f6:	e049      	b.n	800778c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d044      	beq.n	800778c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d040      	beq.n	800778c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007718:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f834 	bl	8007798 <HAL_SD_ErrorCallback>
}
 8007730:	e02c      	b.n	800778c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d025      	beq.n	800778c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007748:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10c      	bne.n	8007772 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f84a 	bl	80087fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007768:	e010      	b.n	800778c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f832 	bl	80087d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007770:	e00c      	b.n	800778c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f833 	bl	80087e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007782:	e003      	b.n	800778c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f81b 	bl	80087c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800778a:	e7ff      	b.n	800778c <HAL_SD_IRQHandler+0x364>
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	18000f3a 	.word	0x18000f3a

08007798 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ba:	0f9b      	lsrs	r3, r3, #30
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c6:	0e9b      	lsrs	r3, r3, #26
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d8:	0e1b      	lsrs	r3, r3, #24
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007802:	b2da      	uxtb	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800780c:	0d1b      	lsrs	r3, r3, #20
 800780e:	b29a      	uxth	r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007818:	0c1b      	lsrs	r3, r3, #16
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	b2da      	uxtb	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800782a:	0bdb      	lsrs	r3, r3, #15
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	b2da      	uxtb	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800783c:	0b9b      	lsrs	r3, r3, #14
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800784e:	0b5b      	lsrs	r3, r3, #13
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007860:	0b1b      	lsrs	r3, r3, #12
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2200      	movs	r2, #0
 8007872:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d163      	bne.n	8007944 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007880:	009a      	lsls	r2, r3, #2
 8007882:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007886:	4013      	ands	r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800788c:	0f92      	lsrs	r2, r2, #30
 800788e:	431a      	orrs	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007898:	0edb      	lsrs	r3, r3, #27
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078bc:	0d5b      	lsrs	r3, r3, #21
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ce:	0c9b      	lsrs	r3, r3, #18
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e0:	0bdb      	lsrs	r3, r3, #15
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	7e1b      	ldrb	r3, [r3, #24]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	3302      	adds	r3, #2
 8007904:	2201      	movs	r2, #1
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800790e:	fb03 f202 	mul.w	r2, r3, r2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	7a1b      	ldrb	r3, [r3, #8]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	2201      	movs	r2, #1
 8007922:	409a      	lsls	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007930:	0a52      	lsrs	r2, r2, #9
 8007932:	fb03 f202 	mul.w	r2, r3, r2
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007940:	655a      	str	r2, [r3, #84]	@ 0x54
 8007942:	e031      	b.n	80079a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11d      	bne.n	8007988 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	431a      	orrs	r2, r3
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	3301      	adds	r3, #1
 8007968:	029a      	lsls	r2, r3, #10
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800797c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	655a      	str	r2, [r3, #84]	@ 0x54
 8007986:	e00f      	b.n	80079a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a58      	ldr	r2, [pc, #352]	@ (8007af0 <HAL_SD_GetCardCSD+0x344>)
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007994:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e09d      	b.n	8007ae4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ac:	0b9b      	lsrs	r3, r3, #14
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079be:	09db      	lsrs	r3, r3, #7
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079e0:	0fdb      	lsrs	r3, r3, #31
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079ec:	0f5b      	lsrs	r3, r3, #29
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079fe:	0e9b      	lsrs	r3, r3, #26
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a10:	0d9b      	lsrs	r3, r3, #22
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a22:	0d5b      	lsrs	r3, r3, #21
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a52:	0bdb      	lsrs	r3, r3, #15
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a66:	0b9b      	lsrs	r3, r3, #14
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a8e:	0b1b      	lsrs	r3, r3, #12
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aa2:	0a9b      	lsrs	r3, r3, #10
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	1fe00fff 	.word	0x1fe00fff

08007af4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b094      	sub	sp, #80	@ 0x50
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d101      	bne.n	8007b14 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0a7      	b.n	8007c64 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007b14:	f107 0308 	add.w	r3, r7, #8
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fb62 	bl	80081e4 <SD_SendSDStatus>
 8007b20:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d011      	beq.n	8007b4c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8007c6c <HAL_SD_GetCardStatus+0x178>)
 8007b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007b4a:	e070      	b.n	8007c2e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	099b      	lsrs	r3, r3, #6
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	0e1b      	lsrs	r3, r3, #24
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	061a      	lsls	r2, r3, #24
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b92:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b9c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	0d1b      	lsrs	r3, r3, #20
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	0a9b      	lsrs	r3, r3, #10
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	0e1b      	lsrs	r3, r3, #24
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 fac4 	bl	80091c4 <SDMMC_CmdBlockLength>
 8007c3c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00d      	beq.n	8007c60 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a08      	ldr	r2, [pc, #32]	@ (8007c6c <HAL_SD_GetCardStatus+0x178>)
 8007c4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c50:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8007c60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3750      	adds	r7, #80	@ 0x50
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	1fe00fff 	.word	0x1fe00fff

08007c70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007cc8:	b590      	push	{r4, r7, lr}
 8007cca:	b08d      	sub	sp, #52	@ 0x34
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2203      	movs	r2, #3
 8007cdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d02e      	beq.n	8007d46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cee:	d106      	bne.n	8007cfe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8007cfc:	e029      	b.n	8007d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d04:	d10a      	bne.n	8007d1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fb64 	bl	80083d4 <SD_WideBus_Enable>
 8007d0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d1a:	e01a      	b.n	8007d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fba1 	bl	800846a <SD_WideBus_Disable>
 8007d28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d36:	e00c      	b.n	8007d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d44:	e005      	b.n	8007d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8007edc <HAL_SD_ConfigWideBusOperation+0x214>)
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d68:	e096      	b.n	8007e98 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d6a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	f7fd fdf5 	bl	8005960 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d76:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8083 	beq.w	8007e86 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4950      	ldr	r1, [pc, #320]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007d9e:	fba1 1303 	umull	r1, r3, r1, r3
 8007da2:	0e1b      	lsrs	r3, r3, #24
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d303      	bcc.n	8007db0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	61bb      	str	r3, [r7, #24]
 8007dae:	e05a      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db8:	d103      	bne.n	8007dc2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	e051      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dca:	d126      	bne.n	8007e1a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10e      	bne.n	8007df2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4a43      	ldr	r2, [pc, #268]	@ (8007ee4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d906      	bls.n	8007dea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	4a40      	ldr	r2, [pc, #256]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	0e5b      	lsrs	r3, r3, #25
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	e03d      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	e039      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfe:	4a39      	ldr	r2, [pc, #228]	@ (8007ee4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d906      	bls.n	8007e12 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4a36      	ldr	r2, [pc, #216]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	0e5b      	lsrs	r3, r3, #25
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e029      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	61bb      	str	r3, [r7, #24]
 8007e18:	e025      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10e      	bne.n	8007e40 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	4a30      	ldr	r2, [pc, #192]	@ (8007ee8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d906      	bls.n	8007e38 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e016      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	e012      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	4a26      	ldr	r2, [pc, #152]	@ (8007ee8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d906      	bls.n	8007e60 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4a22      	ldr	r2, [pc, #136]	@ (8007ee0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	0e1b      	lsrs	r3, r3, #24
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	e002      	b.n	8007e66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681c      	ldr	r4, [r3, #0]
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e74:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e78:	f107 0308 	add.w	r3, r7, #8
 8007e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f001 f8c2 	bl	8009008 <SDMMC_Init>
 8007e84:	e008      	b.n	8007e98 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 f98f 	bl	80091c4 <SDMMC_CmdBlockLength>
 8007ea6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007edc <HAL_SD_ConfigWideBusOperation+0x214>)
 8007eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	372c      	adds	r7, #44	@ 0x2c
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	1fe00fff 	.word	0x1fe00fff
 8007ee0:	55e63b89 	.word	0x55e63b89
 8007ee4:	02faf080 	.word	0x02faf080
 8007ee8:	017d7840 	.word	0x017d7840

08007eec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa40 	bl	8008384 <SD_SendStatus>
 8007f04:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	0a5b      	lsrs	r3, r3, #9
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f22:	693b      	ldr	r3, [r7, #16]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b090      	sub	sp, #64	@ 0x40
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007f38:	f7f9 fc02 	bl	8001740 <HAL_GetTick>
 8007f3c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 f8b9 	bl	80090ba <SDMMC_GetPowerState>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007f52:	e0b5      	b.n	80080c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d02e      	beq.n	8007fba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fb04 	bl	800956e <SDMMC_CmdSendCID>
 8007f66:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <SD_InitCard+0x46>
    {
      return errorstate;
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	e0a6      	b.n	80080c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 f8e4 	bl	8009146 <SDMMC_GetResponse>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2104      	movs	r1, #4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 f8db 	bl	8009146 <SDMMC_GetResponse>
 8007f90:	4602      	mov	r2, r0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2108      	movs	r1, #8
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 f8d2 	bl	8009146 <SDMMC_GetResponse>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	210c      	movs	r1, #12
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 f8c9 	bl	8009146 <SDMMC_GetResponse>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d01d      	beq.n	8007ffe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007fc2:	e019      	b.n	8007ff8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f107 020a 	add.w	r2, r7, #10
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 fb0c 	bl	80095ec <SDMMC_CmdSetRelAdd>
 8007fd4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	e06f      	b.n	80080c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007fe0:	f7f9 fbae 	bl	8001740 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d902      	bls.n	8007ff8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007ff2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ff6:	e063      	b.n	80080c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007ff8:	897b      	ldrh	r3, [r7, #10]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0e2      	beq.n	8007fc4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008002:	2b03      	cmp	r3, #3
 8008004:	d036      	beq.n	8008074 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008006:	897b      	ldrh	r3, [r7, #10]
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f001 fac6 	bl	80095ac <SDMMC_CmdSendCSD>
 8008020:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_InitCard+0x100>
    {
      return errorstate;
 8008028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802a:	e049      	b.n	80080c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f001 f887 	bl	8009146 <SDMMC_GetResponse>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2104      	movs	r1, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f001 f87e 	bl	8009146 <SDMMC_GetResponse>
 800804a:	4602      	mov	r2, r0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2108      	movs	r1, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f001 f875 	bl	8009146 <SDMMC_GetResponse>
 800805c:	4602      	mov	r2, r0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	210c      	movs	r1, #12
 8008068:	4618      	mov	r0, r3
 800806a:	f001 f86c 	bl	8009146 <SDMMC_GetResponse>
 800806e:	4602      	mov	r2, r0
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2104      	movs	r1, #4
 800807a:	4618      	mov	r0, r3
 800807c:	f001 f863 	bl	8009146 <SDMMC_GetResponse>
 8008080:	4603      	mov	r3, r0
 8008082:	0d1a      	lsrs	r2, r3, #20
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fb8c 	bl	80077ac <HAL_SD_GetCardCSD>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800809a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800809e:	e00f      	b.n	80080c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f001 f975 	bl	800939c <SDMMC_CmdSelDesel>
 80080b2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <SD_InitCard+0x192>
  {
    return errorstate;
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	e000      	b.n	80080c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3740      	adds	r7, #64	@ 0x40
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f97e 	bl	80093e2 <SDMMC_CmdGoIdleState>
 80080e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	e072      	b.n	80081d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 f991 	bl	800941e <SDMMC_CmdOperCond>
 80080fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008104:	d10d      	bne.n	8008122 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f966 	bl	80093e2 <SDMMC_CmdGoIdleState>
 8008116:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <SD_PowerON+0x60>
    {
      return errorstate;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	e05a      	b.n	80081d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d137      	bne.n	80081a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f001 f991 	bl	800945e <SDMMC_CmdAppCommand>
 800813c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d02d      	beq.n	80081a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008144:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008148:	e046      	b.n	80081d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f984 	bl	800945e <SDMMC_CmdAppCommand>
 8008156:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <SD_PowerON+0x9a>
    {
      return errorstate;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	e03a      	b.n	80081d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	491e      	ldr	r1, [pc, #120]	@ (80081e0 <SD_PowerON+0x118>)
 8008168:	4618      	mov	r0, r3
 800816a:	f001 f99b 	bl	80094a4 <SDMMC_CmdAppOperCommand>
 800816e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800817a:	e02d      	b.n	80081d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ffdf 	bl	8009146 <SDMMC_GetResponse>
 8008188:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	0fdb      	lsrs	r3, r3, #31
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <SD_PowerON+0xce>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <SD_PowerON+0xd0>
 8008196:	2300      	movs	r3, #0
 8008198:	613b      	str	r3, [r7, #16]

    count++;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3301      	adds	r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d802      	bhi.n	80081b0 <SD_PowerON+0xe8>
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0cc      	beq.n	800814a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d902      	bls.n	80081c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80081ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081be:	e00b      	b.n	80081d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	c1100000 	.word	0xc1100000

080081e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	@ 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081ee:	f7f9 faa7 	bl	8001740 <HAL_GetTick>
 80081f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2100      	movs	r1, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 ffa1 	bl	8009146 <SDMMC_GetResponse>
 8008204:	4603      	mov	r3, r0
 8008206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800820a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800820e:	d102      	bne.n	8008216 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008210:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008214:	e0b0      	b.n	8008378 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2140      	movs	r1, #64	@ 0x40
 800821c:	4618      	mov	r0, r3
 800821e:	f000 ffd1 	bl	80091c4 <SDMMC_CmdBlockLength>
 8008222:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	e0a0      	b.n	8008378 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f001 f90b 	bl	800945e <SDMMC_CmdAppCommand>
 8008248:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	e08d      	b.n	8008378 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800825c:	f04f 33ff 	mov.w	r3, #4294967295
 8008260:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008262:	2340      	movs	r3, #64	@ 0x40
 8008264:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008266:	2360      	movs	r3, #96	@ 0x60
 8008268:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800826a:	2302      	movs	r3, #2
 800826c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800826e:	2300      	movs	r3, #0
 8008270:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008272:	2301      	movs	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f107 0208 	add.w	r2, r7, #8
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f000 ff73 	bl	800916c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f001 f9f3 	bl	8009676 <SDMMC_CmdStatusRegister>
 8008290:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d02b      	beq.n	80082f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	e069      	b.n	8008378 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d013      	beq.n	80082da <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082b6:	e00d      	b.n	80082d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fecd 	bl	800905c <SDMMC_ReadFIFO>
 80082c2:	4602      	mov	r2, r0
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	601a      	str	r2, [r3, #0]
        pData++;
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	3304      	adds	r3, #4
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80082ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d0:	3301      	adds	r3, #1
 80082d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	2b07      	cmp	r3, #7
 80082d8:	d9ee      	bls.n	80082b8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082da:	f7f9 fa31 	bl	8001740 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d102      	bne.n	80082f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082ee:	e043      	b.n	8008378 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0d2      	beq.n	80082a4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800830c:	2308      	movs	r3, #8
 800830e:	e033      	b.n	8008378 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800831e:	2302      	movs	r3, #2
 8008320:	e02a      	b.n	8008378 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008330:	2320      	movs	r3, #32
 8008332:	e021      	b.n	8008378 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe8f 	bl	800905c <SDMMC_ReadFIFO>
 800833e:	4602      	mov	r2, r0
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	601a      	str	r2, [r3, #0]
    pData++;
 8008344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008346:	3304      	adds	r3, #4
 8008348:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800834a:	f7f9 f9f9 	bl	8001740 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008358:	d102      	bne.n	8008360 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800835a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800835e:	e00b      	b.n	8008378 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e2      	bne.n	8008334 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a03      	ldr	r2, [pc, #12]	@ (8008380 <SD_SendSDStatus+0x19c>)
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3730      	adds	r7, #48	@ 0x30
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	18000f3a 	.word	0x18000f3a

08008384 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008398:	e018      	b.n	80083cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	4619      	mov	r1, r3
 80083a6:	4610      	mov	r0, r2
 80083a8:	f001 f942 	bl	8009630 <SDMMC_CmdSendStatus>
 80083ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e009      	b.n	80083cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fec1 	bl	8009146 <SDMMC_GetResponse>
 80083c4:	4602      	mov	r2, r0
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 feab 	bl	8009146 <SDMMC_GetResponse>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083fa:	d102      	bne.n	8008402 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008400:	e02f      	b.n	8008462 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008402:	f107 030c 	add.w	r3, r7, #12
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f879 	bl	8008500 <SD_FindSCR>
 800840e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	e023      	b.n	8008462 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01c      	beq.n	800845e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f001 f814 	bl	800945e <SDMMC_CmdAppCommand>
 8008436:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	e00f      	b.n	8008462 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2102      	movs	r1, #2
 8008448:	4618      	mov	r0, r3
 800844a:	f001 f84b 	bl	80094e4 <SDMMC_CmdBusWidth>
 800844e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	e003      	b.n	8008462 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800845a:	2300      	movs	r3, #0
 800845c:	e001      	b.n	8008462 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800845e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fe60 	bl	8009146 <SDMMC_GetResponse>
 8008486:	4603      	mov	r3, r0
 8008488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008490:	d102      	bne.n	8008498 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008496:	e02f      	b.n	80084f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f82e 	bl	8008500 <SD_FindSCR>
 80084a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	e023      	b.n	80084f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084c2:	041b      	lsls	r3, r3, #16
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f000 ffc9 	bl	800945e <SDMMC_CmdAppCommand>
 80084cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	e00f      	b.n	80084f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f800 	bl	80094e4 <SDMMC_CmdBusWidth>
 80084e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	e003      	b.n	80084f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e001      	b.n	80084f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	@ 0x38
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800850a:	f7f9 f919 	bl	8001740 <HAL_GetTick>
 800850e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008514:	2300      	movs	r3, #0
 8008516:	60bb      	str	r3, [r7, #8]
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2108      	movs	r1, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fe4c 	bl	80091c4 <SDMMC_CmdBlockLength>
 800852c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	e0ad      	b.n	8008694 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008540:	041b      	lsls	r3, r3, #16
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f000 ff8a 	bl	800945e <SDMMC_CmdAppCommand>
 800854a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	e09e      	b.n	8008694 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295
 800855a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800855c:	2308      	movs	r3, #8
 800855e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008560:	2330      	movs	r3, #48	@ 0x30
 8008562:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008564:	2302      	movs	r3, #2
 8008566:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008568:	2300      	movs	r3, #0
 800856a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800856c:	2301      	movs	r3, #1
 800856e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f107 0210 	add.w	r2, r7, #16
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fdf6 	bl	800916c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 ffd0 	bl	800952a <SDMMC_CmdSendSCR>
 800858a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	2b00      	cmp	r3, #0
 8008590:	d027      	beq.n	80085e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	e07e      	b.n	8008694 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d113      	bne.n	80085cc <SD_FindSCR+0xcc>
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d110      	bne.n	80085cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fd54 	bl	800905c <SDMMC_ReadFIFO>
 80085b4:	4603      	mov	r3, r0
 80085b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fd4d 	bl	800905c <SDMMC_ReadFIFO>
 80085c2:	4603      	mov	r3, r0
 80085c4:	60fb      	str	r3, [r7, #12]
      index++;
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	3301      	adds	r3, #1
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085cc:	f7f9 f8b8 	bl	8001740 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d102      	bne.n	80085e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80085e0:	e058      	b.n	8008694 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085e8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80085ec:	4013      	ands	r3, r2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0d1      	beq.n	8008596 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2208      	movs	r2, #8
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008608:	2308      	movs	r3, #8
 800860a:	e043      	b.n	8008694 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2202      	movs	r2, #2
 8008620:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008622:	2302      	movs	r3, #2
 8008624:	e036      	b.n	8008694 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862c:	f003 0320 	and.w	r3, r3, #32
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2220      	movs	r2, #32
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800863c:	2320      	movs	r3, #32
 800863e:	e029      	b.n	8008694 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a15      	ldr	r2, [pc, #84]	@ (800869c <SD_FindSCR+0x19c>)
 8008646:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	061a      	lsls	r2, r3, #24
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008654:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800865e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0e1b      	lsrs	r3, r3, #24
 8008664:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008668:	601a      	str	r2, [r3, #0]
    scr++;
 800866a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866c:	3304      	adds	r3, #4
 800866e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	061a      	lsls	r2, r3, #24
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800867c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	0a1b      	lsrs	r3, r3, #8
 8008682:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008686:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	0e1b      	lsrs	r3, r3, #24
 800868c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800868e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008690:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3738      	adds	r7, #56	@ 0x38
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	18000f3a 	.word	0x18000f3a

080086a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b2:	2b1f      	cmp	r3, #31
 80086b4:	d936      	bls.n	8008724 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e027      	b.n	800870c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fccb 	bl	800905c <SDMMC_ReadFIFO>
 80086c6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	3301      	adds	r3, #1
 80086d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3301      	adds	r3, #1
 80086e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3301      	adds	r3, #1
 80086f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	0e1b      	lsrs	r3, r3, #24
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3301      	adds	r3, #1
 8008704:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	3301      	adds	r3, #1
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b07      	cmp	r3, #7
 8008710:	d9d4      	bls.n	80086bc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871c:	f1a3 0220 	sub.w	r2, r3, #32
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8008724:	bf00      	nop
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	2b1f      	cmp	r3, #31
 8008740:	d93a      	bls.n	80087b8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	e02b      	b.n	80087a0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3301      	adds	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	021a      	lsls	r2, r3, #8
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	3301      	adds	r3, #1
 8008764:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	041a      	lsls	r2, r3, #16
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	3301      	adds	r3, #1
 8008776:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	061a      	lsls	r2, r3, #24
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	3301      	adds	r3, #1
 8008788:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f107 020c 	add.w	r2, r7, #12
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fc6e 	bl	8009076 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	3301      	adds	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	d9d0      	bls.n	8008748 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	f1a3 0220 	sub.w	r2, r3, #32
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	621a      	str	r2, [r3, #32]
  }
}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e10f      	b.n	8008a42 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a87      	ldr	r2, [pc, #540]	@ (8008a4c <HAL_SPI_Init+0x23c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00f      	beq.n	8008852 <HAL_SPI_Init+0x42>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a86      	ldr	r2, [pc, #536]	@ (8008a50 <HAL_SPI_Init+0x240>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00a      	beq.n	8008852 <HAL_SPI_Init+0x42>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a84      	ldr	r2, [pc, #528]	@ (8008a54 <HAL_SPI_Init+0x244>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d005      	beq.n	8008852 <HAL_SPI_Init+0x42>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	2b0f      	cmp	r3, #15
 800884c:	d901      	bls.n	8008852 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e0f7      	b.n	8008a42 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fbbc 	bl	8008fd0 <SPI_GetPacketSize>
 8008858:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a7b      	ldr	r2, [pc, #492]	@ (8008a4c <HAL_SPI_Init+0x23c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00c      	beq.n	800887e <HAL_SPI_Init+0x6e>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a79      	ldr	r2, [pc, #484]	@ (8008a50 <HAL_SPI_Init+0x240>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d007      	beq.n	800887e <HAL_SPI_Init+0x6e>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a78      	ldr	r2, [pc, #480]	@ (8008a54 <HAL_SPI_Init+0x244>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d002      	beq.n	800887e <HAL_SPI_Init+0x6e>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b08      	cmp	r3, #8
 800887c:	d811      	bhi.n	80088a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008882:	4a72      	ldr	r2, [pc, #456]	@ (8008a4c <HAL_SPI_Init+0x23c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d009      	beq.n	800889c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a70      	ldr	r2, [pc, #448]	@ (8008a50 <HAL_SPI_Init+0x240>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_SPI_Init+0x8c>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a6f      	ldr	r2, [pc, #444]	@ (8008a54 <HAL_SPI_Init+0x244>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d104      	bne.n	80088a6 <HAL_SPI_Init+0x96>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b10      	cmp	r3, #16
 80088a0:	d901      	bls.n	80088a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e0cd      	b.n	8008a42 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d106      	bne.n	80088c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7f8 fd90 	bl	80013e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0201 	bic.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80088e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088ec:	d119      	bne.n	8008922 <HAL_SPI_Init+0x112>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088f6:	d103      	bne.n	8008900 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800890c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008910:	d107      	bne.n	8008922 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008920:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00f      	beq.n	800894e <HAL_SPI_Init+0x13e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b06      	cmp	r3, #6
 8008934:	d90b      	bls.n	800894e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e007      	b.n	800895e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800895c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69da      	ldr	r2, [r3, #28]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	431a      	orrs	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008970:	ea42 0103 	orr.w	r1, r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	431a      	orrs	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089be:	ea42 0103 	orr.w	r1, r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d113      	bne.n	80089fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40013000 	.word	0x40013000
 8008a50:	40003800 	.word	0x40003800
 8008a54:	40003c00 	.word	0x40003c00

08008a58 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3320      	adds	r3, #32
 8008a6e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a70:	f7f8 fe66 	bl	8001740 <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d001      	beq.n	8008a86 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
 8008a84:	e1d1      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_SPI_Transmit+0x3a>
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e1c9      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_SPI_Transmit+0x4c>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e1c2      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	88fa      	ldrh	r2, [r7, #6]
 8008ac6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008afc:	d108      	bne.n	8008b10 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e009      	b.n	8008b24 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008b22:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	4b96      	ldr	r3, [pc, #600]	@ (8008d84 <HAL_SPI_Transmit+0x32c>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	88f9      	ldrh	r1, [r7, #6]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	430b      	orrs	r3, r1
 8008b36:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b50:	d107      	bne.n	8008b62 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d947      	bls.n	8008bfa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008b6a:	e03f      	b.n	8008bec <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d114      	bne.n	8008ba4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b8a:	1d1a      	adds	r2, r3, #4
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ba2:	e023      	b.n	8008bec <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ba4:	f7f8 fdcc 	bl	8001740 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d803      	bhi.n	8008bbc <HAL_SPI_Transmit+0x164>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d102      	bne.n	8008bc2 <HAL_SPI_Transmit+0x16a>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d114      	bne.n	8008bec <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 f936 	bl	8008e34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e11e      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1b9      	bne.n	8008b6c <HAL_SPI_Transmit+0x114>
 8008bf8:	e0f1      	b.n	8008dde <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	2b07      	cmp	r3, #7
 8008c00:	f240 80e6 	bls.w	8008dd0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008c04:	e05d      	b.n	8008cc2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d132      	bne.n	8008c7a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d918      	bls.n	8008c52 <HAL_SPI_Transmit+0x1fa>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d014      	beq.n	8008c52 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6812      	ldr	r2, [r2, #0]
 8008c32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c38:	1d1a      	adds	r2, r3, #4
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b02      	subs	r3, #2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008c50:	e037      	b.n	8008cc2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c56:	881a      	ldrh	r2, [r3, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c60:	1c9a      	adds	r2, r3, #2
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008c78:	e023      	b.n	8008cc2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7a:	f7f8 fd61 	bl	8001740 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d803      	bhi.n	8008c92 <HAL_SPI_Transmit+0x23a>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d102      	bne.n	8008c98 <HAL_SPI_Transmit+0x240>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d114      	bne.n	8008cc2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f8cb 	bl	8008e34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e0b3      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d19b      	bne.n	8008c06 <HAL_SPI_Transmit+0x1ae>
 8008cce:	e086      	b.n	8008dde <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d154      	bne.n	8008d88 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d918      	bls.n	8008d1c <HAL_SPI_Transmit+0x2c4>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cee:	2b40      	cmp	r3, #64	@ 0x40
 8008cf0:	d914      	bls.n	8008d1c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	3b04      	subs	r3, #4
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008d1a:	e059      	b.n	8008dd0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d917      	bls.n	8008d58 <HAL_SPI_Transmit+0x300>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d34:	881a      	ldrh	r2, [r3, #0]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b02      	subs	r3, #2
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008d56:	e03b      	b.n	8008dd0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3320      	adds	r3, #32
 8008d62:	7812      	ldrb	r2, [r2, #0]
 8008d64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008d82:	e025      	b.n	8008dd0 <HAL_SPI_Transmit+0x378>
 8008d84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d88:	f7f8 fcda 	bl	8001740 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d803      	bhi.n	8008da0 <HAL_SPI_Transmit+0x348>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9e:	d102      	bne.n	8008da6 <HAL_SPI_Transmit+0x34e>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d114      	bne.n	8008dd0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 f844 	bl	8008e34 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e02c      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f47f af79 	bne.w	8008cd0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2200      	movs	r2, #0
 8008de6:	2108      	movs	r1, #8
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f8c3 	bl	8008f74 <SPI_WaitOnFlagUntilTimeout>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f815 	bl	8008e34 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008e28:	2300      	movs	r3, #0
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop

08008e34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0208 	orr.w	r2, r2, #8
 8008e52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0210 	orr.w	r2, r2, #16
 8008e62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0201 	bic.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6919      	ldr	r1, [r3, #16]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f70 <SPI_CloseTransfer+0x13c>)
 8008e80:	400b      	ands	r3, r1
 8008e82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008e92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d014      	beq.n	8008eca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00f      	beq.n	8008eca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699a      	ldr	r2, [r3, #24]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0220 	orr.w	r2, r2, #32
 8008ec8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d014      	beq.n	8008f00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00f      	beq.n	8008f00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ee6:	f043 0204 	orr.w	r2, r3, #4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008efe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00f      	beq.n	8008f2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f10:	f043 0201 	orr.w	r2, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00f      	beq.n	8008f54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f3a:	f043 0208 	orr.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	fffffc90 	.word	0xfffffc90

08008f74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	4613      	mov	r3, r2
 8008f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f84:	e010      	b.n	8008fa8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f86:	f7f8 fbdb 	bl	8001740 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d803      	bhi.n	8008f9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d102      	bne.n	8008fa4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e00f      	b.n	8008fc8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695a      	ldr	r2, [r3, #20]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	bf0c      	ite	eq
 8008fb8:	2301      	moveq	r3, #1
 8008fba:	2300      	movne	r3, #0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d0df      	beq.n	8008f86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3307      	adds	r3, #7
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009008:	b084      	sub	sp, #16
 800900a:	b480      	push	{r7}
 800900c:	b085      	sub	sp, #20
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	f107 001c 	add.w	r0, r7, #28
 8009016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800901e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009020:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009022:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009026:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800902a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800902e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	4b07      	ldr	r3, [pc, #28]	@ (8009058 <SDMMC_Init+0x50>)
 800903c:	4013      	ands	r3, r2
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	431a      	orrs	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	b004      	add	sp, #16
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	ffc02c00 	.word	0xffc02c00

0800905c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f043 0203 	orr.w	r2, r3, #3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0303 	and.w	r3, r3, #3
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
	...

080090d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80090f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80090fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009102:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <SDMMC_SendCommand+0x50>)
 8009110:	4013      	ands	r3, r2
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	fffee0c0 	.word	0xfffee0c0

0800912c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	b2db      	uxtb	r3, r3
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3314      	adds	r3, #20
 8009154:	461a      	mov	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	4413      	add	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009192:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009198:	431a      	orrs	r2, r3
                       Data->DPSM);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800919e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0

}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80091d2:	2310      	movs	r3, #16
 80091d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff ff73 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80091f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091f6:	2110      	movs	r1, #16
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa5f 	bl	80096bc <SDMMC_GetCmdResp1>
 80091fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009200:	69fb      	ldr	r3, [r7, #28]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b088      	sub	sp, #32
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009218:	2311      	movs	r3, #17
 800921a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800921c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800922a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800922c:	f107 0308 	add.w	r3, r7, #8
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff ff50 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800923c:	2111      	movs	r1, #17
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa3c 	bl	80096bc <SDMMC_GetCmdResp1>
 8009244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009246:	69fb      	ldr	r3, [r7, #28]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800925e:	2312      	movs	r3, #18
 8009260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800926c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff2d 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800927e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009282:	2112      	movs	r1, #18
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fa19 	bl	80096bc <SDMMC_GetCmdResp1>
 800928a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800928c:	69fb      	ldr	r3, [r7, #28]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b088      	sub	sp, #32
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092a4:	2318      	movs	r3, #24
 80092a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092b8:	f107 0308 	add.w	r3, r7, #8
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff ff0a 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80092c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092c8:	2118      	movs	r1, #24
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9f6 	bl	80096bc <SDMMC_GetCmdResp1>
 80092d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d2:	69fb      	ldr	r3, [r7, #28]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80092ea:	2319      	movs	r3, #25
 80092ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff fee7 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800930a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800930e:	2119      	movs	r1, #25
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9d3 	bl	80096bc <SDMMC_GetCmdResp1>
 8009316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009318:	69fb      	ldr	r3, [r7, #28]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009330:	230c      	movs	r3, #12
 8009332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800933e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009342:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff feb8 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009368:	4a0b      	ldr	r2, [pc, #44]	@ (8009398 <SDMMC_CmdStopTransfer+0x74>)
 800936a:	210c      	movs	r1, #12
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f9a5 	bl	80096bc <SDMMC_GetCmdResp1>
 8009372:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009386:	d101      	bne.n	800938c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009388:	2300      	movs	r3, #0
 800938a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800938c:	69fb      	ldr	r3, [r7, #28]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	05f5e100 	.word	0x05f5e100

0800939c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80093aa:	2307      	movs	r3, #7
 80093ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff fe87 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80093ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ce:	2107      	movs	r1, #7
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f973 	bl	80096bc <SDMMC_GetCmdResp1>
 80093d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80093f2:	2300      	movs	r3, #0
 80093f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fe66 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fb97 	bl	8009b40 <SDMMC_GetCmdError>
 8009412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009414:	69fb      	ldr	r3, [r7, #28]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b088      	sub	sp, #32
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009426:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800942a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800942c:	2308      	movs	r3, #8
 800942e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800943a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800943e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff fe46 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb29 	bl	8009aa4 <SDMMC_GetCmdResp7>
 8009452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009454:	69fb      	ldr	r3, [r7, #28]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800946c:	2337      	movs	r3, #55	@ 0x37
 800946e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009476:	2300      	movs	r3, #0
 8009478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800947a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800947e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fe26 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800948c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009490:	2137      	movs	r1, #55	@ 0x37
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f912 	bl	80096bc <SDMMC_GetCmdResp1>
 8009498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800949a:	69fb      	ldr	r3, [r7, #28]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80094b2:	2329      	movs	r3, #41	@ 0x29
 80094b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094bc:	2300      	movs	r3, #0
 80094be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094c6:	f107 0308 	add.w	r3, r7, #8
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fe03 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa2e 	bl	8009934 <SDMMC_GetCmdResp3>
 80094d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094da:	69fb      	ldr	r3, [r7, #28]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3720      	adds	r7, #32
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80094f2:	2306      	movs	r3, #6
 80094f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094fc:	2300      	movs	r3, #0
 80094fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009504:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009506:	f107 0308 	add.w	r3, r7, #8
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fde3 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009516:	2106      	movs	r1, #6
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f8cf 	bl	80096bc <SDMMC_GetCmdResp1>
 800951e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009520:	69fb      	ldr	r3, [r7, #28]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b088      	sub	sp, #32
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009536:	2333      	movs	r3, #51	@ 0x33
 8009538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800953a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800953e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fdc1 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800955a:	2133      	movs	r1, #51	@ 0x33
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f8ad 	bl	80096bc <SDMMC_GetCmdResp1>
 8009562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009564:	69fb      	ldr	r3, [r7, #28]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800957a:	2302      	movs	r3, #2
 800957c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800957e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009584:	2300      	movs	r3, #0
 8009586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800958c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800958e:	f107 0308 	add.w	r3, r7, #8
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff fd9f 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f980 	bl	80098a0 <SDMMC_GetCmdResp2>
 80095a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a2:	69fb      	ldr	r3, [r7, #28]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3720      	adds	r7, #32
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80095ba:	2309      	movs	r3, #9
 80095bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80095c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff fd7f 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f960 	bl	80098a0 <SDMMC_GetCmdResp2>
 80095e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095e2:	69fb      	ldr	r3, [r7, #28]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3720      	adds	r7, #32
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b088      	sub	sp, #32
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80095fa:	2303      	movs	r3, #3
 80095fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800960c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800960e:	f107 0308 	add.w	r3, r7, #8
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff fd5f 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	2103      	movs	r1, #3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f9c8 	bl	80099b4 <SDMMC_GetCmdResp6>
 8009624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009626:	69fb      	ldr	r3, [r7, #28]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800963e:	230d      	movs	r3, #13
 8009640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009642:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009648:	2300      	movs	r3, #0
 800964a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800964c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fd3d 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800965e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009662:	210d      	movs	r1, #13
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f829 	bl	80096bc <SDMMC_GetCmdResp1>
 800966a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800966c:	69fb      	ldr	r3, [r7, #28]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009682:	230d      	movs	r3, #13
 8009684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800968a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800968c:	2300      	movs	r3, #0
 800968e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff fd1b 	bl	80090d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80096a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096a6:	210d      	movs	r1, #13
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f807 	bl	80096bc <SDMMC_GetCmdResp1>
 80096ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096b0:	69fb      	ldr	r3, [r7, #28]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3720      	adds	r7, #32
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	460b      	mov	r3, r1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096ca:	4b70      	ldr	r3, [pc, #448]	@ (800988c <SDMMC_GetCmdResp1+0x1d0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a70      	ldr	r2, [pc, #448]	@ (8009890 <SDMMC_GetCmdResp1+0x1d4>)
 80096d0:	fba2 2303 	umull	r2, r3, r2, r3
 80096d4:	0a5a      	lsrs	r2, r3, #9
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	fb02 f303 	mul.w	r3, r2, r3
 80096dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	1e5a      	subs	r2, r3, #1
 80096e2:	61fa      	str	r2, [r7, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096ec:	e0c9      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	4b67      	ldr	r3, [pc, #412]	@ (8009894 <SDMMC_GetCmdResp1+0x1d8>)
 80096f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ef      	beq.n	80096de <SDMMC_GetCmdResp1+0x22>
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1ea      	bne.n	80096de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2204      	movs	r2, #4
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800971a:	2304      	movs	r3, #4
 800971c:	e0b1      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009730:	2301      	movs	r3, #1
 8009732:	e0a6      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a58      	ldr	r2, [pc, #352]	@ (8009898 <SDMMC_GetCmdResp1+0x1dc>)
 8009738:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff fcf6 	bl	800912c <SDMMC_GetCommandResponse>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	4293      	cmp	r3, r2
 8009748:	d001      	beq.n	800974e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800974a:	2301      	movs	r3, #1
 800974c:	e099      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800974e:	2100      	movs	r1, #0
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f7ff fcf8 	bl	8009146 <SDMMC_GetResponse>
 8009756:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4b50      	ldr	r3, [pc, #320]	@ (800989c <SDMMC_GetCmdResp1+0x1e0>)
 800975c:	4013      	ands	r3, r2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
 8009764:	e08d      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	da02      	bge.n	8009772 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800976c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009770:	e087      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800977c:	2340      	movs	r3, #64	@ 0x40
 800977e:	e080      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800978a:	2380      	movs	r3, #128	@ 0x80
 800978c:	e079      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800979c:	e071      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097ac:	e069      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80097b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097bc:	e061      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80097c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80097cc:	e059      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097dc:	e051      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80097ec:	e049      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80097f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80097fc:	e041      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800980c:	e039      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800981c:	e031      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009828:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800982c:	e029      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800983c:	e021      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009848:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800984c:	e019      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009858:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800985c:	e011      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009868:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800986c:	e009      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009878:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800987c:	e001      	b.n	8009882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800987e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	24000000 	.word	0x24000000
 8009890:	10624dd3 	.word	0x10624dd3
 8009894:	00200045 	.word	0x00200045
 8009898:	002000c5 	.word	0x002000c5
 800989c:	fdffe008 	.word	0xfdffe008

080098a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80098a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009928 <SDMMC_GetCmdResp2+0x88>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a1f      	ldr	r2, [pc, #124]	@ (800992c <SDMMC_GetCmdResp2+0x8c>)
 80098ae:	fba2 2303 	umull	r2, r3, r2, r3
 80098b2:	0a5b      	lsrs	r3, r3, #9
 80098b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098b8:	fb02 f303 	mul.w	r3, r2, r3
 80098bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1e5a      	subs	r2, r3, #1
 80098c2:	60fa      	str	r2, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098cc:	e026      	b.n	800991c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0ef      	beq.n	80098be <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1ea      	bne.n	80098be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2204      	movs	r2, #4
 80098f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098fa:	2304      	movs	r3, #4
 80098fc:	e00e      	b.n	800991c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009910:	2301      	movs	r3, #1
 8009912:	e003      	b.n	800991c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a06      	ldr	r2, [pc, #24]	@ (8009930 <SDMMC_GetCmdResp2+0x90>)
 8009918:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	24000000 	.word	0x24000000
 800992c:	10624dd3 	.word	0x10624dd3
 8009930:	002000c5 	.word	0x002000c5

08009934 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800993c:	4b1a      	ldr	r3, [pc, #104]	@ (80099a8 <SDMMC_GetCmdResp3+0x74>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a1a      	ldr	r2, [pc, #104]	@ (80099ac <SDMMC_GetCmdResp3+0x78>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	0a5b      	lsrs	r3, r3, #9
 8009948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	60fa      	str	r2, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800995c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009960:	e01b      	b.n	800999a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0ef      	beq.n	8009952 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1ea      	bne.n	8009952 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2204      	movs	r2, #4
 800998c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800998e:	2304      	movs	r3, #4
 8009990:	e003      	b.n	800999a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a06      	ldr	r2, [pc, #24]	@ (80099b0 <SDMMC_GetCmdResp3+0x7c>)
 8009996:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	24000000 	.word	0x24000000
 80099ac:	10624dd3 	.word	0x10624dd3
 80099b0:	002000c5 	.word	0x002000c5

080099b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	460b      	mov	r3, r1
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80099c2:	4b35      	ldr	r3, [pc, #212]	@ (8009a98 <SDMMC_GetCmdResp6+0xe4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a35      	ldr	r2, [pc, #212]	@ (8009a9c <SDMMC_GetCmdResp6+0xe8>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	0a5b      	lsrs	r3, r3, #9
 80099ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	1e5a      	subs	r2, r3, #1
 80099dc:	61fa      	str	r2, [r7, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d102      	bne.n	80099e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099e6:	e052      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0ef      	beq.n	80099d8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1ea      	bne.n	80099d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2204      	movs	r2, #4
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a14:	2304      	movs	r3, #4
 8009a16:	e03a      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2201      	movs	r2, #1
 8009a28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e02f      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fb7c 	bl	800912c <SDMMC_GetCommandResponse>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d001      	beq.n	8009a42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e025      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a16      	ldr	r2, [pc, #88]	@ (8009aa0 <SDMMC_GetCmdResp6+0xec>)
 8009a46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7ff fb7b 	bl	8009146 <SDMMC_GetResponse>
 8009a50:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	0c1b      	lsrs	r3, r3, #16
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	e011      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a78:	e009      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a88:	e001      	b.n	8009a8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	24000000 	.word	0x24000000
 8009a9c:	10624dd3 	.word	0x10624dd3
 8009aa0:	002000c5 	.word	0x002000c5

08009aa4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009aac:	4b22      	ldr	r3, [pc, #136]	@ (8009b38 <SDMMC_GetCmdResp7+0x94>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a22      	ldr	r2, [pc, #136]	@ (8009b3c <SDMMC_GetCmdResp7+0x98>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	0a5b      	lsrs	r3, r3, #9
 8009ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009abc:	fb02 f303 	mul.w	r3, r2, r3
 8009ac0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1e5a      	subs	r2, r3, #1
 8009ac6:	60fa      	str	r2, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ad0:	e02c      	b.n	8009b2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0ef      	beq.n	8009ac2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ea      	bne.n	8009ac2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2204      	movs	r2, #4
 8009afc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009afe:	2304      	movs	r3, #4
 8009b00:	e014      	b.n	8009b2c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e009      	b.n	8009b2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2240      	movs	r2, #64	@ 0x40
 8009b28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b2a:	2300      	movs	r3, #0

}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	24000000 	.word	0x24000000
 8009b3c:	10624dd3 	.word	0x10624dd3

08009b40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b48:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <SDMMC_GetCmdError+0x50>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <SDMMC_GetCmdError+0x54>)
 8009b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b52:	0a5b      	lsrs	r3, r3, #9
 8009b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b58:	fb02 f303 	mul.w	r3, r2, r3
 8009b5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1e5a      	subs	r2, r3, #1
 8009b62:	60fa      	str	r2, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d102      	bne.n	8009b6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b6c:	e009      	b.n	8009b82 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0f1      	beq.n	8009b5e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a06      	ldr	r2, [pc, #24]	@ (8009b98 <SDMMC_GetCmdError+0x58>)
 8009b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	24000000 	.word	0x24000000
 8009b94:	10624dd3 	.word	0x10624dd3
 8009b98:	002000c5 	.word	0x002000c5

08009b9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009ba0:	4904      	ldr	r1, [pc, #16]	@ (8009bb4 <MX_FATFS_Init+0x18>)
 8009ba2:	4805      	ldr	r0, [pc, #20]	@ (8009bb8 <MX_FATFS_Init+0x1c>)
 8009ba4:	f002 ffc4 	bl	800cb30 <FATFS_LinkDriver>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b03      	ldr	r3, [pc, #12]	@ (8009bbc <MX_FATFS_Init+0x20>)
 8009bae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009bb0:	bf00      	nop
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	24000648 	.word	0x24000648
 8009bb8:	0800d0cc 	.word	0x0800d0cc
 8009bbc:	24000644 	.word	0x24000644

08009bc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009bc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009bda:	f000 f885 	bl	8009ce8 <BSP_SD_IsDetected>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d001      	beq.n	8009be8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009be4:	2302      	movs	r3, #2
 8009be6:	e012      	b.n	8009c0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009be8:	480b      	ldr	r0, [pc, #44]	@ (8009c18 <BSP_SD_Init+0x48>)
 8009bea:	f7fd f9ad 	bl	8006f48 <HAL_SD_Init>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009bf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009bfc:	4806      	ldr	r0, [pc, #24]	@ (8009c18 <BSP_SD_Init+0x48>)
 8009bfe:	f7fe f863 	bl	8007cc8 <HAL_SD_ConfigWideBusOperation>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	24000538 	.word	0x24000538

08009c1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	4806      	ldr	r0, [pc, #24]	@ (8009c4c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009c34:	f7fd faa8 	bl	8007188 <HAL_SD_ReadBlocks_DMA>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	24000538 	.word	0x24000538

08009c50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	4806      	ldr	r0, [pc, #24]	@ (8009c80 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009c68:	f7fd fb36 	bl	80072d8 <HAL_SD_WriteBlocks_DMA>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	24000538 	.word	0x24000538

08009c84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009c88:	4805      	ldr	r0, [pc, #20]	@ (8009ca0 <BSP_SD_GetCardState+0x1c>)
 8009c8a:	f7fe f92f 	bl	8007eec <HAL_SD_GetCardState>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	bf14      	ite	ne
 8009c94:	2301      	movne	r3, #1
 8009c96:	2300      	moveq	r3, #0
 8009c98:	b2db      	uxtb	r3, r3
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	24000538 	.word	0x24000538

08009ca4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4803      	ldr	r0, [pc, #12]	@ (8009cbc <BSP_SD_GetCardInfo+0x18>)
 8009cb0:	f7fd ffde 	bl	8007c70 <HAL_SD_GetCardInfo>
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	24000538 	.word	0x24000538

08009cc0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009cc8:	f000 f9a0 	bl	800a00c <BSP_SD_WriteCpltCallback>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009cdc:	f000 f9a2 	bl	800a024 <BSP_SD_ReadCpltCallback>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009cf2:	f000 f80b 	bl	8009d0c <BSP_PlatformIsDetected>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	b2db      	uxtb	r3, r3
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009d12:	2301      	movs	r3, #1
 8009d14:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d1a:	4806      	ldr	r0, [pc, #24]	@ (8009d34 <BSP_PlatformIsDetected+0x28>)
 8009d1c:	f7f8 f80c 	bl	8001d38 <HAL_GPIO_ReadPin>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009d26:	2300      	movs	r3, #0
 8009d28:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	58022000 	.word	0x58022000

08009d38 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009d40:	f7f7 fcfe 	bl	8001740 <HAL_GetTick>
 8009d44:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009d46:	e006      	b.n	8009d56 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d48:	f7ff ff9c 	bl	8009c84 <BSP_SD_GetCardState>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e009      	b.n	8009d6a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009d56:	f7f7 fcf3 	bl	8001740 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d8f0      	bhi.n	8009d48 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <SD_CheckStatus+0x38>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009d84:	f7ff ff7e 	bl	8009c84 <BSP_SD_GetCardState>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d107      	bne.n	8009d9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009d8e:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <SD_CheckStatus+0x38>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f023 0301 	bic.w	r3, r3, #1
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	4b04      	ldr	r3, [pc, #16]	@ (8009dac <SD_CheckStatus+0x38>)
 8009d9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009d9e:	4b03      	ldr	r3, [pc, #12]	@ (8009dac <SD_CheckStatus+0x38>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2db      	uxtb	r3, r3
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	2400000d 	.word	0x2400000d

08009db0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009dba:	f7ff ff09 	bl	8009bd0 <BSP_SD_Init>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d107      	bne.n	8009dd4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ffd4 	bl	8009d74 <SD_CheckStatus>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4b04      	ldr	r3, [pc, #16]	@ (8009de4 <SD_initialize+0x34>)
 8009dd2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009dd4:	4b03      	ldr	r3, [pc, #12]	@ (8009de4 <SD_initialize+0x34>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	b2db      	uxtb	r3, r3
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	2400000d 	.word	0x2400000d

08009de8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff ffbd 	bl	8009d74 <SD_CheckStatus>
 8009dfa:	4603      	mov	r3, r0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009e18:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009e1c:	f7ff ff8c 	bl	8009d38 <SD_CheckStatusWithTimeout>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da01      	bge.n	8009e2a <SD_read+0x26>
  {
    return res;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	e03b      	b.n	8009ea2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	68b8      	ldr	r0, [r7, #8]
 8009e30:	f7ff fef4 	bl	8009c1c <BSP_SD_ReadBlocks_DMA>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d132      	bne.n	8009ea0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8009eac <SD_read+0xa8>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009e40:	f7f7 fc7e 	bl	8001740 <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e46:	bf00      	nop
 8009e48:	4b18      	ldr	r3, [pc, #96]	@ (8009eac <SD_read+0xa8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <SD_read+0x5e>
 8009e50:	f7f7 fc76 	bl	8001740 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d9f2      	bls.n	8009e48 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009e62:	4b12      	ldr	r3, [pc, #72]	@ (8009eac <SD_read+0xa8>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]
 8009e6e:	e017      	b.n	8009ea0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009e70:	4b0e      	ldr	r3, [pc, #56]	@ (8009eac <SD_read+0xa8>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e76:	f7f7 fc63 	bl	8001740 <HAL_GetTick>
 8009e7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e7c:	e007      	b.n	8009e8e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e7e:	f7ff ff01 	bl	8009c84 <BSP_SD_GetCardState>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <SD_read+0x8a>
          {
            res = RES_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009e8c:	e008      	b.n	8009ea0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e8e:	f7f7 fc57 	bl	8001740 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d9ee      	bls.n	8009e7e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	24000650 	.word	0x24000650

08009eb0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009ec4:	4b24      	ldr	r3, [pc, #144]	@ (8009f58 <SD_write+0xa8>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009eca:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009ece:	f7ff ff33 	bl	8009d38 <SD_CheckStatusWithTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da01      	bge.n	8009edc <SD_write+0x2c>
  {
    return res;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	e038      	b.n	8009f4e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	68b8      	ldr	r0, [r7, #8]
 8009ee2:	f7ff feb5 	bl	8009c50 <BSP_SD_WriteBlocks_DMA>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d12f      	bne.n	8009f4c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009eec:	f7f7 fc28 	bl	8001740 <HAL_GetTick>
 8009ef0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009ef2:	bf00      	nop
 8009ef4:	4b18      	ldr	r3, [pc, #96]	@ (8009f58 <SD_write+0xa8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d108      	bne.n	8009f0e <SD_write+0x5e>
 8009efc:	f7f7 fc20 	bl	8001740 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d9f2      	bls.n	8009ef4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009f0e:	4b12      	ldr	r3, [pc, #72]	@ (8009f58 <SD_write+0xa8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
 8009f1a:	e017      	b.n	8009f4c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f58 <SD_write+0xa8>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009f22:	f7f7 fc0d 	bl	8001740 <HAL_GetTick>
 8009f26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009f28:	e007      	b.n	8009f3a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009f2a:	f7ff feab 	bl	8009c84 <BSP_SD_GetCardState>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d102      	bne.n	8009f3a <SD_write+0x8a>
          {
            res = RES_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	75fb      	strb	r3, [r7, #23]
            break;
 8009f38:	e008      	b.n	8009f4c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009f3a:	f7f7 fc01 	bl	8001740 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d9ee      	bls.n	8009f2a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	2400064c 	.word	0x2400064c

08009f5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08c      	sub	sp, #48	@ 0x30
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	603a      	str	r2, [r7, #0]
 8009f66:	71fb      	strb	r3, [r7, #7]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f72:	4b25      	ldr	r3, [pc, #148]	@ (800a008 <SD_ioctl+0xac>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <SD_ioctl+0x28>
 8009f80:	2303      	movs	r3, #3
 8009f82:	e03c      	b.n	8009ffe <SD_ioctl+0xa2>

  switch (cmd)
 8009f84:	79bb      	ldrb	r3, [r7, #6]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d834      	bhi.n	8009ff4 <SD_ioctl+0x98>
 8009f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <SD_ioctl+0x34>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fa1 	.word	0x08009fa1
 8009f94:	08009fa9 	.word	0x08009fa9
 8009f98:	08009fc1 	.word	0x08009fc1
 8009f9c:	08009fdb 	.word	0x08009fdb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009fa6:	e028      	b.n	8009ffa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fa8:	f107 0308 	add.w	r3, r7, #8
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff fe79 	bl	8009ca4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009fbe:	e01c      	b.n	8009ffa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fe6d 	bl	8009ca4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009fd8:	e00f      	b.n	8009ffa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fda:	f107 0308 	add.w	r3, r7, #8
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fe60 	bl	8009ca4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	0a5a      	lsrs	r2, r3, #9
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009ff2:	e002      	b.n	8009ffa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3730      	adds	r7, #48	@ 0x30
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	2400000d 	.word	0x2400000d

0800a00c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a010:	4b03      	ldr	r3, [pc, #12]	@ (800a020 <BSP_SD_WriteCpltCallback+0x14>)
 800a012:	2201      	movs	r2, #1
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	2400064c 	.word	0x2400064c

0800a024 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a024:	b480      	push	{r7}
 800a026:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a028:	4b03      	ldr	r3, [pc, #12]	@ (800a038 <BSP_SD_ReadCpltCallback+0x14>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
}
 800a02e:	bf00      	nop
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	24000650 	.word	0x24000650

0800a03c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	4a08      	ldr	r2, [pc, #32]	@ (800a06c <disk_status+0x30>)
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	79fa      	ldrb	r2, [r7, #7]
 800a054:	4905      	ldr	r1, [pc, #20]	@ (800a06c <disk_status+0x30>)
 800a056:	440a      	add	r2, r1
 800a058:	7a12      	ldrb	r2, [r2, #8]
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	2400067c 	.word	0x2400067c

0800a070 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	4a0e      	ldr	r2, [pc, #56]	@ (800a0bc <disk_initialize+0x4c>)
 800a082:	5cd3      	ldrb	r3, [r2, r3]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d114      	bne.n	800a0b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	4a0c      	ldr	r2, [pc, #48]	@ (800a0bc <disk_initialize+0x4c>)
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	79fa      	ldrb	r2, [r7, #7]
 800a096:	4909      	ldr	r1, [pc, #36]	@ (800a0bc <disk_initialize+0x4c>)
 800a098:	440a      	add	r2, r1
 800a09a:	7a12      	ldrb	r2, [r2, #8]
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	4a03      	ldr	r2, [pc, #12]	@ (800a0bc <disk_initialize+0x4c>)
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2400067c 	.word	0x2400067c

0800a0c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0c0:	b590      	push	{r4, r7, lr}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0fc <disk_read+0x3c>)
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	689c      	ldr	r4, [r3, #8]
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4a07      	ldr	r2, [pc, #28]	@ (800a0fc <disk_read+0x3c>)
 800a0e0:	4413      	add	r3, r2
 800a0e2:	7a18      	ldrb	r0, [r3, #8]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	47a0      	blx	r4
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd90      	pop	{r4, r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	2400067c 	.word	0x2400067c

0800a100 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a100:	b590      	push	{r4, r7, lr}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	603b      	str	r3, [r7, #0]
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	4a0a      	ldr	r2, [pc, #40]	@ (800a13c <disk_write+0x3c>)
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	68dc      	ldr	r4, [r3, #12]
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	4a07      	ldr	r2, [pc, #28]	@ (800a13c <disk_write+0x3c>)
 800a120:	4413      	add	r3, r2
 800a122:	7a18      	ldrb	r0, [r3, #8]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	68b9      	ldr	r1, [r7, #8]
 800a12a:	47a0      	blx	r4
 800a12c:	4603      	mov	r3, r0
 800a12e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	bd90      	pop	{r4, r7, pc}
 800a13a:	bf00      	nop
 800a13c:	2400067c 	.word	0x2400067c

0800a140 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	603a      	str	r2, [r7, #0]
 800a14a:	71fb      	strb	r3, [r7, #7]
 800a14c:	460b      	mov	r3, r1
 800a14e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	4a09      	ldr	r2, [pc, #36]	@ (800a178 <disk_ioctl+0x38>)
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	4906      	ldr	r1, [pc, #24]	@ (800a178 <disk_ioctl+0x38>)
 800a160:	440a      	add	r2, r1
 800a162:	7a10      	ldrb	r0, [r2, #8]
 800a164:	79b9      	ldrb	r1, [r7, #6]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	4798      	blx	r3
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	2400067c 	.word	0x2400067c

0800a17c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3301      	adds	r3, #1
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a18c:	89fb      	ldrh	r3, [r7, #14]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b21a      	sxth	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b21b      	sxth	r3, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	b21b      	sxth	r3, r3
 800a19c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a19e:	89fb      	ldrh	r3, [r7, #14]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3303      	adds	r3, #3
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	3202      	adds	r2, #2
 800a1c4:	7812      	ldrb	r2, [r2, #0]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	3201      	adds	r2, #1
 800a1d2:	7812      	ldrb	r2, [r2, #0]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7812      	ldrb	r2, [r2, #0]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	887a      	ldrh	r2, [r7, #2]
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	887b      	ldrh	r3, [r7, #2]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	701a      	strb	r2, [r3, #0]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	0a1b      	lsrs	r3, r3, #8
 800a242:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	1c53      	adds	r3, r2, #1
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	1c59      	adds	r1, r3, #1
 800a2a4:	6179      	str	r1, [r7, #20]
 800a2a6:	7812      	ldrb	r2, [r2, #0]
 800a2a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1f1      	bne.n	800a29a <mem_cpy+0x1a>
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2c2:	b480      	push	{r7}
 800a2c4:	b087      	sub	sp, #28
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	617a      	str	r2, [r7, #20]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	607b      	str	r3, [r7, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f3      	bne.n	800a2d2 <mem_set+0x10>
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	371c      	adds	r7, #28
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2f8:	b480      	push	{r7}
 800a2fa:	b089      	sub	sp, #36	@ 0x24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	61fa      	str	r2, [r7, #28]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	61ba      	str	r2, [r7, #24]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	1acb      	subs	r3, r1, r3
 800a324:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3b01      	subs	r3, #1
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <mem_cmp+0x40>
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0eb      	beq.n	800a310 <mem_cmp+0x18>

	return r;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3724      	adds	r7, #36	@ 0x24
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a350:	e002      	b.n	800a358 <chk_chr+0x12>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3301      	adds	r3, #1
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <chk_chr+0x26>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	4293      	cmp	r3, r2
 800a36a:	d1f2      	bne.n	800a352 <chk_chr+0xc>
	return *str;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	781b      	ldrb	r3, [r3, #0]
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a386:	2300      	movs	r3, #0
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	e029      	b.n	800a3e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a390:	4a27      	ldr	r2, [pc, #156]	@ (800a430 <chk_lock+0xb4>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	4413      	add	r3, r2
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01d      	beq.n	800a3da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a39e:	4a24      	ldr	r2, [pc, #144]	@ (800a430 <chk_lock+0xb4>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	011b      	lsls	r3, r3, #4
 800a3a4:	4413      	add	r3, r2
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d116      	bne.n	800a3de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a430 <chk_lock+0xb4>)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d10c      	bne.n	800a3de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a430 <chk_lock+0xb4>)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	4413      	add	r3, r2
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d102      	bne.n	800a3de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3d8:	e007      	b.n	800a3ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d9d2      	bls.n	800a390 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d109      	bne.n	800a404 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <chk_lock+0x80>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d101      	bne.n	800a400 <chk_lock+0x84>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e010      	b.n	800a422 <chk_lock+0xa6>
 800a400:	2312      	movs	r3, #18
 800a402:	e00e      	b.n	800a422 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d108      	bne.n	800a41c <chk_lock+0xa0>
 800a40a:	4a09      	ldr	r2, [pc, #36]	@ (800a430 <chk_lock+0xb4>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	4413      	add	r3, r2
 800a412:	330c      	adds	r3, #12
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41a:	d101      	bne.n	800a420 <chk_lock+0xa4>
 800a41c:	2310      	movs	r3, #16
 800a41e:	e000      	b.n	800a422 <chk_lock+0xa6>
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	2400065c 	.word	0x2400065c

0800a434 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
 800a43e:	e002      	b.n	800a446 <enq_lock+0x12>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3301      	adds	r3, #1
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d806      	bhi.n	800a45a <enq_lock+0x26>
 800a44c:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <enq_lock+0x40>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	4413      	add	r3, r2
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f2      	bne.n	800a440 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	bf14      	ite	ne
 800a460:	2301      	movne	r3, #1
 800a462:	2300      	moveq	r3, #0
 800a464:	b2db      	uxtb	r3, r3
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	2400065c 	.word	0x2400065c

0800a478 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e01f      	b.n	800a4c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a488:	4a41      	ldr	r2, [pc, #260]	@ (800a590 <inc_lock+0x118>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	4413      	add	r3, r2
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d113      	bne.n	800a4c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a49a:	4a3d      	ldr	r2, [pc, #244]	@ (800a590 <inc_lock+0x118>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d109      	bne.n	800a4c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a4ae:	4a38      	ldr	r2, [pc, #224]	@ (800a590 <inc_lock+0x118>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	4413      	add	r3, r2
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d006      	beq.n	800a4d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d9dc      	bls.n	800a488 <inc_lock+0x10>
 800a4ce:	e000      	b.n	800a4d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d132      	bne.n	800a53e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e002      	b.n	800a4e4 <inc_lock+0x6c>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d806      	bhi.n	800a4f8 <inc_lock+0x80>
 800a4ea:	4a29      	ldr	r2, [pc, #164]	@ (800a590 <inc_lock+0x118>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	4413      	add	r3, r2
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f2      	bne.n	800a4de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d101      	bne.n	800a502 <inc_lock+0x8a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	e040      	b.n	800a584 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4922      	ldr	r1, [pc, #136]	@ (800a590 <inc_lock+0x118>)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	440b      	add	r3, r1
 800a50e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	491e      	ldr	r1, [pc, #120]	@ (800a590 <inc_lock+0x118>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	440b      	add	r3, r1
 800a51c:	3304      	adds	r3, #4
 800a51e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	695a      	ldr	r2, [r3, #20]
 800a524:	491a      	ldr	r1, [pc, #104]	@ (800a590 <inc_lock+0x118>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	440b      	add	r3, r1
 800a52c:	3308      	adds	r3, #8
 800a52e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a530:	4a17      	ldr	r2, [pc, #92]	@ (800a590 <inc_lock+0x118>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	4413      	add	r3, r2
 800a538:	330c      	adds	r3, #12
 800a53a:	2200      	movs	r2, #0
 800a53c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <inc_lock+0xe0>
 800a544:	4a12      	ldr	r2, [pc, #72]	@ (800a590 <inc_lock+0x118>)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	011b      	lsls	r3, r3, #4
 800a54a:	4413      	add	r3, r2
 800a54c:	330c      	adds	r3, #12
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <inc_lock+0xe0>
 800a554:	2300      	movs	r3, #0
 800a556:	e015      	b.n	800a584 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d108      	bne.n	800a570 <inc_lock+0xf8>
 800a55e:	4a0c      	ldr	r2, [pc, #48]	@ (800a590 <inc_lock+0x118>)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	4413      	add	r3, r2
 800a566:	330c      	adds	r3, #12
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	e001      	b.n	800a574 <inc_lock+0xfc>
 800a570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a574:	4906      	ldr	r1, [pc, #24]	@ (800a590 <inc_lock+0x118>)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	011b      	lsls	r3, r3, #4
 800a57a:	440b      	add	r3, r1
 800a57c:	330c      	adds	r3, #12
 800a57e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	2400065c 	.word	0x2400065c

0800a594 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	607b      	str	r3, [r7, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d825      	bhi.n	800a5f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a5a8:	4a17      	ldr	r2, [pc, #92]	@ (800a608 <dec_lock+0x74>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	4413      	add	r3, r2
 800a5b0:	330c      	adds	r3, #12
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5b6:	89fb      	ldrh	r3, [r7, #14]
 800a5b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5bc:	d101      	bne.n	800a5c2 <dec_lock+0x2e>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5c2:	89fb      	ldrh	r3, [r7, #14]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <dec_lock+0x3a>
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a608 <dec_lock+0x74>)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	330c      	adds	r3, #12
 800a5d8:	89fa      	ldrh	r2, [r7, #14]
 800a5da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d105      	bne.n	800a5ee <dec_lock+0x5a>
 800a5e2:	4a09      	ldr	r2, [pc, #36]	@ (800a608 <dec_lock+0x74>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	737b      	strb	r3, [r7, #13]
 800a5f2:	e001      	b.n	800a5f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	2400065c 	.word	0x2400065c

0800a60c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e010      	b.n	800a63c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a61a:	4a0d      	ldr	r2, [pc, #52]	@ (800a650 <clear_lock+0x44>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	4413      	add	r3, r2
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d105      	bne.n	800a636 <clear_lock+0x2a>
 800a62a:	4a09      	ldr	r2, [pc, #36]	@ (800a650 <clear_lock+0x44>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	4413      	add	r3, r2
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d9eb      	bls.n	800a61a <clear_lock+0xe>
	}
}
 800a642:	bf00      	nop
 800a644:	bf00      	nop
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	2400065c 	.word	0x2400065c

0800a654 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	78db      	ldrb	r3, [r3, #3]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d034      	beq.n	800a6d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7858      	ldrb	r0, [r3, #1]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a678:	2301      	movs	r3, #1
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	f7ff fd40 	bl	800a100 <disk_write>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a686:	2301      	movs	r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
 800a68a:	e022      	b.n	800a6d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d217      	bcs.n	800a6d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	789b      	ldrb	r3, [r3, #2]
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	e010      	b.n	800a6cc <sync_window+0x78>
					wsect += fs->fsize;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7858      	ldrb	r0, [r3, #1]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6be:	2301      	movs	r3, #1
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	f7ff fd1d 	bl	800a100 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d8eb      	bhi.n	800a6aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d01b      	beq.n	800a72c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ffad 	bl	800a654 <sync_window>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d113      	bne.n	800a72c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7858      	ldrb	r0, [r3, #1]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a70e:	2301      	movs	r3, #1
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	f7ff fcd5 	bl	800a0c0 <disk_read>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff87 	bl	800a654 <sync_window>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d158      	bne.n	800a802 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d148      	bne.n	800a7ea <sync_fs+0xb2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	791b      	ldrb	r3, [r3, #4]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d144      	bne.n	800a7ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3330      	adds	r3, #48	@ 0x30
 800a764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fda9 	bl	800a2c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3330      	adds	r3, #48	@ 0x30
 800a774:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a778:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fd38 	bl	800a1f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3330      	adds	r3, #48	@ 0x30
 800a786:	4921      	ldr	r1, [pc, #132]	@ (800a80c <sync_fs+0xd4>)
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fd4d 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3330      	adds	r3, #48	@ 0x30
 800a792:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a796:	491e      	ldr	r1, [pc, #120]	@ (800a810 <sync_fs+0xd8>)
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff fd45 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3330      	adds	r3, #48	@ 0x30
 800a7a2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7ff fd3b 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3330      	adds	r3, #48	@ 0x30
 800a7b6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7ff fd31 	bl	800a228 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7858      	ldrb	r0, [r3, #1]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f7ff fc8e 	bl	800a100 <disk_write>
			fs->fsi_flag = 0;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fca4 	bl	800a140 <disk_ioctl>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <sync_fs+0xca>
 800a7fe:	2301      	movs	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	41615252 	.word	0x41615252
 800a810:	61417272 	.word	0x61417272

0800a814 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	3b02      	subs	r3, #2
 800a822:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	3b02      	subs	r3, #2
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d301      	bcc.n	800a834 <clust2sect+0x20>
 800a830:	2300      	movs	r3, #0
 800a832:	e008      	b.n	800a846 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	895b      	ldrh	r3, [r3, #10]
 800a838:	461a      	mov	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	fb03 f202 	mul.w	r2, r3, r2
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	4413      	add	r3, r2
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d904      	bls.n	800a872 <get_fat+0x20>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d302      	bcc.n	800a878 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e08e      	b.n	800a996 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b03      	cmp	r3, #3
 800a884:	d061      	beq.n	800a94a <get_fat+0xf8>
 800a886:	2b03      	cmp	r3, #3
 800a888:	dc7b      	bgt.n	800a982 <get_fat+0x130>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d002      	beq.n	800a894 <get_fat+0x42>
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d041      	beq.n	800a916 <get_fat+0xc4>
 800a892:	e076      	b.n	800a982 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6a1a      	ldr	r2, [r3, #32]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	0a5b      	lsrs	r3, r3, #9
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6938      	ldr	r0, [r7, #16]
 800a8b0:	f7ff ff14 	bl	800a6dc <move_window>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d166      	bne.n	800a988 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	60fa      	str	r2, [r7, #12]
 800a8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6a1a      	ldr	r2, [r3, #32]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	0a5b      	lsrs	r3, r3, #9
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f7ff fefe 	bl	800a6dc <move_window>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d152      	bne.n	800a98c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <get_fat+0xba>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	091b      	lsrs	r3, r3, #4
 800a90a:	e002      	b.n	800a912 <get_fat+0xc0>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a912:	617b      	str	r3, [r7, #20]
			break;
 800a914:	e03f      	b.n	800a996 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	6a1a      	ldr	r2, [r3, #32]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	0a1b      	lsrs	r3, r3, #8
 800a91e:	4413      	add	r3, r2
 800a920:	4619      	mov	r1, r3
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f7ff feda 	bl	800a6dc <move_window>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d130      	bne.n	800a990 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a93c:	4413      	add	r3, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fc1c 	bl	800a17c <ld_word>
 800a944:	4603      	mov	r3, r0
 800a946:	617b      	str	r3, [r7, #20]
			break;
 800a948:	e025      	b.n	800a996 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6a1a      	ldr	r2, [r3, #32]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	09db      	lsrs	r3, r3, #7
 800a952:	4413      	add	r3, r2
 800a954:	4619      	mov	r1, r3
 800a956:	6938      	ldr	r0, [r7, #16]
 800a958:	f7ff fec0 	bl	800a6dc <move_window>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d118      	bne.n	800a994 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a970:	4413      	add	r3, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff fc1a 	bl	800a1ac <ld_dword>
 800a978:	4603      	mov	r3, r0
 800a97a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a97e:	617b      	str	r3, [r7, #20]
			break;
 800a980:	e009      	b.n	800a996 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a982:	2301      	movs	r3, #1
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	e006      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a988:	bf00      	nop
 800a98a:	e004      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a98c:	bf00      	nop
 800a98e:	e002      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a990:	bf00      	nop
 800a992:	e000      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a994:	bf00      	nop
		}
	}

	return val;
 800a996:	697b      	ldr	r3, [r7, #20]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b089      	sub	sp, #36	@ 0x24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	f240 80d9 	bls.w	800ab6a <put_fat+0x1ca>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	f080 80d3 	bcs.w	800ab6a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	f000 8096 	beq.w	800aafa <put_fat+0x15a>
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	f300 80cb 	bgt.w	800ab6a <put_fat+0x1ca>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d002      	beq.n	800a9de <put_fat+0x3e>
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d06e      	beq.n	800aaba <put_fat+0x11a>
 800a9dc:	e0c5      	b.n	800ab6a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	085b      	lsrs	r3, r3, #1
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a1a      	ldr	r2, [r3, #32]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fe6f 	bl	800a6dc <move_window>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa02:	7ffb      	ldrb	r3, [r7, #31]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 80a9 	bne.w	800ab5c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	1c59      	adds	r1, r3, #1
 800aa14:	61b9      	str	r1, [r7, #24]
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	4413      	add	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <put_fat+0xa4>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	b25a      	sxtb	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	b25b      	sxtb	r3, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e001      	b.n	800aa48 <put_fat+0xa8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a1a      	ldr	r2, [r3, #32]
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fe3c 	bl	800a6dc <move_window>
 800aa64:	4603      	mov	r3, r0
 800aa66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa68:	7ffb      	ldrb	r3, [r7, #31]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d178      	bne.n	800ab60 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7a:	4413      	add	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <put_fat+0xf0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	091b      	lsrs	r3, r3, #4
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e00e      	b.n	800aaae <put_fat+0x10e>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f023 030f 	bic.w	r3, r3, #15
 800aa9a:	b25a      	sxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	70da      	strb	r2, [r3, #3]
			break;
 800aab8:	e057      	b.n	800ab6a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	4413      	add	r3, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff fe08 	bl	800a6dc <move_window>
 800aacc:	4603      	mov	r3, r0
 800aace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d146      	bne.n	800ab64 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aae4:	4413      	add	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	b292      	uxth	r2, r2
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff fb80 	bl	800a1f2 <st_word>
			fs->wflag = 1;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
			break;
 800aaf8:	e037      	b.n	800ab6a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a1a      	ldr	r2, [r3, #32]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	09db      	lsrs	r3, r3, #7
 800ab02:	4413      	add	r3, r2
 800ab04:	4619      	mov	r1, r3
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fde8 	bl	800a6dc <move_window>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab10:	7ffb      	ldrb	r3, [r7, #31]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d128      	bne.n	800ab68 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ab2a:	4413      	add	r3, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fb3d 	bl	800a1ac <ld_dword>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ab38:	4323      	orrs	r3, r4
 800ab3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ab4a:	4413      	add	r3, r2
 800ab4c:	6879      	ldr	r1, [r7, #4]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fb6a 	bl	800a228 <st_dword>
			fs->wflag = 1;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	70da      	strb	r2, [r3, #3]
			break;
 800ab5a:	e006      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab5c:	bf00      	nop
 800ab5e:	e004      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab68:	bf00      	nop
		}
	}
	return res;
 800ab6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3724      	adds	r7, #36	@ 0x24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd90      	pop	{r4, r7, pc}

0800ab74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d904      	bls.n	800ab9a <remove_chain+0x26>
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d301      	bcc.n	800ab9e <remove_chain+0x2a>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e04b      	b.n	800ac36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00c      	beq.n	800abbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f7ff fef8 	bl	800a9a0 <put_fat>
 800abb0:	4603      	mov	r3, r0
 800abb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <remove_chain+0x4a>
 800abba:	7ffb      	ldrb	r3, [r7, #31]
 800abbc:	e03b      	b.n	800ac36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff fe46 	bl	800a852 <get_fat>
 800abc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d031      	beq.n	800ac32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <remove_chain+0x64>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e02e      	b.n	800ac36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d101      	bne.n	800abe4 <remove_chain+0x70>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e028      	b.n	800ac36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abe4:	2200      	movs	r2, #0
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	69b8      	ldr	r0, [r7, #24]
 800abea:	f7ff fed9 	bl	800a9a0 <put_fat>
 800abee:	4603      	mov	r3, r0
 800abf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <remove_chain+0x88>
 800abf8:	7ffb      	ldrb	r3, [r7, #31]
 800abfa:	e01c      	b.n	800ac36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	3b02      	subs	r3, #2
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d20b      	bcs.n	800ac22 <remove_chain+0xae>
			fs->free_clst++;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	791b      	ldrb	r3, [r3, #4]
 800ac18:	f043 0301 	orr.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3c6      	bcc.n	800abbe <remove_chain+0x4a>
 800ac30:	e000      	b.n	800ac34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3720      	adds	r7, #32
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10d      	bne.n	800ac70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <create_chain+0x2c>
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d31b      	bcc.n	800aca2 <create_chain+0x64>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	61bb      	str	r3, [r7, #24]
 800ac6e:	e018      	b.n	800aca2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fded 	bl	800a852 <get_fat>
 800ac78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d801      	bhi.n	800ac84 <create_chain+0x46>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e070      	b.n	800ad66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d101      	bne.n	800ac90 <create_chain+0x52>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	e06a      	b.n	800ad66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d201      	bcs.n	800ac9e <create_chain+0x60>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	e063      	b.n	800ad66 <create_chain+0x128>
		scl = clst;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	3301      	adds	r3, #1
 800acaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d307      	bcc.n	800acc6 <create_chain+0x88>
				ncl = 2;
 800acb6:	2302      	movs	r3, #2
 800acb8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d901      	bls.n	800acc6 <create_chain+0x88>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e04f      	b.n	800ad66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acc6:	69f9      	ldr	r1, [r7, #28]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fdc2 	bl	800a852 <get_fat>
 800acce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00e      	beq.n	800acf4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d003      	beq.n	800ace4 <create_chain+0xa6>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d101      	bne.n	800ace8 <create_chain+0xaa>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	e03e      	b.n	800ad66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ace8:	69fa      	ldr	r2, [r7, #28]
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	429a      	cmp	r2, r3
 800acee:	d1da      	bne.n	800aca6 <create_chain+0x68>
 800acf0:	2300      	movs	r3, #0
 800acf2:	e038      	b.n	800ad66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800acf4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	69f9      	ldr	r1, [r7, #28]
 800acfc:	6938      	ldr	r0, [r7, #16]
 800acfe:	f7ff fe4f 	bl	800a9a0 <put_fat>
 800ad02:	4603      	mov	r3, r0
 800ad04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d109      	bne.n	800ad20 <create_chain+0xe2>
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6938      	ldr	r0, [r7, #16]
 800ad18:	f7ff fe42 	bl	800a9a0 <put_fat>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d116      	bne.n	800ad54 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	3b02      	subs	r3, #2
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d804      	bhi.n	800ad44 <create_chain+0x106>
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	711a      	strb	r2, [r3, #4]
 800ad52:	e007      	b.n	800ad64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d102      	bne.n	800ad60 <create_chain+0x122>
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	e000      	b.n	800ad62 <create_chain+0x124>
 800ad60:	2301      	movs	r3, #1
 800ad62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad64:	69fb      	ldr	r3, [r7, #28]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	3304      	adds	r3, #4
 800ad84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	0a5b      	lsrs	r3, r3, #9
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	8952      	ldrh	r2, [r2, #10]
 800ad8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	613a      	str	r2, [r7, #16]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <clmt_clust+0x3a>
 800ada4:	2300      	movs	r3, #0
 800ada6:	e010      	b.n	800adca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	429a      	cmp	r2, r3
 800adae:	d307      	bcc.n	800adc0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	3304      	adds	r3, #4
 800adbc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adbe:	e7e9      	b.n	800ad94 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800adc0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4413      	add	r3, r2
}
 800adca:	4618      	mov	r0, r3
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adec:	d204      	bcs.n	800adf8 <dir_sdi+0x22>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	f003 031f 	and.w	r3, r3, #31
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <dir_sdi+0x26>
		return FR_INT_ERR;
 800adf8:	2302      	movs	r3, #2
 800adfa:	e063      	b.n	800aec4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <dir_sdi+0x46>
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d902      	bls.n	800ae1c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10c      	bne.n	800ae3c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	095b      	lsrs	r3, r3, #5
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	8912      	ldrh	r2, [r2, #8]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d301      	bcc.n	800ae32 <dir_sdi+0x5c>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e048      	b.n	800aec4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	61da      	str	r2, [r3, #28]
 800ae3a:	e029      	b.n	800ae90 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	895b      	ldrh	r3, [r3, #10]
 800ae40:	025b      	lsls	r3, r3, #9
 800ae42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae44:	e019      	b.n	800ae7a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6979      	ldr	r1, [r7, #20]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fd01 	bl	800a852 <get_fat>
 800ae50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae58:	d101      	bne.n	800ae5e <dir_sdi+0x88>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e032      	b.n	800aec4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d904      	bls.n	800ae6e <dir_sdi+0x98>
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d301      	bcc.n	800ae72 <dir_sdi+0x9c>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e028      	b.n	800aec4 <dir_sdi+0xee>
			ofs -= csz;
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d2e1      	bcs.n	800ae46 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	6938      	ldr	r0, [r7, #16]
 800ae86:	f7ff fcc5 	bl	800a814 <clust2sect>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <dir_sdi+0xcc>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e010      	b.n	800aec4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	69da      	ldr	r2, [r3, #28]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	0a5b      	lsrs	r3, r3, #9
 800aeaa:	441a      	add	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	3320      	adds	r3, #32
 800aee2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <dir_next+0x28>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aef2:	d301      	bcc.n	800aef8 <dir_next+0x2c>
 800aef4:	2304      	movs	r3, #4
 800aef6:	e0aa      	b.n	800b04e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 8098 	bne.w	800b034 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10b      	bne.n	800af2e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	8912      	ldrh	r2, [r2, #8]
 800af1e:	4293      	cmp	r3, r2
 800af20:	f0c0 8088 	bcc.w	800b034 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	61da      	str	r2, [r3, #28]
 800af2a:	2304      	movs	r3, #4
 800af2c:	e08f      	b.n	800b04e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	0a5b      	lsrs	r3, r3, #9
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	8952      	ldrh	r2, [r2, #10]
 800af36:	3a01      	subs	r2, #1
 800af38:	4013      	ands	r3, r2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d17a      	bne.n	800b034 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7ff fc83 	bl	800a852 <get_fat>
 800af4c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d801      	bhi.n	800af58 <dir_next+0x8c>
 800af54:	2302      	movs	r3, #2
 800af56:	e07a      	b.n	800b04e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5e:	d101      	bne.n	800af64 <dir_next+0x98>
 800af60:	2301      	movs	r3, #1
 800af62:	e074      	b.n	800b04e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d358      	bcc.n	800b020 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	61da      	str	r2, [r3, #28]
 800af7a:	2304      	movs	r3, #4
 800af7c:	e067      	b.n	800b04e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7ff fe59 	bl	800ac3e <create_chain>
 800af8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <dir_next+0xcc>
 800af94:	2307      	movs	r3, #7
 800af96:	e05a      	b.n	800b04e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d101      	bne.n	800afa2 <dir_next+0xd6>
 800af9e:	2302      	movs	r3, #2
 800afa0:	e055      	b.n	800b04e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d101      	bne.n	800afae <dir_next+0xe2>
 800afaa:	2301      	movs	r3, #1
 800afac:	e04f      	b.n	800b04e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fb50 	bl	800a654 <sync_window>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <dir_next+0xf2>
 800afba:	2301      	movs	r3, #1
 800afbc:	e047      	b.n	800b04e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3330      	adds	r3, #48	@ 0x30
 800afc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff f97a 	bl	800a2c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afce:	2300      	movs	r3, #0
 800afd0:	613b      	str	r3, [r7, #16]
 800afd2:	6979      	ldr	r1, [r7, #20]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fc1d 	bl	800a814 <clust2sect>
 800afda:	4602      	mov	r2, r0
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	62da      	str	r2, [r3, #44]	@ 0x2c
 800afe0:	e012      	b.n	800b008 <dir_next+0x13c>
						fs->wflag = 1;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fb33 	bl	800a654 <sync_window>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <dir_next+0x12c>
 800aff4:	2301      	movs	r3, #1
 800aff6:	e02a      	b.n	800b04e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	613b      	str	r3, [r7, #16]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	895b      	ldrh	r3, [r3, #10]
 800b00c:	461a      	mov	r2, r3
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4293      	cmp	r3, r2
 800b012:	d3e6      	bcc.n	800afe2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b026:	6979      	ldr	r1, [r7, #20]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff fbf3 	bl	800a814 <clust2sect>
 800b02e:	4602      	mov	r2, r0
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	441a      	add	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b086      	sub	sp, #24
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b066:	2100      	movs	r1, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff feb4 	bl	800add6 <dir_sdi>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d12b      	bne.n	800b0d0 <dir_alloc+0x7a>
		n = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	4619      	mov	r1, r3
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7ff fb2a 	bl	800a6dc <move_window>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d11d      	bne.n	800b0ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2be5      	cmp	r3, #229	@ 0xe5
 800b09a:	d004      	beq.n	800b0a6 <dir_alloc+0x50>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d102      	bne.n	800b0ba <dir_alloc+0x64>
 800b0b4:	e00c      	b.n	800b0d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff05 	bl	800aecc <dir_next>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0d7      	beq.n	800b07c <dir_alloc+0x26>
 800b0cc:	e000      	b.n	800b0d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d101      	bne.n	800b0da <dir_alloc+0x84>
 800b0d6:	2307      	movs	r3, #7
 800b0d8:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	331a      	adds	r3, #26
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f842 	bl	800a17c <ld_word>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d109      	bne.n	800b118 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3314      	adds	r3, #20
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff f837 	bl	800a17c <ld_word>
 800b10e:	4603      	mov	r3, r0
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	331a      	adds	r3, #26
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	b292      	uxth	r2, r2
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff f85a 	bl	800a1f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d109      	bne.n	800b15a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f103 0214 	add.w	r2, r3, #20
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	0c1b      	lsrs	r3, r3, #16
 800b150:	b29b      	uxth	r3, r3
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f7ff f84c 	bl	800a1f2 <st_word>
	}
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b086      	sub	sp, #24
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b170:	2100      	movs	r1, #0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff fe2f 	bl	800add6 <dir_sdi>
 800b178:	4603      	mov	r3, r0
 800b17a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <dir_find+0x24>
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	e03e      	b.n	800b204 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6938      	ldr	r0, [r7, #16]
 800b18e:	f7ff faa5 	bl	800a6dc <move_window>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d12f      	bne.n	800b1fc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <dir_find+0x4e>
 800b1aa:	2304      	movs	r3, #4
 800b1ac:	75fb      	strb	r3, [r7, #23]
 800b1ae:	e028      	b.n	800b202 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	330b      	adds	r3, #11
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	330b      	adds	r3, #11
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <dir_find+0x86>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a18      	ldr	r0, [r3, #32]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3324      	adds	r3, #36	@ 0x24
 800b1da:	220b      	movs	r2, #11
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f7ff f88b 	bl	800a2f8 <mem_cmp>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00b      	beq.n	800b200 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe6e 	bl	800aecc <dir_next>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0c5      	beq.n	800b186 <dir_find+0x24>
 800b1fa:	e002      	b.n	800b202 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b1fc:	bf00      	nop
 800b1fe:	e000      	b.n	800b202 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b200:	bf00      	nop

	return res;
 800b202:	7dfb      	ldrb	r3, [r7, #23]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b21a:	2101      	movs	r1, #1
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff ff1a 	bl	800b056 <dir_alloc>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11c      	bne.n	800b266 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	4619      	mov	r1, r3
 800b232:	68b8      	ldr	r0, [r7, #8]
 800b234:	f7ff fa52 	bl	800a6dc <move_window>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d111      	bne.n	800b266 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	2220      	movs	r2, #32
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff f839 	bl	800a2c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a18      	ldr	r0, [r3, #32]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3324      	adds	r3, #36	@ 0x24
 800b258:	220b      	movs	r2, #11
 800b25a:	4619      	mov	r1, r3
 800b25c:	f7ff f810 	bl	800a280 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2201      	movs	r2, #1
 800b264:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3324      	adds	r3, #36	@ 0x24
 800b284:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b286:	220b      	movs	r2, #11
 800b288:	2120      	movs	r1, #32
 800b28a:	68b8      	ldr	r0, [r7, #8]
 800b28c:	f7ff f819 	bl	800a2c2 <mem_set>
	si = i = 0; ni = 8;
 800b290:	2300      	movs	r3, #0
 800b292:	613b      	str	r3, [r7, #16]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	2308      	movs	r3, #8
 800b29a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	61fa      	str	r2, [r7, #28]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b2aa:	7efb      	ldrb	r3, [r7, #27]
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	d94e      	bls.n	800b34e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b2b0:	7efb      	ldrb	r3, [r7, #27]
 800b2b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2b4:	d006      	beq.n	800b2c4 <create_name+0x54>
 800b2b6:	7efb      	ldrb	r3, [r7, #27]
 800b2b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2ba:	d110      	bne.n	800b2de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2bc:	e002      	b.n	800b2c4 <create_name+0x54>
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2ce:	d0f6      	beq.n	800b2be <create_name+0x4e>
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2da:	d0f0      	beq.n	800b2be <create_name+0x4e>
			break;
 800b2dc:	e038      	b.n	800b350 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b2de:	7efb      	ldrb	r3, [r7, #27]
 800b2e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2e2:	d003      	beq.n	800b2ec <create_name+0x7c>
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d30c      	bcc.n	800b306 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	2b0b      	cmp	r3, #11
 800b2f0:	d002      	beq.n	800b2f8 <create_name+0x88>
 800b2f2:	7efb      	ldrb	r3, [r7, #27]
 800b2f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2f6:	d001      	beq.n	800b2fc <create_name+0x8c>
 800b2f8:	2306      	movs	r3, #6
 800b2fa:	e044      	b.n	800b386 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	613b      	str	r3, [r7, #16]
 800b300:	230b      	movs	r3, #11
 800b302:	617b      	str	r3, [r7, #20]
			continue;
 800b304:	e022      	b.n	800b34c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b306:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da04      	bge.n	800b318 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b30e:	7efb      	ldrb	r3, [r7, #27]
 800b310:	3b80      	subs	r3, #128	@ 0x80
 800b312:	4a1f      	ldr	r2, [pc, #124]	@ (800b390 <create_name+0x120>)
 800b314:	5cd3      	ldrb	r3, [r2, r3]
 800b316:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b318:	7efb      	ldrb	r3, [r7, #27]
 800b31a:	4619      	mov	r1, r3
 800b31c:	481d      	ldr	r0, [pc, #116]	@ (800b394 <create_name+0x124>)
 800b31e:	f7ff f812 	bl	800a346 <chk_chr>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <create_name+0xbc>
 800b328:	2306      	movs	r3, #6
 800b32a:	e02c      	b.n	800b386 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b32c:	7efb      	ldrb	r3, [r7, #27]
 800b32e:	2b60      	cmp	r3, #96	@ 0x60
 800b330:	d905      	bls.n	800b33e <create_name+0xce>
 800b332:	7efb      	ldrb	r3, [r7, #27]
 800b334:	2b7a      	cmp	r3, #122	@ 0x7a
 800b336:	d802      	bhi.n	800b33e <create_name+0xce>
 800b338:	7efb      	ldrb	r3, [r7, #27]
 800b33a:	3b20      	subs	r3, #32
 800b33c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	613a      	str	r2, [r7, #16]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	4413      	add	r3, r2
 800b348:	7efa      	ldrb	r2, [r7, #27]
 800b34a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b34c:	e7a6      	b.n	800b29c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b34e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	441a      	add	r2, r3
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <create_name+0xf4>
 800b360:	2306      	movs	r3, #6
 800b362:	e010      	b.n	800b386 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2be5      	cmp	r3, #229	@ 0xe5
 800b36a:	d102      	bne.n	800b372 <create_name+0x102>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2205      	movs	r2, #5
 800b370:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b372:	7efb      	ldrb	r3, [r7, #27]
 800b374:	2b20      	cmp	r3, #32
 800b376:	d801      	bhi.n	800b37c <create_name+0x10c>
 800b378:	2204      	movs	r2, #4
 800b37a:	e000      	b.n	800b37e <create_name+0x10e>
 800b37c:	2200      	movs	r2, #0
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	330b      	adds	r3, #11
 800b382:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b384:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b386:	4618      	mov	r0, r3
 800b388:	3720      	adds	r7, #32
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	0800d0e0 	.word	0x0800d0e0
 800b394:	0800ce18 	.word	0x0800ce18

0800b398 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b3ac:	e002      	b.n	800b3b4 <follow_path+0x1c>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	603b      	str	r3, [r7, #0]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b3ba:	d0f8      	beq.n	800b3ae <follow_path+0x16>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b3c2:	d0f4      	beq.n	800b3ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b1f      	cmp	r3, #31
 800b3d0:	d80a      	bhi.n	800b3e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2280      	movs	r2, #128	@ 0x80
 800b3d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b3da:	2100      	movs	r1, #0
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff fcfa 	bl	800add6 <dir_sdi>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	75fb      	strb	r3, [r7, #23]
 800b3e6:	e043      	b.n	800b470 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff ff3f 	bl	800b270 <create_name>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d134      	bne.n	800b466 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff feb0 	bl	800b162 <dir_find>
 800b402:	4603      	mov	r3, r0
 800b404:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b40c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00a      	beq.n	800b42a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	2b04      	cmp	r3, #4
 800b418:	d127      	bne.n	800b46a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	f003 0304 	and.w	r3, r3, #4
 800b420:	2b00      	cmp	r3, #0
 800b422:	d122      	bne.n	800b46a <follow_path+0xd2>
 800b424:	2305      	movs	r3, #5
 800b426:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b428:	e01f      	b.n	800b46a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b42a:	7afb      	ldrb	r3, [r7, #11]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11c      	bne.n	800b46e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	799b      	ldrb	r3, [r3, #6]
 800b438:	f003 0310 	and.w	r3, r3, #16
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b440:	2305      	movs	r3, #5
 800b442:	75fb      	strb	r3, [r7, #23]
 800b444:	e014      	b.n	800b470 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b454:	4413      	add	r3, r2
 800b456:	4619      	mov	r1, r3
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff fe43 	bl	800b0e4 <ld_clust>
 800b45e:	4602      	mov	r2, r0
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b464:	e7c0      	b.n	800b3e8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b466:	bf00      	nop
 800b468:	e002      	b.n	800b470 <follow_path+0xd8>
				break;
 800b46a:	bf00      	nop
 800b46c:	e000      	b.n	800b470 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b46e:	bf00      	nop
			}
		}
	}

	return res;
 800b470:	7dfb      	ldrb	r3, [r7, #23]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b087      	sub	sp, #28
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b482:	f04f 33ff 	mov.w	r3, #4294967295
 800b486:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d031      	beq.n	800b4f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e002      	b.n	800b49e <get_ldnumber+0x24>
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	3301      	adds	r3, #1
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	d903      	bls.n	800b4ae <get_ldnumber+0x34>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800b4ac:	d1f4      	bne.n	800b498 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800b4b4:	d11c      	bne.n	800b4f0 <get_ldnumber+0x76>
			tp = *path;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	60fa      	str	r2, [r7, #12]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	3b30      	subs	r3, #48	@ 0x30
 800b4c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b09      	cmp	r3, #9
 800b4cc:	d80e      	bhi.n	800b4ec <get_ldnumber+0x72>
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d10a      	bne.n	800b4ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d107      	bne.n	800b4ec <get_ldnumber+0x72>
					vol = (int)i;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	617b      	str	r3, [r7, #20]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	e002      	b.n	800b4f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b4f4:	693b      	ldr	r3, [r7, #16]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
	...

0800b504 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	70da      	strb	r2, [r3, #3]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f04f 32ff 	mov.w	r2, #4294967295
 800b51a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff f8dc 	bl	800a6dc <move_window>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <check_fs+0x2a>
 800b52a:	2304      	movs	r3, #4
 800b52c:	e038      	b.n	800b5a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3330      	adds	r3, #48	@ 0x30
 800b532:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fe20 	bl	800a17c <ld_word>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b544:	429a      	cmp	r2, r3
 800b546:	d001      	beq.n	800b54c <check_fs+0x48>
 800b548:	2303      	movs	r3, #3
 800b54a:	e029      	b.n	800b5a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b552:	2be9      	cmp	r3, #233	@ 0xe9
 800b554:	d009      	beq.n	800b56a <check_fs+0x66>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b55c:	2beb      	cmp	r3, #235	@ 0xeb
 800b55e:	d11e      	bne.n	800b59e <check_fs+0x9a>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b566:	2b90      	cmp	r3, #144	@ 0x90
 800b568:	d119      	bne.n	800b59e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	3330      	adds	r3, #48	@ 0x30
 800b56e:	3336      	adds	r3, #54	@ 0x36
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fe1b 	bl	800a1ac <ld_dword>
 800b576:	4603      	mov	r3, r0
 800b578:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b57c:	4a0a      	ldr	r2, [pc, #40]	@ (800b5a8 <check_fs+0xa4>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d101      	bne.n	800b586 <check_fs+0x82>
 800b582:	2300      	movs	r3, #0
 800b584:	e00c      	b.n	800b5a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3330      	adds	r3, #48	@ 0x30
 800b58a:	3352      	adds	r3, #82	@ 0x52
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fe0d 	bl	800a1ac <ld_dword>
 800b592:	4603      	mov	r3, r0
 800b594:	4a05      	ldr	r2, [pc, #20]	@ (800b5ac <check_fs+0xa8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d101      	bne.n	800b59e <check_fs+0x9a>
 800b59a:	2300      	movs	r3, #0
 800b59c:	e000      	b.n	800b5a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b59e:	2302      	movs	r3, #2
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	00544146 	.word	0x00544146
 800b5ac:	33544146 	.word	0x33544146

0800b5b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b096      	sub	sp, #88	@ 0x58
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7ff ff58 	bl	800b47a <get_ldnumber>
 800b5ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da01      	bge.n	800b5d6 <find_volume+0x26>
 800b5d2:	230b      	movs	r3, #11
 800b5d4:	e22d      	b.n	800ba32 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b5d6:	4aa1      	ldr	r2, [pc, #644]	@ (800b85c <find_volume+0x2ac>)
 800b5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5de:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <find_volume+0x3a>
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	e223      	b.n	800ba32 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	f023 0301 	bic.w	r3, r3, #1
 800b5f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01a      	beq.n	800b636 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	785b      	ldrb	r3, [r3, #1]
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe fd19 	bl	800a03c <disk_status>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b610:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10c      	bne.n	800b636 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d007      	beq.n	800b632 <find_volume+0x82>
 800b622:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b626:	f003 0304 	and.w	r3, r3, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b62e:	230a      	movs	r3, #10
 800b630:	e1ff      	b.n	800ba32 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b632:	2300      	movs	r3, #0
 800b634:	e1fd      	b.n	800ba32 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fd11 	bl	800a070 <disk_initialize>
 800b64e:	4603      	mov	r3, r0
 800b650:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b654:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b660:	2303      	movs	r3, #3
 800b662:	e1e6      	b.n	800ba32 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d007      	beq.n	800b67a <find_volume+0xca>
 800b66a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b676:	230a      	movs	r3, #10
 800b678:	e1db      	b.n	800ba32 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b67e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b680:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b682:	f7ff ff3f 	bl	800b504 <check_fs>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b68c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b690:	2b02      	cmp	r3, #2
 800b692:	d149      	bne.n	800b728 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b694:	2300      	movs	r3, #0
 800b696:	643b      	str	r3, [r7, #64]	@ 0x40
 800b698:	e01e      	b.n	800b6d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b6a8:	4413      	add	r3, r2
 800b6aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d006      	beq.n	800b6c4 <find_volume+0x114>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe fd76 	bl	800a1ac <ld_dword>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	e000      	b.n	800b6c6 <find_volume+0x116>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	3358      	adds	r3, #88	@ 0x58
 800b6cc:	443b      	add	r3, r7
 800b6ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b6d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d9dd      	bls.n	800b69a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b6de:	2300      	movs	r3, #0
 800b6e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b6e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <find_volume+0x13e>
 800b6e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	3358      	adds	r3, #88	@ 0x58
 800b6f4:	443b      	add	r3, r7
 800b6f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b6fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <find_volume+0x15e>
 800b702:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b704:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b706:	f7ff fefd 	bl	800b504 <check_fs>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e000      	b.n	800b710 <find_volume+0x160>
 800b70e:	2303      	movs	r3, #3
 800b710:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d905      	bls.n	800b728 <find_volume+0x178>
 800b71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b71e:	3301      	adds	r3, #1
 800b720:	643b      	str	r3, [r7, #64]	@ 0x40
 800b722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b724:	2b03      	cmp	r3, #3
 800b726:	d9e2      	bls.n	800b6ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b728:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d101      	bne.n	800b734 <find_volume+0x184>
 800b730:	2301      	movs	r3, #1
 800b732:	e17e      	b.n	800ba32 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b734:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d901      	bls.n	800b740 <find_volume+0x190>
 800b73c:	230d      	movs	r3, #13
 800b73e:	e178      	b.n	800ba32 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	3330      	adds	r3, #48	@ 0x30
 800b744:	330b      	adds	r3, #11
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fd18 	bl	800a17c <ld_word>
 800b74c:	4603      	mov	r3, r0
 800b74e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b752:	d001      	beq.n	800b758 <find_volume+0x1a8>
 800b754:	230d      	movs	r3, #13
 800b756:	e16c      	b.n	800ba32 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75a:	3330      	adds	r3, #48	@ 0x30
 800b75c:	3316      	adds	r3, #22
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fd0c 	bl	800a17c <ld_word>
 800b764:	4603      	mov	r3, r0
 800b766:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d106      	bne.n	800b77c <find_volume+0x1cc>
 800b76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b770:	3330      	adds	r3, #48	@ 0x30
 800b772:	3324      	adds	r3, #36	@ 0x24
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fd19 	bl	800a1ac <ld_dword>
 800b77a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b780:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b784:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	789b      	ldrb	r3, [r3, #2]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d005      	beq.n	800b7a0 <find_volume+0x1f0>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	789b      	ldrb	r3, [r3, #2]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d001      	beq.n	800b7a0 <find_volume+0x1f0>
 800b79c:	230d      	movs	r3, #13
 800b79e:	e148      	b.n	800ba32 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a2:	789b      	ldrb	r3, [r3, #2]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7bc:	895b      	ldrh	r3, [r3, #10]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d008      	beq.n	800b7d4 <find_volume+0x224>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c4:	895b      	ldrh	r3, [r3, #10]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	895b      	ldrh	r3, [r3, #10]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <find_volume+0x228>
 800b7d4:	230d      	movs	r3, #13
 800b7d6:	e12c      	b.n	800ba32 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	3330      	adds	r3, #48	@ 0x30
 800b7dc:	3311      	adds	r3, #17
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fccc 	bl	800a17c <ld_word>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ee:	891b      	ldrh	r3, [r3, #8]
 800b7f0:	f003 030f 	and.w	r3, r3, #15
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <find_volume+0x24e>
 800b7fa:	230d      	movs	r3, #13
 800b7fc:	e119      	b.n	800ba32 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b800:	3330      	adds	r3, #48	@ 0x30
 800b802:	3313      	adds	r3, #19
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fcb9 	bl	800a17c <ld_word>
 800b80a:	4603      	mov	r3, r0
 800b80c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b80e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b810:	2b00      	cmp	r3, #0
 800b812:	d106      	bne.n	800b822 <find_volume+0x272>
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	3330      	adds	r3, #48	@ 0x30
 800b818:	3320      	adds	r3, #32
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe fcc6 	bl	800a1ac <ld_dword>
 800b820:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	3330      	adds	r3, #48	@ 0x30
 800b826:	330e      	adds	r3, #14
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe fca7 	bl	800a17c <ld_word>
 800b82e:	4603      	mov	r3, r0
 800b830:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b832:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <find_volume+0x28c>
 800b838:	230d      	movs	r3, #13
 800b83a:	e0fa      	b.n	800ba32 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b83c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b840:	4413      	add	r3, r2
 800b842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b844:	8912      	ldrh	r2, [r2, #8]
 800b846:	0912      	lsrs	r2, r2, #4
 800b848:	b292      	uxth	r2, r2
 800b84a:	4413      	add	r3, r2
 800b84c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b84e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	429a      	cmp	r2, r3
 800b854:	d204      	bcs.n	800b860 <find_volume+0x2b0>
 800b856:	230d      	movs	r3, #13
 800b858:	e0eb      	b.n	800ba32 <find_volume+0x482>
 800b85a:	bf00      	nop
 800b85c:	24000654 	.word	0x24000654
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b868:	8952      	ldrh	r2, [r2, #10]
 800b86a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b86e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <find_volume+0x2ca>
 800b876:	230d      	movs	r3, #13
 800b878:	e0db      	b.n	800ba32 <find_volume+0x482>
		fmt = FS_FAT32;
 800b87a:	2303      	movs	r3, #3
 800b87c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b886:	4293      	cmp	r3, r2
 800b888:	d802      	bhi.n	800b890 <find_volume+0x2e0>
 800b88a:	2302      	movs	r3, #2
 800b88c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b896:	4293      	cmp	r3, r2
 800b898:	d802      	bhi.n	800b8a0 <find_volume+0x2f0>
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	1c9a      	adds	r2, r3, #2
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b8ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b8b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8b2:	441a      	add	r2, r3
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b8b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8bc:	441a      	add	r2, r3
 800b8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b8c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d11e      	bne.n	800b908 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8cc:	3330      	adds	r3, #48	@ 0x30
 800b8ce:	332a      	adds	r3, #42	@ 0x2a
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fc53 	bl	800a17c <ld_word>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <find_volume+0x330>
 800b8dc:	230d      	movs	r3, #13
 800b8de:	e0a8      	b.n	800ba32 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e2:	891b      	ldrh	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <find_volume+0x33c>
 800b8e8:	230d      	movs	r3, #13
 800b8ea:	e0a2      	b.n	800ba32 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ee:	3330      	adds	r3, #48	@ 0x30
 800b8f0:	332c      	adds	r3, #44	@ 0x2c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fc5a 	bl	800a1ac <ld_dword>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	647b      	str	r3, [r7, #68]	@ 0x44
 800b906:	e01f      	b.n	800b948 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90a:	891b      	ldrh	r3, [r3, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <find_volume+0x364>
 800b910:	230d      	movs	r3, #13
 800b912:	e08e      	b.n	800ba32 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b916:	6a1a      	ldr	r2, [r3, #32]
 800b918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b91a:	441a      	add	r2, r3
 800b91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b91e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b920:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b924:	2b02      	cmp	r3, #2
 800b926:	d103      	bne.n	800b930 <find_volume+0x380>
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	e00a      	b.n	800b946 <find_volume+0x396>
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	695a      	ldr	r2, [r3, #20]
 800b934:	4613      	mov	r3, r2
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	4413      	add	r3, r2
 800b93a:	085a      	lsrs	r2, r3, #1
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b946:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94a:	699a      	ldr	r2, [r3, #24]
 800b94c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b94e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b952:	0a5b      	lsrs	r3, r3, #9
 800b954:	429a      	cmp	r2, r3
 800b956:	d201      	bcs.n	800b95c <find_volume+0x3ac>
 800b958:	230d      	movs	r3, #13
 800b95a:	e06a      	b.n	800ba32 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295
 800b962:	611a      	str	r2, [r3, #16]
 800b964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b966:	691a      	ldr	r2, [r3, #16]
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96e:	2280      	movs	r2, #128	@ 0x80
 800b970:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b972:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b976:	2b03      	cmp	r3, #3
 800b978:	d149      	bne.n	800ba0e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97c:	3330      	adds	r3, #48	@ 0x30
 800b97e:	3330      	adds	r3, #48	@ 0x30
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fbfb 	bl	800a17c <ld_word>
 800b986:	4603      	mov	r3, r0
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d140      	bne.n	800ba0e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b98e:	3301      	adds	r3, #1
 800b990:	4619      	mov	r1, r3
 800b992:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b994:	f7fe fea2 	bl	800a6dc <move_window>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d137      	bne.n	800ba0e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	3330      	adds	r3, #48	@ 0x30
 800b9a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fe fbe5 	bl	800a17c <ld_word>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d127      	bne.n	800ba0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c0:	3330      	adds	r3, #48	@ 0x30
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fbf2 	bl	800a1ac <ld_dword>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	@ (800ba3c <find_volume+0x48c>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d11e      	bne.n	800ba0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d2:	3330      	adds	r3, #48	@ 0x30
 800b9d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe fbe7 	bl	800a1ac <ld_dword>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	4a17      	ldr	r2, [pc, #92]	@ (800ba40 <find_volume+0x490>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d113      	bne.n	800ba0e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e8:	3330      	adds	r3, #48	@ 0x30
 800b9ea:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fbdc 	bl	800a1ac <ld_dword>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	3330      	adds	r3, #48	@ 0x30
 800b9fe:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fbd2 	bl	800a1ac <ld_dword>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba10:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ba14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <find_volume+0x494>)
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	4b09      	ldr	r3, [pc, #36]	@ (800ba44 <find_volume+0x494>)
 800ba20:	801a      	strh	r2, [r3, #0]
 800ba22:	4b08      	ldr	r3, [pc, #32]	@ (800ba44 <find_volume+0x494>)
 800ba24:	881a      	ldrh	r2, [r3, #0]
 800ba26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ba2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba2c:	f7fe fdee 	bl	800a60c <clear_lock>
#endif
	return FR_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3758      	adds	r7, #88	@ 0x58
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	41615252 	.word	0x41615252
 800ba40:	61417272 	.word	0x61417272
 800ba44:	24000658 	.word	0x24000658

0800ba48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba52:	2309      	movs	r3, #9
 800ba54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01c      	beq.n	800ba96 <validate+0x4e>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d018      	beq.n	800ba96 <validate+0x4e>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d013      	beq.n	800ba96 <validate+0x4e>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	889a      	ldrh	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	88db      	ldrh	r3, [r3, #6]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d10c      	bne.n	800ba96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fada 	bl	800a03c <disk_status>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <validate+0x4e>
			res = FR_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <validate+0x5a>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	e000      	b.n	800baa4 <validate+0x5c>
 800baa2:	2300      	movs	r3, #0
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	6013      	str	r3, [r2, #0]
	return res;
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bac6:	f107 0310 	add.w	r3, r7, #16
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fcd5 	bl	800b47a <get_ldnumber>
 800bad0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	da01      	bge.n	800badc <f_mount+0x28>
 800bad8:	230b      	movs	r3, #11
 800bada:	e02b      	b.n	800bb34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800badc:	4a17      	ldr	r2, [pc, #92]	@ (800bb3c <f_mount+0x88>)
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800baec:	69b8      	ldr	r0, [r7, #24]
 800baee:	f7fe fd8d 	bl	800a60c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	490d      	ldr	r1, [pc, #52]	@ (800bb3c <f_mount+0x88>)
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <f_mount+0x66>
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d001      	beq.n	800bb1e <f_mount+0x6a>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e00a      	b.n	800bb34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bb1e:	f107 010c 	add.w	r1, r7, #12
 800bb22:	f107 0308 	add.w	r3, r7, #8
 800bb26:	2200      	movs	r2, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fd41 	bl	800b5b0 <find_volume>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3720      	adds	r7, #32
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	24000654 	.word	0x24000654

0800bb40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b098      	sub	sp, #96	@ 0x60
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <f_open+0x18>
 800bb54:	2309      	movs	r3, #9
 800bb56:	e1a9      	b.n	800beac <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bb60:	79fa      	ldrb	r2, [r7, #7]
 800bb62:	f107 0110 	add.w	r1, r7, #16
 800bb66:	f107 0308 	add.w	r3, r7, #8
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff fd20 	bl	800b5b0 <find_volume>
 800bb70:	4603      	mov	r3, r0
 800bb72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bb76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f040 818d 	bne.w	800be9a <f_open+0x35a>
		dj.obj.fs = fs;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	f107 0314 	add.w	r3, r7, #20
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff fc03 	bl	800b398 <follow_path>
 800bb92:	4603      	mov	r3, r0
 800bb94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bb98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d118      	bne.n	800bbd2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bba0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da03      	bge.n	800bbb2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bbaa:	2306      	movs	r3, #6
 800bbac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bbb0:	e00f      	b.n	800bbd2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	bf8c      	ite	hi
 800bbb8:	2301      	movhi	r3, #1
 800bbba:	2300      	movls	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f107 0314 	add.w	r3, r7, #20
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe fbd8 	bl	800a37c <chk_lock>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	f003 031c 	and.w	r3, r3, #28
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d07f      	beq.n	800bcdc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bbdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d017      	beq.n	800bc14 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bbe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	d10e      	bne.n	800bc0a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bbec:	f7fe fc22 	bl	800a434 <enq_lock>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d006      	beq.n	800bc04 <f_open+0xc4>
 800bbf6:	f107 0314 	add.w	r3, r7, #20
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fb06 	bl	800b20c <dir_register>
 800bc00:	4603      	mov	r3, r0
 800bc02:	e000      	b.n	800bc06 <f_open+0xc6>
 800bc04:	2312      	movs	r3, #18
 800bc06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	71fb      	strb	r3, [r7, #7]
 800bc12:	e010      	b.n	800bc36 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bc14:	7ebb      	ldrb	r3, [r7, #26]
 800bc16:	f003 0311 	and.w	r3, r3, #17
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <f_open+0xe6>
					res = FR_DENIED;
 800bc1e:	2307      	movs	r3, #7
 800bc20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bc24:	e007      	b.n	800bc36 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <f_open+0xf6>
 800bc30:	2308      	movs	r3, #8
 800bc32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bc36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d168      	bne.n	800bd10 <f_open+0x1d0>
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	f003 0308 	and.w	r3, r3, #8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d063      	beq.n	800bd10 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bc48:	f7fd ffba 	bl	8009bc0 <get_fattime>
 800bc4c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc50:	330e      	adds	r3, #14
 800bc52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7fe fae7 	bl	800a228 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc5c:	3316      	adds	r3, #22
 800bc5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fae1 	bl	800a228 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc68:	330b      	adds	r3, #11
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc72:	4611      	mov	r1, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fa35 	bl	800b0e4 <ld_clust>
 800bc7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bc80:	2200      	movs	r2, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fa4d 	bl	800b122 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bc88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8a:	331c      	adds	r3, #28
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fe faca 	bl	800a228 <st_dword>
					fs->wflag = 1;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2201      	movs	r2, #1
 800bc98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bc9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d037      	beq.n	800bd10 <f_open+0x1d0>
						dw = fs->winsect;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bca6:	f107 0314 	add.w	r3, r7, #20
 800bcaa:	2200      	movs	r2, #0
 800bcac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe ff60 	bl	800ab74 <remove_chain>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bcba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d126      	bne.n	800bd10 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fd08 	bl	800a6dc <move_window>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcd6:	3a01      	subs	r2, #1
 800bcd8:	60da      	str	r2, [r3, #12]
 800bcda:	e019      	b.n	800bd10 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bcdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d115      	bne.n	800bd10 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bce4:	7ebb      	ldrb	r3, [r7, #26]
 800bce6:	f003 0310 	and.w	r3, r3, #16
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800bcee:	2304      	movs	r3, #4
 800bcf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bcf4:	e00c      	b.n	800bd10 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	f003 0302 	and.w	r3, r3, #2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d007      	beq.n	800bd10 <f_open+0x1d0>
 800bd00:	7ebb      	ldrb	r3, [r7, #26]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <f_open+0x1d0>
						res = FR_DENIED;
 800bd0a:	2307      	movs	r3, #7
 800bd0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bd10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d126      	bne.n	800bd66 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bd32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	bf8c      	ite	hi
 800bd3e:	2301      	movhi	r3, #1
 800bd40:	2300      	movls	r3, #0
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	461a      	mov	r2, r3
 800bd46:	f107 0314 	add.w	r3, r7, #20
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fb93 	bl	800a478 <inc_lock>
 800bd52:	4602      	mov	r2, r0
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <f_open+0x226>
 800bd60:	2302      	movs	r3, #2
 800bd62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bd66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f040 8095 	bne.w	800be9a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff f9b4 	bl	800b0e4 <ld_clust>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd84:	331c      	adds	r3, #28
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fa10 	bl	800a1ac <ld_dword>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	88da      	ldrh	r2, [r3, #6]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	79fa      	ldrb	r2, [r7, #7]
 800bdaa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3330      	adds	r3, #48	@ 0x30
 800bdc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fa7a 	bl	800a2c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bdce:	79fb      	ldrb	r3, [r7, #7]
 800bdd0:	f003 0320 	and.w	r3, r3, #32
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d060      	beq.n	800be9a <f_open+0x35a>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d05c      	beq.n	800be9a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	68da      	ldr	r2, [r3, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	895b      	ldrh	r3, [r3, #10]
 800bdec:	025b      	lsls	r3, r3, #9
 800bdee:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdfc:	e016      	b.n	800be2c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fd25 	bl	800a852 <get_fat>
 800be08:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800be0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d802      	bhi.n	800be16 <f_open+0x2d6>
 800be10:	2302      	movs	r3, #2
 800be12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d102      	bne.n	800be24 <f_open+0x2e4>
 800be1e:	2301      	movs	r3, #1
 800be20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800be2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <f_open+0x2fc>
 800be34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be38:	429a      	cmp	r2, r3
 800be3a:	d8e0      	bhi.n	800bdfe <f_open+0x2be>
				}
				fp->clust = clst;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be40:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800be42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be46:	2b00      	cmp	r3, #0
 800be48:	d127      	bne.n	800be9a <f_open+0x35a>
 800be4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be50:	2b00      	cmp	r3, #0
 800be52:	d022      	beq.n	800be9a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fcdb 	bl	800a814 <clust2sect>
 800be5e:	6478      	str	r0, [r7, #68]	@ 0x44
 800be60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be62:	2b00      	cmp	r3, #0
 800be64:	d103      	bne.n	800be6e <f_open+0x32e>
						res = FR_INT_ERR;
 800be66:	2302      	movs	r3, #2
 800be68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800be6c:	e015      	b.n	800be9a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800be6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be70:	0a5a      	lsrs	r2, r3, #9
 800be72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be74:	441a      	add	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	7858      	ldrb	r0, [r3, #1]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6a1a      	ldr	r2, [r3, #32]
 800be88:	2301      	movs	r3, #1
 800be8a:	f7fe f919 	bl	800a0c0 <disk_read>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <f_open+0x35a>
 800be94:	2301      	movs	r3, #1
 800be96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800be9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <f_open+0x368>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800beac:	4618      	mov	r0, r3
 800beae:	3760      	adds	r7, #96	@ 0x60
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08e      	sub	sp, #56	@ 0x38
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f107 0214 	add.w	r2, r7, #20
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fdb7 	bl	800ba48 <validate>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d107      	bne.n	800bef8 <f_read+0x44>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	7d5b      	ldrb	r3, [r3, #21]
 800beec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bef0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <f_read+0x4a>
 800bef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800befc:	e115      	b.n	800c12a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	7d1b      	ldrb	r3, [r3, #20]
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <f_read+0x5a>
 800bf0a:	2307      	movs	r3, #7
 800bf0c:	e10d      	b.n	800c12a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	68da      	ldr	r2, [r3, #12]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	f240 80fe 	bls.w	800c120 <f_read+0x26c>
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bf28:	e0fa      	b.n	800c120 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f040 80c6 	bne.w	800c0c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	0a5b      	lsrs	r3, r3, #9
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	8952      	ldrh	r2, [r2, #10]
 800bf42:	3a01      	subs	r2, #1
 800bf44:	4013      	ands	r3, r2
 800bf46:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d12f      	bne.n	800bfae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf5c:	e013      	b.n	800bf86 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d007      	beq.n	800bf76 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f7fe fefe 	bl	800ad6e <clmt_clust>
 800bf72:	6338      	str	r0, [r7, #48]	@ 0x30
 800bf74:	e007      	b.n	800bf86 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	69db      	ldr	r3, [r3, #28]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4610      	mov	r0, r2
 800bf80:	f7fe fc67 	bl	800a852 <get_fat>
 800bf84:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d804      	bhi.n	800bf96 <f_read+0xe2>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	755a      	strb	r2, [r3, #21]
 800bf92:	2302      	movs	r3, #2
 800bf94:	e0c9      	b.n	800c12a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf9c:	d104      	bne.n	800bfa8 <f_read+0xf4>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	755a      	strb	r2, [r3, #21]
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e0c0      	b.n	800c12a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	f7fe fc2c 	bl	800a814 <clust2sect>
 800bfbc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d104      	bne.n	800bfce <f_read+0x11a>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	755a      	strb	r2, [r3, #21]
 800bfca:	2302      	movs	r3, #2
 800bfcc:	e0ad      	b.n	800c12a <f_read+0x276>
			sect += csect;
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	0a5b      	lsrs	r3, r3, #9
 800bfda:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d039      	beq.n	800c056 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe6:	4413      	add	r3, r2
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	8952      	ldrh	r2, [r2, #10]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d905      	bls.n	800bffc <f_read+0x148>
					cc = fs->csize - csect;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	895b      	ldrh	r3, [r3, #10]
 800bff4:	461a      	mov	r2, r3
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	7858      	ldrb	r0, [r3, #1]
 800c000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c006:	f7fe f85b 	bl	800a0c0 <disk_read>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d004      	beq.n	800c01a <f_read+0x166>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2201      	movs	r2, #1
 800c014:	755a      	strb	r2, [r3, #21]
 800c016:	2301      	movs	r3, #1
 800c018:	e087      	b.n	800c12a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7d1b      	ldrb	r3, [r3, #20]
 800c01e:	b25b      	sxtb	r3, r3
 800c020:	2b00      	cmp	r3, #0
 800c022:	da14      	bge.n	800c04e <f_read+0x19a>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a1a      	ldr	r2, [r3, #32]
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c02e:	429a      	cmp	r2, r3
 800c030:	d90d      	bls.n	800c04e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a1a      	ldr	r2, [r3, #32]
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	025b      	lsls	r3, r3, #9
 800c03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c03e:	18d0      	adds	r0, r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	3330      	adds	r3, #48	@ 0x30
 800c044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c048:	4619      	mov	r1, r3
 800c04a:	f7fe f919 	bl	800a280 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c050:	025b      	lsls	r3, r3, #9
 800c052:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c054:	e050      	b.n	800c0f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d02e      	beq.n	800c0be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	7d1b      	ldrb	r3, [r3, #20]
 800c064:	b25b      	sxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	da18      	bge.n	800c09c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	7858      	ldrb	r0, [r3, #1]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a1a      	ldr	r2, [r3, #32]
 800c078:	2301      	movs	r3, #1
 800c07a:	f7fe f841 	bl	800a100 <disk_write>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <f_read+0x1da>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	755a      	strb	r2, [r3, #21]
 800c08a:	2301      	movs	r3, #1
 800c08c:	e04d      	b.n	800c12a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	7d1b      	ldrb	r3, [r3, #20]
 800c092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c096:	b2da      	uxtb	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	7858      	ldrb	r0, [r3, #1]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	f7fe f809 	bl	800a0c0 <disk_read>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <f_read+0x20a>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	755a      	strb	r2, [r3, #21]
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e035      	b.n	800c12a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0cc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d901      	bls.n	800c0de <f_read+0x22a>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ec:	4413      	add	r3, r2
 800c0ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0f4:	f7fe f8c4 	bl	800a280 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fc:	4413      	add	r3, r2
 800c0fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	699a      	ldr	r2, [r3, #24]
 800c104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c106:	441a      	add	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	619a      	str	r2, [r3, #24]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c112:	441a      	add	r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f47f af01 	bne.w	800bf2a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3738      	adds	r7, #56	@ 0x38
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b08c      	sub	sp, #48	@ 0x30
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f107 0210 	add.w	r2, r7, #16
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fc78 	bl	800ba48 <validate>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c15e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c162:	2b00      	cmp	r3, #0
 800c164:	d107      	bne.n	800c176 <f_write+0x44>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7d5b      	ldrb	r3, [r3, #21]
 800c16a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c16e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <f_write+0x4a>
 800c176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c17a:	e14b      	b.n	800c414 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <f_write+0x5a>
 800c188:	2307      	movs	r3, #7
 800c18a:	e143      	b.n	800c414 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	699a      	ldr	r2, [r3, #24]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	441a      	add	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	429a      	cmp	r2, r3
 800c19a:	f080 812d 	bcs.w	800c3f8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c1a6:	e127      	b.n	800c3f8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f040 80e3 	bne.w	800c37c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	0a5b      	lsrs	r3, r3, #9
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	8952      	ldrh	r2, [r2, #10]
 800c1c0:	3a01      	subs	r2, #1
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d143      	bne.n	800c254 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10c      	bne.n	800c1ee <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11a      	bne.n	800c216 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe fd2a 	bl	800ac3e <create_chain>
 800c1ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c1ec:	e013      	b.n	800c216 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d007      	beq.n	800c206 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7fe fdb6 	bl	800ad6e <clmt_clust>
 800c202:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c204:	e007      	b.n	800c216 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	4619      	mov	r1, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	f7fe fd15 	bl	800ac3e <create_chain>
 800c214:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 80f2 	beq.w	800c402 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c220:	2b01      	cmp	r3, #1
 800c222:	d104      	bne.n	800c22e <f_write+0xfc>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2202      	movs	r2, #2
 800c228:	755a      	strb	r2, [r3, #21]
 800c22a:	2302      	movs	r3, #2
 800c22c:	e0f2      	b.n	800c414 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d104      	bne.n	800c240 <f_write+0x10e>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	755a      	strb	r2, [r3, #21]
 800c23c:	2301      	movs	r3, #1
 800c23e:	e0e9      	b.n	800c414 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c244:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <f_write+0x122>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c252:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	7d1b      	ldrb	r3, [r3, #20]
 800c258:	b25b      	sxtb	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da18      	bge.n	800c290 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	7858      	ldrb	r0, [r3, #1]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6a1a      	ldr	r2, [r3, #32]
 800c26c:	2301      	movs	r3, #1
 800c26e:	f7fd ff47 	bl	800a100 <disk_write>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <f_write+0x150>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2201      	movs	r2, #1
 800c27c:	755a      	strb	r2, [r3, #21]
 800c27e:	2301      	movs	r3, #1
 800c280:	e0c8      	b.n	800c414 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	7d1b      	ldrb	r3, [r3, #20]
 800c286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7fe fabb 	bl	800a814 <clust2sect>
 800c29e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d104      	bne.n	800c2b0 <f_write+0x17e>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	755a      	strb	r2, [r3, #21]
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e0b1      	b.n	800c414 <f_write+0x2e2>
			sect += csect;
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0a5b      	lsrs	r3, r3, #9
 800c2bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d03c      	beq.n	800c33e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	8952      	ldrh	r2, [r2, #10]
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d905      	bls.n	800c2de <f_write+0x1ac>
					cc = fs->csize - csect;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	7858      	ldrb	r0, [r3, #1]
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	69f9      	ldr	r1, [r7, #28]
 800c2e8:	f7fd ff0a 	bl	800a100 <disk_write>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <f_write+0x1ca>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	755a      	strb	r2, [r3, #21]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e08b      	b.n	800c414 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a1a      	ldr	r2, [r3, #32]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	6a3a      	ldr	r2, [r7, #32]
 800c306:	429a      	cmp	r2, r3
 800c308:	d915      	bls.n	800c336 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6a1a      	ldr	r2, [r3, #32]
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	025b      	lsls	r3, r3, #9
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	4413      	add	r3, r2
 800c31e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c322:	4619      	mov	r1, r3
 800c324:	f7fd ffac 	bl	800a280 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	7d1b      	ldrb	r3, [r3, #20]
 800c32c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c330:	b2da      	uxtb	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c336:	6a3b      	ldr	r3, [r7, #32]
 800c338:	025b      	lsls	r3, r3, #9
 800c33a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c33c:	e03f      	b.n	800c3be <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	429a      	cmp	r2, r3
 800c346:	d016      	beq.n	800c376 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	699a      	ldr	r2, [r3, #24]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c350:	429a      	cmp	r2, r3
 800c352:	d210      	bcs.n	800c376 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	7858      	ldrb	r0, [r3, #1]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c35e:	2301      	movs	r3, #1
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	f7fd fead 	bl	800a0c0 <disk_read>
 800c366:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d004      	beq.n	800c376 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2201      	movs	r2, #1
 800c370:	755a      	strb	r2, [r3, #21]
 800c372:	2301      	movs	r3, #1
 800c374:	e04e      	b.n	800c414 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c384:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c38a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d901      	bls.n	800c396 <f_write+0x264>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	699b      	ldr	r3, [r3, #24]
 800c3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a4:	4413      	add	r3, r2
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a8:	69f9      	ldr	r1, [r7, #28]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7fd ff68 	bl	800a280 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	7d1b      	ldrb	r3, [r3, #20]
 800c3b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c3be:	69fa      	ldr	r2, [r7, #28]
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c2:	4413      	add	r3, r2
 800c3c4:	61fb      	str	r3, [r7, #28]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	699a      	ldr	r2, [r3, #24]
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3cc:	441a      	add	r2, r3
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	619a      	str	r2, [r3, #24]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	bf38      	it	cc
 800c3de:	461a      	movcc	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	60da      	str	r2, [r3, #12]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ea:	441a      	add	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f47f aed4 	bne.w	800c1a8 <f_write+0x76>
 800c400:	e000      	b.n	800c404 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c402:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	7d1b      	ldrb	r3, [r3, #20]
 800c408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3730      	adds	r7, #48	@ 0x30
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f107 0208 	add.w	r2, r7, #8
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff fb0b 	bl	800ba48 <validate>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d168      	bne.n	800c50e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7d1b      	ldrb	r3, [r3, #20]
 800c440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c444:	2b00      	cmp	r3, #0
 800c446:	d062      	beq.n	800c50e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	7d1b      	ldrb	r3, [r3, #20]
 800c44c:	b25b      	sxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da15      	bge.n	800c47e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	7858      	ldrb	r0, [r3, #1]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a1a      	ldr	r2, [r3, #32]
 800c460:	2301      	movs	r3, #1
 800c462:	f7fd fe4d 	bl	800a100 <disk_write>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <f_sync+0x54>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e04f      	b.n	800c510 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7d1b      	ldrb	r3, [r3, #20]
 800c474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c47e:	f7fd fb9f 	bl	8009bc0 <get_fattime>
 800c482:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f7fe f925 	bl	800a6dc <move_window>
 800c492:	4603      	mov	r3, r0
 800c494:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d138      	bne.n	800c50e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	330b      	adds	r3, #11
 800c4a6:	781a      	ldrb	r2, [r3, #0]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	330b      	adds	r3, #11
 800c4ac:	f042 0220 	orr.w	r2, r2, #32
 800c4b0:	b2d2      	uxtb	r2, r2
 800c4b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68f9      	ldr	r1, [r7, #12]
 800c4c0:	f7fe fe2f 	bl	800b122 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f103 021c 	add.w	r2, r3, #28
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	f7fd fea9 	bl	800a228 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3316      	adds	r3, #22
 800c4da:	6939      	ldr	r1, [r7, #16]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fd fea3 	bl	800a228 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3312      	adds	r3, #18
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fd fe82 	bl	800a1f2 <st_word>
					fs->wflag = 1;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe f91e 	bl	800a738 <sync_fs>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7d1b      	ldrb	r3, [r3, #20]
 800c504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ff7b 	bl	800c41c <f_sync>
 800c526:	4603      	mov	r3, r0
 800c528:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d118      	bne.n	800c562 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f107 0208 	add.w	r2, r7, #8
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fa85 	bl	800ba48 <validate>
 800c53e:	4603      	mov	r3, r0
 800c540:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c542:	7bfb      	ldrb	r3, [r7, #15]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10c      	bne.n	800c562 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe f821 	bl	800a594 <dec_lock>
 800c552:	4603      	mov	r3, r0
 800c554:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c556:	7bfb      	ldrb	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	2b0a      	cmp	r3, #10
 800c57c:	d103      	bne.n	800c586 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c57e:	210d      	movs	r1, #13
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fff3 	bl	800c56c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	db25      	blt.n	800c5de <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	60fa      	str	r2, [r7, #12]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	4413      	add	r3, r2
 800c59c:	78fa      	ldrb	r2, [r7, #3]
 800c59e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b3c      	cmp	r3, #60	@ 0x3c
 800c5a4:	dd12      	ble.n	800c5cc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f103 010c 	add.w	r1, r3, #12
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	f107 0308 	add.w	r3, r7, #8
 800c5b6:	f7ff fdbc 	bl	800c132 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d101      	bne.n	800c5c6 <putc_bfd+0x5a>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e001      	b.n	800c5ca <putc_bfd+0x5e>
 800c5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ca:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	609a      	str	r2, [r3, #8]
 800c5dc:	e000      	b.n	800c5e0 <putc_bfd+0x74>
	if (i < 0) return;
 800c5de:	bf00      	nop
}
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b084      	sub	sp, #16
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db16      	blt.n	800c624 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f103 010c 	add.w	r1, r3, #12
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	461a      	mov	r2, r3
 800c606:	f107 030c 	add.w	r3, r7, #12
 800c60a:	f7ff fd92 	bl	800c132 <f_write>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d107      	bne.n	800c624 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d102      	bne.n	800c624 <putc_flush+0x3e>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	e001      	b.n	800c628 <putc_flush+0x42>
	return EOF;
 800c624:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	605a      	str	r2, [r3, #4]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	609a      	str	r2, [r3, #8]
}
 800c64e:	bf00      	nop
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
	...

0800c65c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c65c:	b40e      	push	{r1, r2, r3}
 800c65e:	b580      	push	{r7, lr}
 800c660:	b0a7      	sub	sp, #156	@ 0x9c
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800c666:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c66a:	6879      	ldr	r1, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff ffdf 	bl	800c630 <putc_init>

	va_start(arp, fmt);
 800c672:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800c676:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800c678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800c688:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 81f2 	beq.w	800ca76 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800c692:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c696:	2b25      	cmp	r3, #37	@ 0x25
 800c698:	d008      	beq.n	800c6ac <f_printf+0x50>
			putc_bfd(&pb, c);
 800c69a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800c69e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff ff61 	bl	800c56c <putc_bfd>
			continue;
 800c6aa:	e1e3      	b.n	800ca74 <f_printf+0x418>
		}
		w = f = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800c6b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800c6c8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c6cc:	2b30      	cmp	r3, #48	@ 0x30
 800c6ce:	d10b      	bne.n	800c6e8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c6d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800c6e6:	e024      	b.n	800c732 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c6e8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c6ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800c6ee:	d120      	bne.n	800c732 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c6f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c6fa:	1c5a      	adds	r2, r3, #1
 800c6fc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c706:	e014      	b.n	800c732 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800c708:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	461a      	mov	r2, r3
 800c716:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c71a:	4413      	add	r3, r2
 800c71c:	3b30      	subs	r3, #48	@ 0x30
 800c71e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800c722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800c732:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c736:	2b2f      	cmp	r3, #47	@ 0x2f
 800c738:	d903      	bls.n	800c742 <f_printf+0xe6>
 800c73a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c73e:	2b39      	cmp	r3, #57	@ 0x39
 800c740:	d9e2      	bls.n	800c708 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c742:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c746:	2b6c      	cmp	r3, #108	@ 0x6c
 800c748:	d003      	beq.n	800c752 <f_printf+0xf6>
 800c74a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c74e:	2b4c      	cmp	r3, #76	@ 0x4c
 800c750:	d10d      	bne.n	800c76e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800c752:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c756:	f043 0304 	orr.w	r3, r3, #4
 800c75a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c75e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800c76e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 8181 	beq.w	800ca7a <f_printf+0x41e>
		d = c;
 800c778:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c77c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800c780:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c784:	2b60      	cmp	r3, #96	@ 0x60
 800c786:	d908      	bls.n	800c79a <f_printf+0x13e>
 800c788:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c78c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c78e:	d804      	bhi.n	800c79a <f_printf+0x13e>
 800c790:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c794:	3b20      	subs	r3, #32
 800c796:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800c79a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c79e:	3b42      	subs	r3, #66	@ 0x42
 800c7a0:	2b16      	cmp	r3, #22
 800c7a2:	f200 8098 	bhi.w	800c8d6 <f_printf+0x27a>
 800c7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ac <f_printf+0x150>)
 800c7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ac:	0800c8b7 	.word	0x0800c8b7
 800c7b0:	0800c89f 	.word	0x0800c89f
 800c7b4:	0800c8c7 	.word	0x0800c8c7
 800c7b8:	0800c8d7 	.word	0x0800c8d7
 800c7bc:	0800c8d7 	.word	0x0800c8d7
 800c7c0:	0800c8d7 	.word	0x0800c8d7
 800c7c4:	0800c8d7 	.word	0x0800c8d7
 800c7c8:	0800c8d7 	.word	0x0800c8d7
 800c7cc:	0800c8d7 	.word	0x0800c8d7
 800c7d0:	0800c8d7 	.word	0x0800c8d7
 800c7d4:	0800c8d7 	.word	0x0800c8d7
 800c7d8:	0800c8d7 	.word	0x0800c8d7
 800c7dc:	0800c8d7 	.word	0x0800c8d7
 800c7e0:	0800c8bf 	.word	0x0800c8bf
 800c7e4:	0800c8d7 	.word	0x0800c8d7
 800c7e8:	0800c8d7 	.word	0x0800c8d7
 800c7ec:	0800c8d7 	.word	0x0800c8d7
 800c7f0:	0800c809 	.word	0x0800c809
 800c7f4:	0800c8d7 	.word	0x0800c8d7
 800c7f8:	0800c8c7 	.word	0x0800c8c7
 800c7fc:	0800c8d7 	.word	0x0800c8d7
 800c800:	0800c8d7 	.word	0x0800c8d7
 800c804:	0800c8cf 	.word	0x0800c8cf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c80a:	1d1a      	adds	r2, r3, #4
 800c80c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800c812:	2300      	movs	r3, #0
 800c814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c818:	e004      	b.n	800c824 <f_printf+0x1c8>
 800c81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c81e:	3301      	adds	r3, #1
 800c820:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c824:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c82a:	4413      	add	r3, r2
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f3      	bne.n	800c81a <f_printf+0x1be>
			if (!(f & 2)) {
 800c832:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d11a      	bne.n	800c874 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c83e:	e005      	b.n	800c84c <f_printf+0x1f0>
 800c840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c844:	2120      	movs	r1, #32
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fe90 	bl	800c56c <putc_bfd>
 800c84c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c856:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d8f0      	bhi.n	800c840 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800c85e:	e009      	b.n	800c874 <f_printf+0x218>
 800c860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c866:	781a      	ldrb	r2, [r3, #0]
 800c868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c86c:	4611      	mov	r1, r2
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff fe7c 	bl	800c56c <putc_bfd>
 800c874:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1f1      	bne.n	800c860 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800c87c:	e005      	b.n	800c88a <f_printf+0x22e>
 800c87e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c882:	2120      	movs	r1, #32
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff fe71 	bl	800c56c <putc_bfd>
 800c88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c894:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c898:	429a      	cmp	r2, r3
 800c89a:	d8f0      	bhi.n	800c87e <f_printf+0x222>
			continue;
 800c89c:	e0ea      	b.n	800ca74 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800c89e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8a0:	1d1a      	adds	r2, r3, #4
 800c8a2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff fe5c 	bl	800c56c <putc_bfd>
 800c8b4:	e0de      	b.n	800ca74 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800c8bc:	e014      	b.n	800c8e8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800c8be:	2308      	movs	r3, #8
 800c8c0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800c8c4:	e010      	b.n	800c8e8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800c8cc:	e00c      	b.n	800c8e8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800c8d4:	e008      	b.n	800c8e8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800c8d6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800c8da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c8de:	4611      	mov	r1, r2
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff fe43 	bl	800c56c <putc_bfd>
 800c8e6:	e0c5      	b.n	800ca74 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800c8e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c8ec:	f003 0304 	and.w	r3, r3, #4
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <f_printf+0x2a2>
 800c8f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8f6:	1d1a      	adds	r2, r3, #4
 800c8f8:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	e00c      	b.n	800c918 <f_printf+0x2bc>
 800c8fe:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c902:	2b44      	cmp	r3, #68	@ 0x44
 800c904:	d104      	bne.n	800c910 <f_printf+0x2b4>
 800c906:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c908:	1d1a      	adds	r2, r3, #4
 800c90a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	e003      	b.n	800c918 <f_printf+0x2bc>
 800c910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800c91c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c920:	2b44      	cmp	r3, #68	@ 0x44
 800c922:	d10e      	bne.n	800c942 <f_printf+0x2e6>
 800c924:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c928:	2b00      	cmp	r3, #0
 800c92a:	da0a      	bge.n	800c942 <f_printf+0x2e6>
			v = 0 - v;
 800c92c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c930:	425b      	negs	r3, r3
 800c932:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800c936:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c93a:	f043 0308 	orr.w	r3, r3, #8
 800c93e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800c948:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800c94c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c950:	fbb3 f1f2 	udiv	r1, r3, r2
 800c954:	fb01 f202 	mul.w	r2, r1, r2
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800c95e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800c962:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c966:	fbb2 f3f3 	udiv	r3, r2, r3
 800c96a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800c96e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c972:	2b09      	cmp	r3, #9
 800c974:	d90b      	bls.n	800c98e <f_printf+0x332>
 800c976:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c97a:	2b78      	cmp	r3, #120	@ 0x78
 800c97c:	d101      	bne.n	800c982 <f_printf+0x326>
 800c97e:	2227      	movs	r2, #39	@ 0x27
 800c980:	e000      	b.n	800c984 <f_printf+0x328>
 800c982:	2207      	movs	r2, #7
 800c984:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c988:	4413      	add	r3, r2
 800c98a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800c98e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c998:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800c99c:	3230      	adds	r2, #48	@ 0x30
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	3398      	adds	r3, #152	@ 0x98
 800c9a2:	443b      	add	r3, r7
 800c9a4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800c9a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <f_printf+0x35c>
 800c9b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c9b4:	2b1f      	cmp	r3, #31
 800c9b6:	d9c7      	bls.n	800c948 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800c9b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c9bc:	f003 0308 	and.w	r3, r3, #8
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d009      	beq.n	800c9d8 <f_printf+0x37c>
 800c9c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c9c8:	1c5a      	adds	r2, r3, #1
 800c9ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c9ce:	3398      	adds	r3, #152	@ 0x98
 800c9d0:	443b      	add	r3, r7
 800c9d2:	222d      	movs	r2, #45	@ 0x2d
 800c9d4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800c9d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c9dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c9e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <f_printf+0x394>
 800c9ec:	2330      	movs	r3, #48	@ 0x30
 800c9ee:	e000      	b.n	800c9f2 <f_printf+0x396>
 800c9f0:	2320      	movs	r3, #32
 800c9f2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800c9f6:	e007      	b.n	800ca08 <f_printf+0x3ac>
 800c9f8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800c9fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff fdb2 	bl	800c56c <putc_bfd>
 800ca08:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d108      	bne.n	800ca26 <f_printf+0x3ca>
 800ca14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ca1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d8e8      	bhi.n	800c9f8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ca26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca30:	f107 020c 	add.w	r2, r7, #12
 800ca34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ca38:	4413      	add	r3, r2
 800ca3a:	781a      	ldrb	r2, [r3, #0]
 800ca3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca40:	4611      	mov	r1, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7ff fd92 	bl	800c56c <putc_bfd>
		} while (i);
 800ca48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1ea      	bne.n	800ca26 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ca50:	e007      	b.n	800ca62 <f_printf+0x406>
 800ca52:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800ca56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff fd85 	bl	800c56c <putc_bfd>
 800ca62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ca6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d8ee      	bhi.n	800ca52 <f_printf+0x3f6>
		c = *fmt++;
 800ca74:	e600      	b.n	800c678 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <f_printf+0x420>
		if (!c) break;
 800ca7a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ca7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7ff fdb0 	bl	800c5e6 <putc_flush>
 800ca86:	4603      	mov	r3, r0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	379c      	adds	r7, #156	@ 0x9c
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca92:	b003      	add	sp, #12
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop

0800ca98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	4613      	mov	r3, r2
 800caa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caa6:	2301      	movs	r3, #1
 800caa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800caae:	4b1f      	ldr	r3, [pc, #124]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cab0:	7a5b      	ldrb	r3, [r3, #9]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d131      	bne.n	800cb1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cab8:	4b1c      	ldr	r3, [pc, #112]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800caba:	7a5b      	ldrb	r3, [r3, #9]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	461a      	mov	r2, r3
 800cac0:	4b1a      	ldr	r3, [pc, #104]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cac2:	2100      	movs	r1, #0
 800cac4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cac6:	4b19      	ldr	r3, [pc, #100]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cac8:	7a5b      	ldrb	r3, [r3, #9]
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	4a17      	ldr	r2, [pc, #92]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cad6:	4b15      	ldr	r3, [pc, #84]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cad8:	7a5b      	ldrb	r3, [r3, #9]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	4b13      	ldr	r3, [pc, #76]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cae0:	4413      	add	r3, r2
 800cae2:	79fa      	ldrb	r2, [r7, #7]
 800cae4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cae6:	4b11      	ldr	r3, [pc, #68]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800cae8:	7a5b      	ldrb	r3, [r3, #9]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	b2d1      	uxtb	r1, r2
 800caf0:	4a0e      	ldr	r2, [pc, #56]	@ (800cb2c <FATFS_LinkDriverEx+0x94>)
 800caf2:	7251      	strb	r1, [r2, #9]
 800caf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800caf6:	7dbb      	ldrb	r3, [r7, #22]
 800caf8:	3330      	adds	r3, #48	@ 0x30
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	3301      	adds	r3, #1
 800cb04:	223a      	movs	r2, #58	@ 0x3a
 800cb06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	3302      	adds	r3, #2
 800cb0c:	222f      	movs	r2, #47	@ 0x2f
 800cb0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3303      	adds	r3, #3
 800cb14:	2200      	movs	r2, #0
 800cb16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	371c      	adds	r7, #28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	2400067c 	.word	0x2400067c

0800cb30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff ffaa 	bl	800ca98 <FATFS_LinkDriverEx>
 800cb44:	4603      	mov	r3, r0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <malloc>:
 800cb50:	4b02      	ldr	r3, [pc, #8]	@ (800cb5c <malloc+0xc>)
 800cb52:	4601      	mov	r1, r0
 800cb54:	6818      	ldr	r0, [r3, #0]
 800cb56:	f000 b82d 	b.w	800cbb4 <_malloc_r>
 800cb5a:	bf00      	nop
 800cb5c:	24000010 	.word	0x24000010

0800cb60 <free>:
 800cb60:	4b02      	ldr	r3, [pc, #8]	@ (800cb6c <free+0xc>)
 800cb62:	4601      	mov	r1, r0
 800cb64:	6818      	ldr	r0, [r3, #0]
 800cb66:	f000 b8f5 	b.w	800cd54 <_free_r>
 800cb6a:	bf00      	nop
 800cb6c:	24000010 	.word	0x24000010

0800cb70 <sbrk_aligned>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	4e0f      	ldr	r6, [pc, #60]	@ (800cbb0 <sbrk_aligned+0x40>)
 800cb74:	460c      	mov	r4, r1
 800cb76:	6831      	ldr	r1, [r6, #0]
 800cb78:	4605      	mov	r5, r0
 800cb7a:	b911      	cbnz	r1, 800cb82 <sbrk_aligned+0x12>
 800cb7c:	f000 f8ae 	bl	800ccdc <_sbrk_r>
 800cb80:	6030      	str	r0, [r6, #0]
 800cb82:	4621      	mov	r1, r4
 800cb84:	4628      	mov	r0, r5
 800cb86:	f000 f8a9 	bl	800ccdc <_sbrk_r>
 800cb8a:	1c43      	adds	r3, r0, #1
 800cb8c:	d103      	bne.n	800cb96 <sbrk_aligned+0x26>
 800cb8e:	f04f 34ff 	mov.w	r4, #4294967295
 800cb92:	4620      	mov	r0, r4
 800cb94:	bd70      	pop	{r4, r5, r6, pc}
 800cb96:	1cc4      	adds	r4, r0, #3
 800cb98:	f024 0403 	bic.w	r4, r4, #3
 800cb9c:	42a0      	cmp	r0, r4
 800cb9e:	d0f8      	beq.n	800cb92 <sbrk_aligned+0x22>
 800cba0:	1a21      	subs	r1, r4, r0
 800cba2:	4628      	mov	r0, r5
 800cba4:	f000 f89a 	bl	800ccdc <_sbrk_r>
 800cba8:	3001      	adds	r0, #1
 800cbaa:	d1f2      	bne.n	800cb92 <sbrk_aligned+0x22>
 800cbac:	e7ef      	b.n	800cb8e <sbrk_aligned+0x1e>
 800cbae:	bf00      	nop
 800cbb0:	24000688 	.word	0x24000688

0800cbb4 <_malloc_r>:
 800cbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb8:	1ccd      	adds	r5, r1, #3
 800cbba:	f025 0503 	bic.w	r5, r5, #3
 800cbbe:	3508      	adds	r5, #8
 800cbc0:	2d0c      	cmp	r5, #12
 800cbc2:	bf38      	it	cc
 800cbc4:	250c      	movcc	r5, #12
 800cbc6:	2d00      	cmp	r5, #0
 800cbc8:	4606      	mov	r6, r0
 800cbca:	db01      	blt.n	800cbd0 <_malloc_r+0x1c>
 800cbcc:	42a9      	cmp	r1, r5
 800cbce:	d904      	bls.n	800cbda <_malloc_r+0x26>
 800cbd0:	230c      	movs	r3, #12
 800cbd2:	6033      	str	r3, [r6, #0]
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ccb0 <_malloc_r+0xfc>
 800cbde:	f000 f869 	bl	800ccb4 <__malloc_lock>
 800cbe2:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe6:	461c      	mov	r4, r3
 800cbe8:	bb44      	cbnz	r4, 800cc3c <_malloc_r+0x88>
 800cbea:	4629      	mov	r1, r5
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ffbf 	bl	800cb70 <sbrk_aligned>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	d158      	bne.n	800ccaa <_malloc_r+0xf6>
 800cbf8:	f8d8 4000 	ldr.w	r4, [r8]
 800cbfc:	4627      	mov	r7, r4
 800cbfe:	2f00      	cmp	r7, #0
 800cc00:	d143      	bne.n	800cc8a <_malloc_r+0xd6>
 800cc02:	2c00      	cmp	r4, #0
 800cc04:	d04b      	beq.n	800cc9e <_malloc_r+0xea>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	4639      	mov	r1, r7
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	eb04 0903 	add.w	r9, r4, r3
 800cc10:	f000 f864 	bl	800ccdc <_sbrk_r>
 800cc14:	4581      	cmp	r9, r0
 800cc16:	d142      	bne.n	800cc9e <_malloc_r+0xea>
 800cc18:	6821      	ldr	r1, [r4, #0]
 800cc1a:	1a6d      	subs	r5, r5, r1
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7ff ffa6 	bl	800cb70 <sbrk_aligned>
 800cc24:	3001      	adds	r0, #1
 800cc26:	d03a      	beq.n	800cc9e <_malloc_r+0xea>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	442b      	add	r3, r5
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	bb62      	cbnz	r2, 800cc90 <_malloc_r+0xdc>
 800cc36:	f8c8 7000 	str.w	r7, [r8]
 800cc3a:	e00f      	b.n	800cc5c <_malloc_r+0xa8>
 800cc3c:	6822      	ldr	r2, [r4, #0]
 800cc3e:	1b52      	subs	r2, r2, r5
 800cc40:	d420      	bmi.n	800cc84 <_malloc_r+0xd0>
 800cc42:	2a0b      	cmp	r2, #11
 800cc44:	d917      	bls.n	800cc76 <_malloc_r+0xc2>
 800cc46:	1961      	adds	r1, r4, r5
 800cc48:	42a3      	cmp	r3, r4
 800cc4a:	6025      	str	r5, [r4, #0]
 800cc4c:	bf18      	it	ne
 800cc4e:	6059      	strne	r1, [r3, #4]
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	bf08      	it	eq
 800cc54:	f8c8 1000 	streq.w	r1, [r8]
 800cc58:	5162      	str	r2, [r4, r5]
 800cc5a:	604b      	str	r3, [r1, #4]
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f000 f82f 	bl	800ccc0 <__malloc_unlock>
 800cc62:	f104 000b 	add.w	r0, r4, #11
 800cc66:	1d23      	adds	r3, r4, #4
 800cc68:	f020 0007 	bic.w	r0, r0, #7
 800cc6c:	1ac2      	subs	r2, r0, r3
 800cc6e:	bf1c      	itt	ne
 800cc70:	1a1b      	subne	r3, r3, r0
 800cc72:	50a3      	strne	r3, [r4, r2]
 800cc74:	e7af      	b.n	800cbd6 <_malloc_r+0x22>
 800cc76:	6862      	ldr	r2, [r4, #4]
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	bf0c      	ite	eq
 800cc7c:	f8c8 2000 	streq.w	r2, [r8]
 800cc80:	605a      	strne	r2, [r3, #4]
 800cc82:	e7eb      	b.n	800cc5c <_malloc_r+0xa8>
 800cc84:	4623      	mov	r3, r4
 800cc86:	6864      	ldr	r4, [r4, #4]
 800cc88:	e7ae      	b.n	800cbe8 <_malloc_r+0x34>
 800cc8a:	463c      	mov	r4, r7
 800cc8c:	687f      	ldr	r7, [r7, #4]
 800cc8e:	e7b6      	b.n	800cbfe <_malloc_r+0x4a>
 800cc90:	461a      	mov	r2, r3
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d1fb      	bne.n	800cc90 <_malloc_r+0xdc>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	6053      	str	r3, [r2, #4]
 800cc9c:	e7de      	b.n	800cc5c <_malloc_r+0xa8>
 800cc9e:	230c      	movs	r3, #12
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	4630      	mov	r0, r6
 800cca4:	f000 f80c 	bl	800ccc0 <__malloc_unlock>
 800cca8:	e794      	b.n	800cbd4 <_malloc_r+0x20>
 800ccaa:	6005      	str	r5, [r0, #0]
 800ccac:	e7d6      	b.n	800cc5c <_malloc_r+0xa8>
 800ccae:	bf00      	nop
 800ccb0:	2400068c 	.word	0x2400068c

0800ccb4 <__malloc_lock>:
 800ccb4:	4801      	ldr	r0, [pc, #4]	@ (800ccbc <__malloc_lock+0x8>)
 800ccb6:	f000 b84b 	b.w	800cd50 <__retarget_lock_acquire_recursive>
 800ccba:	bf00      	nop
 800ccbc:	240007cc 	.word	0x240007cc

0800ccc0 <__malloc_unlock>:
 800ccc0:	4801      	ldr	r0, [pc, #4]	@ (800ccc8 <__malloc_unlock+0x8>)
 800ccc2:	f000 b846 	b.w	800cd52 <__retarget_lock_release_recursive>
 800ccc6:	bf00      	nop
 800ccc8:	240007cc 	.word	0x240007cc

0800cccc <memset>:
 800cccc:	4402      	add	r2, r0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d100      	bne.n	800ccd6 <memset+0xa>
 800ccd4:	4770      	bx	lr
 800ccd6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccda:	e7f9      	b.n	800ccd0 <memset+0x4>

0800ccdc <_sbrk_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d06      	ldr	r5, [pc, #24]	@ (800ccf8 <_sbrk_r+0x1c>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f4 fc44 	bl	8001574 <_sbrk>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_sbrk_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_sbrk_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	240007c8 	.word	0x240007c8

0800ccfc <__errno>:
 800ccfc:	4b01      	ldr	r3, [pc, #4]	@ (800cd04 <__errno+0x8>)
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	24000010 	.word	0x24000010

0800cd08 <__libc_init_array>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4d0d      	ldr	r5, [pc, #52]	@ (800cd40 <__libc_init_array+0x38>)
 800cd0c:	4c0d      	ldr	r4, [pc, #52]	@ (800cd44 <__libc_init_array+0x3c>)
 800cd0e:	1b64      	subs	r4, r4, r5
 800cd10:	10a4      	asrs	r4, r4, #2
 800cd12:	2600      	movs	r6, #0
 800cd14:	42a6      	cmp	r6, r4
 800cd16:	d109      	bne.n	800cd2c <__libc_init_array+0x24>
 800cd18:	4d0b      	ldr	r5, [pc, #44]	@ (800cd48 <__libc_init_array+0x40>)
 800cd1a:	4c0c      	ldr	r4, [pc, #48]	@ (800cd4c <__libc_init_array+0x44>)
 800cd1c:	f000 f864 	bl	800cde8 <_init>
 800cd20:	1b64      	subs	r4, r4, r5
 800cd22:	10a4      	asrs	r4, r4, #2
 800cd24:	2600      	movs	r6, #0
 800cd26:	42a6      	cmp	r6, r4
 800cd28:	d105      	bne.n	800cd36 <__libc_init_array+0x2e>
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd30:	4798      	blx	r3
 800cd32:	3601      	adds	r6, #1
 800cd34:	e7ee      	b.n	800cd14 <__libc_init_array+0xc>
 800cd36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd3a:	4798      	blx	r3
 800cd3c:	3601      	adds	r6, #1
 800cd3e:	e7f2      	b.n	800cd26 <__libc_init_array+0x1e>
 800cd40:	0800d160 	.word	0x0800d160
 800cd44:	0800d160 	.word	0x0800d160
 800cd48:	0800d160 	.word	0x0800d160
 800cd4c:	0800d164 	.word	0x0800d164

0800cd50 <__retarget_lock_acquire_recursive>:
 800cd50:	4770      	bx	lr

0800cd52 <__retarget_lock_release_recursive>:
 800cd52:	4770      	bx	lr

0800cd54 <_free_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4605      	mov	r5, r0
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d041      	beq.n	800cde0 <_free_r+0x8c>
 800cd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd60:	1f0c      	subs	r4, r1, #4
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfb8      	it	lt
 800cd66:	18e4      	addlt	r4, r4, r3
 800cd68:	f7ff ffa4 	bl	800ccb4 <__malloc_lock>
 800cd6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cde4 <_free_r+0x90>)
 800cd6e:	6813      	ldr	r3, [r2, #0]
 800cd70:	b933      	cbnz	r3, 800cd80 <_free_r+0x2c>
 800cd72:	6063      	str	r3, [r4, #4]
 800cd74:	6014      	str	r4, [r2, #0]
 800cd76:	4628      	mov	r0, r5
 800cd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd7c:	f7ff bfa0 	b.w	800ccc0 <__malloc_unlock>
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	d908      	bls.n	800cd96 <_free_r+0x42>
 800cd84:	6820      	ldr	r0, [r4, #0]
 800cd86:	1821      	adds	r1, r4, r0
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	bf01      	itttt	eq
 800cd8c:	6819      	ldreq	r1, [r3, #0]
 800cd8e:	685b      	ldreq	r3, [r3, #4]
 800cd90:	1809      	addeq	r1, r1, r0
 800cd92:	6021      	streq	r1, [r4, #0]
 800cd94:	e7ed      	b.n	800cd72 <_free_r+0x1e>
 800cd96:	461a      	mov	r2, r3
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	b10b      	cbz	r3, 800cda0 <_free_r+0x4c>
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	d9fa      	bls.n	800cd96 <_free_r+0x42>
 800cda0:	6811      	ldr	r1, [r2, #0]
 800cda2:	1850      	adds	r0, r2, r1
 800cda4:	42a0      	cmp	r0, r4
 800cda6:	d10b      	bne.n	800cdc0 <_free_r+0x6c>
 800cda8:	6820      	ldr	r0, [r4, #0]
 800cdaa:	4401      	add	r1, r0
 800cdac:	1850      	adds	r0, r2, r1
 800cdae:	4283      	cmp	r3, r0
 800cdb0:	6011      	str	r1, [r2, #0]
 800cdb2:	d1e0      	bne.n	800cd76 <_free_r+0x22>
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	6053      	str	r3, [r2, #4]
 800cdba:	4408      	add	r0, r1
 800cdbc:	6010      	str	r0, [r2, #0]
 800cdbe:	e7da      	b.n	800cd76 <_free_r+0x22>
 800cdc0:	d902      	bls.n	800cdc8 <_free_r+0x74>
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	e7d6      	b.n	800cd76 <_free_r+0x22>
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	1821      	adds	r1, r4, r0
 800cdcc:	428b      	cmp	r3, r1
 800cdce:	bf04      	itt	eq
 800cdd0:	6819      	ldreq	r1, [r3, #0]
 800cdd2:	685b      	ldreq	r3, [r3, #4]
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	bf04      	itt	eq
 800cdd8:	1809      	addeq	r1, r1, r0
 800cdda:	6021      	streq	r1, [r4, #0]
 800cddc:	6054      	str	r4, [r2, #4]
 800cdde:	e7ca      	b.n	800cd76 <_free_r+0x22>
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	2400068c 	.word	0x2400068c

0800cde8 <_init>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_fini>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr
