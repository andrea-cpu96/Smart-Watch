/*
 * lcd.c
 *
 *  Created on: Jun 1, 2024
 *      Author: Fato
 */

#include "main.h"
#include "lcd.h"

#include "bmp.h"


static void triangle_ex(void);
static void rainbow_ex(void);
static void checkboard_ex(void);
static void swissFlag_ex(void);
static void sd_init(void);
static void sd_error_handler(void);

// sd
FATFS SDFatFs;  				// File system object for SD card logical drive
FIL file;          				// MJPEG File object
char fName[] = "image.jpeg";
uint8_t rtext[_MAX_SS];			// File read buffer

// bmp
BMP *bmp;

// lcd
uint8_t color[3];


void lcd_init(void)
{

	GC9A01_init();
	sd_init();

	//bmp_init(bmp, &file, fName, lcd_draw);

}


void lcd_process(void)
{

	// sd_image_demo();
	// lcd_demo();
	jpeg_demo();

}


void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{

	for(int x = sx; x < ( wd + sx ) ; x++)
	{

		for(int y = sy; y < ( ht + sy ) ; y++)
		{

			if (x == sx && y == sy)
			{

				GC9A01_write(data, 2);

			}
			else
			{

				GC9A01_write_continue(data, 2);

			}

			data += 2;

		}

	}

}

#define JPEG_BUFFER_SIZE ((uint32_t)(1024 *96))
#define JPEG_AUD_BUFFER_SIZE ((uint32_t)(1024 *16))

void jpeg_demo(void)
{

	UINT byteRead;
	uint8_t JPEG_InputBuffer[11527]; // Example size, adjust as needed
	uint8_t JPEG_OutputBuffer[11527]; // Example size, adjust as needed


	hjpeg.Instance = JPEG;
	HAL_JPEG_Init(&hjpeg);

	if(f_open(&file, fileName, FA_READ)!= FR_OK)
		while(1);

	if(f_read(&file, JPEG_InputBuffer, 11527, &byteRead) != FR_OK)
		while(1);


	if(HAL_JPEG_Decode(&hjpeg, JPEG_InputBuffer, 11527, JPEG_OutputBuffer, 11527, HAL_MAX_DELAY) != HAL_OK)
		while(1);

	lcd_draw(0, 0, 240, 240, JPEG_OutputBuffer);

}


void lcd_demo(void)
{

    // Triangle //

	triangle_ex();

    HAL_Delay(1000);

    // Rainbow //

    rainbow_ex();

    HAL_Delay(1000);

    // Checkerboard //

    checkboard_ex();

    HAL_Delay(1000);

    // Swiss flag //

    swissFlag_ex();

    GC9A01_write_command(0x20); // Change colours

    HAL_Delay(1000);

}


void sd_image_demo(void)
{

	showImageBmp(bmp);

	HAL_Delay(2000);

}


///////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void triangle_ex(void)
{

	color[0] = 0xFF;
	color[1] = 0xFF;

	for(int x = 0; x < 240; x++)
	{

		for(int y = 0; y < 240; y++)
		{

			if(x < y)
			{

				color[2] = 0xFF;

			}
			else
			{

				color[2] = 0x00;

			}

			if(x == 0 && y == 0)
			{

				GC9A01_write(color, sizeof(color));

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));

			}

		}

	}

}


static void rainbow_ex(void)
{

	float frequency = 0.026;

	for(int x = 0; x < 240; x++)
	{

		color[0] = sin(frequency*x + 0) * 127 + 128;
		color[1] = sin(frequency*x + 2) * 127 + 128;
		color[2] = sin(frequency*x + 4) * 127 + 128;
		for(int y = 0; y < 240; y++)
		{

			if (x == 0 && y == 0)
			{

				GC9A01_write(color, sizeof(color));

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));

			}

		}

	}

}


static void checkboard_ex(void)
{

	for(int x = 0; x < 240; x++)
	{

		for(int y = 0; y < 240; y++)
		{

			if((x / 10) % 2 ==  (y / 10) % 2)
			{

				color[0] = 0xFF;
				color[1] = 0xFF;
				color[2] = 0xFF;

			}
			else
			{

				color[0] = 0x00;
				color[1] = 0x00;
				color[2] = 0x00;

			}
			if(x == 0 && y == 0)
			{

				GC9A01_write(color, sizeof(color));

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));

			}

		}

	}

}


static void swissFlag_ex(void)
{

	color[0] = 0xFF;

	for(int x = 0; x < 240; x++)
	{

		for(int y = 0; y < 240; y++)
		{

			if((x >= 1*48 && x < 4*48 && y >= 2*48 && y < 3*48) ||
				(x >= 2*48 && x < 3*48 && y >= 1*48 && y < 4*48))
			{

				color[1] = 0xFF;
				color[2] = 0xFF;

			}
			else
			{

				color[1] = 0x00;
				color[2] = 0x00;

			}
			if(x == 0 && y == 0)
			{

				GC9A01_write(color, sizeof(color));

			}
			else
			{

				GC9A01_write_continue(color, sizeof(color));

			}

		}

	}

}


// SD

static void sd_init(void)
{

    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)
    	sd_error_handler();

    //if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		//sd_error_handler();

}


static void sd_error_handler(void)
{

	while(1);

}
