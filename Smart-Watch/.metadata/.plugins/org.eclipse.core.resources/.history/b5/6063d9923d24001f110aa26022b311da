/*
 * sd.c
 *
 *  Created on: Jun 6, 2024
 *      Author: Fato
 */

#include "main.h"
#include "sd.h"

uint32_t file_error = 0;
sd_detection_error = 0;
FATFS SDFatFs;  			// File system object for SD card logical drive
char SDPath[4]; 			// SD card logical drive path
FIL MJPEG_File;          	// MJPEG File object
char fileName[] = "segment_000.avi";


void sd_init(void)
{

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
	{

		// Init the SD Card
		BSP_SD_Init(0);

	    // Register the file system object to the FatFs module
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
	    {

	    	/*##-6- Open the MJPEG avi file with read access #######################*/
	    	if(f_open(&MJPEG_File, fileName, FA_READ) == FR_OK)
	    	{

	    		isfirstFrame = 1;
	    		FrameRate = 0;
	    		/* parse the AVI file Header*/
	    		if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
	    			Error_Handler();

	    		startTime = HAL_GetTick();

	    		do
	    		{

	    			FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);

	    			if(FrameType == AVI_VIDEO_FRAME)
	    			{

	    				AVI_Handel.CurrentImage ++;

	    				/*##-7- Start decoding the current JPEG frame with DMA (Not Blocking ) Method ################*/
	    				JPEG_Decode_DMA(&JPEG_Handle,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );


	    				/*##-8- Wait till end of JPEG decoding ###########################*/
	    				while(Jpeg_HWDecodingEnd == 0);

	    				if(isfirstFrame == 1)
	    				{

	    					isfirstFrame = 0;
	    					/*##-9- Get JPEG Info  #########################################*/
	    					HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);

	    					/*##-10- Initialize the DMA2D ##################################*/
	   						DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);

	   					}

	   					/*##-11- Copy the Decoded frame to the display frame buffer using the DMA2D #*/
	    				DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);

	    				jpegOutDataAdreess = (jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

	    			}


	    		}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);

	    		HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);  /* wait for the Last DMA2D transfer to ends */

	    		if(AVI_Handel.CurrentImage > 0)
	    			{

	    				/*##-12- Calc the average decode frame rate #*/
	    				FrameRate =  (AVI_Handel.CurrentImage * 1000)/(HAL_GetTick() - startTime);
	    				/* Display decoding info */
	    				LCD_BriefDisplay();

	    			}

	    			/*Close the avi file*/
	    			f_close(&MJPEG_File);

	    		}
	    		else /* Can't Open avi file*/
	    		{

	    			file_error = 1;

	    		}

	    	}

	      }

	    }
	    else
	    {
	      sd_detection_error = 1;
	    }

	    if((file_error != 0) || (sd_detection_error != 0))
	    {
	      LCD_FileErrorDisplay();
	    }
	  }




}
